--------------------------------------------------
--Vup杀
--------------------------------------------------

--狂野模式开关
--记得把zzsystem.lua里的也设置为true
wild_mode = false	--狂野模式！！（仅限服务器用，解放偷梁换柱、猴子）

--------------------------------------------------
--描述里的加号都给老子用全角！！！
--转换技描述里带半角加号会转不动。
--------------------------------------------------

module("extensions.VupV0", package.seeall)
extension = sgs.Package("VupV0")


local skills_to_system = sgs.SkillList()	--系统技能

function RIGHT(self, player)
	if player and player:isAlive() and player:hasSkill(self:objectName()) then return true else return false end
end

Table2IntList = function(theTable)
	local result = sgs.IntList()
	for i = 1, #theTable, 1 do
		result:append(theTable[i])
	end
	return result
end

IntList2Table = function(theList)
	local result = {}
	for i = 1, theList:length(), 1 do
		table.insert(result, theList:at(i-1))
	end
	return result
end

CardList2Table = function(theList)
	local result = {}
	for i = 1, theList:length(), 1 do
		table.insert(result, theList:at(i-1):getEffectiveId())
	end
	return result
end

function Set(list)
	local set = {}
	for _, l in ipairs(list) do set[l] = true end
	return set
end

function ChoiceLog(player, choice, to)
	local log = sgs.LogMessage()
	log.from = player
	log.arg = choice
	if to then
		log.type = "#choice2"
		log.to:append(to)
	else
		log.type = "#choice"
	end
	player:getRoom():sendLog(log)
end

sgs.LoadTranslationTable{
	["#choice"] = "%from 选择了 %arg",
	["#choice2"] = "%from 选择了 %arg，目标是 %to",
}

vup_anjiang = sgs.General(extension,"vup_anjiang","god","0",true,true,true)	--技能暗将，不得已而用之

--------------------------------------------------
--技能运行中使用过的tag（临时tag不算），用于被时溯记录并还原
--非必要不要用tag
--------------------------------------------------

local player_tag_used = {"luajiantui_skill", "jishi_M_tag"}	--使用过的player tag
local room_tag_used = {"yuguang_last_triggered"}	--使用过的room tag

--------------------------------------------------
--debug部分
--------------------------------------------------

axe_bug = sgs.CreateTriggerSkill{
	name = "axe_bug",
	global = true,
	events = {sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		local move = data:toMoveOneTime()
		if ((move.to and move.to:objectName() == player:objectName() and move.to_place == sgs.Player_PlaceEquip) or (move.from and move.from:objectName() == player:objectName() and move.from_places:contains(sgs.Player_PlaceEquip))) then
			if player:hasSkill("axe") then
				room:detachSkillFromPlayer(player, "axe", true)
			end
		end
		return false
	end
}
clearAG = sgs.CreateTriggerSkill{
	name = "clearAG",
	global = true,
	events = {sgs.CardEffected},
	on_trigger = function(self, event, player, data, room)
		local effect = data:toCardEffect()
		if effect.card and effect.card:isKindOf("AmazingGrace") and room:getTag("AmazingGrace"):toIntList():length() == 0 then return true end
	end,
	can_trigger = function(self, target)
		return target
	end
}
JUDGE_BUG = sgs.CreateTriggerSkill{
	name = "JUDGE_BUG",
	events = {sgs.FinishJudge},
	on_trigger = function(self, event, player, data)
		local judge = data:toJudge()
		if judge.reason ~= self:objectName() then return false end
		judge.pattern = tostring(judge.card:getEffectiveId())
	end,
	can_trigger = function(self, target)
		return target
	end
}

if not sgs.Sanguosha:getSkill("axe_bug") then skills_to_system:append(axe_bug) end	--系统技能
if not sgs.Sanguosha:getSkill("clearAG") then skills_to_system:append(clearAG) end	--系统技能
if not sgs.Sanguosha:getSkill("JUDGE_BUG") then skills_to_system:append(JUDGE_BUG) end	--系统技能

--------------------------------------------------
--判断是否能被技能指定为目标
--注意与VupV0-ai.lua同步
--------------------------------------------------

function SkillCanTarget(to, player, skill_name)	--判断是否能被技能指定为目标
	if player:objectName() ~= to:objectName() and to:hasSkill("muying") then	--幕影
		return false
	end
	if skill_name == "lingan" and to:getMark("lingan_banned") > 0 then	--灵黯
		return false
	end
	if to:getMark("&suoke") > 0 then	--缩壳
		return false
	end
	return true
end

--------------------------------------------------
--返回至牌堆随机位置
--已弃用，有bug
--改用room:moveCardsInToDrawpile(player, card/card_id/card_ids, skill_name, n, visible)
--其中n代表位置，小于0代表随机，为1代表牌堆顶，之后以此类推
--或用room:shuffleIntoDrawPile(player, card_ids, skill_name, n, visible)
--后者会将多张子卡的顺序洗乱，前者保持
--------------------------------------------------

function return_to_pile(card, player, multicard_shuffle, skill_name)	--返回至牌堆随机位置，多张子卡若multicard_shuffle为假则一起放入随机位置，否则每张子卡都洗乱
	local room = player:getRoom()
	room:moveCardsInToDrawpile(player, card:getSubcards(), skill_name, -1, true)
	--[[if multicard_shuffle then
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SHUFFLE, player:objectName(), nil, "hide_log_skill", skill_name)
		room:moveCardTo(card, player, nil, sgs.Player_PlaceTable, reason, true, false)	--先全部置入处理区（便于触发技能），再依次打乱
		for _,cid in sgs.qlist(card:getSubcards()) do
			local i = math.random(0, room:getDrawPile():length())
			local ids = room:getNCards(i, false)	--第二个参数为是否更新牌堆，第三个参数为是否从牌堆顶摸（默认为真）
			--room:moveCardTo(sgs.Sanguosha:getCard(cid), player, sgs.Player_DrawPile)
			local put_ids = sgs.IntList()
			put_ids:append(cid)
			room:askForGuanxing(player, put_ids, sgs.Room_GuanxingUpOnly)	--通过看不见的方式置于牌堆顶
			room:returnToTopDrawPile(ids)
		end
	else
		local i = math.random(0, room:getDrawPile():length())
		local ids = room:getNCards(i, false)
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SHUFFLE, player:objectName(), nil, "hide_log_skill", skill_name)
		room:moveCardTo(card, player, nil, sgs.Player_DrawPile, reason, true, true)	--最后一个参数为真意味着多张牌会给观星框让玩家自行决定顺序
		room:returnToTopDrawPile(ids)
	end
	if card:getId() ~= -1 then	--检查card是否为实体卡
		local log = sgs.LogMessage()
		log.type = "#return_to_pile_log"
		log.from = player
		log.card_str = card:toString()
		room:sendLog(log)	--发送信息框消息
	else
		local log = sgs.LogMessage()
		log.type = "#return_to_pile_log2"
		log.from = player
		log.arg = card:subcardsLength()
		room:sendLog(log)	--发送信息框消息
	end]]
end

sgs.LoadTranslationTable{
	["#return_to_pile_log"] = "%from 将 %card 返回牌堆",
	["#return_to_pile_log2"] = "%from 将 %arg 张牌返回牌堆",
}

--------------------------------------------------
--获取牌名（雷杀、火杀算“杀”）
--（大写形式classname用于函数调用；小写形式objectname用于显示文字）
--------------------------------------------------

function getCardClassName(card)
	local classname = card:getClassName()
	if card:isKindOf("Slash") then
		classname = "Slash"
	end
	return classname
end

function getCardObjName(card)
	local objname = card:objectName()
	if card:isKindOf("Slash") then
		objname = "slash"
	end
	return objname
end

--------------------------------------------------
--返回一个花色对应的颜色（输出字符串"red"/"black"/"no_color"）
--------------------------------------------------

function SuitToColor(suit)
	if suit == sgs.Card_Club or suit == sgs.Card_Spade or suit == sgs.Card_NoSuitBlack then
		return "black"
	elseif suit == sgs.Card_Diamond or suit == sgs.Card_Heart or suit == sgs.Card_NoSuitRed then
		return "red"
	end
	return "no_color"
end

--------------------------------------------------
--将数字转化为点数字符串
--------------------------------------------------

function getNumberChar(X)
	if X == 1 then
		return "A"
	elseif X == 11 then
		return "J"
	elseif X == 12 then
		return "Q"
	elseif X == 13 then
		return "K"
	else
		return tostring(X)
	end
end

--------------------------------------------------
--冰霜属性伤害处理
--------------------------------------------------

ice_type_damage = sgs.CreateTriggerSkill{
	name = "ice_type_damage",
	frequency = sgs.Skill_Compulsory,
	global = true,
	events = {sgs.DamageCaused},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.nature == sgs.DamageStruct_Ice and damage.from and damage.from:isAlive() and damage.to and damage.to:isAlive() and damage.from:canDiscard(damage.to, "he") then
				player:setTag("ice_type_damage_data_AI", data)	--AI用
				if (player:getMark("qiaohui_born") > 0 and player:hasSkill("mingyun")) or room:askForSkillInvoke(player, "ice_type_damage", sgs.QVariant("choice:" .. damage.to:objectName())) then
					player:removeTag("ice_type_damage_data_AI")	--及时清除
					
					local log = sgs.LogMessage()
					log.type = "#ice_type_damage_log"
					log.from = damage.from
					log.to:append(damage.to)
					room:sendLog(log)	--发送信息框消息
					
					local card_id = room:askForCardChosen(player, damage.to, "he", "ice_type_damage", false, sgs.Card_MethodDiscard)
					room:throwCard(sgs.Sanguosha:getCard(card_id), damage.to, damage.from)
		
					if (damage.from:isAlive() and damage.to:isAlive() and damage.from:canDiscard(damage.to, "he")) then		--第二张
						card_id = room:askForCardChosen(player, damage.to, "he", "ice_type_damage", false, sgs.Card_MethodDiscard)
						room:throwCard(sgs.Sanguosha:getCard(card_id), damage.to, damage.from)
					end
					
					if damage.chain and damage.to:isChained() then
						local log = sgs.LogMessage()
						log.type = "#ice_type_damage_log2"
						log.to:append(damage.to)
						room:sendLog(log)	--发送信息框消息
						
						damage.to:setChained(false)
						room:broadcastProperty(damage.to, "chained")
						room:setEmotion(damage.to, "chain")
						room:getThread():trigger(sgs.ChainStateChanged, room, damage.to)
					end
					return true
				end
				player:removeTag("ice_type_damage_data_AI")	--AI用
			end
		end
		return false
	end
}

if not sgs.Sanguosha:getSkill("ice_type_damage") then skills_to_system:append(ice_type_damage) end	--系统技能

sgs.LoadTranslationTable{
	["ice_type_damage"] = "冰霜伤害",
	["ice_type_damage:choice"] = "你可以防止冰霜伤害，依次破坏 %src 的2张牌",
	["#ice_type_damage_log"] = "%from 防止了将对 %to 造成的冰霜伤害",
	["#ice_type_damage_log2"] = "由于被防止的冰霜伤害为传导伤害，%to 被重置",
}

--------------------------------------------------
--新音效
--------------------------------------------------

audio_effect = sgs.CreateTriggerSkill{
	name = "audio_effect",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.BeforeCardsMove, sgs.EventPhaseChanging, sgs.PreHpRecover, sgs.PreCardUsed},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.BeforeCardsMove and player and player:isAlive() then
			local move = data:toMoveOneTime()
			if move.to and move.to:objectName() == player:objectName() and move.reason.m_reason == sgs.CardMoveReason_S_REASON_DRAW then
				if move.card_ids:length() == 1 then
					room:broadcastSkillInvoke("audio_effect", 1)	--播放配音（抽卡1）
				elseif move.card_ids:length() == 2 then
					room:broadcastSkillInvoke("audio_effect", 2)	--播放配音（抽卡2）
				elseif move.card_ids:length() >= 3 then
					room:broadcastSkillInvoke("audio_effect", 3)	--播放配音（抽卡3+）
				end
			elseif move.from and move.reason.m_reason == sgs.CardMoveReason_S_REASON_DISMANTLE then
				room:broadcastSkillInvoke("audio_effect", 4)	--播放配音（破坏）
			elseif move.from and move.reason.m_reason == sgs.CardMoveReason_S_REASON_RECAST then
				room:broadcastSkillInvoke("audio_effect", 27)	--播放配音（重铸）
			elseif move.from and bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD and move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_DISMANTLE then
				room:broadcastSkillInvoke("audio_effect", 28)	--播放配音（弃置）
			end
			return false
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.from == sgs.Player_NotActive and change.to ~= sgs.Player_NotActive then
				room:getThread():delay(300)
			end
		elseif event == sgs.PreHpRecover then
			local recover = data:toRecover()
			if not (recover.card and recover.card:isKindOf("Peach")) then
				if player and not player:isWounded() then
					room:broadcastSkillInvoke("audio_effect", 21)	--播放配音（溢出）
				else
					room:broadcastSkillInvoke("audio_effect", 5)	--播放配音（回血）
				end
			end
		elseif event == sgs.PreCardUsed then
			if data:toCardUse().card:isKindOf("Monkey") then
				room:broadcastSkillInvoke("audio_effect", 12)	--猴子配音
				--sgs.Sanguosha:playAudioEffect("audio/card/common/monkey.ogg", false)	--猴子配音←这个写法联机无法播放
				return true
			elseif data:toCardUse().card:isKindOf("Yuhangtu") then
				room:broadcastSkillInvoke("audio_effect", 10)	--宇航兔配音
				return true
			elseif data:toCardUse().card:getSkillName() == "shengqiang" then	--圣枪静音
				return true
			elseif data:toCardUse().card:getSkillName() == "tiaoshuibiaoyan" then	--跳水表演静音
				return true
			end
		end
	end,
	priority = 2,
}
if not sgs.Sanguosha:getSkill("audio_effect") then skills_to_system:append(audio_effect) end	--系统技能

sgs.LoadTranslationTable{
	["destroy"] = "破坏",
}

--------------------------------------------------
--角色变化动画
--------------------------------------------------

function doChangeHeroAnimate(room, from_name, to_name)
	room:doAnimate(2, "skill=ChangeHeroAnim:"..from_name.."+"..to_name, "")
	room:getThread():delay(1700)
end

--------------------------------------------------
--DNA召唤动画
--------------------------------------------------

function doDNASummonAnim(room, general_name)
	room:doAnimate(2, "skill=DNASummonAnim:"..general_name, "")
	room:getThread():delay(5000)
end

--------------------------------------------------
--对话框
--------------------------------------------------

--获取字符串真实长度
function getStringLength(inputstr)
    if not inputstr or type(inputstr) ~= "string" or #inputstr <= 0 then
        return nil
    end
    local length = 0
    local i = 1
    while true do
        local curByte = string.byte(inputstr, i)
        local byteCount = 1
        if curByte > 239 then
            byteCount = 4  -- 4字节字符
        elseif curByte > 223 then
            byteCount = 3  -- 汉字
        elseif curByte > 128 then
            byteCount = 2  -- 双字节字符
        else
            byteCount = 1  -- 单字节字符
        end
        i = i + byteCount
        length = length + 1
        if i > #inputstr then
            break
        end
    end
    return length
end

function playConversation(room, pic_name, log, audio_type)	--消息框动画
	--log的翻译信息须为 显示的角色名+显示的信息。如["#qiji_speak"] = "碧居结衣+结衣回来了哟！",
	
	--if type(audio_type) ~= "string" then audio_type = "dun" end
	room:doAnimate(2,"skill=Conversation:" .. pic_name, log)
	local thread = room:getThread()
	thread:delay(295)
	local i = getStringLength(sgs.Sanguosha:translate(log))
	for a = 1, i do
		--room:broadcastSkillInvoke(audio_type, "system")
		thread:delay(80)
	end
	thread:delay(1500)
end

--------------------------------------------------
--新体力上限处理
--(2021/5/7)超量体力值的显示耦合入源码，不再需要@overheal标记了
--(2021/11/4)全部处理已耦合入源码enterDying部分，体力值体力上限均≤0直接跳过濒危询问令角色死亡
--------------------------------------------------
--[[
overheal = sgs.CreateTriggerSkill{	--超量体力值标记
	name = "overheal",
	global = true,
	events = {sgs.HpChanged, sgs.MaxHpChanged},
	on_trigger = function(self, event, player, data, room)
		if room:getTag("FirstRound"):toBool() or player:hasFlag("ChangeChecking") then	--第一轮以及转换技的武将牌刷新不触发技能
			return false
		end
		--if player:getHp() > player:getMaxHp() then
		--	room:setPlayerMark(player, "@overheal", player:getHp() - math.max(player:getMaxHp(), 0))	--体力上限<0时只显示超过0的体力值
		--elseif player:getMark("@overheal") > 0 then
		--	room:setPlayerMark(player, "@overheal", 0)
		--end
		if event == sgs.HpChanged then
			if player:getHp() <= 0 and player:getMaxHp() <= 0 then
				if data:toDamage() and data:toDamage().from then
					room:killPlayer(player, data:toDamage())
				else
					room:killPlayer(player)
				end
			end
		end
	end,
	priority = 2,
}
if not sgs.Sanguosha:getSkill("overheal") then skills_to_system:append(overheal) end	--系统技能
]]
--------------------------------------------------
--废除/获得区域函数
--------------------------------------------------

banbanban = sgs.CreateProhibitSkill{	--禁止向废除区域用牌
	name = "#banbanban",
	is_prohibited = function(self, from, to, card)
		return not card:isKindOf("SkillCard") and ((not to:hasEquipArea(0) and card:isKindOf("Weapon")) or (not to:hasEquipArea(1) and card:isKindOf("Armor")) or (not to:hasEquipArea(2) and card:isKindOf("DefensiveHorse")) or (not to:hasEquipArea(3) and card:isKindOf("OffensiveHorse")) or (not to:hasEquipArea(4) and card:isKindOf("Treasure")) or (not to:hasEquipArea() and card:isKindOf("EquipCard")) or (not to:hasJudgeArea() and card:isKindOf("DelayedTrick")))
	end
}
if not sgs.Sanguosha:getSkill("#banbanban") then skills_to_system:append(banbanban) end	--系统技能

function ThrowEquipArea(skill_name, player, cancel, choice_log, show_skill_active)
	choice_log = choice_log or "throw_equip_area_choice_log"
	local room = player:getRoom()
	local choices = {}
	for i = 0, 4 do
		if player:hasEquipArea(i) then
			table.insert(choices, "jueyan"..i)
		end
	end
	if cancel then
		table.insert(choices, "cancel")
	end
	local choice = room:askForChoice(player, skill_name.."+"..choice_log, table.concat(choices, "+"))
	if choice ~= "cancel" then
		if show_skill_active then
			local logg = sgs.LogMessage()
			logg.from = player
			logg.type = "#InvokeSkill"
			logg.arg = skill_name
			room:sendLog(logg)	--显示技能发动提示信息
			room:notifySkillInvoked(player, skill_name)	--在武将牌上显示技能名
		end
		local x = tonumber(string.sub(choice, string.len(choice), string.len(choice)))
		player:throwEquipArea(x)
		return x
	end
	return -1
end
function ObtainEquipArea(skill_name, player, cancel, choice_log, show_skill_active)
	choice_log = choice_log or "obtain_equip_area_choice_log"
	local room = player:getRoom()
	local choices = {}
	for i = 0, 4 do
		if not player:hasEquipArea(i) then
			table.insert(choices, "jueyan"..i)
		end
	end
	if cancel then
		table.insert(choices, "cancel")
	end
	local choice = room:askForChoice(player, skill_name.."+"..choice_log, table.concat(choices, "+"))
	if choice ~= "cancel" then
		if show_skill_active then
			local logg = sgs.LogMessage()
			logg.from = player
			logg.type = "#InvokeSkill"
			logg.arg = skill_name
			room:sendLog(logg)	--显示技能发动提示信息
			room:notifySkillInvoked(player, skill_name)	--在武将牌上显示技能名
		end
		local x = tonumber(string.sub(choice, string.len(choice), string.len(choice)))
		player:obtainEquipArea(x)
		return x
	end
	return -1
end

sgs.LoadTranslationTable{
	["jueyan0"] = "武器栏",
	["jueyan1"] = "防具栏",
	["jueyan2"] = "防御坐骑栏",
	["jueyan3"] = "进攻坐骑栏",
	["jueyan4"] = "宝物栏",
	["throw_equip_area_choice_log"] = "选择你要废除的区域",
	["obtain_equip_area_choice_log"] = "选择你要恢复的区域",
}

--------------------------------------------------
--判断是否在手牌
--------------------------------------------------

inHand = function(player, card)
	for _,cd in sgs.qlist(player:getHandcards()) do
		if cd:getId() == card:getId() then
			return true
		end
	end
	return false
end

--------------------------------------------------
--判断是否在指定的pile里
--------------------------------------------------

inPile = function(player, card, pile_name)
	for _,id in sgs.qlist(player:getPile(pile_name)) do
		if id == card:getId() then
			return true
		end
	end
	return false
end

--------------------------------------------------
--三目运算符
--------------------------------------------------

Ternary = function(A, B, C)
	if A then
		return B
	else
		return C
	end
end

--------------------------------------------------
--将牌的类别转化为字符串
--------------------------------------------------

getTypeString = function(card)
	if card:isKindOf("BasicCard") then
		return "basic"
	elseif card:isKindOf("TrickCard") then
		return "trick"
	elseif card:isKindOf("EquipCard") then
		return "equip"
	end
end

getTypeKindString = function(card)
	if card:isKindOf("BasicCard") then
		return "BasicCard"
	elseif card:isKindOf("TrickCard") then
		return "TrickCard"
	elseif card:isKindOf("EquipCard") then
		return "EquipCard"
	end
end

--------------------------------------------------
--将牌的颜色转化为字符串
--------------------------------------------------

getColorString = function(card)
	if card:isRed() then
		return "red"
	elseif card:isBlack() then
		return "black"
	end
	return "no_suit"
end

--------------------------------------------------
--展示多张牌
--已源码化 room:showCards(player, ids, not_trigger_event)
--------------------------------------------------
--[[
function ShowManyCards(player, ids, not_trigger_event)	--玩家展示多张卡，第三个参数为真则不会触发CardShown时机
	local room = player:getRoom()
	for _, id in sgs.qlist(ids) do
		player:getRoom():showCard(player, id, nil, true, false)		--新加入第五个参数，为假不会触发CardShown时机
	end
	if not not_trigger_event then
		local data = sgs.QVariant(ids)
		room:getThread():trigger(sgs.CardShown, room, player, data)		--新时机CardShown，展示牌时展示者作为player触发，data内容为展示牌的ids（用toIntList获取）
	end
end]]

--------------------------------------------------
--转换技函数
--------------------------------------------------

function ChangeCheck(player, name)
	if player:getGeneralName() == name or player:getGeneral2Name() == name then
		local x = player:getMaxHp()
		local y = player:getHp()
		local kingdom = player:getKingdom()
		player:getRoom():changeHero(player, name, false, true, player:getGeneral2Name() and player:getGeneral2Name() == name, false)
		player:setFlags("ChangeChecking")
		player:getRoom():setPlayerProperty(player, "maxhp", sgs.QVariant(x))
		player:getRoom():setPlayerProperty(player, "hp", sgs.QVariant(y))
		player:getRoom():setPlayerProperty(player, "kingdom", sgs.QVariant(kingdom))
		player:setFlags("-ChangeChecking")
	end
end
function ChangeNumber(m, n)
	if m > n then
		return m - n
	end
	return m
end
function ChangeSkill(self, room, player, wrong_number, max_number, name)
	if max_number == nil then max_number = 2 end
	if wrong_number == nil then wrong_number = 1 end
	if name then name = player:getGeneral2Name() else name = player:getGeneralName() end
	room:addPlayerMark(player, self:objectName())
	room:setPlayerMark(player, self:objectName(), ChangeNumber(player:getMark(self:objectName()), max_number))
	sgs.Sanguosha:addTranslationEntry(":"..self:objectName(), ""..string.gsub(sgs.Sanguosha:translate(":"..self:objectName()), sgs.Sanguosha:translate(":"..self:objectName()), sgs.Sanguosha:translate(":"..self:objectName()..ChangeNumber(player:getMark(self:objectName()) + wrong_number, max_number))))
	ChangeCheck(player, name)
	room:setPlayerMark(player, "&"..self:objectName().."+"..ChangeNumber(player:getMark(self:objectName()) + max_number - 1 + wrong_number, max_number).."_num", 0)
	room:setPlayerMark(player, "&"..self:objectName().."+"..ChangeNumber(player:getMark(self:objectName()) + max_number - wrong_number, max_number).."_num", 1)
	return player:getMark(self:objectName())
end

--------------------------------------------------
--转换技用询问模板（代替 askForSkillInvoke）
--用途就是点亮转换技按钮，好看~
--------------------------------------------------

skill_change_invoke_card = sgs.CreateSkillCard{
	name = "skill_change_invoke",
	target_fixed = true,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		
	end
}
skill_change_invoke = sgs.CreateZeroCardViewAsSkill{
	name = "skill_change_invoke",
	view_as = function()
		return skill_change_invoke_card:clone()
	end,
	enabled_at_play = function()
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@skill_change_invoke"
	end
}

sgs.LoadTranslationTable{
	["skill_change_invoke"] = "转换技询问",
	["~skill_change_invoke"] = "点击“确定”或“取消”",
}

--------------------------------------------------
--假移动全局技能
--------------------------------------------------

Fake_Move = sgs.CreateTriggerSkill{
	name = "Fake_Move",
	events = {sgs.BeforeCardsMove, sgs.CardsMoveOneTime},
	priority = 10,
	global = true,
	on_trigger = function(self, event, player, data, room)
		for _, p in sgs.qlist(room:getAllPlayers()) do
			if p:hasFlag("Fake_Move") then return true end
		end
		return false
	end,
    can_trigger = function(self, target)
        return target
    end
}
if not sgs.Sanguosha:getSkill("Fake_Move") then skills_to_system:append(Fake_Move) end	--系统技能

--------------------------------------------------
--选择一名角色的N张牌
--需要配合fakemove
--------------------------------------------------

function askForChooseNCards(from, to, N, flag, reason)	--返回一个table，包含所选卡的id
	N = N or 1
	flag = flag or "he"
	local room = from:getRoom()
	
	to:setFlags("Fake_Move")
	
	local card_ids = {}
	local orig_places = {}
	
	for i = 1,N,1 do
		if to:getCards(flag):length() > 0 then
			local id = room:askForCardChosen(from, to, flag, reason, false, sgs.Card_MethodNone)
			table.insert(card_ids, id)
			table.insert(orig_places, room:getCardPlace(id))
			to:addToPile("#fake_move", id, false)
		else
			break
		end
	end
	
	for i = 1,#card_ids,1 do
		room:moveCardTo(sgs.Sanguosha:getCard(card_ids[i]), to, orig_places[i], false)
	end
	
	to:setFlags("-Fake_Move")
	
	return card_ids
end

--------------------------------------------------
--标记清理者
--集中清理标记，用于解决一些简单的延时效果
--能显著减少global技能，增加代码可读性
--注意，比较复杂的延时效果不要用这个，它只处理单纯的清除标记
--2021/4/11 增加了将除外的牌返回原位的功能
--2022/6/4 将部分技能的“失去此技能”或“持有者阵亡”的处理集中移动到这里
--------------------------------------------------

local turn_end_clear_mark = {}	--回合结束清除的标记
local play_end_clear_mark = {}	--出牌阶段结束清除的标记
local draw_end_clear_mark = {}	--摸牌阶段结束清除的标记
local discard_end_clear_mark = {}	--弃牌阶段结束清除的标记

local turn_end_clear_mark_prefix = {}	--回合结束清除指定前缀的标记
local play_end_clear_mark_prefix = {}	--出牌阶段结束指定前缀的标记
local draw_end_clear_mark_prefix = {}	--摸牌阶段结束指定前缀的标记
local discard_end_clear_mark_prefix = {}	--弃牌阶段结束指定前缀的标记

local turn_end_banish_pile = {}	--除外直到回合结束时的pile名

local turn_end_limit_card_prefix = {}	--封印直到回合结束，由三部分组成，加号连接，第一部分为标记名，获取标记名后，将后面的部分作为limitation的两个参数传入
local play_end_limit_card_prefix = {}	--封印直到出牌结束

local leave_hand_clear_flag = {}	--离开手牌就清除的cardflag【更新：不离开手牌区，仅持有者变化不影响标记】
local discard_clear_flag = {}	--进入弃牌堆就清除的cardflag
local change_owner_clear_flag = {}	--拥有者变化就清除的cardflag，配合前两个补充使用

mark_cleaner = sgs.CreateTriggerSkill{	--标记清理者
	name = "mark_cleaner",
	global = true,
	events = {sgs.EventPhaseChanging, sgs.CardsMoveOneTime, sgs.EventLoseSkill, sgs.Death},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.from ~= sgs.Player_NotActive and change.to == sgs.Player_NotActive then	--回合结束时
				for _,p in sgs.qlist(room:getAllPlayers()) do
					for _, mark in sgs.list(p:getMarkNames()) do
						if p:getMark(mark) == 0 then continue end
						
						if table.contains(turn_end_clear_mark, mark) then
							room:setPlayerMark(p, mark, 0)
						else
							for _,prefix in ipairs(turn_end_clear_mark_prefix) do
								if string.len(prefix) <= string.len(mark) and string.sub(mark, 1, string.len(prefix)) == prefix then
									room:setPlayerMark(p, mark, 0)
									break
								end
							end
						end
						
						for _,limit_str_prefix in ipairs(turn_end_limit_card_prefix) do	--清除封印效果
							if string.startsWith(mark, limit_str_prefix.."+") then
								room:setPlayerMark(p, mark, 0)
								local limit_strs = mark:split("+")
								if #limit_strs == 3 then
									room:removePlayerCardLimitation(p, limit_strs[2], limit_strs[3].."$0")
								end
							end
						end
					end
					for _, pile_name in sgs.list(p:getPileNames()) do
						if table.contains(turn_end_banish_pile, pile_name) and p:getPile(pile_name) and p:getPile(pile_name):length() > 0 then
							local ids = p:getTag(pile_name.."_ids"):toString():split("+") or {}
							local places = p:getTag(pile_name.."_places"):toString():split("+") or {}
							
							local log = sgs.LogMessage()
							log.type = "#banish_return_log"
							log.from = p
							log.arg = pile_name
							log.arg2 = #ids
							room:sendLog(log)	--发送信息框消息
							
							--p:setFlags("Fake_Move")
							
							local moves = sgs.CardsMoveList()
							local hands, equips, delaytricks, removecards = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0), sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0), sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0), sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
							for i=1,#ids,1 do
								--room:moveCardTo(sgs.Sanguosha:getCard(ids[i]), p, places[i], false)
								if places[i] == ""..sgs.Player_PlaceHand then	--加""..前缀是为了转化为字符串进行比较
									hands:addSubcard(ids[i])
								elseif places[i] == ""..sgs.Player_PlaceEquip then
									local card = sgs.Sanguosha:getCard(ids[i])
									local location = card:getRealCard():toEquipCard():location()
									if location and p:hasEquipArea(location) and p:getEquip(location) == nil then
										equips:addSubcard(ids[i])
									else
										removecards:addSubcard(ids[i])
									end
								elseif places[i] == ""..sgs.Player_PlaceDelayedTrick then
									local card = sgs.Sanguosha:getCard(ids[i])
									if p:hasJudgeArea() and card:isKindOf("DelayedTrick") and not p:containsTrick(card:objectName()) then
										delaytricks:addSubcard(ids[i])
									else
										removecards:addSubcard(ids[i])
									end
								end
							end
							
							if hands:subcardsLength() > 0 then
								room:moveCardTo(hands, p, sgs.Player_PlaceHand, false)
							end
							if equips:subcardsLength() > 0 then
								room:moveCardTo(equips, p, sgs.Player_PlaceEquip, false)
							end
							if delaytricks:subcardsLength() > 0 then
								room:moveCardTo(delaytricks, p, sgs.Player_PlaceDelayedTrick, false)
							end
							if removecards:subcardsLength() > 0 then
								--room:moveCardTo(removecards, p, sgs.Player_DiscardPile, , false)
								room:throwCard(removecards, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, p:objectName(), pile_name, ""), p)
							end
							
							hands:deleteLater()
							equips:deleteLater()
							delaytricks:deleteLater()
							removecards:deleteLater()
							
							--p:setFlags("-Fake_Move")
							
							p:removeTag(pile_name.."_ids")
							p:removeTag(pile_name.."_places")
						end
					end
				end
			elseif change.from == sgs.Player_Play and change.to ~= sgs.Player_Play then	--出牌阶段结束时
				for _,p in sgs.qlist(room:getAllPlayers()) do
					for _, mark in sgs.list(p:getMarkNames()) do
						if p:getMark(mark) == 0 then continue end
						
						if table.contains(play_end_clear_mark, mark) then
							room:setPlayerMark(p, mark, 0)
						else
							for _,prefix in ipairs(play_end_clear_mark_prefix) do
								if string.len(prefix) <= string.len(mark) and string.sub(mark, 1, string.len(prefix)) == prefix then
									room:setPlayerMark(p, mark, 0)
									break
								end
							end
						end
						
						for _,limit_str_prefix in ipairs(play_end_limit_card_prefix) do	--清除封印效果
							if string.startsWith(mark, limit_str_prefix.."+") then
								room:setPlayerMark(p, mark, 0)
								local limit_strs = mark:split("+")
								if #limit_strs == 3 then
									room:removePlayerCardLimitation(p, limit_strs[2], limit_strs[3].."$0")
								end
							end
						end
					end
				end
			elseif change.from == sgs.Player_Draw and change.to ~= sgs.Player_Draw then	--摸牌阶段结束时
				for _,p in sgs.qlist(room:getAllPlayers()) do
					for _, mark in sgs.list(p:getMarkNames()) do
						if p:getMark(mark) == 0 then continue end
						
						if table.contains(draw_end_clear_mark, mark) then
							room:setPlayerMark(p, mark, 0)
						else
							for _,prefix in ipairs(draw_end_clear_mark_prefix) do
								if string.len(prefix) <= string.len(mark) and string.sub(mark, 1, string.len(prefix)) == prefix then
									room:setPlayerMark(p, mark, 0)
									break
								end
							end
						end
					end
				end
			elseif change.from == sgs.Player_Discard and change.to ~= sgs.Player_Discard then	--弃牌阶段结束时
				for _,p in sgs.qlist(room:getAllPlayers()) do
					for _, mark in sgs.list(p:getMarkNames()) do
						if p:getMark(mark) == 0 then continue end
						
						if table.contains(discard_end_clear_mark, mark) then
							room:setPlayerMark(p, mark, 0)
						else
							for _,prefix in ipairs(discard_end_clear_mark_prefix) do
								if string.len(prefix) <= string.len(mark) and string.sub(mark, 1, string.len(prefix)) == prefix then
									room:setPlayerMark(p, mark, 0)
									break
								end
							end
						end
					end
				end
			end
		elseif event == sgs.CardsMoveOneTime then
			
			for _, p in sgs.qlist(room:getAllPlayers()) do
				if p:hasFlag("Not_clear_card_flag") then return false end	--有Not_clear_card_flag这个flag存在时，不会清除cardflag
			end
			
			local move = data:toMoveOneTime()
			--Player類型轉至ServerPlayer
			local move_from
			local move_to
			for _,p in sgs.qlist(room:getAlivePlayers()) do
				if move.from and p:objectName() == move.from:objectName() then
					move_from = p
				end
				if move.to and p:objectName() == move.to:objectName() then
					move_to = p
				end
			end
			
			for _, card_id in sgs.qlist(move.card_ids) do
				local card = sgs.Sanguosha:getCard(card_id)
				--离手清除
				if move_from and move.from_places:contains(sgs.Player_PlaceHand) and move.to_place ~= sgs.Player_PlaceHand then
					for _,flag_name in ipairs(leave_hand_clear_flag) do
						room:setCardFlag(card, "-"..flag_name)
					end
					if card:isOvert() then	--离开手牌区就清除明置状态
						card:setOvert(false)
					end
					
					--纪实（耦合部分）
					if move_from:getMark("jishi_M_return_id_"..card_id) > 0 and move_from:getMark("jishi_M_using_id"..card_id) == 0 then
						room:setPlayerMark(move_from, "jishi_M_return_id_"..card_id, 0)
					end
				end
				--离判定区清除
				if move_from and move.from_places:contains(sgs.Player_PlaceDelayedTrick) and move.to_place ~= sgs.Player_PlaceDelayedTrick then
					--疾冲（耦合部分）
					for _, p in sgs.qlist(room:getAllPlayers(true)) do	--包括死亡角色
						if move_from:getMark("jichong_from_"..p:objectName().."_id_"..card_id) > 0 then
							room:setPlayerMark(move_from, "jichong_from_"..p:objectName().."_id_"..card_id, 0)
						end
					end
				end
				--进弃牌堆清除（系统清理不干净）
				if move.to_place == sgs.Player_DiscardPile then
					for _,flag_name in ipairs(discard_clear_flag) do
						room:setCardFlag(card, "-"..flag_name)
					end
				end
				--持有者变化清除
				if move_from and move_to and move_from:objectName() ~= move_to:objectName() then
					for _,flag_name in ipairs(change_owner_clear_flag) do
						room:setCardFlag(card, "-"..flag_name)
					end
					if card:isOvert() then	--持有者变化就清除明置状态
						card:setOvert(false)
					end
				end
			end
		elseif event == sgs.EventLoseSkill then		--失去技能后的处理
			local lose_skill_name = data:toString()
			if lose_skill_name == "tianqiao" then			--天巧
				room:setPlayerMark(player, "tianqiao_used", 0)
				if player:getMark("tianqiao_triggering") > 0 then
					local move = sgs.CardsMoveStruct(player:getMark("tianqiao_id"), player, nil, sgs.Player_PlaceSpecial, sgs.Player_PlaceTable,
					sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), "tianqiao", ""))
					move.from_pile_name = "&tianqiao"
					local moves = sgs.CardsMoveList()
					moves:append(move)
					local players = sgs.SPlayerList()
					players:append(player)
					room:notifyMoveCards(true, moves, false, players)
					room:notifyMoveCards(false, moves, false, players)
					room:setPlayerMark(player, "tianqiao_triggering", 0)
				end
			elseif lose_skill_name == "luajiantui" then		--荐推
				if player:getTag("luajiantui_skill") then
					local jiantui_skill = player:getTag("luajiantui_skill"):toString()
					if jiantui_skill and jiantui_skill ~= "" then
						room:detachSkillFromPlayer(player, jiantui_skill, false, false, true, true)	--新增最后一项代表会停止化身动画
					end
				end
			elseif lose_skill_name == "kuangzhan" then		--狂战
				room:setPlayerMark(player, "&kuangzhan!", 0)
			elseif lose_skill_name == "wuji" then		--无忌
				local suits = {}
				if player:getMark("wuji_buding_suit_heart") > 0 then
					table.insert(suits, "heart_char")
					room:setPlayerMark(player, "wuji_buding_suit_heart", 0)
				end
				if player:getMark("wuji_buding_suit_diamond") > 0 then
					table.insert(suits, "diamond_char")
					room:setPlayerMark(player, "wuji_buding_suit_diamond", 0)
				end
				if player:getMark("wuji_buding_suit_spade") > 0 then
					table.insert(suits, "spade_char")
					room:setPlayerMark(player, "wuji_buding_suit_spade", 0)
				end
				if player:getMark("wuji_buding_suit_club") > 0 then
					table.insert(suits, "club_char")
					room:setPlayerMark(player, "wuji_buding_suit_club", 0)
				end
				room:setPlayerMark(player, "&wuji_buding+"..table.concat(suits, "+"), 0)
			elseif lose_skill_name == "liyuan" then		--离鸢
				local X = player:getMark("liyuan_inc") - player:getMark("liyuan_dec")
				if X ~= 0 then
					room:setPlayerMark(player, "&liyuan+"..Ternary(X>0,"liyuan_inc","liyuan_dec").."+"..math.abs(X), 0)
				end
				room:setPlayerMark(player, "liyuan_inc", 0)
				room:setPlayerMark(player, "liyuan_dec", 0)
			elseif lose_skill_name == "shisu" then		--时溯
				room:setPlayerMark(player, "&shisu_ready", 0)
			elseif lose_skill_name == "jiangzhi" then		--降智
				for _,p in sgs.qlist(room:getAllPlayers()) do
					if p:getMark("&jiangzhi!") > 0 then
						room:setPlayerMark(player, "&jiangzhi!", 0)
						room:setPlayerMark(player, "jiangzhi_limit+use+.|.|1|hand", 0)
						room:removePlayerCardLimitation(player, "use", ".|.|1|hand$0")
					end
				end
			elseif lose_skill_name == "qingling" then		--青灵
				room:setPlayerMark(player, "&qingling_record_basic", 0)
				room:setPlayerMark(player, "&qingling_record_trick", 0)
				room:setPlayerMark(player, "&qingling_record_equip", 0)
			elseif lose_skill_name == "jiezhi_zl" then		--竭智
				room:setPlayerMark(player, "&jiezhi_zl->*", 0)
			elseif lose_skill_name == "jiezhi_zls" then		--竭智（变身后）
				room:setPlayerMark(player, "&jiezhi_zls->*", 0)
			end
		elseif event == sgs.Death and data:toDeath().who:objectName() == player:objectName() then	--角色离场后的处理
			if player:hasSkill("tianqiao") then				--天巧
				room:setPlayerMark(player, "tianqiao_used", 0)
				if player:getMark("tianqiao_triggering") > 0 then
					local move = sgs.CardsMoveStruct(player:getMark("tianqiao_id"), player, nil, sgs.Player_PlaceSpecial, sgs.Player_PlaceTable,
					sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), "tianqiao", ""))
					move.from_pile_name = "&tianqiao"
					local moves = sgs.CardsMoveList()
					moves:append(move)
					local players = sgs.SPlayerList()
					players:append(player)
					room:notifyMoveCards(true, moves, false, players)
					room:notifyMoveCards(false, moves, false, players)
					room:setPlayerMark(player, "tianqiao_triggering", 0)
				end
			end
		end
	end,
}
if not sgs.Sanguosha:getSkill("mark_cleaner") then skills_to_system:append(mark_cleaner) end	--系统技能

sgs.LoadTranslationTable{
	["#banish_return_log"] = "%from 因“%arg”被除外的 %arg2 张牌回到区域内",
}

--------------------------------------------------
--统计一名角色弃牌阶段内因弃置而失去的牌数
--通过标记discard_counter获取
--------------------------------------------------

discard_counter = sgs.CreateTriggerSkill{
	name = "discard_counter",
	frequency = sgs.Skill_Compulsory,
	global = true,
	events = {sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime and player and player:getPhase() == sgs.Player_Discard then
			local move = data:toMoveOneTime()
			if move.from and move.from:isAlive() and player:objectName() == move.from:objectName()
					and (move.from_places:contains(sgs.Player_PlaceHand) or move.from_places:contains(sgs.Player_PlaceEquip))
					and (bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD)
					and move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_DISMANTLE and move.card_ids:length() > 0 then
				room:addPlayerMark(player, "discard_counter", move.card_ids:length())
			end
		end
		return false
	end
}
table.insert(discard_end_clear_mark, "discard_counter")		--弃牌结束清除标记

if not sgs.Sanguosha:getSkill("discard_counter") then skills_to_system:append(discard_counter) end	--系统技能

--------------------------------------------------
--BanishNCards: 除外一名角色的N张牌
--BanishCards: 除外一名角色的指定牌↓
--	_Table为给定所选牌id的table，_Subcards为给定含这些牌的dummy
--参数record为真则额外记录这些牌对应的来源，用于“临时除外”
--暂时除外需配合标记清理者使用
--------------------------------------------------

function BanishNCards(from, to, N, flag, reason, record)
	N = N or 1
	flag = flag or "he"
	local room = from:getRoom()
	
	local ids = to:getTag(reason .. "_ids"):toString():split("+") or {}
	local places = to:getTag(reason .. "_places"):toString():split("+") or {}
	local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
	local card_ids = askForChooseNCards(from, to, N, flag, reason)
	for _, id in ipairs(card_ids) do
		table.insert(ids, id)
		table.insert(places, room:getCardPlace(id))
		dummy:addSubcard(id)
	end
	if dummy:subcardsLength() > 0 then
		local log = sgs.LogMessage()
		log.type = "#banish_log"
		log.from = from
		log.arg = reason
		log.arg2 = dummy:subcardsLength()
		log.to:append(to)
		room:sendLog(log)	--发送信息框消息
	
		to:addToPile(reason, dummy, false)
	end
	dummy:deleteLater()
	if record then
		to:setTag(reason .. "_ids", sgs.QVariant(table.concat(ids, "+")))
		to:setTag(reason .. "_places", sgs.QVariant(table.concat(places, "+")))
	end
end

function BanishCards_Table(from, to, card_ids, reason, record)
	local room = from:getRoom()
	
	local ids = to:getTag(reason .. "_ids"):toString():split("+") or {}
	local places = to:getTag(reason .. "_places"):toString():split("+") or {}
	
	local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
	for _, id in ipairs(card_ids) do
		table.insert(ids, id)
		table.insert(places, room:getCardPlace(id))
		dummy:addSubcard(id)
	end
	if dummy:subcardsLength() > 0 then
		local log = sgs.LogMessage()
		log.type = "#banish_log"
		log.from = from
		log.arg = reason
		log.arg2 = dummy:subcardsLength()
		log.to:append(to)
		room:sendLog(log)	--发送信息框消息
	
		to:addToPile(reason, dummy, false)
	end
	dummy:deleteLater()
	if record then
		to:setTag(reason .. "_ids", sgs.QVariant(table.concat(ids, "+")))
		to:setTag(reason .. "_places", sgs.QVariant(table.concat(places, "+")))
	end
end

function BanishCards_Subcards(from, to, dummy, reason, record)
	local room = from:getRoom()
	
	local ids = to:getTag(reason .. "_ids"):toString():split("+") or {}
	local places = to:getTag(reason .. "_places"):toString():split("+") or {}
	
	for _, id in sgs.qlist(dummy:getSubcards()) do
		table.insert(ids, id)
		table.insert(places, room:getCardPlace(id))
	end
	if dummy:subcardsLength() > 0 then
		local log = sgs.LogMessage()
		log.type = "#banish_log"
		log.from = from
		log.arg = reason
		log.arg2 = dummy:subcardsLength()
		log.to:append(to)
		room:sendLog(log)	--发送信息框消息
	
		to:addToPile(reason, dummy, false)
	end
	--dummy:deleteLater()
	if record then
		to:setTag(reason .. "_ids", sgs.QVariant(table.concat(ids, "+")))
		to:setTag(reason .. "_places", sgs.QVariant(table.concat(places, "+")))
	end
end

sgs.LoadTranslationTable{
	["banish"] = "除外",
	["#banish_log"] = "%from 通过“%arg”，除外 %to 的 %arg2 张牌",
}

--------------------------------------------------
--击杀特效
--------------------------------------------------
local jpg_user = {}	--使用jpg的角色
function KillAnimateString(killer_name, victim_name, anim)
	local suffix_killer = "png"
	local suffix_victim = "png"
	if table.contains(jpg_user, killer_name) then
		suffix_killer = "jpg"
	end
	if table.contains(jpg_user, victim_name) then
		suffix_victim = "jpg"
	end
	return "skill="..anim..":"..killer_name.."+"..victim_name..":"..suffix_killer.."+"..suffix_victim
end

function doKillAnimate(room, killer, victim, killer_name, victim_name, card)
	local delay_time = 3000
	killer_name = killer_name or killer:getGeneralName()
	victim_name = victim_name or victim:getGeneralName()
	
	local times = killer:getMark("kill_counter")
	if not times or times <= 0 or times > 10 then
		times = 0	--默认值
	end
	
	if killer_name == "ailulu_hunaoxiaoxiongmao" then
		room:doAnimate(2, KillAnimateString(killer_name, victim_name, "KillAnim"), "ailulu_lastword".."+kill_word"..times)
	elseif killer_name == "lingyuan" then
		room:doAnimate(2, KillAnimateString(killer_name, victim_name, "KillAnim_lingyuan"), "lingyuan_lastword"..math.random(1,9))
	elseif killer_name == "lingyuan_bingtang" then
		room:doAnimate(2, KillAnimateString("bingtang", victim_name, "KillAnim_lingyuan"), "lingyuan_lastword"..math.random(1,9))
	elseif killer_name == "xiaotao_tauxingai" and killer:getMark("bianpin_B") > 0 then
		room:doAnimate(2, "skill=EyeAnim_xiaotao:", "")
		room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
		room:getThread():delay(2000)
		room:broadcastSkillInvoke("audio_effect", 24)	--播放配音
		room:doAnimate(2, KillAnimateString("xiaotao_killanim", victim_name, "KillAnim_xiaotao"), "~"..victim_name)
	elseif (killer_name == "xingxi_tianjiliuxing" or killer_name == "xingxi_if") and card:hasFlag("xingyao_hit") then
		room:doAnimate(2, KillAnimateString("", victim_name, "KillAnim_xingxi"), "~"..victim_name)
	elseif killer_name == "jiuma_hanshixianggong" and killer:getMark("maodun_damage_to_"..victim:objectName()) > 0 then
		room:doAnimate(2, KillAnimateString(killer_name, victim_name, "KillAnim_jiuma"), "~"..victim_name)
		room:broadcastSkillInvoke("maodun")	--播放配音
	else
		room:doAnimate(2, KillAnimateString(killer_name, victim_name, "KillAnim"), "~"..victim_name.."+kill_word"..times)
	end
	room:getThread():delay(delay_time)
end

function getKillAnimate(room, victim, damage, hplost)
	local killer
	local special_killer_name = nil
	local special_victim_name = nil
	local card = nil
	if damage then
		if damage.from then
			killer = damage.from
			if killer:getGeneralName() == "bingtang" and damage.from:hasSkills("niaoniao") then	--冰糖有袅袅
				special_killer_name = "lingyuan_bingtang"
			end
		end
		if damage.card then
			card = damage.card
		end
	elseif hplost and hplost.from ~= nil then	--必须要加~=nil，直接and hplost.from会无法判断
		killer = hplost.from
	end
	if killer then
		room:addPlayerMark(killer, "kill_counter", 1)
		doKillAnimate(room, killer, victim, special_killer_name, special_victim_name, card)
		room:setPlayerMark(victim, "kill_effect_played", 1)
	elseif card and card:isKindOf("Lightning") then	--闪电动画
		local times = room:getTag("Lightning_kill_count"):toInt() or 0	--闪电击杀计数
		times = times + 1
		room:setTag("Lightning_kill_count", sgs.QVariant(times))
		room:doAnimate(2, KillAnimateString("lightning", victim:getGeneralName(), "KillAnim"), "lightning_lastword".."+kill_word"..times or 0)
		room:getThread():delay(3000)
		room:setPlayerMark(victim, "kill_effect_played", 1)
	end
end

kill_effect = sgs.CreateTriggerSkill{
	name = "kill_effect",
	global = true,
	events = {sgs.Death, sgs.Dying, sgs.BeforeGameOver},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Death then
			local damage = data:toDeath().damage
			local hplost = data:toDeath().hplost
			local who = data:toDeath().who
			if who:objectName() ~= player:objectName() or who:getMark("kill_effect_played") > 0 then return end
			getKillAnimate(room, who, damage, hplost)
		elseif event == sgs.Dying then
			local dying = data:toDying()
			room:setTag("LastDyingData", data)	--记录最后的濒危情况
		elseif event == sgs.BeforeGameOver then
			local winner = data:toString()
			if room:getTag("LastDyingData") and winner ~= "" and not room:getTag("rule_win"):toBool() then	--游戏将结束才触发，规则胜利不触发
				local dying = room:getTag("LastDyingData"):toDying()
				if dying then
					local damage = dying.damage
					local hplost = dying.hplost
					local who = dying.who
					--if not who or who:objectName() ~= player:objectName() then return end	--记录的最后濒危者必须与本次死者相同
					if not who then return end
					if who:getMark("kill_effect_played") > 0 then return end
					getKillAnimate(room, who, damage, hplost)
					room:removeTag("LastDyingData")
				end
			end
		end
		return false
	end,
	priority = 4,	--存档是的优先级是3
}
--table.insert(turn_end_clear_mark, "kill_counter")	--回合结束清除标记	--不清除了，每局游戏累计

if not sgs.Sanguosha:getSkill("kill_effect") then skills_to_system:append(kill_effect) end	--系统技能

sgs.LoadTranslationTable{
	["kill_word0"] = "华丽+击败",
	["kill_word1"] = "一鸣+惊人",
	["kill_word2"] = "二连+击败",
	["kill_word3"] = "三连+击败",
	["kill_word4"] = "四连+击败",
	["kill_word5"] = "五连+击败",
	["kill_word6"] = "六连+击败",
	["kill_word7"] = "七连+击败",
	["kill_word8"] = "八连+击败",
	["kill_word9"] = "九连+击败",
	["kill_word10"] = "十连+击败",
	
	["lightning_lastword"] = "为什么！？",
	["ailulu_lastword"] = "你干嘛呀！",
	["lingyuan_lastword1"] = "明明是我先的！",
	["lingyuan_lastword2"] = "要坚强……",
	["lingyuan_lastword3"] = "你是个好人",
	["lingyuan_lastword4"] = "希望の花 繋いだ絆が",
	["lingyuan_lastword5"] = "赢了！赢了！",
	["lingyuan_lastword6"] = "我好酸啊……",
	["lingyuan_lastword7"] = "不要停下来啊！",
	["lingyuan_lastword8"] = "溜了溜了ww",
	["lingyuan_lastword9"] = "NTR2回目",
}

--------------------------------------------------
--刷新手牌
--第二个参数为table格式，若为空则刷新所有手牌
--------------------------------------------------

function RefreshHandcards(player, card_ids)
	card_ids = card_ids or CardList2Table(player:getHandcards())
	local room = player:getRoom()
	player:setFlags("Fake_Move")
	local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
	local ids = sgs.IntList()
	if #card_ids > 0 then
		for _, id in ipairs(card_ids) do
			dummy:addSubcard(id)
			ids:append(id)
		end
	--[[else
		for _,cd in sgs.qlist() do
			dummy:addSubcard(cd)
			ids:append(cd:getEffectiveId())
		end]]
	end
	local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_EXCHANGE_FROM_PILE, nil, "hide_log_skill", "")	--源码修正：reason技能为hide_log_skill的移动不会发送提示信息
	player:addToPile("handcard", ids, false, sgs.SPlayerList(), reason)		--注意这里如果要带reason的话，第二项只能是id的IntList
	local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GOTCARD, nil, "hide_log_skill", "")	--源码修正：reason技能为hide_log_skill的移动不会发送提示信息
	--room:obtainCard(player, dummy, reason, false)
	
	for _, id in ipairs(card_ids) do
		room:obtainCard(player, sgs.Sanguosha:getCard(id), reason, false)
	end
	
	dummy:deleteLater()
	player:setFlags("-Fake_Move")
end

--------------------------------------------------
--记录玩家可解锁的角色
--可解锁的角色记录在玩家的"UnlockGeneralNames"tag内，格式为字符串table
--在zzsystem.lua中处理，与胜率计算同时进行
--------------------------------------------------

function RecordUnlockGenerals(player, general_name)
	local general = sgs.Sanguosha:getGeneral(general_name)
	if general and general:isBonus() then
		player:getRoom():setPlayerMark(player, "unlock_"..general_name.."-Keep", 1)		--结尾为-Keep的标记不会在角色死亡时被清除
	end
end

--------------------------------------------------
--判定解锁条件的公共技能
--注意：使用sgs.Damage时，若该伤害导致游戏结束则无法解锁
--------------------------------------------------

UnlockChecker = sgs.CreateTriggerSkill{
	name = "UnlockChecker",
	events = {sgs.Dying, sgs.DamageCaused, sgs.Damage},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Dying then
			local dying = data:toDying()
			local damage = dying.damage
			if damage and damage.damage > 0 then
				if damage.from and damage.to and damage.to:getGeneralName() == "paryi" and damage.nature == sgs.DamageStruct_Fire then
					RecordUnlockGenerals(damage.from, "katya_uranova")	--为玩家记录可解锁角色
				end
			end
		elseif event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage and damage.damage > 0 then
				if damage.from and damage.to and damage.to:getGeneralName() == "paryi" and not damage.to:isWounded() and damage.nature == sgs.DamageStruct_Fire then
					RecordUnlockGenerals(damage.from, "rose_barrett")	--为玩家记录可解锁角色
				end
			end
		elseif event == sgs.Damage then
			local damage = data:toDamage()
			if damage and damage.damage > 0 then
				if damage.from then
					room:addPlayerMark(damage.from, "caused_damage_in_turn", damage.damage)	--记录一回合内造成过的伤害
				end
			end
		end
	end
}
table.insert(turn_end_clear_mark, "caused_damage_in_turn")	--回合结束清除标记
if not sgs.Sanguosha:getSkill("UnlockChecker") then skills_to_system:append(UnlockChecker) end	--系统技能

--------------------------------------------------
--掷硬币
--------------------------------------------------

function throwCoin(player, reason, num)	--返回正面个数 目前只支持最多掷4枚硬币
	local room = player:getRoom()
	local front_count = 0
	local result_table = {}
	
	local log = sgs.LogMessage()
	log.type = "#pre_throw_coin"
	log.from = player
	log.arg = reason
	log.arg2 = num
	room:sendLog(log)	--发送信息框消息
	
	for i = 1,num,1 do
		if player:getMark("&coin_will_front!") > 0 then
			room:removePlayerMark(player, "&coin_will_front!", 1)
			table.insert(result_table, "A")
			front_count = front_count + 1
			continue
		end
		if player:getMark("&coin_will_back!") > 0 then
			room:removePlayerMark(player, "&coin_will_back!", 1)
			table.insert(result_table, "B")
			continue
		end
		local chance = 50	--正面几率
		if math.random(1,100) <= chance then
			table.insert(result_table, "A")
			front_count = front_count + 1
		else
			table.insert(result_table, "B")
		end
	end
	room:doAnimate(2, "safe=ThrowCoinAnim"..num..":"..table.concat(result_table,"+"), "")	--掷硬币动画，safe=代表不释放内存（防崩）
	
	room:broadcastSkillInvoke("audio_effect", 13)	--硬币亮出音效
	room:getThread():delay(500)
	local gap_time = 100
	if num == 2 then
		gap_time = 200
	elseif num == 4 then
		gap_time = 70
	end
	for i = 1,num,1 do
		room:broadcastSkillInvoke("audio_effect", 14)	--硬币投掷音效
		if i < num then
			room:getThread():delay(gap_time)
		end
	end
	room:getThread():delay(1000)
	room:broadcastSkillInvoke("audio_effect", 15)	--硬币结果音效
	room:getThread():delay(800)
	
	local log = sgs.LogMessage()
	log.from = player
	log.arg = reason
	if num == 1 then
		log.type = "#throw_one_coin"
		if front_count == 1 then
			log.arg2 = "coin_front"
		else
			log.arg2 = "coin_back"
		end
	else
		log.type = "#throw_coins"
		log.arg2 = front_count
	end
	room:sendLog(log)	--发送信息框消息
	
	if front_count == 0 and (player:getArmor() and player:getArmor():objectName() == "xuanwujia") and player:hasArmorEffect("xuanwujia") then
		room:sendCompulsoryTriggerLog(player, "xuanwujia") --显示锁定技发动
		room:addPlayerMark(player, "&coin_will_front!", 1)
	end
	
	return front_count
end

sgs.LoadTranslationTable{
	["coin_front"] = "正面",
	["coin_back"] = "反面",
	["#pre_throw_coin"] = "%from 因“%arg”掷 %arg2 枚硬币",
	["#throw_one_coin"] = "%from 的“%arg”掷硬币结果为 %arg2",
	["#throw_coins"] = "%from 的“%arg”掷硬币结果为： %arg2 枚正面",
	["coin_will_front"] = "正面",
	["coin_will_back"] = "反面",
}

--------------------------------------------------
--询问技能无效化（需要room）
--------------------------------------------------

function SkillNullify(player, skill_name)
	local room = player:getRoom()
	local banished = false
	local baoshai_from = {}
	for _,p in sgs.qlist(room:getAllPlayers()) do
		--偷梁换柱
		if p:isAlive() and not p:isKongcheng() and p:canDiscard(p, "h") then
			local can_use = false
			for _,card in sgs.qlist(p:getCards("h")) do
				if card:isKindOf("Toulianghuanzhu") and not p:isJilei(card) then
					can_use = true
					break
				end
			end
			local data = sgs.QVariant()
			if can_use and room:askForCard(p, "Toulianghuanzhu|.|.|hand", "#toulianghuanzhu:"..player:objectName().."::"..skill_name, data, sgs.Card_MethodDiscard) then	--多打一个冒号把skill_name排到arg，方便ai识别
				if p:isMale() then
					sgs.Sanguosha:playAudioEffect("audio/card/male/toulianghuanzhu.ogg", false)
				else
					sgs.Sanguosha:playAudioEffect("audio/card/female/toulianghuanzhu.ogg", false)
				end
				room:doAnimate(1, p:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				local log = sgs.LogMessage()
				log.type = "#skill_nullify"
				log.from = p
				log.arg = "toulianghuanzhu"
				log.arg2 = skill_name
				log.to:append(player)
				room:sendLog(log)	--发送信息框消息
				room:getThread():delay(500)
				banished = true
				break
			end
		end
		--豹晒
		if p:isAlive() and p:hasSkill("baoshai") and player:objectName() ~= p:objectName() then
			room:sendCompulsoryTriggerLog(p, "baoshai") --显示锁定技发动
			if throwCoin(p, "baoshai", 1) == 0 then
				local log = sgs.LogMessage()
				log.type = "#skill_nullify"
				log.from = p
				log.arg = "baoshai"
				log.arg2 = skill_name
				log.to:append(player)
				room:sendLog(log)	--发送信息框消息
				banished = true
				table.insert(baoshai_from, p)
			end
		end
		--识破
		if p:isAlive() and p:hasSkill("shipo_muhoudalao_cantony_vup") then
			local can_use = false
			for _,card in sgs.qlist(p:getCards("he")) do
				if card:isKindOf("EquipCard") then
					can_use = true
					break
				end
			end
			local data = sgs.QVariant()
			if player:objectName() ~= p:objectName() and can_use and room:askForCard(p, "EquipCard", "@shipo:"..skill_name, data, sgs.Card_MethodDiscard) then
				local logg = sgs.LogMessage()
				logg.from = p
				logg.type = "#InvokeSkill"
				logg.arg = "shipo_muhoudalao_cantony_vup"
				room:sendLog(logg)	--显示技能发动提示信息
				room:notifySkillInvoked(p, "shipo_muhoudalao_cantony_vup")	--在武将牌上显示技能名
				room:doAnimate(1, p:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				
				local judge = sgs.JudgeStruct()
				judge.pattern = ".|heart"
				judge.good = true
				judge.reason = "shipo_muhoudalao_cantony_vup"
				judge.who = p
				room:judge(judge)
				if judge:isGood() then
					local log = sgs.LogMessage()
					log.type = "#skill_nullify"
					log.from = p
					log.arg = "shipo_muhoudalao_cantony_vup"
					log.arg2 = skill_name
					log.to:append(player)
					room:sendLog(log)	--发送信息框消息
					banished = true
					break
				end
			end
		end
		--法则
		if p:isAlive() and p:hasSkill("faze") and p:getMark("@faze") > 0 then
			local can_use = false
			for _,card in sgs.qlist(p:getCards("he")) do
				if card:isBlack() and p:canDiscard(p, card:getEffectiveId()) then
					can_use = true
					break
				end
			end
			local data = sgs.QVariant()
			if player:objectName() ~= p:objectName() and can_use then
				local card = room:askForCard(p, ".|black|.|.", "@faze_dis:"..skill_name, data, sgs.Card_MethodNone)
				if card and card:getId() ~= -1 and p:canDiscard(p, card:getId()) and p:getMark("@faze") > 0 then
					local logg = sgs.LogMessage()
					logg.from = p
					logg.type = "#InvokeSkill"
					logg.arg = "faze"
					room:sendLog(logg)	--显示技能发动提示信息
					room:notifySkillInvoked(p, "faze")	--在武将牌上显示技能名
					
					p:loseMark("@faze", 1)
					room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, p:objectName(), "faze", nil), p)
					room:doAnimate(1, p:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					local log = sgs.LogMessage()
					log.type = "#skill_nullify"
					log.from = p
					log.arg = "faze"
					log.arg2 = skill_name
					log.to:append(player)
					room:sendLog(log)	--发送信息框消息
					
					room:doAnimate(2, "skill=EyeAnim:jinghua_beta.png", "")
					room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
					room:getThread():delay(2500)
					
					banished = true
					break
				end
			end
		end
		--精算
		if p:isAlive() and p:hasSkill("jingsuan") and p:getMark("@jingsuan") > 0 and p:getMark("@byte") == 32 then
			local data = sgs.QVariant()
			if p:askForSkillInvoke("jingsuan", sgs.QVariant("choice:" .. skill_name)) then
				p:loseMark("@jingsuan", 1)
				p:loseMark("@byte", p:getMark("@byte"))
				
				room:doAnimate(1, p:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				
				local log = sgs.LogMessage()
				log.type = "#skill_nullify"
				log.from = p
				log.arg = "jingsuan"
				log.arg2 = skill_name
				log.to:append(player)
				room:sendLog(log)	--发送信息框消息
				RecordUnlockGenerals(p, "limusi")	--为玩家记录可解锁角色
				banished = true
			end
		end
	end
	if banished then
		room:setEmotion(player, "banish")
		room:broadcastSkillInvoke("audio_effect", 6)	--播放配音（无效）
		room:getThread():delay(500)
		
		--后续效果
		if #baoshai_from > 0 then	--豹晒
			for _,p in ipairs(baoshai_from) do		--豹晒交牌
				if not player:isNude() then
					p:setFlags("baoshai_receiver_AI")		--AI用
					local dummy = room:askForExchange(player, "baoshai", 1, 1, true, "#baoshai_give:" .. p:objectName(), false)
					p:setFlags("-baoshai_receiver_AI")		--AI用
					if dummy and dummy:subcardsLength() > 0 then
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), p:objectName(), "baoshai", "")
						room:moveCardTo(dummy, p, sgs.Player_PlaceHand, reason, false)
					end
					dummy:deleteLater()
				end
			end
		end
		
		return true
	end
	return false
end

sgs.LoadTranslationTable{
	["#toulianghuanzhu"] = "你可以弃置偷梁换柱，令 %src “%arg”的发动无效",
	["#skill_nullify"] = "由于 %from “%arg”的效果，%to “%arg2”的发动被无效",
}

--------------------------------------------------
--记录原角色（胜率用）
--------------------------------------------------

function getOriginGeneral(p)
	for _, mark in sgs.list(p:getMarkNames()) do
		if p:getMark(mark) == 0 then continue end
		local prefix = "original_general_"
		if string.len(prefix) <= string.len(mark) and string.sub(mark, 1, string.len(prefix)) == prefix then
			return string.sub(mark, string.len(prefix)+1, -1)
		end
	end
	return nil
end

function RecordOriginGeneral(player, general_name)
	local room = player:getRoom()
	if not getOriginGeneral(player) then
		room:setPlayerMark(player, "original_general_"..general_name, 1)
	end
end

function getOriginGeneral2(p)
	for _, mark in sgs.list(p:getMarkNames()) do
		if p:getMark(mark) == 0 then continue end
		local prefix = "original_general2_"
		if string.len(prefix) <= string.len(mark) and string.sub(mark, 1, string.len(prefix)) == prefix then
			return string.sub(mark, string.len(prefix)+1, -1)
		end
	end
	return nil
end

function RecordOriginGeneral2(player, general_name)
	local room = player:getRoom()
	if not getOriginGeneral2(player) then
		room:setPlayerMark(player, "original_general2_"..general_name, 1)
	end
end

--------------------------------------------------
--游戏开始前的处理
--1.移除不属于牌堆的牌
--2.强制让电脑换掉不会用的角色
--------------------------------------------------

local remove_card_objname = {}	--游戏开始时移除的牌
local robot_change_general = {}	--不允许电脑用的角色

local only_for_cpmode = {}	--CP协战限定牌

GameInitializer = sgs.CreateTriggerSkill{
	name = "game_initializer",
	global = true,
	priority = 10,
	events = {sgs.DrawInitialCards},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawInitialCards then
			if not room:getTag("card_removed"):toBool() then
				--for _, id in sgs.qlist(room:getDrawPile()) do
				for id = 0,500,1 do
					local card = sgs.Sanguosha:getCard(id)
					if card then
						if table.contains(remove_card_objname, card:objectName())
							or (room:getMode() ~= "couple" and table.contains(only_for_cpmode, card:objectName()))	--CP模式特有牌
							or (card:isKindOf("IceSlash") and card:getSuit() == sgs.Card_Club and card:getNumber() >= 1 and card:getNumber() <= 3)	--璃星羽的额外冰杀（♣A~3）
							or (card:isKindOf("ArcheryAttack") and card:getSuit() == sgs.Card_Heart and card:getNumber() == 7)	--箭雨额外万箭齐发（♥7）
							or (card:isKindOf("ArcheryAttack") and card:getSuit() == sgs.Card_Spade and card:getNumber() == 5)	--箭雨额外万箭齐发（♠5）
							or (card:isKindOf("SilverLion") and card:objectName() == "silver_lion" and card:getSuit() == sgs.Card_Club and table.contains({2,3,4}, card:getNumber()))	--小狮子应援队（♣234）
								then
							--room:setTag("RL_ID", sgs.QVariant(id))
							local move = sgs.CardsMoveStruct(id, nil, nil, sgs.Player_DrawPile, sgs.Player_PlaceTable,
								sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_NATURAL_ENTER, nil, "hide_move_skill", ""))	--源码修正：reason技能为hide_move_skill的移动不会被显示
							room:moveCardsAtomic(move, false)
						end
						
						--room:setCardUnknown(id, true)	--设置为未知牌（只显示类别和花色点数）
					end
				end
				room:setTag("card_removed", sgs.QVariant(true))
			end
			if player:getState() == "robot" and not room:getMode() == "04_if" then
				if table.contains(robot_change_general, player:getGeneralName()) or player:getGeneral():isBonus() then
					local log = sgs.LogMessage()
					log.type = "#RobotChangeHero"
					log.arg = player:getGeneralName()
					room:sendLog(log)	--显示技能发动提示信息
					
					local all = sgs.Sanguosha:getLimitedGeneralNames()
					for _,p in sgs.qlist(room:getAlivePlayers()) do	--去掉场上已出现的角色
						local name = p:getGeneralName()
						if sgs.Sanguosha:isGeneralHidden(name) then
							local fname = sgs.Sanguosha:findConvertFrom(name);
							if fname ~= "" then name = fname end
						end
						table.removeOne(all, name)
						
						if p:getGeneral2() == nil then continue end
						
						name = p:getGeneral2Name();
						if sgs.Sanguosha:isGeneralHidden(name) then
							local fname = sgs.Sanguosha:findConvertFrom(name);
							if fname ~= "" then name = fname end
						end
						table.removeOne(all, name)
					end
					for _,general_name in ipairs(all) do	--去掉电脑禁用的角色
						if table.contains(robot_change_general, general_name) then
							table.removeOne(all, general_name)
						end
					end
					
					if #all > 0 then
						local new_general_name = all[math.random(1,#all)]
						if new_general_name and new_general_name ~= "" then
							if player:getTag("luajiantui_skill") then	--清除荐推的额外技能
								local jiantui_skill = player:getTag("luajiantui_skill"):toString()
								if jiantui_skill and jiantui_skill ~= "" then
									room:detachSkillFromPlayer(player, jiantui_skill)
								end
							end
							
							room:changeHero(player, "sujiang", true, true, false, false)
							player:throwAllMarks(false)	--清除所有标记，true代表只清除可见标记（默认为true）
							player:clearPrivatePiles()	--清除所有私家牌
							player:clearFlags()	--清除所有flag
							room:changeHero(player, new_general_name, true, false, false, true)	--第四个参数调为false代表不触发游戏开始时类时机（因为摸初始手牌在游戏开始前）
							local start_hp = sgs.Sanguosha:getGeneral(new_general_name):getStartHp()
							room:setPlayerProperty(player, "hp", sgs.QVariant(start_hp))	--调整至起始血量（修正a/b型角色变身初始化后为满血）
						end
					end
				end
			end
		end
	end
}
if not sgs.Sanguosha:getSkill("game_initializer") then skills_to_system:append(GameInitializer) end	--系统技能

sgs.LoadTranslationTable{	
	--["equip_remover"] = "特殊牌",
	["#RobotChangeHero"] = "电脑不会使用 %arg，将更换角色",
}

--------------------------------------------------
--新势力
--------------------------------------------------

do
    require  "lua.config" 
    local config = config
    local kingdoms = config.kingdoms
    table.insert(kingdoms,"individual")
    table.insert(kingdoms,"psp")
    table.insert(kingdoms,"novus")
    table.insert(kingdoms,"usthree")
    table.insert(kingdoms,"facemoe")
    table.insert(kingdoms,"xuyanshe")
    table.insert(kingdoms,"yueshaoshe")
    table.insert(kingdoms,"niya")
    table.insert(kingdoms,"chaociyuan")
    table.insert(kingdoms,"yuejianchicha")
    table.insert(kingdoms,"TheVirkyrie")
    table.insert(kingdoms,"RainbowPro")
    table.insert(kingdoms,"blondel")
    table.insert(kingdoms,"vector")
    table.insert(kingdoms,"keasofer")
    table.insert(kingdoms,"bisonpro")
    table.insert(kingdoms,"VirtualDove")
    table.insert(kingdoms,"ciyuanjingxiang")
    table.insert(kingdoms,"team_fire")
    table.insert(kingdoms,"team_ice")
    
	--势力颜色请写入config.lua中
	
    --[[jian_colors= {
        psp = "#00ff8a",
        usthree = "#ff2403",
        lucca = "#00ff00",
        ?? = "#bc4904",
        ???? = "#fefefe",
    }
    local colors=config.kingdom_colors
    --config.kingdom_colors = "#A500CC"
    --local colors=config.kingdom_colors
    --table.insert(colors,psp="#00ff8a")]]
end

sgs.LoadTranslationTable{
	["VupV0"] = "Vup杀",--扩展包名
	["psp"] = "P-SP",
	["novus"] = "纸片人Novus",
	["usthree"] = "绿野仙踪",
	["facemoe"] = "facemoe",
	["xuyanshe"] = "虚研社",
	["yueshaoshe"] = "月烧社",
	["niya"] = "泥鸭幼儿园",
	["chaociyuan"] = "超次元学院",
	["yuejianchicha"] = "月見喫茶",
	["TheVirkyrie"] = "TheVirkyrie",
	["RainbowPro"] = "虚虹人形",
	["blondel"] = "blondel",
	["vector"] = "vector",
	["keasofer"] = "龙裁司",
	["individual"] = "独立势",
	["bisonpro"] = "仓鼠国",
	["VirtualDove"] = "鸽舍",
	["ciyuanjingxiang"] = "次元镜像",
	["team_fire"] = "火",
	["team_ice"] = "冰",
}

sgs.Sanguosha:addSkills(skills_to_system)	--为系统添加技能

--------------------------------------------------
--词根概念
--注意：
--包含词根的技能描述中，必须有颜色tag（哪怕是空的，参考贯袭描述）
--以下自带颜色的不用管：出限一、限定锁定觉醒技、红桃和方块花色等等
--------------------------------------------------

local word_ziyang_str = "<b>滋养</b>：<br/>无视体力上限回复体力值<br/>（属于体力回复）"
local word_near_str = "<b>相邻</b>：<br/>一名角色的上家、下家与其相邻。（不计已离场角色）"
local word_normaluse_str = "<b>通常使用</b>：<br/>通常使用的牌会计入次数。<br/>牌的使用次数不足则无法执行。"
local word_always_has_basic = "<b>始终有基本牌</b>：<br/>没有基本牌时优先从牌堆随机获得一张基本牌，若牌堆没有则改为从弃牌堆获得。"
local word_ignore_equip_skill = "<b>无视装备技能</b>：<br/>此牌结算期间，目标的装备技能无效。"
local word_lock_equip = "<b>锁定装备牌</b>：<br/>被锁定的装备牌不能以任何形式离开装备区。（装备自身效果除外）<br/>将其它装备牌置入此牌所在装备栏的效果改为将之置入弃牌堆。"

function WordState(name, word_str_varible)
	return "<acronym title='"..word_str_varible.."'><u>"..name.."</u></acronym>"
end

--------------------------------------------------
--新卡牌
--------------------------------------------------

--------------------------------------------------
--釜底抽薪
--------------------------------------------------

fudichouxin = sgs.CreateTrickCard{
	name = "fudichouxin",
	class_name = "Fudichouxin",
	subtype = "single_target_trick",
	subclass = sgs.LuaTrickCard_TypeSingleTargetTrick,
	target_fixed = false,
	can_recast = false,
	suit = sgs.Card_Diamond,
	number = 0,
	filter = function(self, targets, to_select)
		if #targets == 0 and to_select:getEquips():length() > 0 then
			return true
		end
	end,
	feasible = function(self, targets)
		return #targets == 1
	end,
	on_use = function(self, room, source, targets)
		if #targets > 0 then
			local nullified_list = room:getTag("CardUseNullifiedList"):toStringList()
			local all_nullified = table.contains(nullified_list, "_ALL_TARGETS")
			
			local no_respond_list = room:getTag("CardUseNoRespondList"):toStringList()
			local all_no_respond = table.contains(no_respond_list, "_ALL_TARGETS")
			
			local no_offset_list = room:getTag("CardUseNoOffsetList"):toStringList()
			local all_no_offset = table.contains(no_offset_list, "_ALL_TARGETS")
			
			for _, target in ipairs(targets) do
				local effect = sgs.CardEffectStruct()
				effect.card = self
				effect.from = source
				effect.to = target
				effect.multiple = #targets > 1
				effect.nullified = all_nullified or table.contains(nullified_list, target:objectName())
				effect.no_respond = all_no_respond or table.contains(no_respond_list, target:objectName())
				effect.no_offset = all_no_offset or table.contains(no_offset_list, target:objectName())
				
				room:cardEffect(effect)
			end
			
			--使用后从处理区进入弃牌堆，所有处理与源码相同
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_USE, source:objectName(), nil, self:getSkillName(), "")
			if #targets == 1 then
				reason.m_targetId = targets[1]:objectName()
			end
			reason.m_extraData = sgs.QVariant()
			reason.m_extraData:setValue(self)
			
			local card_ids = sgs.IntList()
			if self:isVirtualCard() then
				card_ids = self:getSubcards()
			else
				card_ids:append(self:getId())
			end
			
			local moves = sgs.CardsMoveList()
			for _,id in sgs.qlist(card_ids) do
				if room:getCardPlace(id) == sgs.Player_PlaceTable then
					local move = sgs.CardsMoveStruct(id, source, nil, sgs.Player_PlaceTable, sgs.Player_DiscardPile, reason)
					moves:append(move)
				end
			end
			if not moves:isEmpty() then
				room:moveCardsAtomic(moves, true)
			end
		end
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		if effect.to:getEquips():length() > 0 then
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			dummy:addSubcards(effect.to:getEquips())
			effect.to:obtainCard(dummy, true)
			dummy:deleteLater()
		end
	end,
}

--------------------------------------------------
--偷梁换柱
--------------------------------------------------

toulianghuanzhu = sgs.CreateTrickCard{
	name = "toulianghuanzhu",
	class_name = "Toulianghuanzhu",
	subtype = "trap_card",
	subclass = sgs.LuaTrickCard_TypeSingleTargetTrick,
	target_fixed = true,
	can_recast = false,
	suit = sgs.Card_Heart,
	number = 1,
	feasible = function(self, targets)
		return #targets == 0
	end,
	available = function(self, player)
		return false
	end,
	on_use = function(self, room, source, targets)
		--room:cardEffect(self, source, source)
	end,
	on_effect = function(self, effect)
		--effect.from:addToPile("trap_card", self)
	end
}

--------------------------------------------------
--雌雄双股剑MK2
--------------------------------------------------

doubleswordmk2 = sgs.CreateWeapon{
	name = "doubleswordmk2",
	class_name = "Doubleswordmk2",
	suit = sgs.Card_Spade,
	number = 1,
	range = 2,
	on_install = function(self,player)
		local room = player:getRoom()
		room:setPlayerMark(player, "doubleswordmk2", 1)
	end,
	on_uninstall = function(self,player)
		local room = player:getRoom()
		room:setPlayerMark(player, "doubleswordmk2", 0)
	end,
}

doubleswordmk2_skill = sgs.CreateTriggerSkill{
	name = "doubleswordmk2_skill",
	global = true,
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecified},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if not use.from or use.from:objectName() ~= player:objectName() then return false end
			if player:getMark("doubleswordmk2") == 0 or player:getMark("Equips_Nullified_to_Yourself") > 0 then return false end
			for _, target in sgs.qlist(use.to) do
				if use.card and use.card:isKindOf("Slash") and target:objectName() ~= player:objectName() then
					local can_trigger = false
					if not player:isSexless() and not target:isSexless() and (target:getGender() ~= player:getGender() or target:isNeuter()) then
						can_trigger = true
					elseif player:hasSkill(characteristic_woshizhinv) and target:isFemale() then
						can_trigger = true
					end
					if can_trigger and room:askForSkillInvoke(player, "doubleswordmk2", data) then
						room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						room:setEmotion(player, "weapon/double_sword")
						room:broadcastSkillInvoke("double_sword")	--播放配音
						
						local logg = sgs.LogMessage()
						logg.from = player
						logg.type = "#InvokeSkill"
						logg.arg = "doubleswordmk2"
						room:sendLog(logg)	--显示技能发动提示信息
						
						room:addPlayerMark(player, "doubleswordmk2_used_time", 1)
						if player:getMark("yumeno_shiori_unlock_A") > 0 and player:getMark("doubleswordmk2_used_time") >= 3 then
							RecordUnlockGenerals(player, "yumeno_shiori")	--为玩家记录可解锁角色
						end
						
						local draw_card = false
						if not target:canDiscard(target, "h") then
							draw_card = true
						else
							local prompt = "double-sword-card:" .. player:objectName()
							local card = room:askForCard(target, ".", prompt, data)
							if not card then
								draw_card = true
							end
						end
						if draw_card then
							player:drawCards(1, "double_sword")
						end
					end
				end
			end
			return false
		end
	end
}

vup_anjiang:addSkill(doubleswordmk2_skill)
table.insert(remove_card_objname, "double_sword")

--------------------------------------------------
--雪年糕棍
--------------------------------------------------

xueniangaogun = sgs.CreateWeapon{
	name = "xueniangaogun",
	class_name = "Xueniangaogun",
	suit = sgs.Card_Spade,
	number = 1,
	range = 2,
	on_install = function(self,player)
		local room = player:getRoom()
	end,
	on_uninstall = function(self,player)
		local room = player:getRoom()
	end,
}

xueniangaogun_skill = sgs.CreateTriggerSkill{
	name = "xueniangaogun_skill",
	global = true,
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DamageCaused},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageCaused then
			local damage = data:toDamage()
			if not damage.from or damage.from:objectName() ~= player:objectName() then return false end
			if damage.nature == sgs.DamageStruct_Light then return false end
			if player:getWeapon() and player:getWeapon():objectName() == "xueniangaogun" and player:getMark("Equips_Nullified_to_Yourself") == 0 then
				if damage.damage > 0 and damage.card and damage.card:isKindOf("Slash") and not damage.chain and not damage.transfer then
					room:sendCompulsoryTriggerLog(damage.from, self:objectName()) --显示锁定技发动
					if throwCoin(player, self:objectName(), 2) == 2 then
						room:getThread():delay(250)
						damage.damage = damage.damage + 1
						
						local logg = sgs.LogMessage()
						logg.from = player
						logg.arg = "xueniangaogun"
						logg.arg2 = damage.damage
						logg.type = "#xueniangaogun_log"
						room:sendLog(logg)	--显示技能发动提示信息
						
						room:setEmotion(player, "xueniangaogun")
						room:getThread():delay(250)
						room:broadcastSkillInvoke("audio_effect", 19)	--播放配音
						
						data:setValue(damage)
					end
				end
			end
		end
	end
}

vup_anjiang:addSkill(xueniangaogun_skill)

--------------------------------------------------
--宇航兔
--------------------------------------------------

yuhangtu = sgs.CreateTreasure{
	name = "yuhangtu",
	class_name = "Yuhangtu",
	suit = sgs.Card_Club,
	number = 2,
	on_install = function(self,player)
		local room = player:getRoom()
		room:setPlayerMark(player, "yuhangtu", 1)
	end,
	on_uninstall = function(self,player)
		local room = player:getRoom()
		room:setPlayerMark(player, "yuhangtu", 0)
	end,
}

yuhangtuThw = sgs.CreateTriggerSkill{
	name = "yuhangtuThw",
	global = true, 
	events = {sgs.DamageInflicted},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.to and damage.to:isAlive() and damage.to:getMark("yuhangtu") > 0 and damage.to:getMark("Equips_Nullified_to_Yourself") == 0 then	--有Equips_Nullified_to_Yourself标记的角色所有装备失效
				if damage.damage > 0 and damage.damage >= damage.to:getHp() then
					if damage.nature == sgs.DamageStruct_Light then return false end
					for _,cd in sgs.qlist(damage.to:getCards("e"))do
						if cd:isKindOf("Yuhangtu") then
							room:sendCompulsoryTriggerLog(damage.to, "yuhangtu") --显示锁定技发动
							room:broadcastSkillInvoke("audio_effect", 11)	--宇航兔配音
							room:setEmotion(damage.to, "yuhangtu")
							room:getThread():delay(2000)
							
							local logg = sgs.LogMessage()
							logg.from = damage.to
							logg.arg = "yuhangtu"
							logg.arg2 = damage.damage
							if damage.from then
								logg.type = "#yuhangtu"
								logg.to:append(damage.from)
							else
								logg.type = "#yuhangtu_no_source"
							end
							room:sendLog(logg)	--显示技能发动提示信息
							room:setEmotion(damage.to, "skill_nullify")
							
							room:throwCard(cd, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, damage.to:objectName(), damage.to:objectName(), "yuhangtu", ""), damage.to)
							return true
						end
					end
				end
			end
		end
	end,
	priority = -2,
}

vup_anjiang:addSkill(yuhangtuThw)

--------------------------------------------------
--两轮车
--------------------------------------------------

lianglunche = sgs.CreateTreasure{
	name = "lianglunche",
	class_name = "Lianglunche",
	suit = sgs.Card_Diamond,
	number = 7,
	on_install = function(self,player)
		player:getRoom():attachSkillToPlayer(player, "lianglunche_skill")
	end,
	on_uninstall = function(self,player)
		player:getRoom():detachSkillFromPlayer(player, "lianglunche_skill", true, true, false)
	end,
}

liangluncheDistance = sgs.CreateDistanceSkill{
	name = "liangluncheDistance",
	correct_func = function(self, from, to)
		if from:getTreasure() and from:getTreasure():isKindOf("Lianglunche") and from:getMark("Equips_Nullified_to_Yourself") == 0 and not from:hasFlag("lianglunche_distancefix_AI") then
			return -1
		end
	end
}

lianglunche_recorder = sgs.CreateTriggerSkill{
	name = "lianglunche_recorder",
	frequency = sgs.Skill_Compulsory,
	global = true,
	events = {sgs.CardUsed, sgs.CardResponded, sgs.PreCardUsed, sgs.PreCardResponded, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() == sgs.Player_Play and (event == sgs.CardUsed or event == sgs.CardResponded) then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if not card or card:isKindOf("SkillCard") or card:isVirtualCard() then return false end
			if card:isKindOf("DelayedTrick") and card:getSkillName() ~= "" then return false end	--排除转化的延时锦囊
			if card:getEffectiveId() ~= -1 and not card:isKindOf("EquipCard") then
				room:setPlayerMark(player, "last_used_id_in_play_phase", card:getEffectiveId()+1)
			elseif card:isKindOf("Lianglunche") then
				room:setPlayerMark(player, "lianglunche_notready", 1)
			end
		elseif event == sgs.EventPhaseChanging then
			if data:toPhaseChange().from == sgs.Player_Play or data:toPhaseChange().to == sgs.Player_Play then
				room:setPlayerMark(player, "last_used_id_in_play_phase", 0)
			elseif data:toPhaseChange().from ~= sgs.Player_NotActive or data:toPhaseChange().to == sgs.Player_NotActive then
				for _,p in sgs.qlist(room:getAllPlayers()) do
					room:setPlayerMark(player, "lianglunche_notready", 0)
				end
			end
		elseif event == sgs.PreCardUsed or event == sgs.PreCardResponded then
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and card:getSkillName() == "lianglunche" then
				room:setEmotion(player, "lianglunche")
				room:broadcastSkillInvoke("audio_effect", 17)	--播放配音
				room:getThread():delay(1000)	--大约是16帧/秒
				room:broadcastSkillInvoke("audio_effect", 18)	--播放配音
				room:getThread():delay(1000)	--大约是16帧/秒
				return true
			end
		end
	end
}

lianglunche_skill = sgs.CreateViewAsSkill{		--两轮车自带-1效果，使用时对距离的修正耦合进源码了（杀、顺、兵）
	name = "lianglunche_skill",
	n = 0,
	view_filter = function(self, selected, to_select)
		--return to_select:isKindOf("Lianglunche") and to_select:isEquipped()
		return false
	end,
	view_as = function(self, cards)
		if #cards == 0 then
			local first = sgs.Self:getTreasure()
			local ncard = sgs.Sanguosha:cloneCard(sgs.Sanguosha:getCard(sgs.Self:getMark("last_used_id_in_play_phase")-1):objectName(), first:getSuit(), first:getNumber())
			ncard:addSubcard(first)
			ncard:setSkillName("lianglunche")
			return ncard
		end
	end,
	enabled_at_play = function(self, player)
		if player:getMark("lianglunche_notready") > 0 or player:getPhase() ~= sgs.Player_Play or player:getMark("Equips_Nullified_to_Yourself") > 0 then return false end
		return player:getMark("last_used_id_in_play_phase") ~= 0
	end,
	enabled_at_response = function(self, player, pattern)
		if player:getMark("lianglunche_notready") > 0 or player:getPhase() ~= sgs.Player_Play or player:getMark("Equips_Nullified_to_Yourself") > 0 then return false end
		if player:getMark("last_used_id_in_play_phase") == 0 then return false end
        if string.startsWith(pattern, ".") or string.startsWith(pattern, "@") then return false end
		local name = sgs.Sanguosha:getCard(player:getMark("last_used_id_in_play_phase")-1):objectName()
        if pattern == "peach" and player:getMark("Global_PreventPeach") > 0 then return false end
        return string.find(pattern, name)
	end
}

vup_anjiang:addSkill(liangluncheDistance)
vup_anjiang:addSkill(lianglunche_recorder)
vup_anjiang:addSkill(lianglunche_skill)

--------------------------------------------------
--鹿
--------------------------------------------------

deer = sgs.CreateOffensiveHorse{
	name = "deer",
	class_name = "Deer",
	suit = sgs.Card_Spade,
	number = 1,
	correct = -2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}

--------------------------------------------------
--藏宝图
--------------------------------------------------

cangbaotu = sgs.CreateTreasure{
	name = "cangbaotu",
	class_name = "Cangbaotu",
	suit = sgs.Card_Diamond,
	number = 7,
	on_install = function(self,player)
		local room = player:getRoom()
		if not player:getPile("cangbaotu_pile") or player:getPile("cangbaotu_pile"):isEmpty() then
			local objname = room:askForChooseCardName(player, "mq+td", false, self:objectName())
			if objname ~= "" then
				local cards = sgs.CardList()
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:objectName() == objname then
						cards:append(card)
					end
				end
				for _,id in sgs.qlist(room:getDiscardPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:objectName() == objname then
						cards:append(card)
					end
				end
				if not cards:isEmpty() then
					local card = cards:at(math.random(0, cards:length() - 1))
					player:addToPile("cangbaotu_pile", card, true)
				end
			end
		end
	end,
	on_uninstall = function(self,player)
		local room = player:getRoom()
		if not player:getPile("cangbaotu_pile"):isEmpty() then
			local id = player:getPile("cangbaotu_pile"):first()
			local card = sgs.Sanguosha:getCard(id)
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), self:objectName() , "")
			room:moveCardTo(card, player, nil, sgs.Player_DiscardPile, reason, true)
		end
	end,
}
cangbaotu_skill = sgs.CreateTriggerSkill{
	name = "cangbaotu_skill",
	global = true, 
	events = {sgs.EventPhaseStart},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start then
			if player and player:isAlive() and player:getTreasure() and player:getTreasure():isKindOf("Cangbaotu") and player:getMark("Equips_Nullified_to_Yourself") == 0 then	--有Equips_Nullified_to_Yourself标记的角色所有装备失效
				if not player:getPile("cangbaotu_pile"):isEmpty() and player:askForSkillInvoke("cangbaotu", data) then
					if player:getTreasure() and player:getTreasure():isKindOf("Cangbaotu") and not player:getPile("cangbaotu_pile"):isEmpty() then
						player:obtainCard(sgs.Sanguosha:getCard(player:getPile("cangbaotu_pile"):first()), true)
						
						room:throwCard(player:getTreasure(), sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, player:objectName(), player:objectName(), "cangbaotu", ""), player)
						return false
					end
				end
			end
		end
	end,
}

vup_anjiang:addSkill(cangbaotu_skill)

--------------------------------------------------
--十字架
--------------------------------------------------

shizijia = sgs.CreateTreasure{
	name = "shizijia",
	class_name = "Shizijia",
	suit = sgs.Card_Spade,
	number = 1,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}
shizijia_skill = sgs.CreateTriggerSkill{
	name = "shizijia_skill",
	global = true, 
	events = {sgs.BeforeCardsMove, sgs.CardsMoveOneTime},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if room:getTag("FirstRound"):toBool() then return false end
		local move = data:toMoveOneTime()
		if move and (move.reason.m_reason == sgs.CardMoveReason_S_REASON_PINDIAN or (bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD and move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_DISMANTLE)) and move.from_places:contains(sgs.Player_PlaceHand) and (move.to_place == sgs.Player_DiscardPile or move.to_place == sgs.Player_PlaceTable) and move.card_ids:length() > 0 then
			if not move.from or move.from:objectName() ~= player:objectName() then return false end
			
			for i = 0, move.card_ids:length() - 1, 1 do
				local id = move.card_ids:at(i)
				local card = sgs.Sanguosha:getCard(id)
				if not card then continue end
				
				if event == sgs.BeforeCardsMove and card:isKindOf("Shizijia") and move.from_places:at(i) == sgs.Player_PlaceHand then
					room:setCardFlag(card, "shizijia_trigger")
				elseif event == sgs.CardsMoveOneTime and card:hasFlag("shizijia_trigger") then
					room:setCardFlag(card, "-shizijia_trigger")
					
					if player and player:isAlive() and player:canUse(card) and (room:getCardPlace(id) == sgs.Player_DiscardPile or room:getCardPlace(id) == sgs.Player_PlaceTable) then
						room:sendCompulsoryTriggerLog(player, "shizijia") --显示锁定技发动
						room:useCard(sgs.CardUseStruct(card, player, player))
					end
				end
			end
		end
	end,
}
shizijia_prohibit = sgs.CreateProhibitSkill{	--禁止使用在手牌中的十字架
	name = "shizijia_prohibit",
	is_prohibited = function(self, from, to, card)
		return card:isKindOf("Shizijia") and inHand(from, card)
	end
}
shizijia_buff = sgs.CreateMaxCardsSkill{
	name = "shizijia_buff" ,
	extra_func = function(self, player)
		if player and player:isAlive() and player:getTreasure() and player:getTreasure():isKindOf("Shizijia") and player:getMark("Equips_Nullified_to_Yourself") == 0 then
			return 1
		end
	end
}

vup_anjiang:addSkill(shizijia_skill)
vup_anjiang:addSkill(shizijia_prohibit)
vup_anjiang:addSkill(shizijia_buff)

--------------------------------------------------
--玄武甲
--------------------------------------------------

xuanwujia = sgs.CreateArmor{
	name = "xuanwujia",
	class_name = "Xuanwujia",
	suit = sgs.Card_Club,
	number = 2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}

xuanwujia_skill = sgs.CreateTriggerSkill{
	name = "xuanwujia_skill",
	global = true, 
	events = {sgs.DamageInflicted},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.to and damage.to:objectName() == player:objectName() and (player:getArmor() and player:getArmor():objectName() == "xuanwujia") and player:hasArmorEffect("xuanwujia") then
				if damage.nature == sgs.DamageStruct_Light then return false end
				if damage.nature ~= sgs.DamageStruct_Thunder then
					room:sendCompulsoryTriggerLog(player, "xuanwujia") --显示锁定技发动
					local result = throwCoin(player, "xuanwujia", 2)
					if result == 2 then
						local logg = sgs.LogMessage()
						logg.from = damage.to
						logg.arg = "xuanwujia"
						logg.arg2 = damage.damage
						if damage.from then
							logg.type = "#xuanwujia"
							logg.to:append(damage.from)
						else
							logg.type = "#xuanwujia_no_source"
						end
						room:sendLog(logg)	--显示技能发动提示信息
						room:setEmotion(player, "skill_nullify")
						return true
					--elseif result == 0 then
					--	room:addPlayerMark(player, "&coin_will_front!", 1)
					end
				end
			end
		end
	end,
}

vup_anjiang:addSkill(xuanwujia_skill)


--------------------------------------------------
--猫玩偶
--------------------------------------------------

neneko = sgs.CreateArmor{
	name = "neneko",
	class_name = "Neneko",
	suit = sgs.Card_Club,
	number = 2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
		local room = player:getRoom()
		room:setPlayerMark(player, "&neneko_record_basic", 0)
		room:setPlayerMark(player, "&neneko_record_trick", 0)
		room:setPlayerMark(player, "&neneko_record_equip", 0)
	end,
}

neneko_skill = sgs.CreateTriggerSkill{
	name = "neneko_skill",
	global = true, 
	events = {sgs.DamageInflicted, sgs.Damaged},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.to and damage.to:objectName() == player:objectName() and (player:getArmor() and player:getArmor():objectName() == "neneko") and player:hasArmorEffect("neneko") then
				if damage.card and not damage.card:isKindOf("SkillCard") then
					if damage.nature == sgs.DamageStruct_Light then return false end
					if player:getMark("&neneko_record_"..getTypeString(damage.card)) > 0 then
						room:sendCompulsoryTriggerLog(player, "neneko") --显示锁定技发动
						local logg = sgs.LogMessage()
						logg.from = damage.to
						logg.arg = "neneko"
						logg.arg2 = damage.damage
						if damage.from then
							logg.type = "#neneko"
							logg.to:append(damage.from)
						else
							logg.type = "#neneko_no_source"
						end
						room:sendLog(logg)	--显示技能发动提示信息
						room:setEmotion(player, "skill_nullify")
						return true
					end
				end
			end
		elseif event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.to and damage.to:objectName() == player:objectName() and (player:getArmor() and player:getArmor():objectName() == "neneko") and player:hasArmorEffect("neneko") then
				if damage.card and not damage.card:isKindOf("SkillCard") then
					room:sendCompulsoryTriggerLog(player, "neneko") --显示锁定技发动
					if player:getMark("&neneko_record_"..getTypeString(damage.card)) == 0 then
						room:setPlayerMark(player, "&neneko_record_basic", 0)
						room:setPlayerMark(player, "&neneko_record_trick", 0)
						room:setPlayerMark(player, "&neneko_record_equip", 0)
					end
					room:setPlayerMark(player, "&neneko_record_"..getTypeString(damage.card), 1)
				end
			end
		end
	end,
}

vup_anjiang:addSkill(neneko_skill)





local findsuit = {sgs.Card_Heart, sgs.Card_Diamond, sgs.Card_Spade, sgs.Card_Club}
local findnumber = {1,2,3,4,5,6,7,8,9,10,11,12,13,14}
addAimedCard = function(cardname, suitpoint, number)
	local temp_card = cardname:clone()
	temp_card:setSuit(findsuit[suitpoint])
	temp_card:setNumber(findnumber[number])
	temp_card:setParent(extension)
	
	if cardname:objectName() == "befriend_attacking" then	--远交近攻设为伤害牌
		temp_card:setDamageCard(true)
	end
end
addOriginalCard = function(cardname, suitpoint, number)
	local temp_card = sgs.Sanguosha:cloneCard(cardname, findsuit[suitpoint], findnumber[number])
	temp_card:setParent(extension)
end


addAimedCard(doubleswordmk2,3,9)
addOriginalCard("SupplyShortage",3,8)
addAimedCard(fudichouxin,1,5)
addAimedCard(fudichouxin,2,5)
addAimedCard(xueniangaogun,4,5)
addAimedCard(yuhangtu,4,7)
addAimedCard(lianglunche,2,7)
addAimedCard(cangbaotu,3,1)
addAimedCard(shizijia,1,11)
addOriginalCard("SPMoonSpear",2,12)
--addAimedCard(deer,4,13)
addAimedCard(xuanwujia,4,8)
addAimedCard(neneko,1,9)

sgs.LoadTranslationTable{
	
	["fudichouxin"] = "釜底抽薪",
	[":fudichouxin"] = "锦囊牌<br /><b>时机</b>：出牌阶段<br /><b>目标</b>：任意一名装备区内有牌的角色<br /><b>效果</b>：目标角色将装备区内的牌收回手牌。",
	
	["trap_card"] = "陷阱牌",
	["toulianghuanzhu"] = "偷梁换柱",
	[":toulianghuanzhu"] = "锦囊牌·陷阱牌<br /><font color = '#DDA0DD'>陷阱牌不能使用，不会被无懈可击抵消</font><br /><b>时机</b>：一名角色的技能发动时<br /><b>方式</b>：从手牌弃置此牌<br /><b>效果</b>：该技能发动无效。",
	
	["doubleswordmk2"] = "雌雄双股剑MK2",
	[":doubleswordmk2"] = "装备牌·武器<br /><b>攻击范围：</b>２<br /><b>武器技能：</b>若你不为无性角色，你使用【杀】指定异性角色或中性角色为目标后，你可以令其选择一项：1.弃置一张手牌 2.你摸一张牌。",
	["doubleswordmk2_skill"] = "雌雄双股剑MK2",
	
	["xueniangaogun"] = "雪年糕棍",
	[":xueniangaogun"] = "装备牌·武器<br /><b>攻击范围：</b>２<br /><b>武器技能：</b>锁定技，你使用【杀】对目标角色造成伤害时，你掷2枚硬币，若结果均为正面，此伤害+1。",
	["xueniangaogun_skill"] = "雪年糕棍",
	["#xueniangaogun_log"] = "“%arg” 效果生效，%from 造成的伤害增加至 %arg2",
	
	["yuhangtu"] = "宇航兔",
	["yuhangtuThw"] = "宇航兔",
	[":yuhangtu"] = "装备牌·宝物<br /><b>宝物技能</b>：<font color=\"blue\"><b>锁定技，</b></font>你受到不小于体力值的伤害时，破坏此牌、防止此伤害。",
	["#yuhangtu"] = "%from 的 %arg 被破坏，防止了来自 %to 的 %arg2 点伤害",
	["#yuhangtu_no_source"] = "%from 的 %arg 被破坏，防止了无来源的 %arg2 点伤害",
	
	["lianglunche"] = "两轮车",
	["liangluncheDistance"] = "两轮车",
	["lianglunche_recorder"] = "两轮车",
	["lianglunche_skill"] = "残机",
	[":lianglunche_skill"] = "<font color='#008B8B'><b>衍生技，</b></font>出牌阶段，你可以将【两轮车】当本阶段内不因转化而使用的上一张非装备牌使用、打出或重铸。",
	[":lianglunche"] = "装备牌·宝物<br /><br /><b>宝物技能1</b>：你→其他角色 距离－1。<br /><b>宝物技能2</b>：出牌阶段，你可以将此牌当本阶段内不因转化而使用的上一张非装备牌使用、打出或重铸，<font color='#B22222'>使用【两轮车】的回合不能发动此技能</font>。",
	
	["cangbaotu"] = "藏宝图",
	["cangbaotu_skill"] = "藏宝图",
	["cangbaotu_pile"] = "宝藏",
	[":cangbaotu"] = "装备牌·宝物<br /><br /><b>宝物技能</b>：装备此牌时，若你没有“宝藏”，你从牌堆、弃牌堆将一张指定牌名的锦囊牌作为“宝藏”除外。准备阶段，你可以获得“宝藏”、破坏此牌。<br /><font color=\"blue\"><b>锁定技，</b></font>此牌离开装备区时，将“宝藏”置入弃牌堆。",
	["^AG_cangbaotu"] = "<b>藏宝图</b><br/>双击以选择一张牌作为“宝藏”除外",
	
	["shizijia"] = "十字架",
	["shizijia_skill"] = "十字架",
	["shizijia_prohibit"] = "十字架",
	["shizijia_buff"] = "十字架",
	[":shizijia"] = "装备牌·宝物<br /><br /><b>宝物技能</b>：<font color=\"blue\"><b>锁定技，</b></font>你的手牌上限＋1。<br/><font color=\"blue\"><b>锁定技，</b></font>手牌区中的此牌不能被持有者使用；此牌因弃置或拼点而离开手牌区后，使用之。",
	
	["xuanwujia"] = "玄武甲",
	["xuanwujia_skill"] = "玄武甲",
	[":xuanwujia"] = "<br />装备牌·防具<br /><b>防具技能1</b>：<font color=\"blue\"><b>锁定技，</b></font>你受到雷电属性以外的伤害时，掷2枚硬币，若结果均为正面，防止之。<br><b>防具技能2</b>：<font color=\"blue\"><b>锁定技，</b></font>若你掷硬币结果均为反面，你掷的下1枚硬币必定为正面。",
	["#xuanwujia"] = "%from 因 %arg 的效果，防止了来自 %to 的 %arg2 点伤害",
	["#xuanwujia_no_source"] = "%from 因 %arg 的效果，防止了无来源的 %arg2 点伤害",

	["neneko"] = "猫玩偶",
	["neneko_skill"] = "猫玩偶",
	[":neneko"] = "<br />装备牌·防具<br /><b>防具技能1</b>：<font color=\"blue\"><b>锁定技，</b></font>你受到伤害后，若有<font color='#9400D3'>伤害来源牌</font>，清除记录，记录<font color='#9400D3'>此牌</font>的类别。<br><b>防具技能2</b>：<font color=\"blue\"><b>锁定技，</b></font>防止记录类别的牌对你造成的伤害。",
	["#neneko"] = "%from 因 %arg 的效果，防止了来自 %to 的 %arg2 点伤害",
	["#neneko_no_source"] = "%from 因 %arg 的效果，防止了无来源的 %arg2 点伤害",
	["neneko_record_basic"] = "猫玩偶基本",
	["neneko_record_trick"] = "猫玩偶锦囊",
	["neneko_record_equip"] = "猫玩偶装备",

}

--------------------------------------------------
--特殊装备
--------------------------------------------------
--------------------------------------------------
--灵剑宿龙
--------------------------------------------------

sssulong = sgs.CreateWeapon{
	name = "sssulong",
	class_name = "Sssulong",
	suit = sgs.Card_Spade,
	number = 1,
	range = 2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}
sssulong_skill = sgs.CreateTriggerSkill{
	name = "sssulong_skill",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Damage},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damage then
			local damage = data:toDamage()
			if (not damage.from or player:objectName() ~= damage.from:objectName()) or not (player:getWeapon() and player:getWeapon():objectName() == "sssulong") or (player:getMark("Equips_Nullified_to_Yourself") > 0) or (not damage.card:isKindOf("Slash")) or not (damage.to and player:canDiscard(damage.to, "he")) or damage.chain or damage.transfer then return false end
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			room:broadcastSkillInvoke(self:objectName())	--播放配音
			room:throwCard(room:askForCardChosen(damage.from, damage.to, "he", self:objectName(), false, sgs.Card_MethodDiscard), damage.to, damage.from)
		end
	end
}
vup_anjiang:addSkill(sssulong_skill)
table.insert(remove_card_objname, "sssulong")	--分发起始手牌前移除
addAimedCard(sssulong,1,2)
sgs.LoadTranslationTable{
	["sssulong"] = "灵剑宿龙",
	["sssulong_skill"] = "灵剑宿龙",
	[":sssulong"] = "<font color='#008080'>特殊牌</font><br />装备牌·武器<br /><b>攻击范围：</b>２<br /><b>武器技能：</b>锁定技，你使用【杀】对目标角色造成伤害后，你破坏其一张牌。",
}

--------------------------------------------------
--灵剑翔鹄
--------------------------------------------------

ssxianghu = sgs.CreateWeapon{
	name = "ssxianghu",
	class_name = "Ssxianghu",
	suit = sgs.Card_Spade,
	number = 1,
	range = 2,
	on_install = function(self,player)
		if player:getMark("Equips_Nullified_to_Yourself") == 0 and not player:hasFlag("Fake_Move") then	--装备有效且不为假移动
			player:drawCards(1, self:objectName())
		end
	end,
	on_uninstall = function(self,player)
	end,
}
table.insert(remove_card_objname, "ssxianghu")	--分发起始手牌前移除
addAimedCard(ssxianghu,2,2)
sgs.LoadTranslationTable{
	["ssxianghu"] = "灵剑翔鹄",
	[":ssxianghu"] = "<font color='#008080'>特殊牌</font><br />装备牌·武器<br /><b>攻击范围：</b>２<br /><b>武器技能：</b>锁定技，装备此牌后，你摸一张牌。",
}

--------------------------------------------------
--灵剑风蝉
--------------------------------------------------

ssfengchan = sgs.CreateWeapon{
	name = "ssfengchan",
	class_name = "Ssfengchan",
	suit = sgs.Card_Spade,
	number = 1,
	range = 2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}
ssfengchan_skill = sgs.CreateDistanceSkill{
	name = "ssfengchan_skill",
	correct_func = function(self, from, to)
		if from:objectName() ~= to:objectName() and to:getWeapon() and to:getWeapon():isKindOf("Ssfengchan") and to:getMark("Equips_Nullified_to_Yourself") == 0 then
			return 1
		end
	end
}
vup_anjiang:addSkill(ssfengchan_skill)
table.insert(remove_card_objname, "ssfengchan")	--分发起始手牌前移除
addAimedCard(ssfengchan,3,2)
sgs.LoadTranslationTable{
	["ssfengchan"] = "灵剑风蝉",
	["ssfengchan_skill"] = "灵剑风蝉",
	[":ssfengchan"] = "<font color='#008080'>特殊牌</font><br />装备牌·武器<br /><b>攻击范围：</b>２<br /><b>武器技能：</b>锁定技，其他角色→你 距离＋1。",
}

--------------------------------------------------
--灵剑雪鹤
--------------------------------------------------

ssxuehe = sgs.CreateWeapon{
	name = "ssxuehe",
	class_name = "Ssxuehe",
	suit = sgs.Card_Spade,
	number = 1,
	range = 2,
	on_install = function(self,player)
		if player:getMark("Equips_Nullified_to_Yourself") == 0 and not player:hasFlag("Fake_Move") then	--装备有效且不为假移动
			local room = player:getRoom()
			
			local recover = sgs.RecoverStruct()
			recover.who = player
			recover.recover = 1
			room:recover(player, recover)
		end
	end,
	on_uninstall = function(self,player)
	end,
}
ssxuehe_skill = sgs.CreateTriggerSkill{
	name = "ssxuehe_skill",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DrawNCards},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards then
			if not player:isWounded() and player:getWeapon() and player:getWeapon():objectName() == "ssxuehe" and player:getMark("Equips_Nullified_to_Yourself") == 0 then
				local n = data:toInt()
				data:setValue(n-1)
			end
		end
	end 
}
vup_anjiang:addSkill(ssxuehe_skill)
table.insert(remove_card_objname, "ssxuehe")	--分发起始手牌前移除
addAimedCard(ssxuehe,4,2)
sgs.LoadTranslationTable{
	["ssxuehe"] = "灵剑雪鹤",
	["ssxuehe_skill"] = "灵剑雪鹤",
	[":ssxuehe"] = "<font color='#008080'>特殊牌</font><br />装备牌·武器<br /><b>攻击范围：</b>２<br /><b>武器技能：</b>锁定技，满体力时，你的通常摸牌数－1；装备此牌后，你回复1点体力。",
}

--------------------------------------------------
--灵剑扶桑
--------------------------------------------------

ssfusang = sgs.CreateWeapon{
	name = "ssfusang",
	class_name = "Ssfusang",
	suit = sgs.Card_Spade,
	number = 1,
	range = 2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}
ssfusang_skill = sgs.CreateTriggerSkill{
	name = "ssfusang_skill",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.TargetSpecified},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if (not use.from or player:objectName() ~= use.from:objectName()) or not (player:getWeapon() and player:getWeapon():objectName() == "ssfusang") or (player:getMark("Equips_Nullified_to_Yourself") > 0) or (not use.card:isKindOf("Slash")) or (use.to:length() == 0) then return false end
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			room:broadcastSkillInvoke(self:objectName())	--播放配音
			
			for _, target in sgs.qlist(use.to) do
				if not target:isKongcheng() then
					local not_overt_cards = {}
					for _,cd in sgs.qlist(target:getHandcards()) do
						if not cd:isOvert() then
							room:setCardFlag(cd, "ssfusang_flag")
							table.insert(not_overt_cards, cd)
						end
					end
					if #not_overt_cards > 0 then
						local card = room:askForCard(target, ".|.|.|hand|ssfusang_flag!", "@ssfusang_show", data, sgs.Card_MethodNone)	--加!用于强制选择
						if card then
							room:setOvertCard(target, card:getId(), true)
							local not_overt_cards2 = {}
							for _,cd in sgs.qlist(target:getHandcards()) do
								if not cd:isOvert() then
									room:setCardFlag(cd, "ssfusang_flag2")
									table.insert(not_overt_cards2, cd)
								end
							end
							if #not_overt_cards2 > 0 then
								room:askForCard(target, ".|.|.|hand|ssfusang_flag2!", "@ssfusang_dis", data, sgs.Card_MethodDiscard)	--加!用于强制选择
							end
							for _,cd in ipairs(not_overt_cards2) do
								room:setCardFlag(cd, "-ssfusang_flag2")
							end
						end
					end
					for _,cd in ipairs(not_overt_cards) do
						room:setCardFlag(cd, "-ssfusang_flag")
					end
				end
			end
		end
	end
}
vup_anjiang:addSkill(ssfusang_skill)
table.insert(remove_card_objname, "ssfusang")	--分发起始手牌前移除
addAimedCard(ssfusang,2,12)
sgs.LoadTranslationTable{
	["ssfusang"] = "灵剑扶桑",
	["ssfusang_skill"] = "灵剑扶桑",
	[":ssfusang"] = "<font color='#008080'>特殊牌</font><br />装备牌·武器<br /><b>攻击范围：</b>２<br /><b>武器技能：</b>锁定技，你使用【杀】指定目标后，所有目标角色须依次：明置一张手牌，然后弃置一张非明置手牌。",
	["@ssfusang_show"] = "请明置一张手牌，然后你须弃置一张非明置手牌<br/>操作提示：选择要明置的牌→确定",
	["@ssfusang_dis"] = "请弃置一张非明置手牌",
}

--------------------------------------------------
--灵剑月桂
--------------------------------------------------

ssyuegui = sgs.CreateWeapon{
	name = "ssyuegui",
	class_name = "Ssyuegui",
	suit = sgs.Card_Spade,
	number = 1,
	range = 2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}
ssyuegui_skill = sgs.CreateTriggerSkill{
	name = "ssyuegui_skill",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardUsed, sgs.CardResponded, sgs.EventPhaseStart},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardUsed or event == sgs.CardResponded then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			else
				--if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				--end
			end
			if card and card:isKindOf("BasicCard") then
				room:setPlayerMark(player, "ssyuegui_cantrigger", 1)
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			for _, p in sgs.qlist(room:getOtherPlayers(player)) do
				if p:getMark("ssyuegui_cantrigger") > 0 and p:getWeapon() and p:getWeapon():objectName() == "ssyuegui" and p:getMark("Equips_Nullified_to_Yourself") == 0 then
					room:sendCompulsoryTriggerLog(p, self:objectName()) --显示锁定技发动
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					
					p:drawCards(1, self:objectName())
				end
			end
		end
	end
}
vup_anjiang:addSkill(ssyuegui_skill)
table.insert(remove_card_objname, "ssyuegui")	--分发起始手牌前移除
table.insert(turn_end_clear_mark, "ssyuegui_cantrigger")
addAimedCard(ssyuegui,4,12)
sgs.LoadTranslationTable{
	["ssyuegui"] = "灵剑月桂",
	["ssyuegui_skill"] = "灵剑月桂",
	[":ssyuegui"] = "<font color='#008080'>特殊牌</font><br />装备牌·武器<br /><b>攻击范围：</b>２<br /><b>武器技能：</b>锁定技，其他角色的结束阶段，若你于本回合内使用或打出过基本牌，你摸一张牌。",
}

--------------------------------------------------
--炽天使之剑
--------------------------------------------------

angelsword = sgs.CreateWeapon{
	name = "angelsword",
	class_name = "Angelsword",
	suit = sgs.Card_Spade,
	number = 1,
	range = 2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}
angelsword_skill = sgs.CreateTriggerSkill{
	name = "angelsword_skill",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.TrickCardCanceling},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TrickCardCanceling then	--跳过对应的无懈询问
			local effect = data:toCardEffect()
			if effect.from and effect.from:getWeapon() and effect.from:getWeapon():isKindOf("Angelsword") and effect.from:getMark("Equips_Nullified_to_Yourself") == 0 and player and player:objectName() ~= effect.from:objectName() then return true end
		end
	end
}
vup_anjiang:addSkill(angelsword_skill)
table.insert(remove_card_objname, "angelsword")	--分发起始手牌前移除
addAimedCard(angelsword,1,1)
sgs.LoadTranslationTable{
	["angelsword"] = "炽天使之剑",
	["angelsword_skill"] = "炽天使之剑",
	[":angelsword"] = "<font color='#008080'>特殊牌</font><br />装备牌·武器<br /><b>攻击范围：</b>２<br /><b>武器技能：</b>锁定技，其他角色不能使用【无懈可击】响应你使用的锦囊牌。",
}

--------------------------------------------------
--星野奈绪
--------------------------------------------------

xingyenaixu = sgs.CreateTreasure{
	name = "xingyenaixu",
	class_name = "Xingyenaixu",
	suit = sgs.Card_Club,
	number = 2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}

xingyenaixu_skill = sgs.CreateTriggerSkill{
	name = "xingyenaixu_skill",
	global = true, 
	events = {sgs.Dying},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Dying then
			local dying = data:toDying()
			if dying.who and dying.who:isAlive() and dying.who:getTreasure() and dying.who:getTreasure():isKindOf("Xingyenaixu") and dying.who:getMark("Equips_Nullified_to_Yourself") == 0 then	--有Equips_Nullified_to_Yourself标记的角色所有装备失效
				for _,cd in sgs.qlist(dying.who:getCards("e"))do
					if cd:isKindOf("Xingyenaixu") then
						room:sendCompulsoryTriggerLog(dying.who, "xingyenaixu") --显示锁定技发动
						room:setEmotion(dying.who, "xingyexiaoniao")
						
						room:throwCard(cd, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, dying.who:objectName(), dying.who:objectName(), "xingyenaixu", ""), dying.who)
						
						local recover = sgs.RecoverStruct()
						recover.who = dying.who
						recover.recover = 1
						room:recover(dying.who, recover)
						
						return false
					end
				end
			end
		end
	end,
}

vup_anjiang:addSkill(xingyenaixu_skill)
table.insert(remove_card_objname, "xingyenaixu")	--分发起始手牌前移除
addAimedCard(xingyenaixu,2,2)
sgs.LoadTranslationTable{
	["xingyenaixu"] = "星野奈绪",
	["xingyenaixu_skill"] = "星野奈绪",
	[":xingyenaixu"] = "<font color='#008080'>特殊牌</font><br />装备牌·宝物<br /><b>宝物技能</b>：<font color=\"blue\"><b>锁定技，</b></font>你进入濒危状态时，破坏此牌、回复1点体力。",
}

--------------------------------------------------
--透镜
--------------------------------------------------

toujing = sgs.CreateArmor{
	name = "toujing",
	class_name = "Toujing",
	suit = sgs.Card_Club,
	number = 2,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}

toujing_skill = sgs.CreateTriggerSkill{
	name = "toujing_skill",
	global = true, 
	events = {sgs.DamageInflicted},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.to and damage.to:objectName() == player:objectName() and (player:getArmor() and player:getArmor():objectName() == "toujing") and player:hasArmorEffect("toujing") then
				if damage.card and damage.card:isKindOf("Slash") and not damage.card:isKindOf("NatureSlash") then
					room:sendCompulsoryTriggerLog(player, "toujing") --显示锁定技发动
					room:setEmotion(player, "toujingA")
					room:broadcastSkillInvoke("audio_effect", 22)	--播放配音
					room:getThread():delay(1000)
					player:drawCards(1, "toujing")
				end
				if damage.nature == sgs.DamageStruct_Thunder then
					room:sendCompulsoryTriggerLog(player, "toujing") --显示锁定技发动
					room:setEmotion(player, "toujingB")
					room:broadcastSkillInvoke("audio_effect", 23)	--播放配音
					room:getThread():delay(1000)
					damage.damage = damage.damage + 1
					data:setValue(damage)
				end
				if damage.nature == sgs.DamageStruct_Light and damage.from and damage.from:isAlive() and damage.from:objectName() ~= damage.to:objectName() then
					room:sendCompulsoryTriggerLog(player, "toujing") --显示锁定技发动
					room:setEmotion(player, "toujingA")
					room:broadcastSkillInvoke("audio_effect", 22)	--播放配音
					room:getThread():delay(1000)
					
					local new_damage = data:toDamage()
					new_damage.to = damage.from
					new_damage.transfer = true
					new_damage.transfer_reason = self:objectName()
					
					local _data = sgs.QVariant()
					_data:setValue(new_damage)
					player:setTag("TransferDamage", _data)	--需给原受伤者增加tag来执行伤害转移
					
					return true
				end
			end
		end
	end,
}

vup_anjiang:addSkill(toujing_skill)
table.insert(remove_card_objname, "toujing")	--分发起始手牌前移除
addAimedCard(toujing,3,6)
sgs.LoadTranslationTable{
	["toujing"] = "透镜",
	["toujing_skill"] = "透镜",
	[":toujing"] = "<font color='#008080'>特殊牌</font><br />装备牌·防具<br /><b>防具技能</b>：<font color=\"blue\"><b>锁定技，</b></font>你受到伤害时，若伤害来源牌为普通【杀】，你摸一张牌；若为雷电伤害，此伤害+1；若为光芒伤害，将之转移给伤害来源。",
}

--------------------------------------------------
--白银小狮子
--------------------------------------------------

--addOriginalCard("silver_lion",4,2)	--已改为从源码添加，为白银狮子的异画版本

table.insert(remove_card_objname, "small_silver_lion")	--分发起始手牌前移除
sgs.LoadTranslationTable{
	["small_silver_lion"] = "白银小狮子",
        [":small_silver_lion"] = "<font color='#008080'>特殊牌</font><br />装备牌·防具<br /><b>防具技能</b>：锁定技，每当你受到伤害时，若此伤害大于1点，防止多余的伤害。此牌离开装备区后，你回复1点体力。",
}

--------------------------------------------------
--远交近攻
--------------------------------------------------

--[[befriend_attacking_prohibit = sgs.CreateProhibitSkill{	--禁止其他模式使用（避免被泛转化类技能获取）
	name = "befriend_attacking_prohibit",
	is_prohibited = function(self, from, to, card)
		local room = sgs.Sanguosha:currentRoom()
		return card:isKindOf("BefriendAttacking") and room:getMode() ~= "couple"
	end
}]]
befriend_attacking = sgs.CreateTrickCard{
	name = "befriend_attacking",
	class_name = "BefriendAttacking",
	subtype = "single_target_trick",
	subclass = sgs.LuaTrickCard_TypeSingleTargetTrick,
	target_fixed = false,
	can_recast = false,
	suit = sgs.Card_Diamond,
	number = 0,
	filter = function(self, targets, to_select)
		if #targets == 0 and sgs.Self and to_select:objectName() ~= sgs.Self:objectName() then
			return true
		end
	end,
	feasible = function(self, targets)
		return #targets == 1
	end,
	on_use = function(self, room, source, targets)
		if #targets > 0 then
			local nullified_list = room:getTag("CardUseNullifiedList"):toStringList()
			local all_nullified = table.contains(nullified_list, "_ALL_TARGETS")
			
			local no_respond_list = room:getTag("CardUseNoRespondList"):toStringList()
			local all_no_respond = table.contains(no_respond_list, "_ALL_TARGETS")
			
			local no_offset_list = room:getTag("CardUseNoOffsetList"):toStringList()
			local all_no_offset = table.contains(no_offset_list, "_ALL_TARGETS")
			
			for _, target in ipairs(targets) do
				local effect = sgs.CardEffectStruct()
				effect.card = self
				effect.from = source
				effect.to = target
				effect.multiple = #targets > 1
				effect.nullified = all_nullified or table.contains(nullified_list, target:objectName())
				effect.no_respond = all_no_respond or table.contains(no_respond_list, target:objectName())
				effect.no_offset = all_no_offset or table.contains(no_offset_list, target:objectName())
				
				room:cardEffect(effect)
			end
			
			--使用后从处理区进入弃牌堆，所有处理与源码相同
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_USE, source:objectName(), nil, self:getSkillName(), "")
			if #targets == 1 then
				reason.m_targetId = targets[1]:objectName()
			end
			reason.m_extraData = sgs.QVariant()
			reason.m_extraData:setValue(self)
			
			local card_ids = sgs.IntList()
			if self:isVirtualCard() then
				card_ids = self:getSubcards()
			else
				card_ids:append(self:getId())
			end
			
			local moves = sgs.CardsMoveList()
			for _,id in sgs.qlist(card_ids) do
				if room:getCardPlace(id) == sgs.Player_PlaceTable then
					local move = sgs.CardsMoveStruct(id, source, nil, sgs.Player_PlaceTable, sgs.Player_DiscardPile, reason)
					moves:append(move)
				end
			end
			if not moves:isEmpty() then
				room:moveCardsAtomic(moves, true)
			end
		end
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		effect.to:drawCards(2, self:objectName())
		if room:getMode() == "couple" then
			local cp = effect.to:getTag("spouse"):toPlayer()
			if cp and cp:isAlive() then
				room:getThread():delay(500)
				room:doAnimate(1, effect.from:objectName(), cp:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				local damage = sgs.DamageStruct(self:objectName(), effect.from, cp, 1, sgs.DamageStruct_Normal)
				damage.card = self
				room:damage(damage)
			else
				effect.from:drawCards(1, self:objectName())
			end
		end
	end,
}

table.insert(only_for_cpmode, "befriend_attacking")	--仅限CP协战模式
--vup_anjiang:addSkill(befriend_attacking_prohibit)	--禁止其他模式使用
addAimedCard(befriend_attacking,1,9)
addAimedCard(befriend_attacking,2,4)
sgs.LoadTranslationTable{
	["befriend_attacking"] = "远交近攻",
	[":befriend_attacking"] = "<font color='#008080'>特殊牌</font><br/><font color='#008080'>仅限CP协战模式</font><br/>锦囊牌<br/><b>时机</b>：出牌阶段<br /><b>目标</b>：任意一名其他角色<br /><b>效果</b>：目标角色摸两张牌，若其有在场CP，则你对其CP造成1点伤害，否则你摸一张牌。",
}

--------------------------------------------------
--风卷残云
--------------------------------------------------

fengjuancanyun = sgs.CreateWeapon{
	name = "fengjuancanyun",
	class_name = "Fengjuancanyun",
	suit = sgs.Card_Spade,
	number = 1,
	range = 3,
	on_install = function(self,player)
	end,
	on_uninstall = function(self,player)
	end,
}
fengjuancanyun_skill = sgs.CreateTriggerSkill{
	name = "fengjuancanyun_skill",
	global = true, 
	events = {sgs.EventPhaseStart},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			if player and player:isAlive() and player:getWeapon() and player:getWeapon():isKindOf("Fengjuancanyun") and player:getMark("Equips_Nullified_to_Yourself") == 0 then	--有Equips_Nullified_to_Yourself标记的角色所有装备失效
				room:sendCompulsoryTriggerLog(player, "fengjuancanyun") --显示锁定技发动
				player:obtainCard(player:getWeapon(), true)
			end
		end
	end,
}
vup_anjiang:addSkill(fengjuancanyun_skill)
table.insert(remove_card_objname, "fengjuancanyun")	--分发起始手牌前移除
addAimedCard(fengjuancanyun,3,1)
sgs.LoadTranslationTable{
	["fengjuancanyun"] = "风卷残云",
	["fengjuancanyun_skill"] = "风卷残云",
	[":fengjuancanyun"] = "<font color='#008080'>特殊牌</font><br />装备牌·武器<br /><b>攻击范围：</b>３<br /><b>武器技能：</b>锁定技，结束阶段，将此牌收回手牌。",
}

--------------------------------------------------
--冰杀（璃星羽特性）
--------------------------------------------------

addOriginalCard("IceSlash",4,1)	--额外冰杀
addOriginalCard("IceSlash",4,2)
addOriginalCard("IceSlash",4,3)
--addOriginalCard("IceSlash",4,4)

--------------------------------------------------
--白银狮子（小狮子应援队特性）
--------------------------------------------------

addOriginalCard("SilverLion",4,2)	--额外白银狮子
addOriginalCard("SilverLion",4,3)	--额外白银狮子
addOriginalCard("SilverLion",4,4)	--额外白银狮子

--------------------------------------------------
--万箭齐发（箭雨特性）
--------------------------------------------------

addOriginalCard("ArcheryAttack",1,7)	--额外万箭
addOriginalCard("ArcheryAttack",3,5)	--额外万箭

--------------------------------------------------
--狂野模式卡牌
--------------------------------------------------

if not wild_mode then
	table.insert(remove_card_objname, "toulianghuanzhu")	--分发起始手牌前移除
	table.insert(remove_card_objname, "monkey")	--分发起始手牌前移除
	table.insert(remove_card_objname, "drowning")	--分发起始手牌前移除
end

addOriginalCard("Monkey",2,7)
addAimedCard(toulianghuanzhu,1,1)
addAimedCard(toulianghuanzhu,2,10)
addAimedCard(toulianghuanzhu,3,4)
addAimedCard(toulianghuanzhu,4,12)
addOriginalCard("Drowning",4,7)

--------------------------------------------------
--粉兔JK 绫奈奈奈
--设计者：NSX
--------------------------------------------------

lingnainainai_fentujk = sgs.General(extension,"lingnainainai_fentujk","psp","3",false)

sgs.LoadTranslationTable{
	["lingnainainai_fentujk"] = "绫奈奈奈",
	["&lingnainainai_fentujk"] = "绫奈奈奈",
	["#lingnainainai_fentujk"] = "粉兔JK",
	["$lingnainainai_fentujk"] = "萌新",
	["designer:lingnainainai_fentujk"] = "NSX",
	["cv:lingnainainai_fentujk"] = "",
	["illustrator:lingnainainai_fentujk"] = "",
	["~lingnainainai_fentujk"] = "",
}

--------------------------------------------------
--嗜甜
--------------------------------------------------

shitian = sgs.CreateTriggerSkill{
	name = "shitian",
	frequency = sgs.Skill_Frequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start then
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					local judge = sgs.JudgeStruct()
					judge.pattern = ".|red"
					judge.good = true
					judge.reason = self:objectName()
					judge.who = player
					judge.time_consuming = false
					room:judge(judge)
					if judge:isGood() then
						--local choices = {"shitian_draw"}
						--if player:isWounded() then
						--	table.insert(choices, 1, "shitian_recover")
						--end
						--local choice = room:askForChoice(player, self:objectName(), table.concat(choices, "+"))
						--if choice == "shitian_draw" then
							--player:drawCards(2, self:objectName())
							player:drawCards(1, self:objectName())
						--else
							local recover = sgs.RecoverStruct()
							recover.who = player
							recover.recover = 1
							room:recover(player, recover)
						--end
						room:setPlayerMark(player, "shitian_failed", 0)
						room:getThread():delay(500)
					else	--触发彩蛋
						if player:getMark("shitian_failed") >= 1 then
							room:setEmotion(player, "shitian_failed")
						else
							room:addPlayerMark(player, "shitian_failed", 1)
						end
					end
				end
			end
		end
		return false
	end
}

lingnainainai_fentujk:addSkill(shitian)

sgs.LoadTranslationTable{
	["shitian"] = "嗜甜",
	[":shitian"] = "准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，进行一次判定，若结果为红，你摸一张牌、回复1点体力。",
	["shitian_draw"] = "摸两张牌",
	["shitian_recover"] = "回复1点体力",
	["$shitian1"] = "",
	["$shitian2"] = "",
}

--------------------------------------------------
--藏聪
--（2020.12.26 萌佬）修正日志：现在会显示藏聪可无效的牌的名称了
--------------------------------------------------

cangcong = sgs.CreateTriggerSkill{
	name = "cangcong",
	events = {sgs.TargetConfirmed},
	on_trigger = function(self, event, player, data, room)
		local use = data:toCardUse()
		if use.card and not use.card:isKindOf("SkillCard") and (use.card:isKindOf("Slash") or use.card:isNDTrick()) and use.to and use.to:contains(player) and use.to:length() >= 2 then
			if use.from then
				use.from:setFlags("cangcong_usefrom_AI")	--AI用
			end
			if player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. use.card:objectName())) and not SkillNullify(player, self:objectName()) then
				local nullified_list = use.nullified_list	--无效目标列表
				table.insert(nullified_list, player:objectName())
				use.nullified_list = nullified_list
				data:setValue(use)
			end
			if use.from then
				use.from:setFlags("-cangcong_usefrom_AI")	--AI用
			end
		end
		return false
	end
}

lingnainainai_fentujk:addSkill(cangcong)

sgs.LoadTranslationTable{
	["cangcong"] = "藏聪",
	[":cangcong"] = "你成为【杀】或普通锦囊牌的目标后，若此牌目标数＞1，你可以<font color='#A9A9A9'>发动此技能</font>令此牌对你无效。",
	["$cangcong1"] = "",
	["$cangcong2"] = "",
	["cangcong:choice"] = "你可以发动“藏聪”，令 %src 对你无效",
}

--------------------------------------------------
--宅家海豹 白神遥
--设计者：NSX
--------------------------------------------------

baishenyao_zhaijiahaibao = sgs.General(extension,"baishenyao_zhaijiahaibao","psp","3",false)

sgs.LoadTranslationTable{
	["baishenyao_zhaijiahaibao"] = "白神遥",
	["&baishenyao_zhaijiahaibao"] = "白神遥",
	["#baishenyao_zhaijiahaibao"] = "宅家海豹",
	["$baishenyao_zhaijiahaibao"] = "简单",
	["designer:baishenyao_zhaijiahaibao"] = "NSX",
	["cv:baishenyao_zhaijiahaibao"] = "",
	["illustrator:baishenyao_zhaijiahaibao"] = "Bison仓鼠",
	["~baishenyao_zhaijiahaibao"] = "我不玩啦！",
}

--------------------------------------------------
--抽卡
--------------------------------------------------

chouka = sgs.CreateTriggerSkill{
	name = "chouka",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Draw and not player:isSkipped(sgs.Player_Draw) then
				if room:askForSkillInvoke(player, self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					local good_table = {"heart","diamond","spade","club"}
					local get_char_tabel = {}
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					repeat
						local good_str = table.concat(good_table,",")
						local judge = sgs.JudgeStruct()
						judge.pattern = ".|"..good_str
						judge.good = true
						judge.reason = self:objectName()
						judge.who = player
						judge.time_consuming = true	--为真耗时更少
						room:judge(judge)
						if judge:isGood() then
							if room:getCardPlace(judge.card:getEffectiveId()) == sgs.Player_DiscardPile then
								dummy:addSubcard(judge.card)
							end
							room:setPlayerMark(player, "chouka_AI", dummy:subcardsLength())	--AI用
							table.insert(get_char_tabel, judge.card:getSuitString().."_char")
							local choice = room:askForChoice(player, self:objectName().."+chouka_choice_log1+"..table.concat(get_char_tabel,"+").."+chouka_choice_log2", "chouka_repeat+chouka_stop")
							room:setPlayerMark(player, "chouka_AI", 0)						--AI用
							if choice == "chouka_stop" then
								player:obtainCard(dummy, true)
								if dummy:subcardsLength() >= 3 then
									room:setEmotion(player, "haibao")
									room:getThread():delay(360)
									room:setEmotion(player, "haibao")
									if dummy:subcardsLength() >= 4 then
										RecordUnlockGenerals(player, "baishenyao_weiwunv")	--为玩家记录可解锁角色
										room:getThread():delay(360)
										room:setEmotion(player, "haibao")
										room:getThread():delay(360)
										room:setEmotion(player, "haibao")
									end
								end
								room:getThread():delay(500)
								break
							else
								--[[if judge.card:getSuit() == sgs.Card_Heart then
									table.removeOne(good_table, "heart")
								elseif judge.card:getSuit() == sgs.Card_Diamond then
									table.removeOne(good_table, "diamond")
								elseif judge.card:getSuit() == sgs.Card_Spade then
									table.removeOne(good_table, "spade")
								elseif judge.card:getSuit() == sgs.Card_Club then
									table.removeOne(good_table, "club")
								end]]
								table.removeOne(good_table, judge.card:getSuitString())
							end
						else
							room:addPlayerMark(player, "chouka_skip_count", 1)
							if player:getMark("chouka_skip_count") >= 3 then
								RecordUnlockGenerals(player, "newzhan")	--为玩家记录可解锁角色
							end
							dummy:deleteLater()
							return true
						end
					until false
					dummy:deleteLater()
				end
			end
			return false
		end
	end,
}

baishenyao_zhaijiahaibao:addSkill(chouka)

sgs.LoadTranslationTable{
	["chouka"] = "抽卡",
	[":chouka"] = "摸牌阶段开始时，你可以<font color='#A9A9A9'>发动此技能</font>，进行判定，若你<font color='#9400D3'>本次“抽卡”的所有判定结果</font>花色均不同，则你选择一项：1.重复此流程 2.获得<font color='#9400D3'>这些判定牌</font>；否则你结束本阶段。",
	["$chouka"] = "",
	["chouka_stop"] = "获得所有判定牌",
	["chouka_repeat"] = "继续进行判定",
	["chouka_choice_log1"] = "目前累积的花色：",
	["chouka_choice_log2"] = "\n继续判定若花色重复则结束摸牌阶段",
}

--------------------------------------------------
--慵懒
--------------------------------------------------

yonglan_vs = sgs.CreateViewAsSkill{
	name = "yonglan",
	n = 1,
	--expand_pile = "wooden_ox",	--允许使用木牛流马
	--response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return #selected == 0 and to_select:getNumber() > sgs.Self:getMark("yonglan_number") and not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local first = cards[1]
			local card_name = ""
			card_name = "jink"
			local ncard = sgs.Sanguosha:cloneCard(card_name, first:getSuit(), first:getNumber())
			ncard:addSubcard(first)
			ncard:setSkillName("yonglan")
			return ncard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "jink" and player:getMark("yonglan_used") == 0 and player:getMark("yonglan_number") ~= 0
	end,
}
yonglan = sgs.CreateTriggerSkill{
	name = "yonglan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardEffected, sgs.PreCardUsed, sgs.PreCardResponded},
	view_as_skill = yonglan_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardEffected then
			local effect = data:toCardEffect()
			if effect.card:isKindOf("Slash") then
				room:setPlayerMark(player, "yonglan_number", 0)
				if effect.card:getNumber() and effect.card:getNumber() >= 1 and effect.card:getNumber() <= 13 then	--源码已修正，现在神杀的多牌转化点数为0。
					room:setPlayerMark(player, "yonglan_number", effect.card:getNumber())
				end
			end
		else
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				--if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				--end
			end
			if card then
				if card:getSkillName() == "yonglan" then
					room:setPlayerMark(player, "yonglan_used", 1)
				end
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark, "yonglan_used")	--回合结束清除标记

baishenyao_zhaijiahaibao:addSkill(yonglan)

sgs.LoadTranslationTable{
	["yonglan"] = "慵懒",
	[":yonglan"] = "每回合限一次，你需要使用【闪】响应【杀】时，你可以将一张点数大于此【杀】的手牌当【闪】使用。",
	["$yonglan"] = "",
}

--------------------------------------------------
--宅家海豹 白神遥
--设计者：NSX
--------------------------------------------------

baishenyao_if = sgs.General(extension,"baishenyao_if","psp","3",false,true,true)

sgs.LoadTranslationTable{
	["baishenyao_if"] = "白神遥",
	["&baishenyao_if"] = "白神遥",
	["#baishenyao_if"] = "宅家海豹",
	["$baishenyao_if"] = "简单",
	["designer:baishenyao_if"] = "NSX",
	["cv:baishenyao_if"] = "",
	["illustrator:baishenyao_if"] = "Bison仓鼠",
	["~baishenyao_if"] = "我不玩啦！",
}

--------------------------------------------------
--抽卡
--------------------------------------------------

baishenyao_if:addSkill(chouka)

--------------------------------------------------
--慵懒
--------------------------------------------------

yonglan_if_vs = sgs.CreateViewAsSkill{
	name = "yonglan_if",
	n = 1,
	--expand_pile = "wooden_ox",	--允许使用木牛流马
	--response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return #selected == 0 and to_select:getNumber() > sgs.Self:getMark("yonglan_if_number") and not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local first = cards[1]
			local card_name = ""
			card_name = "jink"
			local ncard = sgs.Sanguosha:cloneCard(card_name, first:getSuit(), first:getNumber())
			ncard:addSubcard(first)
			ncard:setSkillName("yonglan_if")
			return ncard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "jink" and player:getMark("yonglan_if_used") == 0 and player:getMark("yonglan_if_number") ~= 0
	end,
}
yonglan_if = sgs.CreateTriggerSkill{
	name = "yonglan_if",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardEffected, sgs.PreCardUsed, sgs.PreCardResponded},
	view_as_skill = yonglan_if_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardEffected then
			local effect = data:toCardEffect()
			if effect.card:isKindOf("Slash") then
				room:setPlayerMark(player, "yonglan_if_number", 0)
				if effect.card:getNumber() and effect.card:getNumber() >= 1 and effect.card:getNumber() <= 13 then	--源码已修正，现在神杀的多牌转化点数为0。
					room:setPlayerMark(player, "yonglan_if_number", effect.card:getNumber())
				end
			end
		else
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				--if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				--end
			end
			if card then
				if card:getSkillName() == "yonglan_if" then
					room:setPlayerMark(player, "IF_losecheer", 1)	--失去应援力
				end
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark, "yonglan_if_used")	--回合结束清除标记

baishenyao_if:addSkill(yonglan_if)

sgs.LoadTranslationTable{
	["yonglan_if"] = "慵懒",
	[":yonglan_if"] = "你需要使用【闪】响应【杀】时，你可以将一张点数大于此【杀】的手牌当【闪】使用，然后你失去1应援力。",
	["$yonglan_if"] = "",
}

--------------------------------------------------
--伪巫女 白神遥
--设计者：
--------------------------------------------------

baishenyao_weiwunv = sgs.General(extension,"baishenyao_weiwunv","psp","3",false,true,true)

sgs.LoadTranslationTable{
	["baishenyao_weiwunv"] = "白神遥",
	["&baishenyao_weiwunv"] = "白神遥",
	["#baishenyao_weiwunv"] = "伪巫女",
	["$baishenyao_weiwunv"] = "一般",
	["designer:baishenyao_weiwunv"] = "夜玥紫英",
	["cv:baishenyao_weiwunv"] = "",
	["illustrator:baishenyao_weiwunv"] = "Bison仓鼠",
	["unlock:baishenyao_weiwunv"] = "使用白神遥的“抽卡”一次获得4张牌",	--解锁条件
	["~baishenyao_weiwunv"] = "",
}

baishenyao_weiwunv:setBonus(true)	--设为奖励角色

--------------------------------------------------
--祓豹
--------------------------------------------------

fubaocard = sgs.CreateSkillCard{
	name = "fubao",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if sgs.Self:canPindian(to_select) then
				return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "fubao")
			end
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local success = source:pindian(targets[1], "fubao", self)
		if success then
			local recover = sgs.RecoverStruct()
			recover.who = source
			recover.recover = 1
			room:recover(source, recover)
			room:recover(targets[1], recover)
		else
			room:setPlayerMark(targets[1], "&fubao_mark", 1)
		end
	end
}
fubao = sgs.CreateViewAsSkill{
	name = "fubao",
	n = 1,
	view_filter = function(self, selected, to_select)
		if #selected == 0 then
			return not to_select:isEquipped()
		end
		return false
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = fubaocard:clone()
			NewSkillCard:addSubcard(cards[1])
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#fubao") < 1 and player:canPindian()
	end
}

baishenyao_weiwunv:addSkill(fubao)

sgs.LoadTranslationTable{
	["fubao"] = "祓豹",
	[":fubao"] = "出牌阶段限一次，你可以与一名角色拼点：若你赢，你与其各回复一点体力；若你没赢，其获得“豹”标记。",
	["$fubao"] = "",
	["^fubao"] = "操作提示：<br/>选择一张用于拼点的手牌→选择一名角色→确定",
	["fubao_mark"] = "豹",
}

--------------------------------------------------
--塞钱
--------------------------------------------------

saiqiancard = sgs.CreateSkillCard{
	name = "saiqian",
	filter = function(self, targets, to_select)
		return #targets < 2 and to_select:getMark("&fubao_mark") > 0 and not to_select:isNude() and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_use = function(self, room, source, targets)
		for _, target in ipairs(targets) do
			--偷个懒，交牌套用豹晒
			source:setFlags("baoshai_receiver_AI")		--AI用
			local dummy = room:askForExchange(target, "baoshai", 1, 1, true, "#baoshai_give:" .. source:objectName(), false)
			source:setFlags("-baoshai_receiver_AI")		--AI用
			if dummy and dummy:subcardsLength() > 0 then
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, target:objectName(), source:objectName(), "saiqian", "")
				room:moveCardTo(dummy, source, sgs.Player_PlaceHand, reason, true)
			end
			dummy:deleteLater()
		end
	end
}
saiqianvs = sgs.CreateZeroCardViewAsSkill{
	name = "saiqian",
	response_pattern = "@@saiqian",
	view_as = function()
		return saiqiancard:clone()
	end
}
saiqian = sgs.CreateTriggerSkill{
	name = "saiqian",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = saiqianvs,
	events = {sgs.DrawNCards},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards then
			local can_trigger = false
			for _, p in sgs.qlist(room:getAlivePlayers()) do
				if p:getMark("&fubao_mark") > 0 then
					can_trigger = true
					break
				end
			end
			if can_trigger and room:askForUseCard(player, "@@saiqian", "@saiqian") then
				local n = data:toInt()
				data:setValue(0)
				return true		--已放弃摸牌，阻止后续结算
			end
		end
	end,
}

baishenyao_weiwunv:addSkill(saiqian)

sgs.LoadTranslationTable{
	["saiqian"] = "塞钱",
	[":saiqian"] = "摸牌阶段，你可以改为令至多两名有“豹”标记的角色各正面向上交给你一张牌。",
	["@saiqian"] = "你可以放弃摸牌，令至多两名有“豹”的角色交给你一张牌",
	["~saiqian"] = "选择若干名有“豹”标记的角色→确定",
	["$saiqian"] = "",
}

--------------------------------------------------
--治愈
--------------------------------------------------

zhiyu_bao = sgs.CreateTriggerSkill{
	name = "zhiyu_bao",
	events = {sgs.OverHealing},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.OverHealing and player:getKingdom() == "psp" then
			local recover = data:toRecover()
			if recover.recover > 0 then
				for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
					room:sendCompulsoryTriggerLog(myself, self:objectName())	--显示锁定技发动
					room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					player:drawCards(2, self:objectName())
				end
			end
			return false
		end
	end,
    can_trigger = function(self, target)
        return target
    end
}

baishenyao_weiwunv:addSkill(zhiyu_bao)

sgs.LoadTranslationTable{
	["zhiyu_bao"] = "治愈",
	[":zhiyu_bao"] = "锁定技，势力为P-SP的角色体力回复溢出后，其摸两张牌。",
	["$zhiyu_bao"] = "",
}

--------------------------------------------------
--玄武重工 白神龟龟
--设计者：
--------------------------------------------------

baishenguigui_xuanwuzhonggong = sgs.General(extension,"baishenguigui_xuanwuzhonggong","psp","35",false)

sgs.LoadTranslationTable{
	["baishenguigui_xuanwuzhonggong"] = "白神龟龟",
	["&baishenguigui_xuanwuzhonggong"] = "白神龟龟",
	["#baishenguigui_xuanwuzhonggong"] = "玄武重工",
	["$baishenguigui_xuanwuzhonggong"] = "一般",
	["designer:baishenguigui_xuanwuzhonggong"] = "萌龙少主",
	["cv:baishenguigui_xuanwuzhonggong"] = "",
	["illustrator:baishenguigui_xuanwuzhonggong"] = "",
	["~baishenguigui_xuanwuzhonggong"] = "",
}

--------------------------------------------------
--重工
--------------------------------------------------

zhonggong = sgs.CreateTriggerSkill{
	name = "zhonggong",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseEnd},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseEnd then
			if player:getPhase() == sgs.Player_Draw then
				local cardnames = {"Xueniangaogun", "Xuanwujia"}
				local card_ids = sgs.IntList()
				for i=1,2,1 do
					for _,id in sgs.qlist(room:getDrawPile()) do
						local card = sgs.Sanguosha:getCard(id)
						if card:isKindOf(cardnames[i]) then
							card_ids:append(card:getId())
						end
					end
					for _,id in sgs.qlist(room:getDiscardPile()) do
						local card = sgs.Sanguosha:getCard(id)
						if card:isKindOf(cardnames[i]) then
							card_ids:append(card:getId())
						end
					end
					--[[for _, p in sgs.qlist(room:getAllPlayers()) do
						for _,card in sgs.qlist(p:getCards("e")) do
							if card:isKindOf(cardnames[i]) then
								dummy:addSubcard(card)
							end
						end
					end]]
				end
				if not card_ids:isEmpty() then
					--room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					--player:setFlags("zhonggong_trigger")
					--player:setFlags("Fake_Move")
					--player:obtainCard(dummy, true)
					--local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
					--room:moveCardTo(dummy, player, nil, sgs.Player_DrawPile, reason, false, false)	--最后一个参数为真意味着多张牌会给观星框让玩家自行决定顺序
					--local new_return_ids = room:getNCards(dummy:subcardsLength())
					--player:setFlags("-Fake_Move")
					--room:askForGuanxing(player, new_return_ids, sgs.Room_GuanxingUpOnly)
					room:fillAG(card_ids, player)
					local id = room:askForAG(player, card_ids, true, self:objectName())
					room:clearAG(player)
					local card = sgs.Sanguosha:getCard(id)
					if card then
						local logg = sgs.LogMessage()
						logg.from = player
						logg.type = "#InvokeSkill"
						logg.arg = self:objectName()
						room:sendLog(logg)	--显示技能发动提示信息
						room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
						if SkillNullify(player, self:objectName()) then
							return false
						end
						player:obtainCard(card, true)
					else
						return false
					end
					local cards = sgs.IntList()
					for _,cd in sgs.qlist(player:getHandcards()) do	--补齐全部手牌作为可分配牌
						if not cards:contains(cd:getId()) then
							cards:append(cd:getId())
						end
					end
					if not cards:isEmpty() then
						local new_reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), nil, self:objectName(), "")
						while player:isAlive() and room:askForYiji(player, cards, "zhonggong", false, false, true, -1, sgs.SPlayerList(), new_reason, "#zhonggong", false) do
							
						end
					end
				end
			end
		end
	end
}

baishenguigui_xuanwuzhonggong:addSkill(zhonggong)

sgs.LoadTranslationTable{
	["zhonggong"] = "重工",
	--[":zhonggong"] = "你可以跳过出牌阶段，指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其依次使用牌堆、弃牌堆、场上的一张【雪年糕棍】和【玄武甲】。",
	--[":zhonggong"] = "你可以跳过出牌阶段，<font color='#A9A9A9'>发动此技能</font>，获得牌堆、弃牌堆中的【雪年糕棍】和【玄武甲】，然后可以分配任意张手牌。",
	[":zhonggong"] = "摸牌阶段结束时，你可以<font color='#A9A9A9'>发动此技能</font>，获得牌堆、弃牌堆中的一张【雪年糕棍】或【玄武甲】，然后可以分配任意张手牌。",
	["$zhonggong"] = "",
	["zhonggong:choice"] = "你可以发动“重工”，跳过出牌阶段，获得 %src 张对应装备牌并分配手牌",
	--["@zhonggong-invoke"] = "你可以发动“重工”，跳过出牌阶段，令一名角色使用雪年糕棍和玄武甲",
	--["^AG_zhonggong"] = "<b>重工</b><br/>双击以选择一张装备牌令目标角色使用",
	["^AG_zhonggong"] = "<b>重工</b><br/>发动：双击选择一张牌获得，然后分配手牌<br/>不发动：点击“确定”",
	["#zhonggong"] = "你可以分配手牌<br/>操作提示：<br/>分配牌：选择若干张牌→选择一名角色→确定<br/>不分配：取消",
}

--------------------------------------------------
--缩壳
--------------------------------------------------

suoke_buff = sgs.CreateProhibitSkill{
	name = "#suoke_buff",
	is_prohibited = function(self, from, to, card)
		return to:getMark("&suoke") > 0 and not card:isKindOf("SkillCard")
	end
}
suoke = sgs.CreateTriggerSkill{
	name = "suoke",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			room:addPlayerMark(player, "&suoke!", 1)
			room:getThread():delay(250)
			room:loseHp(player, player:getMark("&suoke!"), damage.from, self:objectName())
			room:setPlayerMark(player, "&suoke", 1)
		end
		return false
	end
}
table.insert(turn_end_clear_mark, "&suoke")	--回合结束清除标记

baishenguigui_xuanwuzhonggong:addSkill(suoke)
baishenguigui_xuanwuzhonggong:addSkill(suoke_buff)

sgs.LoadTranslationTable{
	["suoke"] = "缩壳",
	[":suoke"] = "锁定技，你受到伤害后，失去X点体力，本回合不能被牌或技能指定为目标。（X为本技能的触发次数）",
	["$suoke"] = "",
	[":mark:&suoke"] = "本回合不能被牌或技能的指定为目标",
}

--------------------------------------------------
--里世界魔王 黑魔遥
--设计者：
--------------------------------------------------

heimoyao_boss = sgs.General(extension,"heimoyao_boss","psp","8",false,true,true)

sgs.LoadTranslationTable{
	["heimoyao_boss"] = "黑魔遥",
	["&heimoyao_boss"] = "黑魔遥",
	["#heimoyao_boss"] = "里世界魔王",
	["$heimoyao_boss"] = "简单",
	["designer:heimoyao_boss"] = "",
	["cv:heimoyao_boss"] = "",
	["illustrator:heimoyao_boss"] = "Bison仓鼠",
	["~heimoyao_boss"] = "",
}

--------------------------------------------------
--豹晒
--------------------------------------------------

baoshai = sgs.CreateTriggerSkill{	--只是一个空壳技能
	name = "baoshai",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end
}

heimoyao_boss:addSkill(baoshai)

sgs.LoadTranslationTable{
	["baoshai"] = "豹晒",
	[":baoshai"] = "锁定技，其他角色发动技能时，掷1枚硬币，若结果为反面则发动无效并令其交给你一张牌。",
	["$baoshai"] = "",
	["#baoshai_give"] = "请交给 %src 一张牌（包括装备区的牌）",
}

--------------------------------------------------
--豹躁
--------------------------------------------------

baozao = sgs.CreateTriggerSkill{
	name = "baozao",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DrawNCards},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if player:objectName() == myself:objectName() then continue end
				
				local count = data:toInt() - 1
				data:setValue(count)
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

heimoyao_boss:addSkill(baozao)

sgs.LoadTranslationTable{
	["baozao"] = "豹躁",
	[":baozao"] = "锁定技，所有其他角色的通常摸牌数－1。",
	["$baozao"] = "",
}

--------------------------------------------------
--帷幕
--------------------------------------------------

heimoyao_boss:addSkill("weimu")

--------------------------------------------------
--认怂
--------------------------------------------------

rensong = sgs.CreateTriggerSkill{
	name = "rensong",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and player:getHp() <= 3 then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			doChangeHeroAnimate(room, "heimoyao_boss", "baishenyao_zhaijiahaibao")
			room:changeHero(player, "baishenyao_zhaijiahaibao", false, true, false, true)
		end
		return false
	end
}

heimoyao_boss:addSkill(rensong)

sgs.LoadTranslationTable{
	["rensong"] = "认怂",
	[":rensong"] = "锁定技，你受到伤害后，若你的体力值≤3，你变化为白神遥。",
	["$rensong"] = "",
}

--------------------------------------------------
--黑狼鸟 红晓音
--设计者：
--------------------------------------------------

hongxiaoyin_heilangniao = sgs.General(extension,"hongxiaoyin_heilangniao","psp","4",false)

sgs.LoadTranslationTable{
	["hongxiaoyin_heilangniao"] = "红晓音",
	["&hongxiaoyin_heilangniao"] = "红晓音",
	["#hongxiaoyin_heilangniao"] = "黑狼鸟",
	["$hongxiaoyin_heilangniao"] = "一般",
	["designer:hongxiaoyin_heilangniao"] = "NSX",
	["cv:hongxiaoyin_heilangniao"] = "",
	["illustrator:hongxiaoyin_heilangniao"] = "",
	["unlock:hongxiaoyin_heilangniao"] = "一局游戏中使用红晓音的“永宁”声明过全部三种类型（基本、锦囊、装备）",
	["~hongxiaoyin_heilangniao"] = "",
}

--hongxiaoyin_heilangniao:setBonus(true)	--设为奖励角色

--------------------------------------------------
--魔刺
--------------------------------------------------

mocibuff = sgs.CreateMaxCardsSkill{
	name = "#mocibuff" ,
	extra_func = function(self, player)
		if player and player:isAlive() and not player:getPile("moci"):isEmpty() then
			return -player:getHp()
		end
	end
}
moci = sgs.CreateTriggerSkill{
	name = "moci",
	events = {sgs.EventPhaseStart, sgs.TrickCardCanceling, sgs.TargetSpecified},
	frequency = sgs.Skill_NotFrequent,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and (player and player:isAlive() and player:hasSkill(self:objectName())) and player:getPhase() == sgs.Player_Play then
			local dummy = room:askForExchange(player, self:objectName(), 999, 1, false, "#moci", true)
			if dummy and dummy:subcardsLength() > 0 then	--ai不返回值时dummy为空
				local logg = sgs.LogMessage()
				logg.from = player
				logg.type = "#InvokeSkill"
				logg.arg = self:objectName()
				room:sendLog(logg)	--显示技能发动提示信息
				room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
				if not SkillNullify(player, self:objectName()) then
					BanishCards_Subcards(player, player, dummy, "moci", true)
				end
				dummy:deleteLater()
			end
		elseif event == sgs.TrickCardCanceling then				--跳过对应的无懈询问
			local effect = data:toCardEffect()
			if effect.from and effect.to and effect.from:hasSkill(self:objectName()) and effect.from:getPile("moci") and not effect.from:getPile("moci"):isEmpty() then
				return effect.to:getHandcardNum() <= effect.from:getPile("moci"):length()
			end
		elseif event == sgs.TargetSpecified and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local use = data:toCardUse()
			if use.from and player:objectName() == use.from:objectName() and player:getPile("moci") and not player:getPile("moci"):isEmpty() then
				local no_respond_list = use.no_respond_list		--不可响应目标列表
				local X = player:getPile("moci"):length()
				local trigger = false
				for _, target in sgs.qlist(use.to) do
					if target:getHandcardNum() <= X and player:canEffect(target, self:objectName()) then
						trigger = true
						table.insert(no_respond_list, target:objectName())
					end
				end
				if trigger then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				end
				use.no_respond_list = no_respond_list
				data:setValue(use)
			end
		end
	end,
	can_trigger = function(self, target)
        return target
    end
}
table.insert(turn_end_banish_pile, "moci")	--除外直到回合结束

hongxiaoyin_heilangniao:addSkill(moci)
--hongxiaoyin_heilangniao:addSkill(mocibuff)

sgs.LoadTranslationTable{
	["moci"] = "魔刺",
	["#mocibuff"] = "魔刺",
	[":moci"] = "出牌阶段开始时，你可以<font color='#A9A9A9'>发动此技能</font>，将任意张手牌作为<font color='#804040'>“魔刺”</font>除外直到回合结束。<br/>手牌数少于你<font color='#804040'>“魔刺”</font>张数的角色不能响应你使用的牌。",
	["$moci"] = "",
	["#moci"] = "你可以发动“魔刺”，将任意张手牌除外直到回合结束：<br/>手牌数不多于你以此法除外牌数的角色不能响应你使用的牌",
}

--------------------------------------------------
--赤息
--------------------------------------------------

hongxiaoyin_heilangniao:addSkill("huoshui")

--------------------------------------------------
--千年魔法使 红晓音
--设计者：NSX
--------------------------------------------------

hongxiaoyin_qiannianmofashi = sgs.General(extension,"hongxiaoyin_qiannianmofashi","psp","3",false,true)

sgs.LoadTranslationTable{
	["hongxiaoyin_qiannianmofashi"] = "红晓音",
	["&hongxiaoyin_qiannianmofashi"] = "红晓音",
	["#hongxiaoyin_qiannianmofashi"] = "千年魔法使",
	["$hongxiaoyin_qiannianmofashi"] = "进阶",
	["designer:hongxiaoyin_qiannianmofashi"] = "NSX",
	["cv:hongxiaoyin_qiannianmofashi"] = "",
	["illustrator:hongxiaoyin_qiannianmofashi"] = "",
	["~hongxiaoyin_qiannianmofashi"] = "",
}

--------------------------------------------------
--永宁
--------------------------------------------------

yongning = sgs.CreateTriggerSkill{
	name = "yongning",
	global = true,
	events = {sgs.EventPhaseStart, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and (player and player:isAlive() and player:hasSkill(self:objectName())) and player:getPhase() == sgs.Player_Finish then
			if player:getHp() == 1 or player:isKongcheng() then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAlivePlayers()) do
					if SkillCanTarget(p, player, self:objectName()) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local to = room:askForPlayerChosen(player, targets, self:objectName(), "@yongning", true, true)
					if to and not SkillNullify(player, self:objectName()) then
						to:setFlags("yongning_target_AI")	--AI用
						local choice = room:askForChoice(player, self:objectName().."+yongning_choice_log", "BasicCard+TrickCard+EquipCard")
						to:setFlags("-yongning_target_AI")	--AI用
						if choice then
							if not player:canEffect(to, self:objectName()) then
								return false
							end
							room:setPlayerMark(to, "&yongning+"..choice, 1)
							room:setPlayerCardLimitation(to, "use,response,discard", choice, false)
							--room:setPlayerCardLimitation(to, "use,response", choice, false)
							local log = sgs.LogMessage()
							log.type = "#yongning_log"
							log.from = player
							log.arg = self:objectName()
							log.arg2 = choice
							log.to:append(to)
							room:sendLog(log)	--发送信息框消息
							room:setPlayerMark(player, "yongning_"..choice, 1)	--解锁用
							if player:getMark("yongning_BasicCard") > 0 and player:getMark("yongning_TrickCard") > 0 and player:getMark("yongning_EquipCard") > 0 then
								RecordUnlockGenerals(player, "hongxiaoyin_heilangniao")	--为玩家记录可解锁角色
							end
						end
					end
				end
			end
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.from ~= sgs.Player_NotActive and change.to == sgs.Player_NotActive then
				if player:getMark("&yongning+BasicCard") > 0 then
					room:setPlayerMark(player, "&yongning+BasicCard", 0)
					room:removePlayerCardLimitation(player, "use,response,discard", "BasicCard$0")
					--room:removePlayerCardLimitation(player, "use,response", "BasicCard$0")
				end
				if player:getMark("&yongning+TrickCard") > 0 then
					room:setPlayerMark(player, "&yongning+TrickCard", 0)
					room:removePlayerCardLimitation(player, "use,response,discard", "TrickCard$0")
					--room:removePlayerCardLimitation(player, "use,response", "TrickCard$0")
				end
				if player:getMark("&yongning+EquipCard") > 0 then
					room:setPlayerMark(player, "&yongning+EquipCard", 0)
					room:removePlayerCardLimitation(player, "use,response,discard", "EquipCard$0")
					--room:removePlayerCardLimitation(player, "use,response", "EquipCard$0")
				end
			end
		end
	end
}

hongxiaoyin_qiannianmofashi:addSkill(yongning)

sgs.LoadTranslationTable{
	["yongning"] = "永宁",
	--[":yongning"] = "结束阶段，若你没有手牌或体力值为1，你可以令一名其他角色不能使用、打出或弃置你指定类别的牌直到其下个回合结束时。",
	[":yongning"] = "结束阶段，若你没有手牌或体力值为1，你可以指定一名角色，<font color='#A9A9A9'>发动此技能</font>。其不能使用、打出、弃置你指定类别的牌直到其下个回合结束时。",
	["$yongning"] = "",
	["@yongning"] = "你可以发动“永宁”，令一名角色不能使用、打出或弃置指定类别的牌",
	--["@yongning"] = "你可以发动“永宁”，令一名角色不能使用、打出指定类别的牌",
	["#yongning_log"] = "由于“%arg”的效果，%to 不能使用、打出或弃置 %arg2 直到 %to 的下个回合结束时",
	--["#yongning_log"] = "由于“%arg”的效果，%to 不能使用、打出 %arg2 直到 %to 的下个回合结束时",
	["@yongning_BasicCard"] = "永宁-基本",
	["@yongning_TrickCard"] = "永宁-锦囊",
	["@yongning_EquipCard"] = "永宁-装备",
	["yongning_choice_log"] = "令目标不能使用或打出对应类别的牌",
}

--------------------------------------------------
--咏咒（咒诀）
--------------------------------------------------

yongzhou = sgs.CreateTriggerSkill{
	name = "yongzhou",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.TargetSpecified, sgs.TrickCardCanceling},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TrickCardCanceling then	--跳过对应的无懈询问
			local effect = data:toCardEffect()
			if effect.from and effect.from:hasSkill(self:objectName()) and player and player:getHp() >= effect.from:getHp() then return true end
		elseif event == sgs.TargetSpecified and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local use = data:toCardUse()
			if use.card and use.card:isNDTrick() then
				local trigger = false
				local no_respond_list = use.no_respond_list	--不可响应目标列表
				for _, target in sgs.qlist(use.to) do
					if target:getHp() >= player:getHp() and player:canEffect(target, self:objectName()) then
						trigger = true
						table.insert(no_respond_list, target:objectName())
					end
				end
				if trigger then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				end
				use.no_respond_list = no_respond_list
				data:setValue(use)
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

hongxiaoyin_qiannianmofashi:addSkill(yongzhou)

sgs.LoadTranslationTable{
	["yongzhou"] = "咒诀",
	[":yongzhou"] = "锁定技，体力值不小于你的角色无法响应你使用的普通锦囊牌。",
	["$yongzhou"] = "",
}

--------------------------------------------------
--网瘾巫女 秋凛子
--设计者：NSX
--------------------------------------------------

qiulinzi_wangyinwunv = sgs.General(extension,"qiulinzi_wangyinwunv","psp","4",false)

sgs.LoadTranslationTable{
	["qiulinzi_wangyinwunv"] = "秋凛子",
	["&qiulinzi_wangyinwunv"] = "秋凛子",
	["#qiulinzi_wangyinwunv"] = "网瘾巫女",
	["$qiulinzi_wangyinwunv"] = "简单",
	["designer:qiulinzi_wangyinwunv"] = "NSX",
	["cv:qiulinzi_wangyinwunv"] = "",
	["illustrator:qiulinzi_wangyinwunv"] = "Bison仓鼠",
	["~qiulinzi_wangyinwunv"] = "",
}

--------------------------------------------------
--礼崩（旧）
--------------------------------------------------
--[[
libeng = sgs.CreateTriggerSkill{
	name = "libeng",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.SlashMissed},
	on_trigger = function(self, event, player, data, room)
		local effect = data:toSlashEffect()
		if effect.from and effect.to and effect.from:hasSkill(self:objectName()) and (not effect.from:isKongcheng()) and (not effect.to:isKongcheng()) then
			if room:askForSkillInvoke(effect.from, self:objectName(), data) then
				room:sendCompulsoryTriggerLog(effect.from, self:objectName())	--显示锁定技发动
				room:doAnimate(1, effect.from:objectName(), effect.to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				local success = effect.from:pindian(effect.to, self:objectName(), nil)
				if success then
					--依然造成伤害
					room:slashResult(effect, nil)
				else
					effect.from:drawCards(1, self:objectName())
				end
			end
		end
		return false
	end,
	can_trigger = function(self, target)
        return target
    end
}

qiulinzi_wangyinwunv:addSkill(libeng)

sgs.LoadTranslationTable{
	["libeng"] = "礼崩",
	[":libeng"] = "当你使用的【杀】被目标角色的【闪】抵消时，你可以与其进行一次拼点：若你赢，此【杀】依然造成伤害；否则你摸一张牌。",
	["$libeng1"] = "",
	["$libeng2"] = "",
}

--------------------------------------------------
--礼崩
--------------------------------------------------

libeng = sgs.CreateTriggerSkill{
	name = "libeng",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecified},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if not use.from or use.from:objectName() ~= player:objectName() then return false end
			if use.card and use.card:isKindOf("Slash") then
				local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
				local index = 1
				local has_success = false
				for _, target in sgs.qlist(use.to) do
					--if not player:isKongcheng() and not target:isKongcheng() and target:objectName() ~= player:objectName() then
					if player:canPindian(target) then
						local data2 = sgs.QVariant()	--askForSkillInvoke会变为“你想对 player 发动...”
						data2:setValue(target)
						if room:askForSkillInvoke(player, self:objectName(), data2) and not SkillNullify(player, self:objectName()) then
							room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
							room:broadcastSkillInvoke(self:objectName())	--播放配音
							if not player:canEffect(target, self:objectName()) then continue end
							local success = player:pindian(target, "libeng", nil)
							if success then
								jink_table[index] = 0
								has_success = true
							end
						end
					end
					index = index + 1
				end
				local jink_data = sgs.QVariant()
				jink_data:setValue(Table2IntList(jink_table))
				player:setTag("Jink_" .. use.card:toString(), jink_data)
				if has_success then
					room:addPlayerHistory(player, use.card:getClassName(), -1)
				end
			end
		end
	end
}

qiulinzi_wangyinwunv:addSkill(libeng)

sgs.LoadTranslationTable{
	["libeng"] = "礼崩",
	[":libeng"] = "你使用【杀】指定其他角色为目标后，你可以依次对目标角色<font color='#A9A9A9'>发动此技能</font>，你与其拼点：若你赢，其不可以使用【闪】响应此【杀】、此【杀】不计入出牌阶段的使用次数。",
	["$libeng1"] = "",
	["$libeng2"] = "",
}]]

--------------------------------------------------
--礼崩
--------------------------------------------------

libeng_buff = sgs.CreateTargetModSkill{
	name = "#libeng_buff",
	pattern = ".",
	residue_func = function(self, from, card, to)
		if from:hasSkill("libeng") and card and card:isKindOf("Slash") and from:getMark("&libeng") > 0 then
			return 1000
		end
	end
}
libengcard = sgs.CreateSkillCard{
	name = "libeng",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if sgs.Self:canPindian(to_select) then
				return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "libeng")
			end
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		--if not SkillNullify(source, self:objectName()) then
			local success = source:pindian(targets[1], "libeng", self)
			if success then
				room:addPlayerMark(source, "&libeng", 1)
			else
				local log = sgs.LogMessage()
				log.type = "#xingmao_log"
				log.to:append(source)
				log.arg = self:objectName()
				log.arg2 = "slash"
				room:sendLog(log)	--发送信息框消息
				
				room:setPlayerMark(source, "libeng_cannot_use", 1)
				room:setPlayerMark(source, "libeng_limit+use+Slash", 1)
				room:setPlayerCardLimitation(source, "use", "Slash", false)
			end
		--end
	end
}
libeng_vs = sgs.CreateViewAsSkill{
	name = "libeng",
	n = 1,
	view_filter = function(self, selected, to_select)
		if #selected == 0 then
			return not to_select:isEquipped()
		end
		return false
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = libengcard:clone()
			NewSkillCard:addSubcard(cards[1])
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:getMark("libeng_cannot_use") == 0 and player:canPindian()
	end
}
libeng = sgs.CreateTriggerSkill{
	name = "libeng",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = libeng_vs,
	events = {sgs.TargetSpecified, sgs.PreCardUsed, sgs.PreCardResponded},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if (event == sgs.PreCardUsed or event == sgs.PreCardResponded) and player:getMark("&libeng") > 0 then
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and card:isKindOf("Slash") then
				room:removePlayerMark(player, "&libeng", 1)
				room:setCardFlag(card, "libeng_card")
			end
		elseif event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if use.card and use.card:isKindOf("Slash") and use.card:hasFlag("libeng_card") then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:setCardFlag(use.card, "-libeng_card")
				local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
				local index = 1
				for _, p in sgs.qlist(use.to) do
					--room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					jink_table[index] = 0
					index = index + 1
				end
				local jink_data = sgs.QVariant()
				jink_data:setValue(Table2IntList(jink_table))
				player:setTag("Jink_" .. use.card:toString(), jink_data)
			end
		end
	end 
}
table.insert(play_end_clear_mark, "libeng_cannot_use")	--出牌结束清除标记
table.insert(play_end_limit_card_prefix, "libeng_limit")	--封印直到出牌结束

qiulinzi_wangyinwunv:addSkill(libeng)
qiulinzi_wangyinwunv:addSkill(libeng_buff)

sgs.LoadTranslationTable{
	["libeng"] = "礼崩",
	["#libeng_buff"] = "礼崩",
	[":libeng"] = "出牌阶段，你可以与一名角色拼点：若你赢，你使用的下一张【杀】无次数限制且不能被【闪】响应；若你没赢，本阶段你不能使用【杀】、不能发动此技能。",
	["$libeng"] = "",
	["^libeng"] = "操作提示：<br/>选择一张用于拼点的手牌→选择一名角色→确定",
}

--------------------------------------------------
--超度
--------------------------------------------------
--[[
chaodu = sgs.CreateTriggerSkill{
	name = "chaodu",
	events = {sgs.Death,sgs.EventPhaseEnd},
	on_trigger = function(self, event, player, data, room)
		global = true
		local room = player:getRoom()
		if event == sgs.Death and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local death = data:toDeath()
			local splayer = death.who
			if splayer:objectName() == player:objectName() or splayer:isNude() then return false end
			if death.damage.card and death.damage.card:isKindOf("Slash") and death.damage and death.damage.from:objectName() == player:objectName() then
				if room:askForSkillInvoke(player, self:objectName(), data) then 
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					local cards = splayer:getCards("he")
					for _,card in sgs.qlist(cards) do
						dummy:addSubcard(card)
					end
					if cards:length() > 0 then
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_RECYCLE, player:objectName())
						room:obtainCard(player, dummy, reason, false)
					end
					dummy:deleteLater()
				end
				if room:getCurrent():objectName() == player:objectName() then
				--卡牌上限-1直到本回合结束
					room:addPlayerMark(player, "#chaodu_card_down", 1)
				end
			end
		elseif event == sgs.EventPhaseEnd then --建议用phasechange
			if player:getPhase() == sgs.Player_Finish then
				if player:getMark("#chaodu_card_down") > 0 then
					room:setPlayerMark(player,"#chaodu_card_down",0)
				end
			end
		end
	end
}

chaodu_card = sgs.CreateMaxCardsSkill{
	name = "#chaodu_card" ,
	extra_func = function(self, player)
		if player and player:isAlive() then
			return -player:getMark("#chaodu_card_down")
		end
	end
}

qiulinzi_wangyinwunv:addSkill(chaodu)
qiulinzi_wangyinwunv:addSkill(chaodu_card)
extension:insertRelatedSkills("chaodu", "#chaodu_card")

sgs.LoadTranslationTable{
	["chaodu"] = "超度",
	[":chaodu"] = "当你使用【杀】使一名其他角色离场时，你可以获得其区域内的所有牌，然后若你在你的回合内发动本技能，则你的手牌上限-1至本回合结束。",
	["$chaodu1"] = "",
	["$chaodu2"] = "",
}
]]

--------------------------------------------------
--超度（新版）
--------------------------------------------------

chaodu = sgs.CreateTriggerSkill{
	name = "chaodu",
	events = {sgs.Death},
	frequency = sgs.Skill_NotFrequent,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Death then
			local death = data:toDeath()
			if death.damage and death.damage.card and death.damage.card:isKindOf("Slash") and death.who then
				local choices = {"chaodu_draw", "chaodu_counter", "cancel"}
				--if player:isWounded() then
					table.insert(choices, 1, "chaodu_recover")
				--end
				death.who:setFlags("chaodu_target_AI")
				local choice = room:askForChoice(player, self:objectName(), table.concat(choices, "+"))
				death.who:setFlags("-chaodu_target_AI")
				if choice ~= "cancel" then
					local logg = sgs.LogMessage()
					logg.from = player
					logg.type = "#InvokeSkill"
					logg.arg = self:objectName()
					room:sendLog(logg)	--显示技能发动提示信息
					room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
					ChoiceLog(player, choice)
					if SkillNullify(player, self:objectName()) then	--询问技能无效化
						return false
					end
					if choice == "chaodu_draw" then
						player:drawCards(2, self:objectName())
					elseif choice == "chaodu_recover" then
						local recover = sgs.RecoverStruct()
						recover.who = player
						recover.recover = 1
						room:recover(player, recover)
					elseif choice == "chaodu_counter" and player:canEffect(death.who, self:objectName()) then
						room:doAnimate(1, player:objectName(), death.who:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						room:setEmotion(death.who, "death")
						--room:changeHero(death.who, "qiulinzi_token", false, true, false, true)	--变token版本
						room:addPlayerMark(death.who, "@skill_invalidity")
						for _, skill in sgs.qlist(death.who:getSkillList(false, true)) do	--getSkillList 参数1：是否包含装备技能 参数2：是否只列出可见技能
							room:addPlayerMark(death.who, "Qingcheng"..skill:objectName())
							for _, sk in sgs.qlist(sgs.Sanguosha:getRelatedSkills(skill:objectName())) do
								room:addPlayerMark(death.who, "Qingcheng"..sk:objectName())
							end
						end
					end
				end
			end
		end
	end
}

qiulinzi_wangyinwunv:addSkill(chaodu)

sgs.LoadTranslationTable{
	["chaodu"] = "超度",
	--[":chaodu"] = "你造成伤害使一名角色离场时，你可以摸两张牌、将其武将牌替换为秋凛子Token（无技能）。",
	[":chaodu"] = "当一名其他角色因受到【杀】的伤害而离场时，你可以<font color='#A9A9A9'>发动此技能</font>，选择一项：1.摸两张牌；2.回复1点体力；3.令其技能失效。",
	["$chaodu1"] = "",
	["$chaodu2"] = "",
	["chaodu_draw"] = "摸两张牌",
	["chaodu_recover"] = "回复1点体力",
	["chaodu_counter"] = "令离场者技能失效",
}


--秋凛子Token

--[[
qiulinzi_token = sgs.General(extension,"qiulinzi_token","psp","3",false,true,true)

sgs.LoadTranslationTable{
	["qiulinzi_token"] = "秋凛子Token",
	["&qiulinzi_token"] = "秋凛子",
	["#qiulinzi_token"] = "衍生物",
	["designer:qiulinzi_token"] = "萌龙少主",
	["cv:qiulinzi_token"] = "",
	["illustrator:qiulinzi_token"] = "",
	["~qiulinzi_token"] = "",
}
]]

--------------------------------------------------
--热爱生活 步玎
--设计者：NSX
--------------------------------------------------
--[[
buding_reaishenghuo = sgs.General(extension,"buding_reaishenghuo","psp","3",false)

sgs.LoadTranslationTable{
	["buding_reaishenghuo"] = "步玎·热",
	["&buding_reaishenghuo"] = "步玎",
	["#buding_reaishenghuo"] = "热爱生活",
	["designer:buding_reaishenghuo"] = "NSX",
	["cv:buding_reaishenghuo"] = "",
	["illustrator:buding_reaishenghuo"] = "",
	["~buding_reaishenghuo"] = "",
}

--------------------------------------------------
--助友
--------------------------------------------------

zhuyou_reaishenghuo_buding_vup_card = sgs.CreateSkillCard{
	name = "zhuyou_reaishenghuo_buding_vup",
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets < 1 then
			return to_select:objectName() ~= sgs.Self:objectName()
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), target:objectName(), self:objectName(), "")
		room:moveCardTo(self, target, sgs.Player_PlaceHand, reason, true)
		
		if card:isKindOf("EquipCard") then
			if not target:isLocked(card) and not target:isProhibited(target, card) then
				room:useCard(sgs.CardUseStruct(card, target, target))
			end
		end
	end
}
zhuyou_reaishenghuo_buding_vup_vs = sgs.CreateOneCardViewAsSkill{
	name = "zhuyou_reaishenghuo_buding_vup",
	filter_pattern = ".|.|.|hand",
	view_as = function(self, card)
		local cards = zhuyou_reaishenghuo_buding_vup_card:clone()
		cards:addSubcard(card)
		return cards
	end,
	enabled_at_play = function()
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@zhuyou_reaishenghuo_buding_vup"
	end
}
zhuyou_reaishenghuo_buding_vup = sgs.CreateTriggerSkill{
	name = "zhuyou_reaishenghuo_buding_vup",
	events = {sgs.EventPhaseEnd},
	view_as_skill = zhuyou_reaishenghuo_buding_vup_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseEnd then
			if player:getPhase() == sgs.Player_Draw and not player:isKongcheng() then
				room:askForUseCard(player, "@@zhuyou_reaishenghuo_buding_vup", "@zhuyou_reaishenghuo_buding_vup")
			end
		end
		return false
	end
}

--buding_reaishenghuo:addSkill(zhuyou_reaishenghuo_buding_vup)

sgs.LoadTranslationTable{
	["zhuyou_reaishenghuo_buding_vup"] = "助友",
	[":zhuyou_reaishenghuo_buding_vup"] = "摸牌阶段结束时，你可以将一张手牌正面向上交给一名其他角色，若此牌为装备牌则令其使用之。",
	["@zhuyou_reaishenghuo_buding_vup"] = "你可以使用“助友”，交出一张手牌，若为装备牌则令目标角色使用之",
	["~zhuyou_reaishenghuo_buding_vup"] = "选择一张牌→选择一名角色→确定",
	["$zhuyou_reaishenghuo_buding_vup1"] = "",
	["$zhuyou_reaishenghuo_buding_vup2"] = "",
}

--------------------------------------------------
--烘焙
--------------------------------------------------

hongbei_card = sgs.CreateSkillCard{
	name = "hongbei",
	target_fixed = false,
	will_throw = true,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName()
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		if target:isAlive() then
			local card_ids = {}
			for _, id in sgs.qlist(room:getDrawPile()) do
				local cd = sgs.Sanguosha:getCard(id)
				if cd:isKindOf("Peach") or cd:isKindOf("Analeptic") then
					table.insert(card_ids, id)
				end
			end
			if #card_ids > 0 then
				target:obtainCard(sgs.Sanguosha:getCard(card_ids[math.random(1, #card_ids)]), true)
			end
		end
	end
}
hongbei = sgs.CreateViewAsSkill{
	name = "hongbei",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return to_select:getSuit() == sgs.Card_Heart
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = hongbei_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#hongbei") < 1
	end
}

--buding_reaishenghuo:addSkill(hongbei)

sgs.LoadTranslationTable{
	["hongbei"] = "烘焙",
	[":hongbei"] = "出牌阶段限一次，你可以弃置一张红桃牌，令一名其他角色从牌堆随机获得一张【桃】或【酒】。",
	["$hongbei1"] = "",
	["$hongbei2"] = "",
}
]]
--------------------------------------------------
--巧心觅友 步玎
--设计者：萌龙少主
--------------------------------------------------

buding_qiaoxinmiyou = sgs.General(extension,"buding_qiaoxinmiyou","psp","3",false)

sgs.LoadTranslationTable{
	["buding_qiaoxinmiyou"] = "步玎",
	["&buding_qiaoxinmiyou"] = "步玎",
	["#buding_qiaoxinmiyou"] = "巧心觅友",
	["$buding_qiaoxinmiyou"] = "简单",
	["designer:buding_qiaoxinmiyou"] = "萌龙少主",
	["cv:buding_qiaoxinmiyou"] = "",
	["illustrator:buding_qiaoxinmiyou"] = "",
	["~buding_qiaoxinmiyou"] = "",
}

--------------------------------------------------
--天巧
--------------------------------------------------

tianqiao_prohibit_fix = sgs.CreateProhibitSkill{	--禁止丈八蛇矛转化天巧牌
	name = "#tianqiao_prohibit_fix",
	is_prohibited = function(self, from, to, card)
		if from and from:hasSkill("tianqiao") and card:isKindOf("Slash") and card:getSkillName() == "spear" then
			for _,id in sgs.qlist(card:getSubcards()) do
				if id == from:getMark("tianqiao_id") then
					return true
				end
			end
		end
	end
}
tianqiao = sgs.CreateTriggerSkill{
	name = "tianqiao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardsMoveOneTime, sgs.BeforeCardsMove, sgs.PreCardUsed, sgs.PreCardResponded, sgs.CardUsed, sgs.CardResponded, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if player and player:isAlive() and player:hasSkill(self:objectName()) then
			if (event == sgs.BeforeCardsMove or event == sgs.CardsMoveOneTime) and player:getPhase() == sgs.Player_Play then
				if event == sgs.BeforeCardsMove then
					local dmove = data:toMoveOneTime()
					for _, p in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
						if (dmove.from_places:contains(sgs.Player_DrawPile) and dmove.card_ids:contains(p:getMark("tianqiao_id")))
						or dmove.to_place == sgs.Player_DrawPile then
							local move = sgs.CardsMoveStruct(p:getMark("tianqiao_id"), p, nil, sgs.Player_PlaceSpecial, sgs.Player_PlaceTable,
							sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, p:objectName(),self:objectName() , ""))
							move.from_pile_name = "&tianqiao"
							local moves = sgs.CardsMoveList()
							moves:append(move)
							local players = sgs.SPlayerList()
							players:append(p)
							room:notifyMoveCards(true, moves, false, players)
							room:notifyMoveCards(false, moves, false, players)
							room:setPlayerMark(p, "tianqiao_triggering", 0)
						end
					end
				elseif event == sgs.CardsMoveOneTime then
					for _, p in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
						if p:getMark("tianqiao_triggering") == 0 and p:getMark("tianqiao_used") == 0 then
							if room:getDrawPile():isEmpty() then
								room:swapPile()
							end
							local id = room:getDrawPile():first()
							local move = sgs.CardsMoveStruct(id, nil, p, sgs.Player_PlaceTable, sgs.Player_PlaceSpecial,
							sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, p:objectName(),self:objectName() , ""))
							move.to_pile_name = "&tianqiao"
							local moves = sgs.CardsMoveList()
							moves:append(move)
							local players = sgs.SPlayerList()
							players:append(p)
							room:notifyMoveCards(true, moves, false, players)
							room:notifyMoveCards(false, moves, false, players)
							room:addPlayerMark(p, "tianqiao_triggering")
							room:setPlayerMark(p, "tianqiao_id", id)
						end
					end
				end
			elseif event == sgs.EventPhaseChanging then
				local change = data:toPhaseChange()
				if change.from == sgs.Player_Play then
					room:setPlayerMark(player, "tianqiao_used", 0)
					if player:getMark("tianqiao_triggering") > 0 then
						local move = sgs.CardsMoveStruct(player:getMark("tianqiao_id"), player, nil, sgs.Player_PlaceSpecial, sgs.Player_PlaceTable,
						sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(),self:objectName() , ""))
						move.from_pile_name = "&tianqiao"
						local moves = sgs.CardsMoveList()
						moves:append(move)
						local players = sgs.SPlayerList()
						players:append(player)
						room:notifyMoveCards(true, moves, false, players)
						room:notifyMoveCards(false, moves, false, players)
						room:setPlayerMark(player, "tianqiao_triggering", 0)
					end
				end
				if change.to == sgs.Player_Play and not player:isSkipped(sgs.Player_Play) then
					room:setPlayerMark(player, "tianqiao_used", 0)
					if player:getMark("tianqiao_triggering") == 0 then
						if room:getDrawPile():isEmpty() then
							room:swapPile()
						end
						local id = room:getDrawPile():first()
						local move = sgs.CardsMoveStruct(id, nil, player, sgs.Player_PlaceTable, sgs.Player_PlaceSpecial,
						sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(),self:objectName() , ""))
						move.to_pile_name = "&tianqiao"
						local moves = sgs.CardsMoveList()
						moves:append(move)
						local players = sgs.SPlayerList()
						players:append(player)
						room:notifyMoveCards(true, moves, false, players)
						room:notifyMoveCards(false, moves, false, players)
						room:addPlayerMark(player, "tianqiao_triggering")
						room:setPlayerMark(player, "tianqiao_id", id)
					end
				end
			elseif (event == sgs.PreCardUsed or event == sgs.PreCardResponded or event == sgs.CardUsed or event == sgs.CardResponded) and player:getMark("tianqiao_used") == 0 then	--不是所有牌都有Pre时机
				local card
				if event == sgs.PreCardUsed or event == sgs.CardUsed then
					card = data:toCardUse().card
				else
					card = response.m_card
				end
				if card then
					local trigger = false
					if card:getEffectiveId() == player:getMark("tianqiao_id") then
						trigger = true
					else
						for _,id in sgs.qlist(card:getSubcards()) do
							if id == player:getMark("tianqiao_id") then
								trigger = true
								break
							end
						end
					end
					if trigger then
						room:broadcastSkillInvoke(self:objectName())
						room:setPlayerMark(player, "tianqiao_id", 999)	--设置为一个没有对应牌的id
						room:setPlayerMark(player, "tianqiao_used", 1)
						room:notifySkillInvoked(player, self:objectName())
						local msg = sgs.LogMessage()
						msg.type = '#InvokeSkill'
						msg.from = player
						msg.arg = self:objectName()
						room:sendLog(msg)
						--return true		--静音
						
						if player:getMark("tianqiao_triggering") > 0 then
							local move = sgs.CardsMoveStruct(player:getMark("tianqiao_id"), player, nil, sgs.Player_PlaceSpecial, sgs.Player_PlaceTable,
							sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(),self:objectName() , ""))
							move.from_pile_name = "&tianqiao"
							local moves = sgs.CardsMoveList()
							moves:append(move)
							local players = sgs.SPlayerList()
							players:append(player)
							room:notifyMoveCards(true, moves, false, players)
							room:notifyMoveCards(false, moves, false, players)
							room:setPlayerMark(player, "tianqiao_triggering", 0)
						end
					end
				end
			end
			return false
		end
	end
}

buding_qiaoxinmiyou:addSkill(tianqiao)
buding_qiaoxinmiyou:addSkill(tianqiao_prohibit_fix)

sgs.LoadTranslationTable{
	["tianqiao"] = "天巧",
	["#tianqiao_prohibit_fix"] = "天巧",
	--[":tianqiao"] = "出牌阶段内限一次，你可以将牌堆顶的牌如手牌般使用或打出。",
	[":tianqiao"] = "出牌阶段内<font color='#9400D3'>牌堆顶的牌</font>对你可见。<br/>你可以使用或打出<font color='#9400D3'>此牌</font>，本阶段内此技能失效。",
	["&tianqiao"] = "天巧",
	["$tianqiao"] = "（特效音）",
}

--------------------------------------------------
--宴灵
--------------------------------------------------

yanlingbuff = sgs.CreateMaxCardsSkill{
	name = "#yanlingbuff",
	extra_func = function(self, target)
		if target:getMark("@yanling") > 0 then
			local can_trigger = false
			for _, p in sgs.qlist(target:getSiblings()) do
				if p:hasSkill("yanling") and p:isAlive() then
					can_trigger = true
					break
				end
			end
			if can_trigger or target:hasSkill("yanling") then
				return 1
			end
		end
	end
}
yanling = sgs.CreateTriggerSkill{
	name = "yanling",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.GameStart, sgs.Dying},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart and player and player:isAlive() and player:hasSkill(self:objectName()) then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			--room:broadcastSkillInvoke(self:objectName(), 2) --播放配音
			player:gainMark("@yanling", 3)
		elseif event == sgs.Dying and player:getMark("@yanling") > 0 then
			local dying = data:toDying()
			local _data = sgs.QVariant()
			_data:setValue(dying.who)
			if dying.who and dying.who:objectName() ~= player:objectName() and dying.who:getHp() < 1 then
				if player:askForSkillInvoke(self:objectName(), _data) and not SkillNullify(player, self:objectName()) and player:canEffect(dying.who, self:objectName()) then
					room:doAnimate(1, player:objectName(), dying.who:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					--room:broadcastSkillInvoke(self:objectName(), 1) --播放配音
					player:loseMark("@yanling", 1)
					dying.who:gainMark("@yanling", 1)
					
					local recover = sgs.RecoverStruct()
					recover.who = player
					recover.recover = 1
					room:recover(dying.who, recover)
				end
			end
		end
		return false
	end,
}

buding_qiaoxinmiyou:addSkill(yanling)
buding_qiaoxinmiyou:addSkill(yanlingbuff)

sgs.LoadTranslationTable{
	["yanling"] = "宴灵",
	["#yanlingbuff"] = "宴灵",
	[":yanling"] = "游戏开始时，你获得3枚“糕点”标记，有“糕点”的角色手牌上限＋1。一名其他角色进入濒危状态时，你可以<font color='#A9A9A9'>发动此技能</font>，交给其一枚“糕点”，令其回复1点体力。",
	["@yanling"] = "糕点",
	["$yanling1"] = "",
	["$yanling2"] = "",
}

--------------------------------------------------
--面包人 亦枝YY
--设计者：NSX
--------------------------------------------------

yizhiyy_mianbaoren = sgs.General(extension,"yizhiyy_mianbaoren","psp","4",true)

sgs.LoadTranslationTable{
	["yizhiyy_mianbaoren"] = "亦枝YY",
	["&yizhiyy_mianbaoren"] = "亦枝YY",
	["#yizhiyy_mianbaoren"] = "面包人",
	["$yizhiyy_mianbaoren"] = "进阶",
	["designer:yizhiyy_mianbaoren"] = "NSX",
	["cv:yizhiyy_mianbaoren"] = "",
	["illustrator:yizhiyy_mianbaoren"] = "",
	["~yizhiyy_mianbaoren"] = "",
}

--------------------------------------------------
--卓识
--------------------------------------------------
--[[
zhuoshi = sgs.CreateTriggerSkill{
	name = "zhuoshi",
	frequency = sgs.Skill_Frequent,
	events = {sgs.CardUsed},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardUsed then
			local use = data:toCardUse()
			if use.card:isKindOf("TrickCard") then
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					player:drawCards(1, self:objectName())
					if not player:isNude() then
						local card = room:askForCard(player, ".|.|.|hand,equipped!", "@zhuoshi_card", data, sgs.Card_MethodNone)	--加!用于强制选择
						if not card then
							card = player:getCards("he"):at(math.random(0, player:getCards("he"):length()-1))	--若未选择成功则随机选一张
						end
						if card then
							if player:getMark("&zhuoshi!") < 2 then
								local to = room:askForPlayerChosen(player, room:getOtherPlayers(player), self:objectName(), "@zhuoshi_giveplayer:" .. card:objectName(), true, false)
								if to then
									room:addPlayerMark(player, "&zhuoshi!", 1)
									room:doAnimate(1, player:objectName(), to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
									local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), to:objectName(), self:objectName(), "")
									room:moveCardTo(card, to, sgs.Player_PlaceHand, reason, false)
								else
									room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), self:objectName(), nil), player)
								end
							else
								room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), self:objectName(), nil), player)
							end
						end
					end
				end
			end
			return false
		end
	end
}
table.insert(turn_end_clear_mark, "&zhuoshi!")	--回合结束清除标记

yizhiyy_mianbaoren:addSkill(zhuoshi)

sgs.LoadTranslationTable{
	["zhuoshi"] = "卓识",
	--[":zhuoshi"] = "你使用锦囊牌时，你可以摸一张牌，然后弃置一张牌或将一张装备牌交给一名其他角色。",
	[":zhuoshi"] = "你使用锦囊牌时，你可以<font color='#A9A9A9'>发动此技能</font>，摸一张牌，选择一项：1.弃置一张牌 2.将一张牌交给一名其他角色（每回合限2次）。",
	["$zhuoshi"] = "",
	["@zhuoshi_card"] = "请选择要弃置/交出的牌<br/>操作提示：选择一张牌→确定",
	["@zhuoshi_giveplayer"] = "你可以弃置 %src ，或将此牌交给一名其他角色<br/>操作提示：<br/>交出：选择一名角色→确定<br/>弃置：取消",
	["zhuoshi_give"] = "交出此牌",
	["zhuoshi_discard"] = "弃置此牌",
}]]

--------------------------------------------------
--卓识
--------------------------------------------------

zhuoshi_card = sgs.CreateSkillCard{
	name = "zhuoshi",
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets < 1 then
			for _,id in sgs.qlist(self:getSubcards()) do
				local card = sgs.Sanguosha:getCard(id)
				if card:isKindOf("BasicCard") and sgs.Self:getMark("zhuoshi_BasicCard") > 0 then
					return false
				elseif card:isKindOf("TrickCard") and sgs.Self:getMark("zhuoshi_TrickCard") > 0 then
					return false
				elseif card:isKindOf("EquipCard") and sgs.Self:getMark("zhuoshi_EquipCard") > 0 then
					return false
				end
			end
			return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "zhuoshi")
		end
		return false
	end,
	feasible = function(self, targets)
		if self:subcardsLength() > 1 then
			return #targets == 1
		end
		return self:subcardsLength() == 1
	end,
	on_use = function(self, room, source, targets)
		if #targets > 0 then
			local target = targets[1]
			
			local before_types = {}
			if source:getMark("zhuoshi_BasicCard") > 0 then
				table.insert(before_types, "basic_short")
			end
			if source:getMark("zhuoshi_TrickCard") > 0 then
				table.insert(before_types, "trick_short")
			end
			if source:getMark("zhuoshi_EquipCard") > 0 then
				table.insert(before_types, "equip_short")
			end
			if #before_types > 0 then
				room:setPlayerMark(source, "&zhuoshi+"..table.concat(before_types, "+"), 0)
			end
			
			for _,id in sgs.qlist(self:getSubcards()) do
				local card = sgs.Sanguosha:getCard(id)
				if card:isKindOf("BasicCard") then
					room:setPlayerMark(source, "zhuoshi_BasicCard", 1)
				elseif card:isKindOf("TrickCard") then
					room:setPlayerMark(source, "zhuoshi_TrickCard", 1)
				elseif card:isKindOf("EquipCard") then
					room:setPlayerMark(source, "zhuoshi_EquipCard", 1)
				end
			end
			
			local after_types = {}
			if source:getMark("zhuoshi_BasicCard") > 0 then
				table.insert(after_types, "basic_short")
			end
			if source:getMark("zhuoshi_TrickCard") > 0 then
				table.insert(after_types, "trick_short")
			end
			if source:getMark("zhuoshi_EquipCard") > 0 then
				table.insert(after_types, "equip_short")
			end
			if #after_types > 0 then
				room:setPlayerMark(source, "&zhuoshi+"..table.concat(after_types, "+"), 1)
			end
			
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), target:objectName(), self:objectName(), "")
			room:moveCardTo(self, target, sgs.Player_PlaceHand, reason, false)
		else
			room:throwCard(self, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, source:objectName(), self:objectName(), nil), source)
		end
	end
}
zhuoshi_vs = sgs.CreateViewAsSkill{
	name = "zhuoshi",
	n = 3,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		if #selected == 0 then
			return true
		elseif #selected < 3 then
			for _,card in ipairs(selected) do
				if to_select:getTypeId() == card:getTypeId() then
					return false
				end
				
				if card:isKindOf("BasicCard") and sgs.Self:getMark("zhuoshi_BasicCard") > 0 then
					return false
				elseif card:isKindOf("TrickCard") and sgs.Self:getMark("zhuoshi_TrickCard") > 0 then
					return false
				elseif card:isKindOf("EquipCard") and sgs.Self:getMark("zhuoshi_EquipCard") > 0 then
					return false
				end
			end
			if to_select:isKindOf("BasicCard") and sgs.Self:getMark("zhuoshi_BasicCard") > 0 then
				return false
			elseif to_select:isKindOf("TrickCard") and sgs.Self:getMark("zhuoshi_TrickCard") > 0 then
				return false
			elseif to_select:isKindOf("EquipCard") and sgs.Self:getMark("zhuoshi_EquipCard") > 0 then
				return false
			end
			return true
		end
		return false
	end,
	view_as = function(self, cards)
		local new = zhuoshi_card:clone()
		if #cards ~= 0 then
			for _, c in ipairs(cards) do
				new:addSubcard(c)
			end
		end
		return new
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@zhuoshi!"
	end
}
zhuoshi = sgs.CreateTriggerSkill{
	name = "zhuoshi",
	frequency = sgs.Skill_Compulsory,
	view_as_skill = zhuoshi_vs,
	events = {sgs.CardUsed},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardUsed then
			local use = data:toCardUse()
			if use.card:isKindOf("TrickCard") then
				--if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					player:drawCards(1, self:objectName())
					if player:isAlive() and not player:isNude() then
						local next_str = ""
						local type_str = "zhuoshi_type_" .. player:getMark("zhuoshi_BasicCard") + player:getMark("zhuoshi_TrickCard")*2 + player:getMark("zhuoshi_EquipCard")*4
						if type_str ~= "zhuoshi_type_7" then
							next_str = "zhuoshi_can_give"
						end
						room:askForUseCard(player, "@@zhuoshi!", "@zhuoshi:"..next_str..":"..type_str)
					end
				--end
			end
			return false
		end
	end
}
table.insert(turn_end_clear_mark_prefix, "&zhuoshi+")	--回合结束清除指定前缀的标记
table.insert(turn_end_clear_mark_prefix, "zhuoshi_")	--回合结束清除指定前缀的标记

yizhiyy_mianbaoren:addSkill(zhuoshi)

sgs.LoadTranslationTable{
	["zhuoshi"] = "卓识",
	[":zhuoshi"] = "锁定技，你使用锦囊牌时，你摸一张牌，然后弃置一张牌或将任意张牌交给一名其他角色。<br/>以此法交出的牌每回合每种类型限一张。",
	["$zhuoshi"] = "",
	["@zhuoshi"] = "你须弃置一张牌%src%dest",
	["zhuoshi_can_give"] = "，或将任意张类别不同的牌交给一名角色<br/>你可以交出 ",
	["zhuoshi_type_0"] = "基本牌、锦囊牌、装备牌",
	["zhuoshi_type_1"] = "锦囊牌、装备牌",
	["zhuoshi_type_2"] = "基本牌、装备牌",
	["zhuoshi_type_3"] = "装备牌",
	["zhuoshi_type_4"] = "基本牌、锦囊牌",
	["zhuoshi_type_5"] = "锦囊牌",
	["zhuoshi_type_6"] = "基本牌",
	["zhuoshi_type_7"] = "",
	["~zhuoshi"] = "<br/>交出：选择若干张牌→选择一名角色→确定<br/>弃置：选择一张牌→确定",
}

--------------------------------------------------
--法棍
--------------------------------------------------

fagun = sgs.CreateTriggerSkill{
	name = "fagun",
	global = true,
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardsMoveOneTime, sgs.EventPhaseChanging, sgs.DamageInflicted},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getPhase() ~= sgs.Player_NotActive then
			local move = data:toMoveOneTime()
			if (move.from and move.from:objectName() == player:objectName()) and (bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD) and move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_DISMANTLE and player:getMark("fagun_effect") == 0 then
				for _, card_id in sgs.qlist(move.card_ids) do
					local card = sgs.Sanguosha:getCard(card_id)
					if card:isRed() and card:isKindOf("BasicCard") and player:getMark("@fagun_effect") == 0 then
						room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
						room:setPlayerMark(player, "@fagun_effect", 1)
						break
					end
				end
			end
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.from == sgs.Player_NotActive and change.to ~= sgs.Player_NotActive and player:getMark("@fagun_effect") > 0 then
				room:setPlayerMark(player, "@fagun_effect", 0)
			end
		elseif event == sgs.DamageInflicted and player:getMark("@fagun_effect") > 0 then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.card and damage.card:isRed() then
				if damage.nature == sgs.DamageStruct_Light then return false end
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				return true
			end
		end
	end
}

yizhiyy_mianbaoren:addSkill(fagun)

sgs.LoadTranslationTable{
	["fagun"] = "法棍",
	--[":fagun"] = "锁定技，弃牌阶段，若你弃置了红色基本牌，则直到你的下回合开始前，防止你受到的红色牌造成的伤害。",
	[":fagun"] = "锁定技，若你于回合内弃置了红色基本牌，则直到你的下回合开始前，防止你受到的红色牌造成的伤害。",
	["$fagun"] = "",
	["@fagun_effect"] = "法棍",
}

--------------------------------------------------
--角色特性：毒奶
--------------------------------------------------

characteristic_dunai = sgs.CreateTriggerSkill{
	name = "#characteristic_dunai",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart, sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		if not player or player:getState() == "robot" or player:getState() == "offline" then
			return false
		end
		if event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			
			if move.from and move.from:objectName() == player:objectName() and move.from:hasSkill(self:objectName())
			and not (move.to and (move.to:objectName() == player:objectName() and (move.to_place == sgs.Player_PlaceHand or move.to_place == sgs.Player_PlaceEquip))) and move.reason.m_reason == sgs.CardMoveReason_S_REASON_GIVE
			then
				--Player類型轉至ServerPlayer
				local move_from
				local move_to
				for _,p in sgs.qlist(room:getAlivePlayers()) do
					if p:objectName() == move.from:objectName() then
						move_from = p
					end
					if p:objectName() == move.to:objectName() then
						move_to = p
					end
				end
				
				if math.random(1, 100) <= 20 + player:getMark("dunai_counter") * 10 then
					room:sendCompulsoryTriggerLog(player, "characteristic_dunai")	--显示锁定技发动
					room:loseHp(move_to, 1, move_from, self:objectName())
					if player:getMark("dunai_counter") < 8 then
						room:setPlayerMark(player, "&characteristic_dunai+"..(2+player:getMark("dunai_counter")).."0%", 0)
						room:addPlayerMark(player, "dunai_counter", 1)
						room:setPlayerMark(player, "&characteristic_dunai+"..(2+player:getMark("dunai_counter")).."0%", 1)
					end
				end
			end
		elseif event == sgs.GameStart then
			room:setPlayerMark(player, "&characteristic_dunai+20%", 1)
		end
	end,
}
characteristic_dunai_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_dunai_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_dunai_state)
yizhiyy_mianbaoren:addSkill(characteristic_dunai)
yizhiyy_mianbaoren:addRelateSkill("characteristic_dunai_state")

sgs.LoadTranslationTable{
	["characteristic_dunai"] = "毒奶",
	["#characteristic_dunai"] = "毒奶",
	["characteristic_dunai_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_dunai_state"] = "<font color='#DAA520'><b>毒奶</b></font><br/><font color='red'>此特性仅玩家操控时有效（电脑操控、离线时不生效）<br/><font color='#DAA520'>你将牌交给一名其他角色后，20%令其回复－1点体力值。每次触发后，此概率上升10%。</font>",
	["$characteristic_dunai_state"] = "",
	["#dunai_curse"] = "%to【%arg】被 %from 奶死了，无伤害来源",	--耦合入源码的部分：因此技能失去体力而离场时，改为发送#dunai_curse
}

--------------------------------------------------
--冰原狼王 莲汰
--设计者：NSX
--------------------------------------------------

liantai_bingyuanlangwang = sgs.General(extension,"liantai_bingyuanlangwang","psp","4",true)

sgs.LoadTranslationTable{
	["liantai_bingyuanlangwang"] = "莲汰",
	["&liantai_bingyuanlangwang"] = "莲汰",
	["#liantai_bingyuanlangwang"] = "冰原狼王",
	["$liantai_bingyuanlangwang"] = "简单",
	["designer:liantai_bingyuanlangwang"] = "NSX",
	["cv:liantai_bingyuanlangwang"] = "",
	["illustrator:liantai_bingyuanlangwang"] = "",
	["~liantai_bingyuanlangwang"] = "",
}

--------------------------------------------------
--逐猎
--------------------------------------------------

zhulie = sgs.CreateTargetModSkill{
	name = "zhulie",
	pattern = ".",
	residue_func = function(self, from, card, to)
		if from:hasSkill("zhulie") and card and card:isRed() then
			return 1000
		end
	end,
	distance_limit_func = function(self, from, card)
		if from:hasSkill("zhulie") and card and card:isBlack() then	--用self:objectName()偶然会崩溃
			return 1000
		end
	end
}

liantai_bingyuanlangwang:addSkill(zhulie)

sgs.LoadTranslationTable{
	["zhulie"] = "逐猎",
	[":zhulie"] = "锁定技，你使用红色牌无次数限制，你使用黑色牌无距离限制。",
	["$zhulie"] = "",
}

--------------------------------------------------
--混音
--------------------------------------------------

hunyin = sgs.CreateTriggerSkill{
	name = "hunyin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.TargetSpecified},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start and room:getDrawPile():length() >= 2 and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
			local is_different_color = false
			
			if getColorString(sgs.Sanguosha:getCard(room:getDrawPile():first())) ~= getColorString(sgs.Sanguosha:getCard(room:getDrawPile():at(1))) then
				is_different_color = true
			end
			
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			dummy:addSubcard(room:getDrawPile():first())
			dummy:addSubcard(room:getDrawPile():at(1))
			
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PREVIEW, player:objectName(), nil, self:objectName(), nil)
			room:moveCardTo(dummy, player, nil, sgs.Player_DrawPile, reason, true)	--展示后会倒序放回牌堆顶，需要调整
			
			local log = sgs.LogMessage()
			log.type = "#hunyin_log"
			log.from = player
			log.arg = self:objectName()
			
			if is_different_color then
				room:setPlayerMark(player, "&hunyin_buff", 1)
				log.arg2 = "hunyin_different"
			else
				log.arg2 = "hunyin_same"
			end
			
			room:sendLog(log)	--发送信息框消息
			
			if player:askForSkillInvoke("hunyin_throw", sgs.QVariant("choice:" .. "")) then
				local log = sgs.LogMessage()
				log.type = "#hunyin_throw_log"
				log.from = player
				log.arg = 2
				room:sendLog(log)	--发送信息框消息
				
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
				room:moveCardTo(dummy, player, nil, sgs.Player_DiscardPile, reason, true)
			else
				local put1_ids, put2_ids = sgs.IntList(), sgs.IntList()	--通过看不见的方式将牌堆顶的两张牌换位置
				local put_ids = room:getNCards(2)
				put1_ids:append(put_ids:last())
				put2_ids:append(put_ids:first())
				room:askForGuanxing(player, put2_ids, sgs.Room_GuanxingUpOnly)
				room:askForGuanxing(player, put1_ids, sgs.Room_GuanxingUpOnly)
			end
			dummy:deleteLater()
		elseif event == sgs.TargetSpecified and player:getMark("&hunyin_buff") > 0 then
			local use = data:toCardUse()
			if use.from and player:objectName() == use.from:objectName() and use.card and use.card:isKindOf("Slash") then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
				local index = 1
				for _, p in sgs.qlist(use.to) do
					--room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					jink_table[index] = 0
					index = index + 1
				end
				local jink_data = sgs.QVariant()
				jink_data:setValue(Table2IntList(jink_table))
				player:setTag("Jink_" .. use.card:toString(), jink_data)
			end
		end
	end 
}
table.insert(turn_end_clear_mark, "&hunyin_buff")	--回合结束清除标记

liantai_bingyuanlangwang:addSkill(hunyin)

sgs.LoadTranslationTable{
	["hunyin"] = "混音",
	[":hunyin"] = "准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，展示<font color='#9400D3'>牌堆顶的两张牌</font>，可以将<font color='#9400D3'>之</font>置入弃牌堆。若<font color='#9400D3'>这些牌</font>颜色不同，本回合你使用的【杀】不能被【闪】响应。",
	["$hunyin"] = "",
	["hunyin_buff"] = "混音",
	[":mark:&hunyin_buff"] = "本回合使用的【杀】不能被【闪】响应",
	["hunyin_throw"] = "混音",
	["hunyin_throw:choice"] = "你可以将展示的牌置入弃牌堆",
	["#hunyin_throw_log"] = "%from 将 %arg 张牌置入弃牌堆",
	["hunyin_different"] = "颜色不同",
	["hunyin_same"] = "颜色相同",
	["#hunyin_log"] = "%from 的“%arg”展示结果为：%arg2",
}

--------------------------------------------------
--星国萌猫 星之谷米娅
--设计者：NSX
--------------------------------------------------

xingzhigumiya_mengmao = sgs.General(extension,"xingzhigumiya_mengmao","psp","3",false,false,false,2)

sgs.LoadTranslationTable{
	["xingzhigumiya_mengmao"] = "星之谷米娅",
	["&xingzhigumiya_mengmao"] = "星之谷米娅",
	["#xingzhigumiya_mengmao"] = "星国萌猫",
	["$xingzhigumiya_mengmao"] = "简单",
	["designer:xingzhigumiya_mengmao"] = "NSX",
	["cv:xingzhigumiya_mengmao"] = "",
	["illustrator:xingzhigumiya_mengmao"] = "",
	["~xingzhigumiya_mengmao"] = "",
}

--------------------------------------------------
--薄纱
--（2021.1.12）兼容了无效和中途获得
--（2022.11.15）改成了回合开始时失去的普通技能
--------------------------------------------------

baosha_buff = sgs.CreateProhibitSkill{
	name = "#baosha_buff",
	is_prohibited = function(self, from, to, card)
		return to:hasSkill("baosha") and not card:isKindOf("SkillCard")
	end
}
baosha = sgs.CreateTriggerSkill{
	name = "baosha",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging then
			if data:toPhaseChange().from == sgs.Player_NotActive and data:toPhaseChange().to ~= sgs.Player_NotActive then
				if player:hasSkill(self:objectName()) then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					room:detachSkillFromPlayer(player, self:objectName())
				end
			end
		end
	end,
}

xingzhigumiya_mengmao:addSkill(baosha)
xingzhigumiya_mengmao:addSkill(baosha_buff)

sgs.LoadTranslationTable{
	["baosha"] = "薄纱",
	["#baosha_buff"] = "薄纱",
	--[":baosha"] = "锁定技，你的第一个回合开始前，你不是所有角色使用牌的合法目标。",
	[":baosha"] = "锁定技，你不是所有角色使用牌的合法目标。回合开始时，你失去此技能。",
	["$baosha"] = "",
}

--------------------------------------------------
--衔尾
--（2021.1.3）不能使用装备
--（2021.1.9）需要先受伤才能发动
--------------------------------------------------

--[[xianwei_buff = sgs.CreateProhibitSkill{
	name = "#xianwei_buff",
	is_prohibited = function(self, from, to, card)
		return from:hasSkill(self:objectName()) and from:getMark("&xianwei_count!") > 0 and from:objectName() ~= to:objectName() and not card:isKindOf("SkillCard")
	end
}]]
xianwei_vs = sgs.CreateViewAsSkill{
	name = "xianwei",
	n = 999,
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, cards, to_select)
		if #cards < sgs.Self:getMark("&xianwei_count!") + 1 then
			return not sgs.Self:isJilei(to_select) --and not to_select:isEquipped()
		end
		return false
	end,
	view_as = function(self, cards)
		if #cards ~= sgs.Self:getMark("&xianwei_count!") + 1 then return nil end
		local card = sgs.Sanguosha:cloneCard("ex_nihilo", sgs.Card_NoSuit, 0)
		for _,cd in pairs(cards) do
			card:addSubcard(cd)
		end
		card:setSkillName(self:objectName())
		return card
	end,
	enabled_at_play = function(self, player)
		--[[local cantrigger = true
		for _,cd in sgs.qlist(player:getHandcards()) do
			if cd:isAvailable(player) then
				cantrigger = false
				break
			end
		end]]
		return player:isWounded()
	end,
}
xianwei = sgs.CreateTriggerSkill{
	name = "xianwei",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.PreCardUsed},
	view_as_skill = xianwei_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PreCardUsed then
			if data:toCardUse().card:getSkillName() == "xianwei" then
				room:addPlayerMark(player, "&xianwei_count!", 1)
			end
		end
	end,
}
table.insert(play_end_clear_mark, "&xianwei_count!")	--出牌结束清除标记

xingzhigumiya_mengmao:addSkill(xianwei)
--xingzhigumiya_mengmao:addSkill(xianwei_buff)

sgs.LoadTranslationTable{
	["xianwei"] = "衔尾",
	--["#xianwei_buff"] = "衔尾",
	[":xianwei"] = "出牌阶段，若你已受伤，你可以将X＋1张牌当【无中生有】使用。（X为本阶段内你以此法使用【无中生有】的次数）",
	["$xianwei"] = "",
	["xianwei_count"] = "衔尾",
}

--------------------------------------------------
--星猫
--（2020.12.26 萌佬）修正日志：游戏记录增加显示因星猫而不能使用基本牌
--------------------------------------------------

xingmao = sgs.CreateTriggerSkill{
	name = "xingmao",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.SlashMissed},
	on_trigger = function(self, event, player, data, room)
		local effect = data:toSlashEffect()
		if effect.to and effect.to:hasSkill(self:objectName()) and effect.from and effect.from:isAlive() and effect.to:canEffect(effect.from, self:objectName()) then
			room:sendCompulsoryTriggerLog(effect.to, self:objectName())	--显示锁定技发动
			room:doAnimate(1, effect.to:objectName(), effect.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
			room:setPlayerMark(effect.from, "&xingmao+BasicCard", 1)
			--room:setPlayerCardLimitation(effect.from, "use", "BasicCard", true)
			room:setPlayerMark(effect.from, "xingmao_limit+use+BasicCard", 1)
			room:setPlayerCardLimitation(effect.from, "use", "BasicCard", false)
			
			local log = sgs.LogMessage()
			log.type = "#xingmao_log"
			log.to:append(effect.from)
			log.arg = self:objectName()
			log.arg2 = "BasicCard"
			room:sendLog(log)	--发送信息框消息
		end
		return false
	end,
    can_trigger = function(self, target)
        return target
    end
}
table.insert(turn_end_clear_mark, "&xingmao+BasicCard")	--回合结束清除标记
table.insert(turn_end_limit_card_prefix, "xingmao_limit")	--封印直到回合结束

xingzhigumiya_mengmao:addSkill(xingmao)

sgs.LoadTranslationTable{
	["xingmao"] = "星猫",
	[":xingmao"] = "锁定技，你使用【闪】响应【杀】后，此【杀】的使用者本回合不能使用基本牌。",
	["$xingmao"] = "",
	["#xingmao_log"] = "由于“%arg”的效果，%to 本回合不能使用 %arg2",
}

--------------------------------------------------
--初入星途 东爱璃
--设计者：空月
--------------------------------------------------

dongaili_xingtu = sgs.General(extension,"dongaili_xingtu","psp","3",false)

sgs.LoadTranslationTable{
	["dongaili_xingtu"] = "东爱璃",
	["&dongaili_xingtu"] = "东爱璃",
	["#dongaili_xingtu"] = "初入星途",
	["designer:dongaili_xingtu"] = "空月之羽",
	["cv:dongaili_xingtu"] = "",
	["illustrator:dongaili_xingtu"] = "Bison仓鼠",
	["~dongaili_xingtu"] = "",
}

--------------------------------------------------
--咏星
--（2020.12.25 萌佬）修正日志：增加了锁定技的发动信息
--（2020.12.26 萌佬）修正日志：技能按钮变成锁定技按钮
--------------------------------------------------

yongxing = sgs.CreateTriggerSkill{
	name = "yongxing",
	frequency = sgs.Skill_Compulsory,	--这才是锁定技
	events = {sgs.Damage},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if not damage.from or damage.from:objectName() ~= player:objectName() then return false end
		local X = damage.damage
		for i = 0, X-1, 1 do
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			player:drawCards(1, self:objectName())
		end
		return false
	end
}

dongaili_xingtu:addSkill(yongxing)

sgs.LoadTranslationTable{
	["yongxing"] = "咏星",
	[":yongxing"] = "锁定技，你造成1点伤害后，摸一张牌。",
	["$yongxing"] = "",
}

--------------------------------------------------
--扬歌
--（2020.12.25 萌佬）修正日志：修复了造成伤害后获得本技能，伤害不被计入的问题
--------------------------------------------------

yangge = sgs.CreateTriggerSkill{
	name = "yangge",
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			if not player:hasFlag("damage_caused_ruqin") and not player:isSkipped(sgs.Player_Play) then		--本回合未造成伤害改用儒琴
				if room:askForSkillInvoke(player, self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					if room:askForDiscard(player, "yangge", 1, 1, true, false, "@yangge") then
						local new_card = sgs.Sanguosha:cloneCard("god_salvation", sgs.Card_NoSuit, 0)
						new_card:setSkillName("yangge")
						if player:canUse(new_card) then
							room:useCard(sgs.CardUseStruct(new_card, player, nil))
						end
					else
						player:turnOver()
						local new_card = sgs.Sanguosha:cloneCard("savage_assault", sgs.Card_NoSuit, 0)
						new_card:setSkillName("yangge")
						if player:canUse(new_card) then
							room:useCard(sgs.CardUseStruct(new_card, player, nil))
						end
					end
				end
			end
		end
		return false
	end
}

dongaili_xingtu:addSkill(yangge)

sgs.LoadTranslationTable{
	["yangge"] = "扬歌",
	[":yangge"] = "结束阶段，若你未于本回合内造成过伤害，你可以<font color='#A9A9A9'>发动此技能</font>选择一项：1.翻面，视为使用一张【南蛮入侵】；2.弃置一张手牌，视为使用一张【桃园结义】。",
	["@yangge"] = "请弃置一张手牌，视为使用 桃园结义<br/>否则你翻面，视为使用 南蛮入侵<br/><br/>操作提示：<br/>①桃园结义：选择一张手牌→确定；<br/>②南蛮入侵：取消。",
}

--------------------------------------------------
--猫猫头 南音乃
--设计者：NSX
--------------------------------------------------

nanyinnai_maomaotou = sgs.General(extension,"nanyinnai_maomaotou","psp","3",false)

sgs.LoadTranslationTable{
	["nanyinnai_maomaotou"] = "南音乃",
	["&nanyinnai_maomaotou"] = "南音乃",
	["#nanyinnai_maomaotou"] = "猫猫头",
	["designer:nanyinnai_maomaotou"] = "NSX",
	["cv:nanyinnai_maomaotou"] = "",
	["illustrator:nanyinnai_maomaotou"] = "",
	["~nanyinnai_maomaotou"] = "",
}

--------------------------------------------------
--隐游
--------------------------------------------------

yinyou_card = sgs.CreateSkillCard{
	name = "yinyou",
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets < 1 then
			return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "yinyou")
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), target:objectName(), self:objectName(), "")
		room:moveCardTo(self, target, sgs.Player_PlaceHand, reason, false)
		
		source:drawCards(1, self:objectName())
		room:setPlayerMark(source, "&yinyou_slash", 1)
		room:setPlayerMark(source, "yinyou_limit+use+Slash", 1)
		room:setPlayerCardLimitation(source, "use", "Slash", false)
	end
}
yinyou_vs = sgs.CreateViewAsSkill{
	name = "yinyou",
	n = 999,
	view_filter = function(self, selected, to_select)
		--if #selected < 2 then
			return not to_select:isEquipped()
		--else
		--	return false
		--end
	end,
	view_as = function(self, cards)
		if #cards < 2 then return nil end
		local new = yinyou_card:clone()
		if #cards ~= 0 then
			for _, c in ipairs(cards) do
				new:addSubcard(c)
			end
		end
		return new
	end,
	enabled_at_play = function()
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@yinyou"
	end
}
yinyou = sgs.CreateTriggerSkill{
	name = "yinyou",
	events = {sgs.EventPhaseStart},
	view_as_skill = yinyou_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Play and not player:isKongcheng() then
				room:askForUseCard(player, "@@yinyou", "@yinyou")
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark, "&yinyou_slash")	--回合结束清除标记
table.insert(turn_end_limit_card_prefix, "yinyou_limit")	--封印直到回合结束

nanyinnai_maomaotou:addSkill(yinyou)

sgs.LoadTranslationTable{
	["yinyou"] = "隐游",
	[":yinyou"] = "出牌阶段开始时，你可以将至少两张手牌交给一名其他角色，你摸一张牌，本回合不能使用【杀】。",
	["@yinyou"] = "你可以使用“隐游”，交出至少两张手牌，摸一张牌，本回合不能用杀",
	["~yinyou"] = "选择若干张牌→选择一名角色→确定",
	["$yinyou"] = "",
	["yinyou_slash"] = "隐游",
	[":mark:&yinyou_slash"] = "本回合不能使用【杀】",
}

--------------------------------------------------
--闲歌
--------------------------------------------------

xiange_card = sgs.CreateSkillCard{
	name = "xiange",
	will_throw = true,
	filter = function(self, targets, to_select)
		return to_select:objectName() ~= sgs.Self:objectName() and not ((#targets ~= 0) or (not sgs.Self:canDiscard(to_select, "hej"))) and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		if self:getSubcards():isEmpty() then
			room:loseHp(effect.from)
		--else
		--	room:throwCard(self, effect.from)
		end
		if not SkillNullify(effect.from, self:objectName()) then
			for i = 1, 2, 1 do
				if effect.from:canDiscard(effect.to, "hej") then
					room:throwCard(room:askForCardChosen(effect.from, effect.to, "hej", "xiange", false, sgs.Card_MethodDiscard), effect.to, effect.from)
				end
			end
		end
	end
}
xiange = sgs.CreateViewAsSkill{
	name = "xiange",
	n = 1,
	view_filter = function(self, selected, to_select)
		return (#selected == 0) and to_select:isKindOf("TrickCard")
	end ,
	view_as = function(self, cards)
		if #cards <= 1 then
			local xiange_card = xiange_card:clone()
			if #cards == 1 then
				xiange_card:addSubcard(cards[1])
			end
			xiange_card:setSkillName("xiange")
			return xiange_card
		else
			return nil
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#xiange") < 1 --#后面接的是skillcard的objectName而不是技能名。
	end
}

nanyinnai_maomaotou:addSkill(xiange)

sgs.LoadTranslationTable{
	["xiange"] = "闲歌",
	[":xiange"] = "出牌阶段限一次，你可以失去1点体力或弃置一张锦囊牌，指定一名其他角色<font color='#A9A9A9'>发动此技能</font>，依次破坏其区域内的两张牌。",
	["$xiange"] = "",
	["^xiange"] = "操作提示：<br/>①弃锦囊牌发动：选择一张锦囊牌→选择一名角色→确定<br/>②失去体力发动：选择一名角色→确定",
}

--------------------------------------------------
--魔态授课 北柚香
--设计者：NSX
--------------------------------------------------

beiyouxiang_motaishouke = sgs.General(extension,"beiyouxiang_motaishouke","psp","4",false)

sgs.LoadTranslationTable{
	["beiyouxiang_motaishouke"] = "北柚香",
	["&beiyouxiang_motaishouke"] = "北柚香",
	["#beiyouxiang_motaishouke"] = "魔态授课",
	["$beiyouxiang_motaishouke"] = "进阶",
	["designer:beiyouxiang_motaishouke"] = "NSX",
	["cv:beiyouxiang_motaishouke"] = "",
	["illustrator:beiyouxiang_motaishouke"] = "",
	["~beiyouxiang_motaishouke"] = "",
}

--------------------------------------------------
--作业
--------------------------------------------------

zuoye = sgs.CreateTriggerSkill{
	name = "zuoye",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if player:getPhase() == sgs.Player_Finish and player:getHandcardNum() < player:getHp() then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getOtherPlayers(player)) do
				if SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			local to
			if not targets:isEmpty() then
				to = room:askForPlayerChosen(player, targets, self:objectName(), "@zuoye-invoke", true, true)
			end
			if to and not SkillNullify(player, self:objectName()) then
				room:broadcastSkillInvoke(self:objectName())	--播放配音
				to:drawCards(2, self:objectName())
				room:getThread():delay(250)
				
				if to:isDead() then
					return false
				end
				
				local targets = sgs.SPlayerList()
				for _, vic in sgs.qlist(room:getOtherPlayers(to)) do
					if to:canSlash(vic) then
						targets:append(vic)
					end
				end
				local victim
				if not targets:isEmpty() then
					to:setFlags("zuoye_target_AI")	--AI用
					victim = room:askForPlayerChosen(player, targets, self:objectName(), "@dummy-slash2:" .. to:objectName(), false, false)
					to:setFlags("-zuoye_target_AI")	--AI用
				end
				if victim and victim:isAlive() then
					room:doAnimate(1, to:objectName(), victim:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					local log = sgs.LogMessage()
					log.type = "#zuoye_slash_victim_log"
					log.from = to
					log.arg = self:objectName()
					log.to:append(victim)
					room:sendLog(log)	--发送信息框消息
					if not room:askForUseSlashTo(to, victim, "#zuoye_slash_use:" .. victim:objectName()) then
						to:turnOver()
					end
				else
					to:turnOver()
				end
			end
		end
	end 
}

beiyouxiang_motaishouke:addSkill(zuoye)

sgs.LoadTranslationTable{
	["zuoye"] = "作业",
	[":zuoye"] = "结束阶段，若你的手牌数小于体力值，你可以指定一名其他角色，<font color='#A9A9A9'>发动此技能</font>，令其摸两张牌，然后其须对其攻击范围内你选择的另一名角色使用一张【杀】，否则其翻面。",
	["$zuoye"] = "",
	["@zuoye-invoke"] = "你可以发动“作业”，令一名角色摸牌，然后其须对你选定的目标出杀，否则翻面",
	["#zuoye_slash_victim_log"] = "由于“%arg”的效果，%from 须对 %to 使用杀，否则翻面",
	["#zuoye_slash_use"] = "请对 %src 使用一张【杀】，否则你翻面",
}

--------------------------------------------------
--即位魔王 西魔幽
--设计者：NSX
--------------------------------------------------

ximoyou_jiweimowang = sgs.General(extension,"ximoyou_jiweimowang","psp","3",true)

sgs.LoadTranslationTable{
	["ximoyou_jiweimowang"] = "西魔幽",
	["&ximoyou_jiweimowang"] = "西魔幽",
	["#ximoyou_jiweimowang"] = "即位魔王",
	["$ximoyou_jiweimowang"] = "简单",
	["designer:ximoyou_jiweimowang"] = "NSX",
	["cv:ximoyou_jiweimowang"] = "",
	["illustrator:ximoyou_jiweimowang"] = "",
	["~ximoyou_jiweimowang"] = "",
}

ximoyou_king = sgs.General(extension,"ximoyou_king","psp","3",true,true,true)	--魔王形态

sgs.LoadTranslationTable{
	["ximoyou_king"] = "西魔幽·王",
	["&ximoyou_king"] = "西魔幽",
	["#ximoyou_king"] = "魔王",
	["parent:ximoyou_king"] = "ximoyou_jiweimowang",	--本体角色名
	["designer:ximoyou_king"] = "",
	["cv:ximoyou_king"] = "",
	["illustrator:ximoyou_king"] = "",
	["~ximoyou_king"] = "",
}

--------------------------------------------------
--阴谋
--------------------------------------------------

yinmou = sgs.CreateViewAsSkill{
	name = "yinmou",
	n = 1,
	--expand_pile = "wooden_ox",	--允许使用木牛流马
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return to_select:isBlack() and (to_select:isKindOf("TrickCard") or to_select:isKindOf("Weapon"))
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local first = cards[1]
			local ncard = sgs.Sanguosha:cloneCard("duel", first:getSuit(), first:getNumber())
			ncard:addSubcard(first)
			ncard:setSkillName(self:objectName())
			return ncard
		end
	end,
	enabled_at_play = function(self, player)
		return true
	end,
	enabled_at_response = function(self, player, pattern)
		return false
	end
}

ximoyou_jiweimowang:addSkill(yinmou)
ximoyou_king:addSkill(yinmou)

sgs.LoadTranslationTable{
	["yinmou"] = "阴谋",
	[":yinmou"] = "你可以将一张黑色锦囊牌或黑色武器牌当【决斗】使用。",
	["$yinmou"] = "",
}

--------------------------------------------------
--幽炼
--------------------------------------------------

youlian = sgs.CreateTriggerSkill{
	name = "youlian",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start and player:getHp() <= 1 then
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					if player:getGeneralName() == "ximoyou_jiweimowang" then
						room:setPlayerProperty(player, "general", sgs.QVariant("anjiang"))	--更换武将卡面
						room:setEmotion(player, "youlian")
						room:broadcastSkillInvoke("audio_effect", 8)	--播放配音
						room:getThread():delay(4187)	--大约是16帧/秒
						room:broadcastSkillInvoke("audio_effect", 7)	--播放配音
						room:getThread():delay(1438)
						room:setEmotion(player, "revive")
						room:setPlayerProperty(player, "general", sgs.QVariant("ximoyou_king"))	--更换武将卡面
						--room:notifyProperty(player, player, "general", "ximoyou_king")	--假属性变化，变化只对第一个arg可见，其他人视角正常
						room:getThread():delay(1000)
					end
					room:acquireNextTurnSkills(player, self:objectName(), "moyi")	--获得技能直到下回合开始
					for _,p in sgs.qlist(room:getOtherPlayers(player)) do
						room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						room:setEmotion(p, "youlian_effect")
					end
					room:getThread():delay(1000)
					for _,p in sgs.qlist(room:getOtherPlayers(player)) do
						if not player:canEffect(p, self:objectName()) then continue end
						local card = room:askForCard(p, "TrickCard,EquipCard", "@youlian_give:"..player:objectName(), data, sgs.Card_MethodNone)
						if card then
							local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, p:objectName(), player:objectName(), self:objectName(), "")
							room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, true)
						else
							room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
							room:damage(sgs.DamageStruct(self:objectName(), player, p, 2, sgs.DamageStruct_Fire))
							room:setEmotion(p, "youlian_break")
						end
					end
				end
			end
		end
		return false
	end
}

ximoyou_jiweimowang:addSkill(youlian)
ximoyou_king:addSkill(youlian)

sgs.LoadTranslationTable{
	["youlian"] = "幽炼",
	[":youlian"] = "<font color='#4B0082'><b>变身技，</b></font>准备阶段，若你的体力值≤1，你可以<font color='#A9A9A9'>发动此技能</font>，获得“魔裔”直到下回合开始，令所有其他角色选择：1.交给你一张非基本牌 2.受到2点火焰伤害。",
	["$youlian"] = "",
	["@youlian_give"] = "请将一张非基本牌交给 %src ，否则你受到2点火焰伤害",
}

--------------------------------------------------
--双月ゆな りあ
--设计者：萌龙少主
--------------------------------------------------

shuangyue_yuezhishuangzi = sgs.General(extension,"shuangyue_yuezhishuangzi","psp","4",false)

sgs.LoadTranslationTable{
	["shuangyue_yuezhishuangzi"] = "双月ゆな りあ",
	["&shuangyue_yuezhishuangzi"] = "双月",
	["#shuangyue_yuezhishuangzi"] = "月之双子",
	["designer:shuangyue_yuezhishuangzi"] = "萌龙少主",
	["cv:shuangyue_yuezhishuangzi"] = "",
	["illustrator:shuangyue_yuezhishuangzi"] = "Bison仓鼠",
	["~shuangyue_yuezhishuangzi"] = "",
}

--------------------------------------------------
--月盈
--------------------------------------------------

yueyingbuff = sgs.CreateTargetModSkill{
	name = "#yueyingbuff",
	pattern = ".",
	distance_limit_func = function(self, from, card, to)
		local n = 0
		if card and card:isKindOf("Slash") and card:getSkillName() == "yueying" then
			n = n + 1000
		end
		return n
	end
}
yueying_card = sgs.CreateSkillCard{
	name = "yueying",
	target_fixed = false,
	will_throw = true,
	filter = function(self, targets, to_select)
		return to_select:objectName() == sgs.Self:objectName()
	end,
	on_use = function(self, room, source, targets)
		
	end
}
yueyingvs = sgs.CreateViewAsSkill{
	name = "yueying",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		local new_card
		if sgs.Self:getChangeSkillState(self:objectName()) <= 1 then
			new_card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		else
			new_card = yueying_card:clone()
		end
		for _, c in sgs.qlist(sgs.Self:getHandcards()) do
			if c:hasFlag("yueyingcard") then
				new_card:addSubcard(c:getId())
			end
		end
		new_card:setSkillName(self:objectName())
		return new_card
	end, 
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@yueying"
	end
}
yueying = sgs.CreateTriggerSkill{
	name = "yueying",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = yueyingvs,
	change_skill = true,
	events = {sgs.CardsMoveOneTime, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getMark("yueying_used") == 0 then
			local move = data:toMoveOneTime()
			if not room:getTag("FirstRound"):toBool() and move.to and move.to:objectName() == player:objectName() and move.to_place == sgs.Player_PlaceHand --[[and (not move.from or move.from:objectName() ~= move.to:objectName())]] and move.card_ids:length() > 0 then
				
				if player:getChangeSkillState(self:objectName()) <= 1 then
					for _,id in sgs.qlist(move.card_ids) do
						room:setCardFlag(sgs.Sanguosha:getCard(id), "yueyingcard")
					end
					room:setPlayerMark(player, "yueying_used", 1)	--暂时计一次，避免结算途中再触发技能
					player:setTag("yueying_data", data)
					if room:askForUseCard(player, "@@yueying", "@yueying:".."slash") then
						room:setChangeSkillState(player, self:objectName(), 2)
					else
						room:setPlayerMark(player, "yueying_used", 0)
					end
					player:removeTag("yueying_data")
					for _,id in sgs.qlist(move.card_ids) do
						room:setCardFlag(sgs.Sanguosha:getCard(id), "-yueyingcard")
					end
				else
					player:setTag("yueying_data", data)
					if room:askForUseCard(player, "@@yueying", "@yueying:".."ex_nihilo") then
						--room:broadcastSkillInvoke(self:objectName(), 1)	--播放配音
						room:setPlayerMark(player, "yueying_used", 1)
						local dummy = sgs.Sanguosha:cloneCard("ex_nihilo", sgs.Card_NoSuit, 0)
						for _,id in sgs.qlist(move.card_ids) do
							dummy:addSubcard(id)
						end
						dummy:setSkillName(self:objectName())
						
						local use = sgs.CardUseStruct()
						use.card = dummy
						use.from = player
						use.to:append(player)
						room:useCard(use)
						
						dummy:deleteLater()
						room:setChangeSkillState(player, self:objectName(), 1)
					end
					player:removeTag("yueying_data")
				end
			end
			return false
		elseif event == sgs.EventPhaseChanging and data:toPhaseChange().to == sgs.Player_NotActive and data:toPhaseChange().from ~= sgs.Player_NotActive then
			for _, p in sgs.qlist(room:getAlivePlayers()) do
				room:setPlayerMark(p, "yueying_used", 0)
			end
		end
	end,
    can_trigger = function(self, target)
        return target
    end
}

shuangyue_yuezhishuangzi:addSkill(yueying)
shuangyue_yuezhishuangzi:addSkill(yueyingbuff)

sgs.LoadTranslationTable{
	["yueying"] = "月盈",
	["#yueyingbuff"] = "月盈",
	[":yueying"] = "转换技，每回合限一次，你获得手牌后，你可以将获得的牌当<font color='#CB5063'>①【杀】（无距离限制） ②【无中生有】</font>使用。",
	[":yueying1"] = "转换技，每回合限一次，你获得手牌后，你可以将获得的牌当①【杀】（无距离限制） <font color=\"#01A5AF\"><s>②【无中生有】</s></font>使用。",
	[":yueying2"] = "转换技，每回合限一次，你获得手牌后，你可以将获得的牌当<font color=\"#01A5AF\"><s>①【杀】（无距离限制）</s></font> ②【无中生有】使用。",
	--["yueying:choice"] = "你可以使用“月盈”，将获得的牌当 无中生有 使用",
	["@yueying"] = "你可以使用“月盈”，将获得的牌当 %src 使用",
	["~yueying"] = "选择使用牌的目标→确定",
	["$yueying1"] = "",
	["$yueying2"] = "",
}

--------------------------------------------------
--阴阳师 夏鹤仪
--设计者：NSX
--------------------------------------------------

xiaheyi_yinyangshi = sgs.General(extension,"xiaheyi_yinyangshi","psp","6",true,false,false,3)

sgs.LoadTranslationTable{
	["xiaheyi_yinyangshi"] = "夏鹤仪",
	["&xiaheyi_yinyangshi"] = "夏鹤仪",
	["#xiaheyi_yinyangshi"] = "阴阳师",
	["designer:xiaheyi_yinyangshi"] = "NSX",
	["cv:xiaheyi_yinyangshi"] = "",
	["illustrator:xiaheyi_yinyangshi"] = "",
	["~xiaheyi_yinyangshi"] = "",
}

xiaheyi_king = sgs.General(extension,"xiaheyi_king","psp","3",true,true,true)	--魔王形态

sgs.LoadTranslationTable{
	["xiaheyi_king"] = "夏鹤仪·王",
	["&xiaheyi_king"] = "夏鹤仪",
	["#xiaheyi_king"] = "魔王",
	["parent:xiaheyi_king"] = "xiaheyi_yinyangshi",	--本体角色名
	["designer:xiaheyi_king"] = "",
	["cv:xiaheyi_king"] = "",
	["illustrator:xiaheyi_king"] = "",
	["~xiaheyi_king"] = "",
}

--------------------------------------------------
--结印
--------------------------------------------------
--[[
jieyin_v = sgs.CreateTriggerSkill{
	name = "jieyin_v",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.TargetSpecified, sgs.TrickCardCanceling, sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TrickCardCanceling then	--跳过对应的无懈询问
			local effect = data:toCardEffect()
			if effect.from and effect.from:hasSkill(self:objectName()) and effect.card and effect.card:getSuit() == sgs.Card_Spade then return true end
		elseif event == sgs.CardFinished and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local use = data:toCardUse()
			if use.from and player:objectName() == use.from:objectName() and use.card and use.card:isBlack() then
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _,id in sgs.qlist(use.card:getSubcards()) do
					if room:getCardPlace(id) ~= sgs.Player_DiscardPile then
						dummy:addSubcard(id)
					end
				end
				if dummy:subcardsLength() > 0 and player:askForSkillInvoke(self:objectName(), data) then
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
					room:moveCardTo(dummy, player, nil, sgs.Player_DiscardPile, reason, true)
					player:drawCards(1, self:objectName())
				end
				dummy:deleteLater()
			end
		elseif event == sgs.TargetSpecified and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local use = data:toCardUse()
			if use.from and player:objectName() == use.from:objectName() and use.card and use.card:getSuit() == sgs.Card_Spade then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				local no_respond_list = use.no_respond_list	--不可响应目标列表
				for _, target in sgs.qlist(use.to) do
					table.insert(no_respond_list, target:objectName())
				end
				use.no_respond_list = no_respond_list
				data:setValue(use)
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}]]

jieyin_v = sgs.CreateViewAsSkill{
	name = "jieyin_v",
	n = 1,
	--response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return (not to_select:isEquipped()) and (to_select:getSuit() == sgs.Card_Spade)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local chain = sgs.Sanguosha:cloneCard("iron_chain", cards[1]:getSuit(), cards[1]:getNumber())
			chain:addSubcard(cards[1])
			chain:setSkillName(self:objectName())
			return chain
		end
	end
}

--xiaheyi_yinyangshi:addSkill(jieyin_v)
--xiaheyi_king:addSkill(jieyin_v)

sgs.LoadTranslationTable{
	["jieyin_v"] = "结印",
	[":jieyin_v"] = "你可以将一张黑桃手牌当【铁索连环】使用或重铸。",
	["$jieyin_v"] = "",
}

--------------------------------------------------
--禁咒
--------------------------------------------------

jinzhou_card = sgs.CreateSkillCard{
	name = "jinzhou",
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return #targets == 0 and self:subcardsLength() == math.max(to_select:getLostHp(), 1) and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		local return_ids = sgs.IntList()
		for _,id in sgs.qlist(self:getSubcards()) do
			return_ids:append(id)
		end
		if not return_ids:isEmpty() then
			room:shuffleIntoDrawPile(source, return_ids, self:objectName(), true)
		end
		room:addPlayerMark(target, "&jinzhou", 1)
		room:addPlayerMark(target, "jinzhou" .. source:objectName(), 1)
	end
}
jinzhou_vs = sgs.CreateViewAsSkill{
	name = "jinzhou",
	n = 999,
	view_filter = function(self, selected, to_select)
		return to_select:isBlack()
	end ,
	view_as = function(self, cards)
		if #cards > 0 then
			local jinzhou_card = jinzhou_card:clone()
			for _, card in ipairs(cards) do
				jinzhou_card:addSubcard(card)
			end
			jinzhou_card:setSkillName("jinzhou")
			return jinzhou_card
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#jinzhou") < 1 --#后面接的是skillcard的objectName而不是技能名。
	end
}
jinzhou = sgs.CreateTriggerSkill{
	name = "jinzhou",
	global = true,
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	view_as_skill = jinzhou_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Play then
			local X = player:getMark("&jinzhou")
			if X > 0 then
				for _,p in sgs.qlist(room:getAlivePlayers()) do
					if player:getMark("jinzhou"..p:objectName()) > 0 then
						room:sendCompulsoryTriggerLog(p, self:objectName())	--显示锁定技发动
						room:doAnimate(1, p:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						local lose = player:getMark("jinzhou"..p:objectName())
						room:loseHp(player, lose, p, self:objectName())
						room:getThread():delay(500)
						X = X - lose
						room:setPlayerMark(player, "jinzhou"..p:objectName(), 0)
					end
				end
				room:loseHp(player, X, nil, self:objectName())
				room:setPlayerMark(player, "&jinzhou", 0)
			end
		end
	end,
}

xiaheyi_yinyangshi:addSkill(jinzhou)
xiaheyi_king:addSkill(jinzhou)

sgs.LoadTranslationTable{
	["jinzhou"] = "禁咒",
	[":jinzhou"] = "出牌阶段限一次，你可以将X张黑色牌返回牌堆，指定一名角色，令其于其下个出牌阶段开始时失去1点体力。<br/>（X为其已损失的体力值且至少为1）",
	["$jinzhou"] = "",
	["^jinzhou"] = "操作提示：选择任意张牌→选择满足条件的一名角色→确定",
}

--------------------------------------------------
--鹤唳
--------------------------------------------------

heli = sgs.CreateTriggerSkill{
	name = "heli",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start and player:isKongcheng() and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				--room:setPlayerMark(player, self:objectName(), 1)
				room:loseMaxHp(player)
				if player:getGeneralName() == "xiaheyi_yinyangshi" then
					room:broadcastSkillInvoke(self:objectName(), 1)	--音乐
					room:getThread():delay(500)
					room:doAnimate(2, "skill=HeliAnim:", "")
					room:getThread():delay(4000)
					
					room:setEmotion(player, "revive")
					room:setPlayerProperty(player, "general", sgs.QVariant("xiaheyi_king"))	--更换武将卡面
				end
				--room:attachSkillToPlayer(player, "moyi")
				room:acquireNextTurnSkills(player, self:objectName(), "moyi")	--获得技能直到下回合开始
				for _,p in sgs.qlist(room:getOtherPlayers(player)) do
					room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					room:setEmotion(p, "youlian_effect")
				end
				room:getThread():delay(1000)
				for _,p in sgs.qlist(room:getOtherPlayers(player)) do
					if not player:canEffect(p, self:objectName()) then continue end
					local card = room:askForCard(p, ".|spade,club", "@heli_give:"..player:objectName(), data, sgs.Card_MethodNone)
					if card then
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, p:objectName(), player:objectName(), self:objectName(), "")
						room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, true)
					else
						room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						room:setEmotion(p, "youlian_break")
						room:damage(sgs.DamageStruct(self:objectName(), player, p, 2, sgs.DamageStruct_Thunder))
					end
				end
			end
		end
		return false
	end,
}

xiaheyi_yinyangshi:addSkill(heli)
xiaheyi_king:addSkill(heli)

sgs.LoadTranslationTable{
	["heli"] = "鹤唳",
	[":heli"] = "<font color='#4B0082'><b>变身技，</b></font>准备阶段，若你没有手牌，你可以<font color='#A9A9A9'>发动此技能</font>，失去1点体力上限，获得“魔裔”直到下回合开始，令所有其他角色选择：1.交给你一张黑色牌 2.受到2点雷电伤害。",
	["$heli1"] = "（变身音乐）",
	["$heli2"] = "",
	["@heli_give"] = "请将一张黑色牌交给 %src ，否则受到2点雷电伤害",
}

--------------------------------------------------
--魔裔
--------------------------------------------------

moyi = sgs.CreateFilterSkill{
	name = "moyi",
	view_filter = function(self, to_select)
		return to_select:getSuit() == sgs.Card_Heart
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName(self:objectName())
		new_card:setSuit(sgs.Card_Spade)
		new_card:setModified(true)
		return new_card
	end
}

vup_anjiang:addSkill(moyi)	--加给暗将
xiaheyi_yinyangshi:addRelateSkill("moyi")
xiaheyi_king:addRelateSkill("moyi")
ximoyou_jiweimowang:addRelateSkill("moyi")
ximoyou_king:addRelateSkill("moyi")

sgs.LoadTranslationTable{
	["moyi"] = "魔裔",
	[":moyi"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的红桃牌视为黑桃牌。",
	["$moyi"] = "",
}

--------------------------------------------------
--天际流星 星汐
--设计者：NSX
--------------------------------------------------

xingxi_tianjiliuxing = sgs.General(extension,"xingxi_tianjiliuxing","psp","4",false)

sgs.LoadTranslationTable{
	["xingxi_tianjiliuxing"] = "星汐",
	["&xingxi_tianjiliuxing"] = "星汐",
	["#xingxi_tianjiliuxing"] = "天际流星",
	["$xingxi_tianjiliuxing"] = "简单",
	["designer:xingxi_tianjiliuxing"] = "NSX",
	["cv:xingxi_tianjiliuxing"] = "",
	["illustrator:xingxi_tianjiliuxing"] = "",
	["~xingxi_tianjiliuxing"] = "你已经对我不温柔啦",
}

--------------------------------------------------
--星耀
--------------------------------------------------

xingyao = sgs.CreateTriggerSkill{
	name = "xingyao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecified, sgs.DamageCaused, sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetSpecified and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local use = data:toCardUse()
			if not use.from or use.from:objectName() ~= player:objectName() then return false end
			if use.card and use.card:isKindOf("Slash") then
				if room:askForSkillInvoke(player, self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					for _, p in sgs.qlist(use.to) do
						p:setFlags("xingyao_slash_target")	--AI用
					end
					
					local judge = sgs.JudgeStruct()
					judge.pattern = ".|heart"
					judge.who = player
					judge.reason = self:objectName()
					room:judge(judge)
					if judge:isGood() then
						room:setCardFlag(use.card, "xingyao_hit")
						
						local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
						local index = 1
						for _, p in sgs.qlist(use.to) do
							if jink_table[index] > 0 and player:canEffect(p, self:objectName()) then
								jink_table[index] = jink_table[index] + 1
							end
							index = index + 1
						end
						local jink_data = sgs.QVariant()
						jink_data:setValue(Table2IntList(jink_table))
						player:setTag("Jink_" .. use.card:toString(), jink_data)
					else
						for _, p in sgs.qlist(use.to) do
							if player:canEffect(p, self:objectName()) then
								room:addPlayerMark(p, "xingyao", 1)	--增加一个星耀标记，用于处理技能无效标记的移除
								room:addPlayerMark(p, "@skill_invalidity", 1)	--技能无效标记，此标记只要有便无效非锁定技（真方便啊）
								room:addPlayerMark(p, "Armor_Nullified", 1)	--防具无效标记
							end
						end
					end
					
					for _, p in sgs.qlist(use.to) do
						p:setFlags("-xingyao_slash_target")	--AI用
					end
				end
			end
		elseif event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage.card and damage.card:hasFlag("xingyao_hit") and not damage.chain --[[and not damage.transfer]] then
				damage.damage = damage.damage + 1
				data:setValue(damage)
			end
		elseif event == sgs.EventPhaseChanging and data:toPhaseChange().to == sgs.Player_NotActive and data:toPhaseChange().from ~= sgs.Player_NotActive then
			for _, p in sgs.qlist(room:getAllPlayers()) do
				if p:getMark("xingyao") > 0 then
					room:removePlayerMark(p, "@skill_invalidity", p:getMark("xingyao"))	--有几个星耀标记就移除几个技能无效标记
					room:removePlayerMark(p, "Armor_Nullified", p:getMark("xingyao"))	--有几个星耀标记就移除几个防具无效标记
					room:setPlayerMark(p, "xingyao", 0)
				end
			end
		end
	end
}

xingxi_tianjiliuxing:addSkill(xingyao)

sgs.LoadTranslationTable{
	["xingyao"] = "星耀",
	[":xingyao"] = "你使用【杀】指定目标后，你可以<font color='#A9A9A9'>发动此技能</font>，进行一次判定，若结果为：红桃，此【杀】伤害基数＋1、抵消所需【闪】的张数＋1；非红桃，目标角色的防具和非锁定技失效直到回合结束。",
	["$xingyao1"] = "把我惹不高兴了对着你的脸就是来一拳!",
	["$xingyao2"] = "给你两拳！",
}

--------------------------------------------------
--余光
--------------------------------------------------

yuguang = sgs.CreateTriggerSkill{
	name = "yuguang",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Death, sgs.RoundStart},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Death and player and data:toDeath().who:objectName() == player:objectName() then
			room:removeTag("yuguang_active_"..player:objectName())	--死亡时清除tag（解决复活再被打死时被超度的情况）
			if player:hasSkill(self:objectName()) and not SkillNullify(player, self:objectName()) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:setTag("yuguang_active_"..player:objectName(), sgs.QVariant(true))	--记录最后的濒危情况
			end
		elseif event == sgs.RoundStart and not (room:getTag("yuguang_last_triggered") and room:getTag("yuguang_last_triggered"):toInt() == room:getTag("TurnLengthCount"):toInt()) then		--轮次开始时时机，每名在场角色均作为player执行一遍此时机
			room:setTag("yuguang_last_triggered", sgs.QVariant(room:getTag("TurnLengthCount"):toInt()))		--记录已询问过余光的轮次
			for _,p in sgs.qlist(room:getAllPlayers(true)) do	--包括死亡角色
				if p:isDead() and room:getTag("yuguang_active_"..p:objectName()) and room:getTag("yuguang_active_"..p:objectName()):toBool() then
					local targets = sgs.SPlayerList()
					local max_card_num = 0 
					for _,to in sgs.qlist(room:getAlivePlayers()) do
						if to:getHandcardNum() > max_card_num then
							max_card_num = to:getHandcardNum()
						end
					end
					for _,to in sgs.qlist(room:getAlivePlayers()) do
						if p:canDiscard(to, "he") and to:getHandcardNum() == max_card_num and p:canEffect(to, self:objectName()) then
							targets:append(to)
						end
					end
					if not targets:isEmpty() then
						local to = room:askForPlayerChosen(p, targets, self:objectName(), "#yuguang_choose", true, true)
						if to then
							room:broadcastSkillInvoke(self:objectName())	--播放配音
							local id = room:askForCardChosen(p, to, "he", self:objectName(), false, sgs.Card_MethodDiscard)
							room:throwCard(sgs.Sanguosha:getCard(id), sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, p:objectName(), to:objectName(), self:objectName(), ""), to)
						end
					end
				end
			end
		end
	end,
}

xingxi_tianjiliuxing:addSkill(yuguang)

sgs.LoadTranslationTable{
	["yuguang"] = "余光",
	[":yuguang"] = "锁定技，你离场时<font color='#A9A9A9'>发动此技能</font>，令你可以于你离场后的每个轮次开始时，破坏一名手牌数最多的角色的一张牌。",
	["$yuguang1"] = "我们的感情结束啦！",
	["$yuguang2"] = "肯定是小七的错！",
	["#yuguang_choose"] = "你可以使用“余光”，破坏一名角色的一张牌",
}

--------------------------------------------------
--天际流星 星汐
--设计者：NSX
--------------------------------------------------

xingxi_if = sgs.General(extension,"xingxi_if","psp","4",false,true,true)

sgs.LoadTranslationTable{
	["xingxi_if"] = "星汐",
	["&xingxi_if"] = "星汐",
	["#xingxi_if"] = "天际流星",
	["$xingxi_if"] = "简单",
	["designer:xingxi_if"] = "NSX",
	["cv:xingxi_if"] = "",
	["illustrator:xingxi_if"] = "",
	["~xingxi_if"] = "",
}

--------------------------------------------------
--七星
--------------------------------------------------

qixing_ifbuff = sgs.CreateMaxCardsSkill{
	name = "#qixing_ifbuff",
	extra_func = function(self, target)
		if target:hasSkill("qixing_if") and target:getPhase() == sgs.Player_Discard then
			local x = 0
			for _, card in sgs.list(target:getHandcards()) do
				if card:getNumber() == 7 then
					x = x + 1
				end
			end
			return x
		end
	end
}
qixing_if = sgs.CreateTriggerSkill{
	name = "qixing_if",
	events = {sgs.DrawInitialCards, sgs.AfterDrawInitialCards, sgs.EventPhaseChanging},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawInitialCards then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			data:setValue(data:toInt() + 7)
		elseif event == sgs.AfterDrawInitialCards then
			if not player:isKongcheng() then
				room:askForDiscard(player, self:objectName(), 7, 7, false, false)
			end
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Discard then
				local invoke = false
				for _, card in sgs.list(player:getHandcards()) do
					if card:getNumber() == 7 then
						invoke = true
						room:setPlayerCardLimitation(player, "discard", sgs.Sanguosha:getCard(card:getId()):toString(), false)
					end
				end
				if invoke then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				end
			end
			if change.from == sgs.Player_Discard then
				for _, card in sgs.list(player:getHandcards()) do
					if card:getNumber() == 7 then
						room:removePlayerCardLimitation(player, "discard", sgs.Sanguosha:getCard(card:getId()):toString().."$0")
					end
				end
			end
		end
	end
}

xingxi_if:addSkill(qixing_if)
xingxi_if:addSkill(qixing_ifbuff)

sgs.LoadTranslationTable{
	["qixing_if"] = "七星",
	["#qixing_ifbuff"] = "七星",
	[":qixing_if"] = "锁定技，你的起始手牌数＋7，分发起始手牌后，你须弃置七张手牌。<br/>弃牌阶段，你点数为7的牌不计入手牌数。",
	["$qixing_if"] = "",
}

--------------------------------------------------
--星耀
--------------------------------------------------

local cheer_marks = {"@Cheer_1","@Cheer_2","@Cheer_3","@Cheer_4","@Cheer_5","@Cheer_6","@Cheer_7","@Cheer_8"}

function countCheer(player)
	local count = 0
	for _, cheer_mark in ipairs(cheer_marks) do
		if player:getMark(cheer_mark) > 0 then
			count = count + 1
		end
	end
	return count
end

xingyao_if = sgs.CreateTriggerSkill{
	name = "xingyao_if",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.TargetSpecified, sgs.DamageCaused},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if not use.from or use.from:objectName() ~= player:objectName() then return false end
			if use.card and use.card:isKindOf("Slash") and countCheer(player) >= 5 then
				for _, p in sgs.qlist(use.to) do
					p:setFlags("xingyao_if_slash_target")	--AI用
				end
				
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:broadcastSkillInvoke("xingyao")	--播放配音
				room:setCardFlag(use.card, "xingyao_hit")	--加伤flag，加伤部分耦合入原星耀
				
				local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
				local index = 1
				for _, p in sgs.qlist(use.to) do
					if jink_table[index] > 0 and player:canEffect(p, self:objectName()) then
						jink_table[index] = jink_table[index] + 1
					end
					index = index + 1
				end
				local jink_data = sgs.QVariant()
				jink_data:setValue(Table2IntList(jink_table))
				player:setTag("Jink_" .. use.card:toString(), jink_data)
				
				for _, p in sgs.qlist(use.to) do
					p:setFlags("-xingyao_if_slash_target")	--AI用
				end
			end
		end
	end
}

xingxi_if:addSkill(xingyao_if)

sgs.LoadTranslationTable{
	["xingyao_if"] = "星耀",
	[":xingyao_if"] = "锁定技，你满应援力时，你使用的【杀】伤害基数＋1、抵消所需【闪】的张数＋1。",
	["$xingyao_if"] = "",
}

--------------------------------------------------
--凉宫凛
--设计者：萌龙少主
--------------------------------------------------

lianggonglin_wucailongguo = sgs.General(extension,"lianggonglin_wucailongguo","psp","4",true)

sgs.LoadTranslationTable{
	["lianggonglin_wucailongguo"] = "凉宫凛",
	["&lianggonglin_wucailongguo"] = "凉宫凛",
	["#lianggonglin_wucailongguo"] = "五彩龙果",
	["$lianggonglin_wucailongguo"] = "进阶",
	["designer:lianggonglin_wucailongguo"] = "萌龙少主",
	["cv:lianggonglin_wucailongguo"] = "",
	["illustrator:lianggonglin_wucailongguo"] = "",
	["~lianggonglin_wucailongguo"] = "",
}

lianggonglin_wucailongguo:setGender(sgs.General_Neuter)
table.insert(robot_change_general, "lianggonglin_wucailongguo")	--对电脑禁用

--------------------------------------------------
--幕影
--------------------------------------------------

muying = sgs.CreateTriggerSkill{	--只是一个空壳技能，效果被耦合进判断目标函数中了
	name = "muying",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end
}

lianggonglin_wucailongguo:addSkill(muying)

sgs.LoadTranslationTable{
	["muying"] = "幕影",
	[":muying"] = "锁定技，你不能被其他角色的技能指定为目标。其他角色不能破坏你装备区的防具牌。",
	["$muying"] = "",
}

--------------------------------------------------
--创制
--------------------------------------------------

chuangzhi_card1 = sgs.CreateSkillCard{	--选项1：检索一张装备牌
	name = "chuangzhi_card1",
	target_fixed = true,
	will_throw = true,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		local equips = sgs.CardList()
		for _,id in sgs.qlist(room:getDrawPile()) do
			local card = sgs.Sanguosha:getCard(id)
			if card:isKindOf("EquipCard") then
				--local equip_index = card:getRealCard():toEquipCard():location()
				--if source:hasEquipArea(equip_index) then	--检测对应装备区是否可用
					equips:append(card)
				--end
			end
		end
		if not equips:isEmpty() then
			local card_ids = sgs.IntList()
			for i=1,math.min(equips:length(), 3),1 do
				local random_one = equips:at(math.random(0, equips:length() - 1))
				equips:removeOne(random_one)
				card_ids:append(random_one:getId())
			end
			if not card_ids:isEmpty() then
				room:fillAG(card_ids, source)
				local id = room:askForAG(source, card_ids, false, self:objectName())
				room:clearAG(source)
				local card = sgs.Sanguosha:getCard(id)
				if card then
					source:obtainCard(card, true)
				end
			end
		end
		--[[if not equips:isEmpty() then
			local card = equips:at(math.random(0, equips:length() - 1))
			source:obtainCard(card, true)
		end]]
	end
}
chuangzhi_card2 = sgs.CreateSkillCard{	--选项2：展示此牌、指定其他角色弃牌并使用此牌
	name = "chuangzhi_card2",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if to_select:objectName() ~= sgs.Self:objectName() and SkillCanTarget(to_select, sgs.Self, "chuangzhi") and sgs.Self:canEffect(to_select, "chuangzhi") then
				local card = sgs.Sanguosha:getCard(self:getSubcards():first())
				return card:isAvailable(to_select) and to_select:hasEquipArea(card:getRealCard():toEquipCard():location())
			end
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local card_id = self:getSubcards():first()
		local card = sgs.Sanguosha:getCard(card_id)
		room:showCard(source, card_id)
		room:getThread():delay(300)
		local target = targets[1]
		if not target:isNude() then
			room:askForDiscard(target, "chuangzhi", 2, 2, false, true)
			room:getThread():delay(300)
		end
		if card:isAvailable(target) and target:hasEquipArea(card:getRealCard():toEquipCard():location()) then
			room:useCard(sgs.CardUseStruct(card, target, target))
		else
			room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, source:objectName(), "chuangzhi", nil), source)
		end
	end
}
chuangzhi = sgs.CreateViewAsSkill{
	name = "chuangzhi",
	n = 2,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return #selected < 2
	end,
	view_as = function(self, cards)
		if #cards == 1 and cards[1]:isKindOf("EquipCard") then	--选项2
			local NewSkillCard = chuangzhi_card2:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		elseif #cards == 2 then	--选项1
			local NewSkillCard = chuangzhi_card1:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:addSubcard(cards[2])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#chuangzhi_card1") + player:usedTimes("#chuangzhi_card2") < 1
	end
}

lianggonglin_wucailongguo:addSkill(chuangzhi)

sgs.LoadTranslationTable{
	["chuangzhi"] = "创制",
	["chuangzhi_1"] = "创制",	--注意系统会自动删去"card"
	["chuangzhi_2"] = "创制",
	[":chuangzhi"] = "出牌阶段限一次，你可以选择一项：1.弃置两张牌，从牌堆中的随机3张装备牌中获得一张；2.展示一张装备牌，指定一名可使用此牌的其他角色，其弃置两张牌然后使用之。",
	["$chuangzhi"] = "",
	["^chuangzhi"] = "你可以执行一项：<br/>①弃置两张牌，检索一张装备牌（三选一）<br/>②选一张装备牌令目标使用，其须弃置两张牌<br/><br/>操作提示：<br/>①检索装备：选择两张牌→确定<br/>②交出装备：选择一张装备牌→选择一名角色→确定",
	["^AG_chuangzhi_card1"] = "<b>创制</b><br/>双击以选择一张装备牌使用之",
}

--------------------------------------------------
--无休歌舞 笙歌
--设计者：NSX
--------------------------------------------------

shengge_wuxiugewu = sgs.General(extension,"shengge_wuxiugewu","novus","3",false)

sgs.LoadTranslationTable{
	["shengge_wuxiugewu"] = "笙歌",
	["&shengge_wuxiugewu"] = "笙歌",
	["#shengge_wuxiugewu"] = "无休歌舞",
	["$shengge_wuxiugewu"] = "进阶",
	["designer:shengge_wuxiugewu"] = "NSX",
	["cv:shengge_wuxiugewu"] = "",
	["illustrator:shengge_wuxiugewu"] = "",
	["~shengge_wuxiugewu"] = "",
}

--------------------------------------------------
--雅和
--------------------------------------------------

yahecard = sgs.CreateSkillCard{
	name = "yahe",
	filter = function(self, targets, to_select)
		local min_handcard_num = sgs.Self:getHandcardNum()
		for _, p in sgs.qlist(sgs.Self:getSiblings()) do
			if p:isAlive() and p:getHandcardNum() < min_handcard_num then
				min_handcard_num = p:getHandcardNum()
			end
		end
		return to_select:getHandcardNum() == min_handcard_num
	end,
	on_effect = function(self, effect)
		effect.to:drawCards(1, self:objectName())
	end
}
yahevs = sgs.CreateZeroCardViewAsSkill{
	name = "yahe",
	response_pattern = "@@yahe",
	view_as = function()
		return yahecard:clone()
	end
}
yahe = sgs.CreateTriggerSkill{
	name = "yahe",
	events = {sgs.EventPhaseStart},
	--view_as_skill = yahevs,
	global = true,
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() == sgs.Player_Start and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local choice = room:askForChoice(player, self:objectName().."+yahe_choice_log", "yahe1+yahe2+cancel")
			if choice ~= "cancel" then
				local log = sgs.LogMessage()
				log.type = "#yahe_log"
				log.from = player
				log.arg = self:objectName()
				log.arg2 = choice
				room:sendLog(log)	--发送信息框消息
				room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
				if SkillNullify(player, self:objectName()) then
					return false
				end
				if choice == "yahe1" then
					room:setPlayerMark(player, "&yahe!", 1)
					local card_ids = room:getNCards(4)
					room:askForGuanxing(player, card_ids, sgs.Room_GuanxingUpOnly)
				elseif choice == "yahe2" then
					room:setPlayerMark(player, "&yahe!", 2)
					--room:askForUseCard(player, "@@yahe", "@yahe")
					
					local min_handcard_num = player:getHandcardNum()
					for _, p in sgs.qlist(room:getOtherPlayers(player)) do
						if p:isAlive() and p:getHandcardNum() < min_handcard_num then
							min_handcard_num = p:getHandcardNum()
						end
					end
					for _, p in sgs.qlist(room:getAllPlayers()) do
						if p:isAlive() and p:getHandcardNum() == min_handcard_num and player:canEffect(p, self:objectName()) then
							p:drawCards(1, self:objectName())
						end
					end
				end
			end
		elseif player:getPhase() == sgs.Player_Finish and player:getMark("&yahe!") > 0 then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			if player:getMark("&yahe!") == 1 then
				room:setPlayerMark(player, "&yahe!", 0)
				--room:askForUseCard(player, "@@yahe", "@yahe")
				
				local min_handcard_num = player:getHandcardNum()
				for _, p in sgs.qlist(room:getOtherPlayers(player)) do
					if p:isAlive() and p:getHandcardNum() < min_handcard_num then
						min_handcard_num = p:getHandcardNum()
					end
				end
				for _, p in sgs.qlist(room:getAllPlayers()) do
					if p:isAlive() and p:getHandcardNum() == min_handcard_num and player:canEffect(p, self:objectName()) then
						p:drawCards(1, self:objectName())
					end
				end
			elseif player:getMark("&yahe!") == 2 then
				room:setPlayerMark(player, "&yahe!", 0)
				local card_ids = room:getNCards(4)
				room:askForGuanxing(player, card_ids, sgs.Room_GuanxingUpOnly)
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark, "&yahe!")	--回合结束清除标记

shengge_wuxiugewu:addSkill(yahe)

sgs.LoadTranslationTable{
	["yahe"] = "雅和",
	[":yahe"] = "准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，选择一项：<br/>1.观看并排列牌堆顶的四张牌；<br/>2.令手牌数最少的角色各摸一张牌。<br/>若如此做，你于本回合的结束阶段执行另一项。",
	["#yahe_log"] = "%from 发动了 “%arg” ，选择了： %arg2",
	["yahe_choice_log"] = "你可以发动“雅和”执行一项，结束阶段执行另一项\n请选择：",
	["yahe1"] = "观看并排列牌堆顶的四张牌",
	["yahe2"] = "令手牌数最少的角色摸一张牌",
	["@yahe"] = "你可以令任意名手牌数最少的角色摸牌",
	["~yahe"] = "选择若干名角色→确定",
	["$yahe"] = "",
}

--------------------------------------------------
--埋薯
--------------------------------------------------

maishu_card = sgs.CreateSkillCard{
	name = "maishu",
	target_fixed = true,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:moveCardsInToDrawpile(source, card, self:objectName(), -1, true)
		room:setCardFlag(card, "potato_mine")
	end
}
maishu_vs = sgs.CreateViewAsSkill{
	name = "maishu",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return to_select:isBlack()
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = maishu_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#maishu") < 1
	end
}
maishu = sgs.CreateTriggerSkill{
	name = "maishu",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = maishu_vs,
	events = {sgs.CardsMoveOneTime},
	global = true,
	on_trigger = function(self, event, player, data, room)
		local move = data:toMoveOneTime()
		if not room:getTag("FirstRound"):toBool() and move.to and move.to:objectName() == player:objectName() and move.reason.m_reason == sgs.CardMoveReason_S_REASON_DRAW and move.to_place == sgs.Player_PlaceHand then
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			for _,id in sgs.qlist(move.card_ids) do
				local card = sgs.Sanguosha:getCard(id)
				if card:hasFlag("potato_mine") and room:getCardPlace(id) == sgs.Player_PlaceHand and room:getCardOwner(id) and room:getCardOwner(id):objectName() == player:objectName() then
					--room:setCardFlag(card, "-potato_mine")
					dummy:addSubcard(card)
				end
			end
			if dummy:subcardsLength() > 0 then
				local log = sgs.LogMessage()
				log.type = "$maishu_trigger"
				log.arg = "potato_mine"
				log.to:append(player)
				room:sendLogWithIds(log, dummy:getSubcards())	--发送信息框消息
				
				room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), "potato_mine", nil), player)
				room:damage(sgs.DamageStruct("potato_mine", nil, player, 1, sgs.DamageStruct_Thunder))
			end
			dummy:deleteLater()
		end
	end,
}
table.insert(discard_clear_flag, "potato_mine")	--进弃牌堆清除cardflag

shengge_wuxiugewu:addSkill(maishu)

sgs.LoadTranslationTable{
	["maishu"] = "埋薯",
	[":maishu"] = "出牌阶段限一次，你可以将一张黑色牌返回牌堆并标记为“土豆雷”。<br/><font color='blue'>因摸牌而获得“土豆雷”的角色须弃置之，然后受到1点雷电伤害。</font>",
	["potato_mine_card_state"] = "<font color='red'>这是一颗土豆雷，摸到此牌的角色将弃置之，然后受到1点雷电伤害。</font><br/><br/>",	--鼠标悬停后显示的前缀
	["potato_mine"] = "土豆雷",
	--["#maishu_card"] = "%to 因摸牌而获得的 %card 是“%arg”",
	--["#maishu_draw"] = "%to 将弃置“%arg”并受到 <b><font color='yellow'>1</font></b> 点雷电伤害",
	["$maishu_trigger"] = "%to 因摸牌而获得的 %card 是“%arg”，将弃置之并受到 <b><font color='yellow'>1</font></b> 点雷电伤害",
	["$maishu1"] = "（音效）",
	["$maishu2"] = "（音效）",
	["$maishu3"] = "（音效）",
	["$maishu4"] = "（音效）",
	["$maishu5"] = "（音效）",
	["$maishu6"] = "（音效）",
}

--------------------------------------------------
--黑森林妖狼 犽月
--设计者：--
--------------------------------------------------

yayue_heisenlinyaolang = sgs.General(extension,"yayue_heisenlinyaolang","novus","4",false)

sgs.LoadTranslationTable{
	["yayue_heisenlinyaolang"] = "犽月",
	["&yayue_heisenlinyaolang"] = "犽月",
	["#yayue_heisenlinyaolang"] = "黑森林妖狼",
	["$yayue_heisenlinyaolang"] = "简单",
	["designer:yayue_heisenlinyaolang"] = "NSX",
	["cv:yayue_heisenlinyaolang"] = "",
	["illustrator:yayue_heisenlinyaolang"] = "",
	["~yayue_heisenlinyaolang"] = "",
}

--------------------------------------------------
--毫变
--------------------------------------------------

haobian = sgs.CreateFilterSkill{
	name = "haobian",
	view_filter = function(self, to_select)
		return to_select:getSuit() == sgs.Card_Diamond
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName(self:objectName())
		new_card:setSuit(sgs.Card_Club)
		new_card:setModified(true)
		return new_card
	end
}
--没办法了，虽然我原则上不会用隐藏子技能，但对锁定视为技实在是没办法
haobian_damage = sgs.CreateTriggerSkill{
	name = "#haobian_damage",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageCaused},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.card and damage.card:isKindOf("Slash") and damage.card:isBlack() and damage.to and damage.to:getArmor() and player:canEffect(damage.to, self:objectName()) then
				if damage.nature == sgs.DamageStruct_Light then return false end
				
				room:sendCompulsoryTriggerLog(player, "haobian") --显示锁定技发动
				damage.damage = damage.damage + 1
				data:setValue(damage)
			end
		end
		return false
	end
}

yayue_heisenlinyaolang:addSkill(haobian)
yayue_heisenlinyaolang:addSkill(haobian_damage)
extension:insertRelatedSkills("haobian", "#haobian_damage")		--添加子技能

sgs.LoadTranslationTable{
	["haobian"] = "毫变",
	["#haobian_damage"] = "毫变",
	[":haobian"] = "锁定技，你的方块牌视为梅花牌。你使用的黑色【杀】对有防具的角色造成的伤害＋1。",
	["$haobian"] = "",
}

--------------------------------------------------
--渴可
--------------------------------------------------

keke = sgs.CreateTriggerSkill{
	name = "keke",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damage},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.card and damage.card:isKindOf("Slash") and damage.to and damage.to:isAlive() and not damage.to:isNude() and damage.to:objectName() ~= player:objectName() then
			local _data = sgs.QVariant()
			_data:setValue(damage.to)
			if player:askForSkillInvoke(self:objectName(), _data) and not SkillNullify(player, self:objectName()) and player:canEffect(damage.to, self:objectName()) then
				room:doAnimate(1, player:objectName(), damage.to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				
				local card_ids = sgs.IntList()
				local foot_notes = {}
				for _, card in sgs.qlist(damage.to:getCards("h")) do
					local id = card:getId()
					card_ids:append(id)
					table.insert(foot_notes, damage.to:getGeneralName().."+hand_area")
				end
				for _, card in sgs.qlist(damage.to:getCards("e")) do
					local id = card:getId()
					card_ids:append(id)
					table.insert(foot_notes, damage.to:getGeneralName().."+equip_area")
				end
				
				local can_choose_ids, cannot_choose_ids = sgs.IntList(), sgs.IntList()
				for _, id in sgs.qlist(card_ids) do
					local card = sgs.Sanguosha:getCard(id)
					if card then
						if card:isBlack() then
							can_choose_ids:append(id)
						else
							cannot_choose_ids:append(id)
						end
					end
				end
				
				--if not can_choose_ids:isEmpty() then
					room:fillAG(card_ids, player, cannot_choose_ids, false, table.concat(foot_notes, "|"), true)
					local id1 = room:askForAG(player, can_choose_ids, true, self:objectName())
					if id1 and id1 ~= -1 then
						player:obtainCard(sgs.Sanguosha:getCard(id1), true)	--拿的是“黑色”牌，那还是公开吧
					end
				--end
				room:clearAG(player)
				
				if damage.to:isAlive() and player:isAlive() then
					room:askForUseSlashTo(damage.to, player, "#keke_slash_use:"..player:objectName(), false, false, false)
				end
			end
		end
		return false
	end
}

yayue_heisenlinyaolang:addSkill(keke)

sgs.LoadTranslationTable{
	["keke"] = "渴可",
	[":keke"] = "你使用【杀】对一名其他角色造成伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，观看其手牌和装备区内的牌并可以获得其中一张黑色牌，然后其可以对你使用一张【杀】（无距离限制）。",
	["$keke"] = "",
	["^AG_keke"] = "<b>渴可</b><br/>获得牌：双击选择一张黑色牌获得<br/>不获得牌：点击“确定”",
	["#keke_slash_use"] = "你可以对 %src 使用一张【杀】（无距离限制）",
}

--------------------------------------------------
--寻星竹中 李豆沙
--设计者：--
--------------------------------------------------

lidousha_xunxingzhuzhong = sgs.General(extension,"lidousha_xunxingzhuzhong","novus","3",false)

sgs.LoadTranslationTable{
	["lidousha_xunxingzhuzhong"] = "李豆沙",
	["&lidousha_xunxingzhuzhong"] = "李豆沙",
	["#lidousha_xunxingzhuzhong"] = "寻星竹中",
	["$lidousha_xunxingzhuzhong"] = "简单",
	["designer:lidousha_xunxingzhuzhong"] = "NSX",
	["cv:lidousha_xunxingzhuzhong"] = "",
	["illustrator:lidousha_xunxingzhuzhong"] = "",
	["~lidousha_xunxingzhuzhong"] = "",
}

--------------------------------------------------
--祥瑞
--------------------------------------------------

xiangrui = sgs.CreateTriggerSkill{
	name = "xiangrui",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardAsked},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardAsked and not player:getArmor() and player:hasArmorEffect("eight_diagram") then		--此处已耦合入源码
			local pattern = data:toStringList()[1]
			if pattern == "jink" then
				if player:askForSkillInvoke("eight_diagram", data) then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					local judge = sgs.JudgeStruct()
					judge.pattern = ".|red"
					judge.good = true
					judge.reason = "eight_diagram"
					judge.who = player
					judge.time_consuming = true	--为真耗时更少
					room:judge(judge)
					if judge:isGood() then
						room:setEmotion(player, "xiangrui")
						room:broadcastSkillInvoke("audio_effect", 25)	--播放配音
						local jink = sgs.Sanguosha:cloneCard("jink", sgs.Card_NoSuit, 0)
						jink:setSkillName("eight_diagram")
						room:provide(jink)
						room:getThread():delay(900)
						room:broadcastSkillInvoke("audio_effect", 26)	--播放配音
						return true
					elseif player:getMark("xiangrui_obtain") == 0 then
						if room:getCardPlace(judge.card:getId()) == sgs.Player_DiscardPile then
							room:setPlayerMark(player, "xiangrui_obtain", 1)
							player:obtainCard(judge.card, true)
						end
					end
				end
			end
			return false
		end
	end
}
table.insert(turn_end_clear_mark, "xiangrui_obtain")	--回合结束清除标记

lidousha_xunxingzhuzhong:addSkill(xiangrui)

sgs.LoadTranslationTable{
	["xiangrui"] = "祥瑞",
	[":xiangrui"] = "锁定技，若你没有装备防具牌，视为你装备【八卦阵】。<br/>每回合限一次，你以此法判定后，若结果为黑色，你获得判定牌。",
	["$xiangrui"] = "",
}

--------------------------------------------------
--执夷
--------------------------------------------------

zhiyi_lds = sgs.CreateTriggerSkill{
	name = "zhiyi_lds",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damage},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.to and damage.to:isAlive() and damage.to:objectName() ~= player:objectName() then
			damage.to:setFlags("zhiyi_lds_target_AI")	--AI用
			local cost_card = room:askForDiscard(player, self:objectName(), 1, 1, true, true, "@zhiyi_lds:"..damage.to:objectName(), ".", self:objectName())
			damage.to:setFlags("-zhiyi_lds_target_AI")	--AI用
			if not damage.to:isNude() and cost_card then
				room:doAnimate(1, player:objectName(), damage.to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				
				if not SkillNullify(player, self:objectName()) and player:canEffect(damage.to, self:objectName()) then
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					for _,card in sgs.qlist(damage.to:getCards("he")) do
						if card:getSuit() == cost_card:getSuit() then
							dummy:addSubcard(card)
						end
					end
					if dummy:subcardsLength() > 0 then
						room:getThread():delay(500)
						room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, player:objectName(), damage.to:objectName(), self:objectName(), ""), damage.to)
					end
					local card_ids = sgs.IntList()
					for _, id in sgs.qlist(dummy:getSubcards()) do
						if room:getCardPlace(id) == sgs.Player_DiscardPile then
							card_ids:append(id)
						end
					end
					dummy:deleteLater()
					if not card_ids:isEmpty() then
						room:fillAG(card_ids, player)
						local id = room:askForAG(player, card_ids, false, self:objectName())
						room:clearAG(player)
						local card = sgs.Sanguosha:getCard(id)
						if card then
							player:obtainCard(card, true)
						end
					end
				end
			end
			return false
		end
	end
}

lidousha_xunxingzhuzhong:addSkill(zhiyi_lds)

sgs.LoadTranslationTable{
	["zhiyi_lds"] = "执夷",
	[":zhiyi_lds"] = "你对一名其他角色造成伤害后，你可以弃置一张牌<font color='#A9A9A9'>发动此技能</font>，破坏其所有与之花色相同的牌，然后获得其中一张。",
	["$zhiyi_lds"] = "",
	["@zhiyi_lds"] = "你可以弃置一张牌发动“执夷”，破坏 %src 所有此花色的牌并获得其中一张",
	["^AG_zhiyi_lds"] = "<b>执夷</b><br/>请双击选择一张牌获得之",
}

--------------------------------------------------
--角色特性：我是直女！
--------------------------------------------------

characteristic_woshizhinv = sgs.CreateTriggerSkill{
	name = "#characteristic_woshizhinv",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
characteristic_woshizhinv_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_woshizhinv_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_woshizhinv_state)
lidousha_xunxingzhuzhong:addSkill(characteristic_woshizhinv)
lidousha_xunxingzhuzhong:addRelateSkill("characteristic_woshizhinv_state")

sgs.LoadTranslationTable{
	["characteristic_woshizhinv"] = "我是直女！",
	["#characteristic_woshizhinv"] = "我是直女！",
	["characteristic_woshizhinv_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_woshizhinv_state"] = "<font color='#DAA520'><b>我是直女！</b><br/>你可以对女性角色发动【雌雄双股剑MK2】。</font>",
	["$characteristic_woshizhinv_state"] = "",
}

--------------------------------------------------
--妖灵白鼬 小千村柚柚
--设计者：--
--------------------------------------------------

xiaoqiancunyouyou_yaolingbaiyou = sgs.General(extension,"xiaoqiancunyouyou_yaolingbaiyou","novus","3",false)

sgs.LoadTranslationTable{
	["xiaoqiancunyouyou_yaolingbaiyou"] = "小千村鼬鼬",
	["&xiaoqiancunyouyou_yaolingbaiyou"] = "小千村柚柚",
	["#xiaoqiancunyouyou_yaolingbaiyou"] = "妖灵白鼬",
	["$xiaoqiancunyouyou_yaolingbaiyou"] = "简单",
	["designer:xiaoqiancunyouyou_yaolingbaiyou"] = "NSX",
	["cv:xiaoqiancunyouyou_yaolingbaiyou"] = "",
	["illustrator:xiaoqiancunyouyou_yaolingbaiyou"] = "",
	["~xiaoqiancunyouyou_yaolingbaiyou"] = "",
}

--------------------------------------------------
--袭穴
--------------------------------------------------

xixue_candraw_suit = {"club", "spade", "diamond", "heart"}	--spade=0 club=1 heart=2 diamond=3

xixue = sgs.CreateTriggerSkill{
	name = "xixue",
	events = {sgs.CardUsed, sgs.CardResponded},
	frequency = sgs.Skill_Frequent,
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() ~= sgs.Player_Play then return false end
		
		local card
		if event == sgs.CardUsed then
			card = data:toCardUse().card
		elseif event == sgs.CardResponded then
			if data:toCardResponse().m_isUse then
				card = data:toCardResponse().m_card
			end
		end
		if not card or card:getTypeId() == sgs.Card_TypeSkill then return false end
		local has_suit = true
		if card:getSuit() >= 0 and card:getSuit() <= 3 then		--0~3分别对应黑桃、梅花、红桃、方块，>3说明无花色
			if player:getMark("&xixue+"..xixue_candraw_suit[card:getSuit()+1].."_char") > 0 then
				if player:askForSkillInvoke(self:objectName(), data) then
					room:drawCards(player, 1, self:objectName())
				end
			end
		else
			has_suit = false
		end
		room:setPlayerMark(player, "&xixue+heart_char", 0)
		room:setPlayerMark(player, "&xixue+diamond_char", 0)
		room:setPlayerMark(player, "&xixue+spade_char", 0)
		room:setPlayerMark(player, "&xixue+club_char", 0)
		if has_suit then
			room:setPlayerMark(player, "&xixue+"..card:getSuitString().."_char", 1)
		end
	end
}
table.insert(play_end_clear_mark_prefix, "&xixue+")	--出牌结束清除指定前缀的标记

xiaoqiancunyouyou_yaolingbaiyou:addSkill(xixue)

sgs.LoadTranslationTable{
	["xixue"] = "袭穴",
	[":xixue"] = "你于出牌阶段内使用牌时，若此牌与你本阶段内使用的上一张牌花色不同且颜色相同，你可以摸一张牌。",
	["$xixue"] = "",
}

--------------------------------------------------
--「淘气少女」 小千村柚柚
--设计者：--
--------------------------------------------------

xiaoqiancunyouyou_taoqishaonv = sgs.General(extension,"xiaoqiancunyouyou_taoqishaonv","novus","4",false)

sgs.LoadTranslationTable{
	["xiaoqiancunyouyou_taoqishaonv"] = "小千村柚柚",
	["&xiaoqiancunyouyou_taoqishaonv"] = "小千村柚柚",
	["#xiaoqiancunyouyou_taoqishaonv"] = "「淘气少女」",
	["$xiaoqiancunyouyou_taoqishaonv"] = "一般",
	["designer:xiaoqiancunyouyou_taoqishaonv"] = "月音风源",
	["cv:xiaoqiancunyouyou_taoqishaonv"] = "",
	["illustrator:xiaoqiancunyouyou_taoqishaonv"] = "",
	["~xiaoqiancunyouyou_taoqishaonv"] = "",
}

--------------------------------------------------
--寻笑
--------------------------------------------------

xunxiao_cardnames = {"ice_slash", "fire_attack", "duel", "dismantlement", "snatch"}

xunxiao_buff = sgs.CreateTargetModSkill{
	name = "#xunxiao_buff",
	pattern = ".",
	distance_limit_func = function(self, from, card, to)
		local n = 0
		if not card:isKindOf("SkillCard") and card:getSkillName() == "xunxiao" then
			n = n + 1000
		end
		return n
	end
}
xunxiaocard = sgs.CreateSkillCard{
	name = "xunxiao",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select) 
		return #targets == 0 and to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "xunxiao")
	end, 
	on_use = function(self, room, source, targets)
		room:obtainCard(targets[1], sgs.Sanguosha:getCard(self:getSubcards():first()), sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), targets[1]:objectName(), self:objectName(), ""), true)
		local players = sgs.SPlayerList()
		for _, p in sgs.qlist(room:getOtherPlayers(targets[1])) do
			if targets[1]:canPindian(p) and targets[1]:canEffect(p, "xunxiao") then
				players:append(p)
			end
		end
		if not players:isEmpty() then
			room:getThread():delay(400)	--防残影
			local player = room:askForPlayerChosen(source, players, self:objectName(), "@xunxiao:"..targets[1]:objectName(), false, false)
			
			room:doAnimate(1, targets[1]:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
			
			local log = sgs.LogMessage()
			log.type = "#xunxiao_log"
			log.from = source
			log.arg = "xunxiao"
			log.to:append(targets[1])
			log.to:append(player)
			room:sendLog(log)
			
			if targets[1]:canPindian(player) then
				local pindian = targets[1]:PinDian(player, "xunxiao")	--用PinDian函数可以获取拼点结构体
				local winner, loser
				local draw = false	--平局
				
				if pindian.from_number > pindian.to_number then
					winner = pindian.from
					loser = pindian.to
				elseif pindian.from_number < pindian.to_number then
					winner = pindian.to
					loser = pindian.from
				else
					draw = true
				end
				
				if not draw then
					local xunxiao_available_names = {}
					for i=1,#xunxiao_cardnames,1 do
						local new_card = sgs.Sanguosha:cloneCard(xunxiao_cardnames[i], sgs.Card_NoSuit, 0)
						new_card:setSkillName("_"..self:objectName())
						if winner:canUse(new_card, loser, true) then
							table.insert(xunxiao_available_names, xunxiao_cardnames[i])
						end
						new_card:deleteLater()
					end
					if #xunxiao_available_names > 0 then
						local random_cardname = xunxiao_available_names[math.random(1, #xunxiao_available_names)]
						local new_card = sgs.Sanguosha:cloneCard(random_cardname, sgs.Card_NoSuit, 0)
						new_card:setSkillName("_"..self:objectName())
						if winner:canUse(new_card, loser, true) then
							local card_use = sgs.CardUseStruct()
							card_use.from = winner
							card_use.to:append(loser)
							card_use.card = new_card
							room:useCard(card_use, false)
						end
					else
						local log = sgs.LogMessage()
						log.from = winner
						log.arg = "xunxiao_card"
						log.type = "#xunxiao_fail"
						log.to:append(loser)
						room:sendLog(log)
					end
				end
			end
		end
	end
}
xunxiao = sgs.CreateOneCardViewAsSkill{
	name = "xunxiao",
	filter_pattern = ".|black|.|hand,equipped",
	view_as = function(self, card) 
		local cards = xunxiaocard:clone()
		cards:addSubcard(card)
		return cards
	end,
	enabled_at_play = function(self, player)
		return not player:hasUsed("#xunxiao") and not player:isNude()
	end
}

xiaoqiancunyouyou_taoqishaonv:addSkill(xunxiao)
xiaoqiancunyouyou_taoqishaonv:addSkill(xunxiao_buff)

sgs.LoadTranslationTable{
	["xunxiao"] = "寻笑",
	["#xunxiao_buff"] = "寻笑",
	[":xunxiao"] = "出牌阶段限一次，你可以将一张黑色牌交给一名其他角色，然后其与你选择的另一名角色拼点，赢的角色视为对没赢的角色随机使用一张<font color='#008B8B'>恶作剧牌</font>。<br/>\
<font color='#008B8B'>恶作剧牌：冰杀、火攻、决斗、过河拆桥、顺手牵羊</font>",
	["$xunxiao"] = "",
	["^xunxiao"] = "操作提示：选择一张黑色牌→选择要将牌交给的角色→确定",
	["@xunxiao"] = "请选择一名角色与 %src 拼点",
	["#xunxiao_log"] = "%from 指定了“%arg”的拼点双方为 %to",
	["xunxiao_card"] = "恶作剧牌",
	["#xunxiao_fail"] = "没有 %from 能对 %to 使用的 %arg",
}

--------------------------------------------------
--颗栗悦声 春野萌
--设计者：--
--------------------------------------------------

bujumengli_keliyuesheng = sgs.General(extension,"bujumengli_keliyuesheng","novus","4",false)

sgs.LoadTranslationTable{
	["bujumengli_keliyuesheng"] = "春野萌",
	["&bujumengli_keliyuesheng"] = "春野萌",
	["#bujumengli_keliyuesheng"] = "颗栗悦声",
	["$bujumengli_keliyuesheng"] = "简单",
	["designer:bujumengli_keliyuesheng"] = "NSX",
	["cv:bujumengli_keliyuesheng"] = "",
	["illustrator:bujumengli_keliyuesheng"] = "",
	["~bujumengli_keliyuesheng"] = "",
}

--------------------------------------------------
--贮歌
--------------------------------------------------

zhugecard = sgs.CreateSkillCard{
	name = "zhuge",
	no_indicator = true,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		slash:setSkillName("_"..self:objectName())
		slash:deleteLater()
		return slash:targetFilter(targets_list, to_select, sgs.Self)
	end,
	on_validate = function(self, card_use)	--使用on_validate便于在响应失败时撤回（如判红后，借刀杀人和青龙刀都会再询问是否出杀）
		local source = card_use.from
		local targets_list = card_use.to
		local room = source:getRoom()
		
		local logg = sgs.LogMessage()
		logg.from = source
		logg.type = "#ChoosePlayerWithSkill"
		logg.arg = self:objectName()
		logg.to = targets_list
		room:sendLog(logg)	--显示技能发动提示信息
		room:notifySkillInvoked(source, self:objectName())	--在武将牌上显示技能名
		for _, target in sgs.qlist(targets_list) do
			room:doAnimate(1, source:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
		end
		
		room:setPlayerMark(source, "zhuge_used", 1)
		local judge = sgs.JudgeStruct()
		judge.pattern = ".|black"
		judge.good = true
		judge.reason = self:objectName()
		judge.who = source
		room:judge(judge)
		if judge:isGood() then
			if not targets_list:isEmpty() then
				local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				slash:setSkillName("_"..self:objectName())
				--room:useCard(sgs.CardUseStruct(slash, source, targets_list))
				return slash
			end
		end
		return nil
	end
}
zhuge_vs = sgs.CreateZeroCardViewAsSkill{
	name = "zhuge",
	view_as = function()
		return zhugecard:clone()
	end,
	enabled_at_play = function(self, player)
		return player:getMark("zhuge_used") == 0 and sgs.Slash_IsAvailable(player)
	end,
	enabled_at_response = function(self, player, pattern)
		return player:getMark("zhuge_used") == 0 and pattern == "slash" and sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE
		--return false
	end
}
zhuge = sgs.CreateTriggerSkill{
	name = "zhuge",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = zhuge_vs,
	events = {sgs.CardAsked},
	on_trigger = function(self, event, player, data, room)
		local pattern = data:toStringList()[1]
		if pattern == "slash" and player:getMark("zhuge_used") == 0 then	--打出杀的情况
			if player:askForSkillInvoke(self:objectName(), data) then
				room:setPlayerMark(player, "zhuge_used", 1)
				local judge = sgs.JudgeStruct()
				judge.pattern = ".|black"
				judge.good = true
				judge.reason = self:objectName()
				judge.who = player
				room:judge(judge)
				if judge:isGood() then
					local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					slash:setSkillName("_"..self:objectName())
					room:provide(slash)
				end
			end
		end
	end
}
table.insert(turn_end_clear_mark, "zhuge_used")	--回合结束清除标记

bujumengli_keliyuesheng:addSkill(zhuge)

sgs.LoadTranslationTable{
	["zhuge"] = "贮歌",
	[":zhuge"] = "每回合限一次，你需要使用或打出【杀】时，你可以进行一次判定，若结果为黑色，视为你使用或打出一张【杀】。",
	["$zhuge"] = "",
	["^zhuge"] = "操作提示：<br/>选择【杀】的目标角色→确定",
}

--------------------------------------------------
--绝调
--------------------------------------------------

juediao = sgs.CreateTriggerSkill{
	name = "juediao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecified},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if use.from and player:objectName() == use.from:objectName() and use.card and use.card:isKindOf("Slash") then
				for _,card in sgs.qlist(player:getHandcards()) do
					if card:isKindOf("BasicCard") then
						return false
					end
				end
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					if not player:isKongcheng() then
						room:showAllCards(player)
					end
					
					local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
					local index = 1
					for _, p in sgs.qlist(use.to) do
						--room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						room:broadcastSkillInvoke(self:objectName())	--播放配音
						jink_table[index] = 0
						index = index + 1
					end
					local jink_data = sgs.QVariant()
					jink_data:setValue(Table2IntList(jink_table))
					player:setTag("Jink_" .. use.card:toString(), jink_data)
				end
			end
		end
	end 
}

bujumengli_keliyuesheng:addSkill(juediao)

sgs.LoadTranslationTable{
	["juediao"] = "绝调",
	[":juediao"] = "你使用【杀】指定目标后，若你手牌中没有基本牌，你可以<font color='#A9A9A9'>发动此技能</font>，展示所有手牌，令此【杀】不能被【闪】响应。",
	["$juediao"] = "",
}

--------------------------------------------------
--幽林缚灵 病院坂灵
--设计者：--
--------------------------------------------------

bingyuanbanling_youlinfuling = sgs.General(extension,"bingyuanbanling_youlinfuling","novus","4",false)

sgs.LoadTranslationTable{
	["bingyuanbanling_youlinfuling"] = "病院坂灵",
	["&bingyuanbanling_youlinfuling"] = "病院坂灵",
	["#bingyuanbanling_youlinfuling"] = "幽林缚灵",
	["$bingyuanbanling_youlinfuling"] = "一般",
	["designer:bingyuanbanling_youlinfuling"] = "夜玥紫英",
	["cv:bingyuanbanling_youlinfuling"] = "",
	["illustrator:bingyuanbanling_youlinfuling"] = "",
	["~bingyuanbanling_youlinfuling"] = "",
}

--------------------------------------------------
--病缚
--------------------------------------------------

bingfu = sgs.CreateTriggerSkill{	--只是一个空壳技能，效果被耦合进源码player:isWounded()中
	name = "bingfu",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end
}

bingyuanbanling_youlinfuling:addSkill(bingfu)

sgs.LoadTranslationTable{
	["bingfu"] = "病缚",
	[":bingfu"] = "锁定技，横置的角色视为已受伤。",
	["$bingfu"] = "",
}

--------------------------------------------------
--灵黯
--------------------------------------------------

lingan = sgs.CreateTriggerSkill{
	name = "lingan",
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getOtherPlayers(player)) do
				if p:isWounded() and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			if not targets:isEmpty() then
				local target = room:askForPlayerChosen(player, targets, self:objectName(), "@lingan_ask", true, true)
				if target and not SkillNullify(player, self:objectName()) then
					local _data = sgs.QVariant()
					_data:setValue(player)
					local card = room:askForCard(target, ".|black|.|hand,equipped", "@lingan_give:"..player:objectName(), _data, sgs.Card_MethodNone)
					if card then
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, target:objectName(), player:objectName(), self:objectName(), "")
						room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, true)
						--target:drawCards(1, self:objectName())
					else
						room:setPlayerMark(target, "lingan_banned", 1)
						room:loseMaxHp(target, 1)
					end
				end
			end
		end
	end
}

bingyuanbanling_youlinfuling:addSkill(lingan)

sgs.LoadTranslationTable{
	["lingan"] = "灵黯",
	[":lingan"] = "结束阶段，你可以指定一名已受伤的其他角色，<font color='#A9A9A9'>发动此技能</font>，令其选择一项：1.交给你一张黑色牌 2.失去1点体力上限，不再成为此技能的合法目标。",
	["$lingan"] = "",
	["@lingan_ask"] = "你可以发动“灵黯”，指定一名已受伤的其他角色",
	["@lingan_give"] = "你可以交给 %src 一张黑色牌，否则你失去1点体力上限，但不会再成为此技能的目标",
}

--------------------------------------------------
--摇摇幽灵 病院坂灵
--设计者：--
--------------------------------------------------

bingyuanbanling_yaoyaoyouling = sgs.General(extension,"bingyuanbanling_yaoyaoyouling","psp","4",false)

sgs.LoadTranslationTable{
	["bingyuanbanling_yaoyaoyouling"] = "病院坂灵Ⅱ",
	["&bingyuanbanling_yaoyaoyouling"] = "病院坂灵",
	["#bingyuanbanling_yaoyaoyouling"] = "摇摇幽灵",
	["$bingyuanbanling_yaoyaoyouling"] = "进阶",
	["designer:bingyuanbanling_yaoyaoyouling"] = "萌龙少主",
	["cv:bingyuanbanling_yaoyaoyouling"] = "",
	["illustrator:bingyuanbanling_yaoyaoyouling"] = "",
	["~bingyuanbanling_yaoyaoyouling"] = "",
}

--------------------------------------------------
--离缘
--------------------------------------------------

liyuan_lingcard = sgs.CreateSkillCard{
	name = "liyuan_ling",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if not to_select:isAllNude() and to_select:objectName() ~= sgs.Self:objectName() then
				return SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
			end
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		source:loseMark("@liyuan_ling")
		room:doAnimate(2, "skill=EyeAnim:bingyuanbanling1.png", "")
		room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
		room:getThread():delay(2500)
		source:turnOver()
		local N = 0
		for _,p in sgs.qlist(room:getAlivePlayers()) do
			if p:isWounded() then
				N = N + 1
			end
		end
		local card_ids = askForChooseNCards(source, targets[1], N, "hej", "liyuan_ling")
		if #card_ids > 0 then
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			for _, id in ipairs(card_ids) do
				dummy:addSubcard(id)
			end
			source:obtainCard(dummy, false)
			dummy:deleteLater()
			room:setPlayerMark(source, "liyuan_ling_target_"..targets[1]:objectName(), 1)	--借用情容
		end
	end
}
liyuan_lingvs = sgs.CreateZeroCardViewAsSkill{
	name = "liyuan_ling",
	view_as = function()
		return liyuan_lingcard:clone()
	end,
	enabled_at_play = function(self, player)
		if player:getMark("@liyuan_ling") > 0 then
			local can_trigger = player:isWounded()
			if not can_trigger then
				for _, p in sgs.qlist(player:getSiblings()) do
					if p:isWounded() then
						can_trigger = true
						break
					end
				end
			end
			return can_trigger
		end
		return false
	end
}
liyuan_ling = sgs.CreateTriggerSkill{
	name = "liyuan_ling",
	frequency = sgs.Skill_Limited,
	view_as_skill = liyuan_lingvs,
	limit_mark = "@liyuan_ling",
	on_trigger = function()
	end
}
table.insert(turn_end_clear_mark_prefix, "liyuan_ling_target_")	--回合结束清除指定前缀的标记

bingyuanbanling_yaoyaoyouling:addSkill(liyuan_ling)

sgs.LoadTranslationTable{
	["liyuan_ling"] = "离缘",
	["@liyuan_ling"] = "离缘",
	[":liyuan_ling"] = "限定技，出牌阶段，你可以指定一名角色，你翻面，获得其区域内的X张牌，本回合防止你对其造成的伤害。（X为已受伤角色数）",
	["$liyuan_ling"] = "",
	["^liyuan_ling"] = "你可以翻面，获得一名其他角色的X张牌，本回合不能对其造成伤害<br/>（X为场上已受伤角色数）<br/>操作提示：选择一名角色→确定",
}

--------------------------------------------------
--灵缚
--------------------------------------------------

lingfucard = sgs.CreateSkillCard{
	name = "lingfu",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if not to_select:hasSkill("youyuan") then
				return SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
			end
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		source:loseMark("@lingfu")
		room:doAnimate(2, "skill=EyeAnim:bingyuanbanling2.png", "")
		room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
		room:getThread():delay(2500)
		--room:loseMaxHp(source, 1)
		room:acquireSkill(targets[1], "youyuan")
	end
}
lingfuvs = sgs.CreateZeroCardViewAsSkill{
	name = "lingfu",
	view_as = function()
		return lingfucard:clone()
	end,
	enabled_at_play = function(self, player)
		return player:getMark("@lingfu") > 0 and player:getMaxHp() >= 1
	end
}
lingfu = sgs.CreateTriggerSkill{
	name = "lingfu",
	frequency = sgs.Skill_Limited,
	view_as_skill = lingfuvs,
	limit_mark = "@lingfu",
	on_trigger = function()
	end
}

bingyuanbanling_yaoyaoyouling:addSkill(lingfu)

sgs.LoadTranslationTable{
	["lingfu"] = "灵缚",
	["@lingfu"] = "灵缚",
	[":lingfu"] = "限定技，出牌阶段，你可以指定一名角色，令其获得“幽缘”。",
	["$lingfu"] = "",
	["^lingfu"] = "你可以令一名角色获得“幽缘”<br/><br/>〖幽缘〗<font color='blue'><b>锁定技，</b></font>准备阶段，若你不是体力值最低的角色，你须指定一名其他角色，其选择一项：1.交给你一张黑色牌 2.令你失去1点体力。<br/><br/>操作提示：选择一名角色→确定",
}

--------------------------------------------------
--幽缘
--------------------------------------------------

youyuan = sgs.CreateTriggerSkill{
	name = "youyuan",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start then
				local can_trigger = false
				for _,p in sgs.qlist(room:getOtherPlayers(player)) do
					if p:getHp() < player:getHp() then
						can_trigger = true
						break
					end
				end
				if can_trigger then
					local targets = sgs.SPlayerList()
					for _, p in sgs.qlist(room:getOtherPlayers(player)) do
						if SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
							targets:append(p)
						end
					end
					if not targets:isEmpty() then
						local target = room:askForPlayerChosen(player, targets, self:objectName(), "@youyuan_ask", false, true)
						if target and not SkillNullify(player, self:objectName()) then
							local _data = sgs.QVariant()
							_data:setValue(player)
							local card = room:askForCard(target, ".|black|.|hand,equipped", "@youyuan_give:"..player:objectName(), _data, sgs.Card_MethodNone)
							if card then
								local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, target:objectName(), player:objectName(), self:objectName(), "")
								room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, true)
								--if (player:getState() == "robot" or player:getState() == "trust") and player:hasFlag("youyuan_AI_tricking") then	--AI智商检测对方玩家，如果对方玩家真给了就送花
								--	player:speak(".SendFlower="..target:objectName())
								--end
							else
								--local judge = sgs.JudgeStruct()
								--judge.pattern = ".|black"
								--judge.good = false
								--judge.negative = true
								--judge.reason = self:objectName()
								--judge.who = player
								--judge.play_animation = true
								--judge.time_consuming = false
								--room:judge(judge)
								--if not judge:isGood() then
									room:loseHp(player, 1, target, self:objectName())
								--end
							end
						end
					end
				end
			end
		end
	end
}

vup_anjiang:addSkill(youyuan)
bingyuanbanling_yaoyaoyouling:addRelateSkill("youyuan")

sgs.LoadTranslationTable{
	["youyuan"] = "幽缘",
	[":youyuan"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，准备阶段，若你不是体力值最低的角色，你须指定一名其他角色，其选择一项：1.交给你一张黑色牌 2.令你失去1点体力。",
	["$youyuan"] = "",
	["@youyuan_ask"] = "你的“幽缘”被触发，请指定一名角色，其可以交给你一张黑色牌，或令你失去1点体力",
	["@youyuan_give"] = "你可以交给 %src 一张黑色牌，否则 %src 失去1点体力",
}

--------------------------------------------------
--漾影浮光 海月薰
--设计者：苍颜、萌龙少主
--------------------------------------------------

haiyuexun_yangyingfuguang = sgs.General(extension,"haiyuexun_yangyingfuguang","novus","4",false)

sgs.LoadTranslationTable{
	["haiyuexun_yangyingfuguang"] = "海月薰",
	["&haiyuexun_yangyingfuguang"] = "海月薰",
	["#haiyuexun_yangyingfuguang"] = "漾影浮光",
	["$haiyuexun_yangyingfuguang"] = "一般",
	["designer:haiyuexun_yangyingfuguang"] = "苍颜、萌龙少主",
	["cv:haiyuexun_yangyingfuguang"] = "",
	["illustrator:haiyuexun_yangyingfuguang"] = "",
	["~haiyuexun_yangyingfuguang"] = "",
}

--------------------------------------------------
--浮光
--------------------------------------------------

fuguangUseCard = sgs.CreateSkillCard{
	name = "fuguangUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(sgs.Self:getMark("fuguang_id")-1)
		return card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
	end,
	feasible = function(self, targets)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(sgs.Self:getMark("fuguang_id")-1)
		return card and card:targetsFeasible(targets_list, sgs.Self)
	end,
	about_to_use = function(self, room, use)
		local card_for_use = sgs.Sanguosha:getCard(use.from:getMark("fuguang_id")-1)
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
fuguangcard = sgs.CreateSkillCard{
	name = "fuguang",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if sgs.Self:canPindian(to_select) then
				return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "fuguang")
			end
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		--room:broadcastSkillInvoke("fuguang")	--播放配音
		--room:getThread():delay(1000)
		source:pindian(targets[1], "fuguang", self)
	end
}
fuguangvs = sgs.CreateViewAsSkill{
	name = "fuguang",
	n = 1,
	view_filter = function(self, selected, to_select)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern ~= "@@fuguang!" and #selected == 0 then
			return not to_select:isEquipped()
		end
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@fuguang!" and #cards == 0 and sgs.Self:getMark("fuguang_id") > 0 then
			local NewSkillCard = fuguangUseCard:clone()
			return NewSkillCard
		elseif #cards == 1 then
			local NewSkillCard = fuguangcard:clone()
			NewSkillCard:addSubcard(cards[1])
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#fuguang") < 1 and player:canPindian()
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@fuguang!"
	end
}
fuguang = sgs.CreateTriggerSkill{
	name = "fuguang",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = fuguangvs,
	events = {sgs.Pindian},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Pindian then
			local pindian = data:toPindian()
			if pindian.reason == self:objectName() then
				local fromNumber = pindian.from_number
				local toNumber = pindian.to_number
				if fromNumber ~= toNumber then
					local winner
					local winner_card
					if fromNumber > toNumber then
						winner = pindian.from
						winner_card = pindian.from_card
					else
						winner = pindian.to
						winner_card = pindian.to_card
					end
					if winner and winner:isAlive() and winner_card and room:getCardPlace(winner_card:getId()) == sgs.Player_PlaceTable then
						if winner:canUse(winner_card, room:getAlivePlayers(), true) then	--新增第三个参数代表无视杀/酒等牌的次数限制
							if winner_card:targetFixed() then
								room:useCard(sgs.CardUseStruct(winner_card, winner, winner))
							else
								room:setPlayerMark(winner, "fuguang_id", winner_card:getId()+1)	--记录拼点牌，id+1避免id为0的牌的情况
								room:askForUseCard(winner, "@@fuguang!", "@fuguang")
								room:setPlayerMark(winner, "fuguang_id", 0)	--清理记录
							end
						end
					end
				end
			end
			return false
		end
	end,
	can_trigger = function(self, target)
		return target
	end,
}

haiyuexun_yangyingfuguang:addSkill(fuguang)

sgs.LoadTranslationTable{
	["fuguang"] = "浮光",
	[":fuguang"] = "出牌阶段限一次，你可以与一名角色拼点，赢的角色须使用其拼点牌。",
	["$fuguang"] = "",
	["^fuguang"] = "操作提示：<br/>选择一张用于拼点的手牌→选择一名角色→确定",
	["@fuguang"] = "请使用你用于拼点的牌",
	["~fuguang"] = "选择目标→确定",
}

--------------------------------------------------
--潜影
--------------------------------------------------

qianying = sgs.CreateTriggerSkill{
	name = "qianying",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.PindianVerifying},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PindianVerifying then
			local pindian = data:toPindian()
			if pindian.from and pindian.from:hasSkill(self:objectName()) and pindian.from_card:isBlack() and pindian.from_number > 6 and pindian.from:askForSkillInvoke(self:objectName(), data) and not SkillNullify(pindian.from, self:objectName()) then
				room:sendCompulsoryTriggerLog(pindian.from, self:objectName()) --显示锁定技发动
				room:broadcastSkillInvoke(self:objectName())	--播放配音
				pindian.from_number = math.max(1, pindian.from_number - 6)
				local log = sgs.LogMessage()
				log.type = "#qianying_change"
				log.arg = self:objectName()
				log.arg2 = getNumberChar(pindian.from_number)
				log.from = pindian.from
				room:sendLog(log)	--发送信息框消息
				pindian.from:drawCards(1, self:objectName())
			end
			if pindian.to and pindian.to:hasSkill(self:objectName()) and pindian.to_card:isBlack() and pindian.to_number > 6 and pindian.to:askForSkillInvoke(self:objectName(), data) and not SkillNullify(pindian.to, self:objectName()) then
				room:sendCompulsoryTriggerLog(pindian.to, self:objectName()) --显示锁定技发动
				room:broadcastSkillInvoke(self:objectName())	--播放配音
				pindian.to_number = math.max(1, pindian.to_number - 6)
				local log = sgs.LogMessage()
				log.type = "#qianying_change"
				log.arg = self:objectName()
				log.arg2 = getNumberChar(pindian.to_number)
				log.from = pindian.to
				room:sendLog(log)	--发送信息框消息
				pindian.to:drawCards(1, self:objectName())
			end
			data:setValue(pindian)
		end
	end,
	can_trigger = function(self, target)
		return target
	end,
}

haiyuexun_yangyingfuguang:addSkill(qianying)

sgs.LoadTranslationTable{
	["qianying"] = "潜影",
	[":qianying"] = "你的拼点牌亮出后，若之为黑色且点数>6，你可以<font color='#A9A9A9'>发动此技能</font>，令之点数-6，摸一张牌。",
	["$qianying"] = "",
	["#qianying_change"] = "由于“%arg”的效果，%from 的拼点牌点数视为 %arg2",
}

--------------------------------------------------
--应感灵心 安晚
--设计者：
--------------------------------------------------

anwan_yingganlingxin = sgs.General(extension,"anwan_yingganlingxin","novus","3",false)

sgs.LoadTranslationTable{
	["anwan_yingganlingxin"] = "安晚",
	["&anwan_yingganlingxin"] = "安晚",
	["#anwan_yingganlingxin"] = "应感灵心",
	["$anwan_yingganlingxin"] = "进阶",
	["designer:anwan_yingganlingxin"] = "月音风源",
	["cv:anwan_yingganlingxin"] = "",
	["illustrator:anwan_yingganlingxin"] = "",
	["~anwan_yingganlingxin"] = "",
}

--------------------------------------------------
--占术
--------------------------------------------------

zhanshu = sgs.CreateTriggerSkill{
	name = "zhanshu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardUsed},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardUsed then
			local use = data:toCardUse()
			if use.card:isKindOf("TrickCard") and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				if player:getPile("zhanshu_pile"):isEmpty() then
					local card_ids = room:getNCards(5)
					local banish_ids = sgs.IntList()
					local other_ids = sgs.IntList()
					room:fillAG(card_ids, player)
					local choose_id = room:askForAG(player, card_ids, false, "zhanshu_select")
					room:clearAG(player)
					local color = getColorString(sgs.Sanguosha:getCard(choose_id))
					for _,id in sgs.qlist(card_ids) do
						local card = sgs.Sanguosha:getCard(id)
						if getColorString(card) == color then
							banish_ids:append(id)
						else
							other_ids:append(id)
						end
					end
					player:addToPile("zhanshu_pile", banish_ids)
					if not other_ids:isEmpty() then
						room:askForGuanxing(player, other_ids, sgs.Room_GuanxingUpOnly)
					end
				else
					local card_ids = player:getPile("zhanshu_pile")
					room:fillAG(card_ids, player)
					local id = room:askForAG(player, card_ids, false, "zhanshu_get")
					room:clearAG(player)
					local card = sgs.Sanguosha:getCard(id)
					if card then
						player:obtainCard(card, true)
					end
				end
			end
			return false
		end
	end
}

anwan_yingganlingxin:addSkill(zhanshu)

sgs.LoadTranslationTable{
	["zhanshu"] = "占术",
	[":zhanshu"] = "你使用锦囊牌时，你可以<font color='#A9A9A9'>发动此技能</font>，若你有<font color='#804040'>“卜”</font>则你获得其中一张，否则你将牌堆顶的5张牌中一种颜色的牌作为<font color='#804040'>“卜”</font>除外，排列其余牌。",
	["$zhanshu"] = "",
	["zhanshu_pile"] = "卜",
	["^AG_zhanshu_select"] = "<b>占术</b><br/>请双击选择一张牌，将所有此颜色的牌作为“占”除外，其余牌置于牌堆顶",
	["^AG_zhanshu_get"] = "<b>占术</b><br/>请双击选择一张牌获得之",
}

--------------------------------------------------
--通感
--------------------------------------------------

tonggan_card = sgs.CreateSkillCard{
	name = "tonggan",
	target_fixed = true,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		
	end
}
tonggan_vs = sgs.CreateViewAsSkill{
	name = "tonggan",
	n = 1,
	expand_pile = "zhanshu_pile",
	view_filter = function(self, selected, to_select)
		if #selected < 1 then
			return not inHand(sgs.Self, to_select) and not to_select:isEquipped() and inPile(sgs.Self, to_select, "zhanshu_pile")
		else
			return false
		end
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = tonggan_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@tonggan"
	end
}
tonggan = sgs.CreateTriggerSkill{
	name = "tonggan",
	view_as_skill = tonggan_vs,
	events = {sgs.AskForRetrial, sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.AskForRetrial and not player:getPile("zhanshu_pile"):isEmpty() then
			local judge = data:toJudge()
			local prompt_list = {
				"@tonggan-card",
				judge.who:objectName(),
				"zhanshu_pile",
				judge.reason,
				string.format("%d", judge.card:getEffectiveId())
			}
			local prompt = table.concat(prompt_list, ":")
			player:setTag("judgeData", data)	--AI用
			local scard = room:askForUseCard(player, "@@tonggan", prompt, -1, sgs.Card_MethodNone)
			player:removeTag("judgeData")		--AI用
			
			if scard then
				local card = sgs.Sanguosha:getCard(scard:getSubcards():first())
				room:retrial(card, player, judge, self:objectName())
			end
			return false
		elseif event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			if not room:getTag("FirstRound"):toBool() and move.from and move.from:objectName() == player:objectName() and table.contains(move.from_pile_names, "zhanshu_pile") and move.from:getPile("zhanshu_pile"):isEmpty() then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
			end
		end
	end
}

anwan_yingganlingxin:addSkill(tonggan)

sgs.LoadTranslationTable{
	["tonggan"] = "通感",
	[":tonggan"] = "当判定牌生效前，你可以打出一张<font color='#804040'>“卜”</font>代替之。<br/>你失去所有<font color='#804040'>“卜”</font>后，回复1点体力。",
	["$tonggan"] = "",
	["@tonggan-card"] = "你可以打出一张“%dest”修改 %src 的 %arg 判定",
}

--------------------------------------------------
--月本狼神 月乃盈
--设计者：NSX
--------------------------------------------------

yuenaiying_yuebenlangshen = sgs.General(extension,"yuenaiying_yuebenlangshen","novus","4",false)

sgs.LoadTranslationTable{
	["yuenaiying_yuebenlangshen"] = "月乃盈",
	["&yuenaiying_yuebenlangshen"] = "月乃盈",
	["#yuenaiying_yuebenlangshen"] = "月本狼神",
	["$yuenaiying_yuebenlangshen"] = "简单",
	["designer:yuenaiying_yuebenlangshen"] = "NSX",
	["cv:yuenaiying_yuebenlangshen"] = "",
	["illustrator:yuenaiying_yuebenlangshen"] = "",
	["~yuenaiying_yuebenlangshen"] = "",
}

--------------------------------------------------
--盈异
--------------------------------------------------

yingyi_vs = sgs.CreateOneCardViewAsSkill{
	name = "yingyi",
	--expand_pile = "wooden_ox",	--允许使用木牛流马
	--response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, card)
    	return card:isBlack() and not card:isEquipped()
	end,
	view_as = function(self, originalCard)
		local obj_name
		if sgs.Self:getMark("&yingyi+slash") > 0 then
			obj_name = "slash"
		elseif sgs.Self:getMark("&yingyi+duel") > 0 then
			obj_name = "duel"
		end
		
		local new_card = sgs.Sanguosha:cloneCard(obj_name, originalCard:getSuit(), originalCard:getNumber())
		new_card:addSubcard(originalCard:getId())
		new_card:setSkillName(self:objectName())
		return new_card
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		if pattern == "@@yingyi" and player:getMark("&yingyi+slash") + player:getMark("&yingyi+duel") == 1 then
			return true
		end
		return false
	end
}
yingyi = sgs.CreateTriggerSkill{
	name = "yingyi",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = yingyi_vs,
	events = {sgs.EventPhaseStart, sgs.Damage},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getPhase() == sgs.Player_Finish and not player:isKongcheng() then
			local choices = {}
			for _,card in sgs.qlist(player:getHandcards()) do
				if card:isBlack() then
					if not table.contains(choices, "slash") then
						local new_card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
						new_card:addSubcard(card)
						new_card:setSkillName(self:objectName())
						if player:canUse(new_card) then
							table.insert(choices, "slash")
						end
						new_card:deleteLater()
					end
					if not table.contains(choices, "duel") then
						local new_card = sgs.Sanguosha:cloneCard("duel", sgs.Card_NoSuit, 0)
						new_card:addSubcard(card)
						new_card:setSkillName(self:objectName())
						if player:canUse(new_card) then
							table.insert(choices, "duel")
						end
						new_card:deleteLater()
					end
					if #choices == 2 then
						break
					end
				end
			end
			if #choices > 0 then
				table.insert(choices, "cancel")
				local choice = room:askForChoice(player, self:objectName().."+".."yingyi_choice_log", table.concat(choices, "+"))
				if choice ~= "cancel" then
					room:setPlayerMark(player, "&yingyi+"..choice, 1)
					local use_card = room:askForUseCard(player, "@@yingyi", "@yingyi:"..choice)
					room:setPlayerMark(player, "&yingyi+"..choice, 0)
					
					if use_card and player:hasFlag("yingyi_damaged") then
						player:setFlags("-yingyi_damaged")
						player:turnOver()
						player:drawCards(3, self:objectName())
					end
				end
			end
		elseif event == sgs.Damage then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.card and damage.card:getSkillName() == "yingyi" and damage.from and damage.to and damage.from:objectName() ~= damage.to:objectName() then
				damage.from:setFlags("yingyi_damaged")
			end
		end
		return false
	end
}

yuenaiying_yuebenlangshen:addSkill(yingyi)

sgs.LoadTranslationTable{
	["yingyi"] = "盈异",
	[":yingyi"] = "结束阶段，你可以将一张黑色手牌当【杀】或【决斗】使用，若此牌对其他角色造成了伤害，你翻面并摸三张牌。",
	["$yingyi"] = "",
	["yingyi_choice_log"] = "请选择你要转化的牌：",
	["@yingyi"] = "请将一张黑色手牌当 %src 使用",
	["~yingyi"] = "选择一张牌→选择目标→确定",
}

--------------------------------------------------
--龙生姜角 礼墨
--设计者：NSX
--------------------------------------------------

limo_longshengjiangjiao = sgs.General(extension,"limo_longshengjiangjiao","novus","4",false)

sgs.LoadTranslationTable{
	["limo_longshengjiangjiao"] = "礼墨",
	["&limo_longshengjiangjiao"] = "礼墨",
	["#limo_longshengjiangjiao"] = "龙生姜角",
	["$limo_longshengjiangjiao"] = "一般",
	["designer:limo_longshengjiangjiao"] = "NSX",
	["cv:limo_longshengjiangjiao"] = "",
	["illustrator:limo_longshengjiangjiao"] = "",
	["~limo_longshengjiangjiao"] = "",
}

--------------------------------------------------
--姜撞
--------------------------------------------------

--[[jiangzhuang = sgs.CreateFilterSkill{
	name = "jiangzhuang",
	view_filter = function(self, to_select)
		if sgs.Self:getPhase() ~= sgs.Player_NotActive then
			local room = sgs.Sanguosha:currentRoom()
			local place = room:getCardPlace(to_select:getEffectiveId())
			return to_select:isKindOf("EquipCard") and place == sgs.Player_PlaceHand
		end
		return false
	end,
	view_as = function(self, card)
		local new_card = sgs.Sanguosha:cloneCard("Slash", card:getSuit(), card:getNumber())
		new_card:setSkillName("jiangzhuang")
		local _card = sgs.Sanguosha:getWrappedCard(card:getId())
		_card:takeOver(new_card)
		return _card
	end
}]]
jiangzhuang = sgs.CreateProhibitSkill{	--回合内禁止使用在手牌中的装备
	name = "jiangzhuang",
	is_prohibited = function(self, from, to, card)
		return from:hasSkill("jiangzhuang") and from:getPhase() ~= sgs.Player_NotActive and card:isKindOf("EquipCard") and inHand(from, card)
	end
}
jiangzhuang_lock = sgs.CreateTriggerSkill{
	name = "#jiangzhuang_lock",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.BeforeCardsMove},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.BeforeCardsMove and player:getPhase() == sgs.Player_NotActive then
			local move = data:toMoveOneTime()
			local triggered = false
			local trigger_type = 0
			local new_card_ids = sgs.IntList()
			local remove_card_ids = sgs.IntList()
			local dummy_throw = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			if move.from and move.from:objectName() == player:objectName() and move.from_places:contains(sgs.Player_PlaceEquip) then	--失去装备
				for i = 0, move.card_ids:length() - 1, 1 do
					local id = move.card_ids:at(i)
					local card = sgs.Sanguosha:getCard(id)
					if move.from_places:at(i) ~= sgs.Player_PlaceEquip or move.reason.m_skillName == card:objectName() then	--允许因装备自身效果离场（防止宇航兔两轮车无限发效）
						new_card_ids:append(id)
					else
						triggered = true
						trigger_type = 1
						remove_card_ids:append(id)
					end
				end
				if triggered then
					move.from_places:removeAll(sgs.Player_PlaceEquip)
				end
			elseif move.to and move.to:objectName() == player:objectName() and move.to_place == sgs.Player_PlaceEquip then	--获得重复装备
				for _, id in sgs.qlist(move.card_ids) do
					local card = sgs.Sanguosha:getCard(id)
					if card and card:isKindOf("EquipCard") then
						local equip_index = card:getRealCard():toEquipCard():location()
						if player:hasEquipArea(equip_index) and player:getEquip(equip_index) ~= nil then
							triggered = true
							trigger_type = 2
							dummy_throw:addSubcard(id)
							remove_card_ids:append(id)
							continue
						end
					end
					new_card_ids:append(id)
				end
			end
			if triggered then
				local logg = sgs.LogMessage()
				logg.from = player
				logg.type = "$jiangzhuang_invoke"..trigger_type
				logg.arg = "jiangzhuang"
				room:sendLogWithIds(logg, remove_card_ids)	--显示技能发动提示信息
				room:notifySkillInvoked(player, "jiangzhuang")	--在武将牌上显示技能名
				
				if dummy_throw:subcardsLength() > 0 then
					room:moveCardTo(dummy_throw, nil, nil, sgs.Player_DiscardPile, move.reason)
				end
				
				move.card_ids = new_card_ids
				data:setValue(move)
			end
			dummy_throw:deleteLater()
			return false
		end
	end
}

limo_longshengjiangjiao:addSkill(jiangzhuang)
limo_longshengjiangjiao:addSkill(jiangzhuang_lock)
extension:insertRelatedSkills("jiangzhuang", "#jiangzhuang_lock")		--添加子技能

sgs.LoadTranslationTable{
	["jiangzhuang"] = "姜撞",
	["#jiangzhuang_lock"] = "姜撞",
	[":jiangzhuang"] = "锁定技，回合内你不能使用手牌中的装备牌，回合外"..WordState("锁定", word_lock_equip).."你装备区内的装备牌。",
	["$jiangzhuang"] = "",
	["$jiangzhuang_invoke1"] = "%from 的“%arg”被触发，%from 的 %card 不能离开装备区",
	["$jiangzhuang_invoke2"] = "%from 的“%arg”被触发，%from 不能将 %card 置入装备区",
}

--------------------------------------------------
--玄鳞
--------------------------------------------------

xuanlinbuff = sgs.CreateMaxCardsSkill{
	name = "#xuanlinbuff",
	extra_func = function(self, target)
		if target:hasSkill("xuanlin") and target:getPhase() == sgs.Player_Discard then
			local x = 0
			for _, card in sgs.list(target:getHandcards()) do
				if card:isBlack() then
					x = x + 1
				end
			end
			return x
		end
	end
}
xuanlin = sgs.CreateTriggerSkill{
	name = "xuanlin",
	events = {sgs.EventPhaseStart, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			local black_count = 0
			for _,card in sgs.qlist(player:getHandcards()) do
				if card:isBlack() then
					black_count = black_count + 1
					if black_count >= 2 then
						break
					end
				end
			end
			if black_count >= 2 then
				if room:askForDiscard(player, self:objectName(), 2, 2, true, false, "#xuanlin_invoke", ".|black|.|hand", self:objectName()) and not SkillNullify(player, self:objectName()) then
					local choices = {}
					for i = 0, 4 do
						if player:hasEquipArea(i) then
							table.insert(choices, "jueyan"..i)
						end
					end
					if #choices == 0 then return false end
					local choice = room:askForChoice(player, self:objectName(), table.concat(choices, "+"))
					if choice and choice ~= "" then
						local x = tonumber(string.sub(choice, string.len(choice), string.len(choice)))
						
						local equips = sgs.CardList()
						for _,id in sgs.qlist(room:getDrawPile()) do
							local card = sgs.Sanguosha:getCard(id)
							if card:isKindOf("EquipCard") and card:getRealCard():toEquipCard():location() == x and player:canUse(card) then
								equips:append(card)
							end
						end
						for _,id in sgs.qlist(room:getDiscardPile()) do
							local card = sgs.Sanguosha:getCard(id)
							if card:isKindOf("EquipCard") and card:getRealCard():toEquipCard():location() == x and player:canUse(card) then
								equips:append(card)
							end
						end
						if not equips:isEmpty() then
							local card = equips:at(math.random(0, equips:length() - 1))
							if player:canUse(card) then
								room:useCard(sgs.CardUseStruct(card, player, player))
							end
						else
							local log = sgs.LogMessage()
							log.type = "#xuanlin_find_fail"
							log.arg = "xuanlin"
							room:sendLog(log)	--发送信息框消息
						end
					end
				end
			end
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Discard then
				local invoke = false
				for _, card in sgs.list(player:getHandcards()) do
					if card:isBlack() then
						invoke = true
						room:setPlayerCardLimitation(player, "discard", sgs.Sanguosha:getCard(card:getId()):toString(), false)
					end
				end
				if invoke then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				end
			end
			if change.from == sgs.Player_Discard then
				for _, card in sgs.list(player:getHandcards()) do
					if card:isBlack() then
						room:removePlayerCardLimitation(player, "discard", sgs.Sanguosha:getCard(card:getId()):toString().."$0")
					end
				end
			end
		end
	end
}

limo_longshengjiangjiao:addSkill(xuanlin)
limo_longshengjiangjiao:addSkill(xuanlinbuff)

sgs.LoadTranslationTable{
	["xuanlin"] = "玄鳞",
	["#xuanlinbuff"] = "玄鳞",
	[":xuanlin"] = "弃牌阶段，你的黑色牌不计入手牌数。<br/>结束阶段，你可以<font color='#A9A9A9'>发动此技能</font>，弃置两张黑色手牌，从牌堆、弃牌堆中随机使用一张指定栏位的装备牌。",
	["$xuanlin"] = "",
	["#xuanlin_invoke"] = "你可以发动“玄鳞”，弃置两张黑色手牌，检索一个指定栏位的装备",
	["#xuanlin_find_fail"] = "没有可通过“%arg”获得的装备牌",
}

--------------------------------------------------
--安产型好兔 帕里
--设计者：萌佬
--------------------------------------------------

paryi = sgs.General(extension,"paryi","usthree","4",false)

sgs.LoadTranslationTable{
	["paryi"] = "帕里",
	["&paryi"] = "帕里",
	["#paryi"] = "安产型好兔",
	["$paryi"] = "硬核",
	["designer:paryi"] = "萌龙少主",
	["cv:paryi"] = "",
	["illustrator:paryi"] = "",
	["~paryi"] = "♪希望のはな　繋いだ絆を♪(GREEN HAT召唤！)",
}

paryi:setGender(sgs.General_Neuter)
table.insert(robot_change_general, "paryi")	--对电脑禁用

--------------------------------------------------
--神绘
--（2020.12.25 萌佬）修正日志：修复了效果②需要受伤才能发动的问题
--（2021.1.2 萌佬）修正日志：效果⑤因为会反复触发铁索，削弱成视为使用普通【杀】
--------------------------------------------------

luashenhui = sgs.CreateTriggerSkill{
	name = "luashenhui",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.GameStart, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart or (event == sgs.EventPhaseChanging and data:toPhaseChange().from ~= sgs.Player_NotActive and data:toPhaseChange().to == sgs.Player_NotActive) then
			if event == sgs.GameStart or (player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName())) then
				if event == sgs.GameStart then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				end
				
				if player:hasSkill("luashenhui_sub") then
					room:detachSkillFromPlayer(player, "luashenhui_sub")
				end
				for _, mark in sgs.list(player:getMarkNames()) do
					if string.sub(mark, 1, 12) == "&luashenhui+" and player:getMark(mark) > 0 then
						room:setPlayerMark(player, mark, 0)
					end
				end
				room:setPlayerMark(player, "luashenhui_event", 0)
				room:setPlayerMark(player, "luashenhui_cost", 0)
				room:setPlayerMark(player, "luashenhui_effect", 0)
				--选择时机
				local choice = room:askForChoice(player, self:objectName(), "luashenhui_event1+luashenhui_event2")
				ChoiceLog(player, choice)
				room:setPlayerMark(player, "luashenhui_event", tonumber(string.sub(choice, -1)))
				--选择代价
				local choice = room:askForChoice(player, self:objectName(), "luashenhui_cost1+luashenhui_cost2+luashenhui_cost3")
				ChoiceLog(player, choice)
				room:setPlayerMark(player, "luashenhui_cost", tonumber(string.sub(choice, -1)))
				--选择效果
				local choice = room:askForChoice(player, self:objectName(), "luashenhui_effect1+luashenhui_effect2+luashenhui_effect3+luashenhui_effect4+luashenhui_effect5+luashenhui_effect6")
				ChoiceLog(player, choice)
				room:setPlayerMark(player, "luashenhui_effect", tonumber(string.sub(choice, -1)))
				--更新描述
				local new_str = "<font color='#008B8B'><b>衍生技，</b></font>"..sgs.Sanguosha:translate("luashenhui_event"..player:getMark("luashenhui_event")).."，你可以"..sgs.Sanguosha:translate("luashenhui_cost"..player:getMark("luashenhui_cost")).."，"..sgs.Sanguosha:translate("luashenhui_effect"..player:getMark("luashenhui_effect")).."。"
				sgs.Sanguosha:addTranslationEntry(":luashenhui_sub", ""..string.gsub(sgs.Sanguosha:translate(":luashenhui_sub"), sgs.Sanguosha:translate(":luashenhui_sub"), new_str))
				room:acquireSkill(player, "luashenhui_sub")
				room:setPlayerMark(player, "&luashenhui+"..player:getMark("luashenhui_event").."_num+"..player:getMark("luashenhui_cost").."_num+"..player:getMark("luashenhui_effect").."_num", 1)
				room:setEmotion(player, "paryi")
				local random_one = math.random(2,21)
				player:speak("bubble:"..sgs.Sanguosha:translate("$luashenhui"..random_one).." 召唤！")
				room:broadcastSkillInvoke(self:objectName(), random_one)	--播放配音
				room:getThread():delay(500)
				--player:speak("召唤！")
				room:broadcastSkillInvoke(self:objectName(), 1)	--播放配音
				
				if player:getMark("&luashenhui+2_num+3_num+1_num") > 0 then		--231解锁 花園セレナ
					local hour = tonumber(os.date("%H"))
					if hour < 4 or hour >= 20 then
						RecordUnlockGenerals(player, "hanazono_serena")	--为玩家记录可解锁角色
					end
				elseif player:getMark("&luashenhui+1_num+2_num+2_num") > 0 then		--122解锁 高槻りつ
					if player:getHp() == 1 then
						RecordUnlockGenerals(player, "takatsuki_ritsu")	--为玩家记录可解锁角色
					end
				elseif player:getMark("&luashenhui+1_num+2_num+1_num") > 0 then		--121解锁 乙女おと
					if player:getHp() == 1 then
						RecordUnlockGenerals(player, "otome_oto")	--为玩家记录可解锁角色
					end
				elseif event == sgs.GameStart and player:getMark("&luashenhui+1_num+1_num+2_num") > 0 then		--112解锁 夢乃栞（前置条件）
					room:setPlayerMark(player, "yumeno_shiori_unlock_A", 1)
				end
			end
		end
		return false
	end
}

luashenhui_subbuff = sgs.CreateTargetModSkill{
	name = "#luashenhui_subbuff",
	pattern = ".",
	distance_limit_func = function(self, from, card, to)
		local n = 0
		if card:isKindOf("Slash") and card:getSkillName() == "luashenhui_sub" then
			n = n + 1000
		end
		return n
	end
}
luashenhui_subcard = sgs.CreateSkillCard{
	name = "luashenhui_sub" ,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		slash:setSkillName("_"..self:objectName())
		slash:deleteLater()
		return slash:targetFilter(targets_list, to_select, sgs.Self)
	end,
	on_use = function(self, room, source, targets)
		local targets_list = sgs.SPlayerList()
		for _, target in ipairs(targets) do
			if source:canSlash(target, nil, false) then
				targets_list:append(target)
			end
		end
		if not targets_list:isEmpty() then
			local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			slash:setSkillName("_"..self:objectName())
			room:useCard(sgs.CardUseStruct(slash, source, targets_list))
		end
	end
}
luashenhui_subvs = sgs.CreateZeroCardViewAsSkill{
	name = "luashenhui_sub",
	view_as = function()
		return luashenhui_subcard:clone()
	end,
	enabled_at_play = function()
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@luashenhui_sub!"
	end
}
luashenhui_sub = sgs.CreateTriggerSkill{
	name = "luashenhui_sub",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.Damaged},
	view_as_skill = luashenhui_subvs,
	on_trigger = function(self, event, player, data, room)
		if player:getMark("luashenhui_event") == 0 or player:getMark("luashenhui_cost") == 0 or player:getMark("luashenhui_effect") == 0 then
			return false
		end
		--时机
		local trigger_times = 0	--可发动次数
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Play and player:getMark("luashenhui_event") == 1 then
			trigger_times = 1
		elseif event == sgs.Damaged and data:toDamage().damage > 0 and player:getMark("luashenhui_event") == 2 then
			trigger_times = data:toDamage().damage
		end
		
		for i = 1,trigger_times,1 do
			--代价
			local cost_paid = false
			if player:getMark("luashenhui_cost") == 1 and room:askForCard(player, "BasicCard", "@luashenhui_sub_basic", data, sgs.Card_MethodDiscard) then
				cost_paid = true
				local logg = sgs.LogMessage()
				logg.from = player
				logg.type = "#InvokeSkill"
				logg.arg = self:objectName()
				room:sendLog(logg)	--显示技能发动提示信息
				room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
			elseif player:getMark("luashenhui_cost") == 2 and player:getHp() > 0 and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. "luashenhui_cost2")) then
				cost_paid = true
				room:loseHp(player, 1)
			elseif player:getMark("luashenhui_cost") == 3 --[[and player:faceUp()]] and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. "luashenhui_cost3")) then
				cost_paid = true
				player:turnOver()
			end
			if not cost_paid then
				break
			else
				--萝里解锁统计
				room:setPlayerMark(player, "loryi_unlock_counter_"..player:getMark("luashenhui_effect"), 1)
				if player:getMark("loryi_unlock_counter_1") > 0 and
						player:getMark("loryi_unlock_counter_2") > 0 and
						player:getMark("loryi_unlock_counter_3") > 0 and
						player:getMark("loryi_unlock_counter_4") > 0 and
						player:getMark("loryi_unlock_counter_5") > 0 and
						player:getMark("loryi_unlock_counter_6") > 0 then
					RecordUnlockGenerals(player, "loryi")	--为玩家记录可解锁角色
				end
				
				--效果
				if player:getMark("luashenhui_effect") == 1 then
					local target = room:askForPlayerChosen(player, room:getAlivePlayers(), self:objectName(), "@luashenhui_sub_draw", false, false)
					if target and player:canEffect(target, self:objectName()) then
						room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						target:drawCards(2, self:objectName())
					end
				elseif player:getMark("luashenhui_effect") == 2 then
					local card_id = room:drawCard()
					local card = sgs.Sanguosha:getCard(card_id)
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DRAW, player:objectName(), self:objectName(), "")
					room:obtainCard(player, card, reason, true)
					room:getThread():delay(250)
					if room:getCardOwner(card_id) == player then
						room:showCard(player, card_id)
						room:getThread():delay(500)
						if card:isRed() --[[and player:isWounded()]] then
							local recover = sgs.RecoverStruct()
							recover.who = player
							recover.recover = 1
							room:recover(player, recover)
						end
					end
				elseif player:getMark("luashenhui_effect") == 3 then
					local card_ids = room:getNCards(4)
					room:askForGuanxing(player, card_ids, sgs.Room_GuanxingUpOnly)
					
					if player:getMark("&luashenhui+2_num+1_num+3_num") > 0 then		--213解锁 千草はな
						room:addPlayerMark(player, "chigusa_hana_unlock_count", 1)
						if player:getMark("chigusa_hana_unlock_count") >= 2 then
							RecordUnlockGenerals(player, "chigusa_hana")	--为玩家记录可解锁角色
						end
					end
				elseif player:getMark("luashenhui_effect") == 4 then
					local targets = sgs.SPlayerList()
					for _,p in sgs.qlist(room:getOtherPlayers(player)) do
						if not p:isAllNude() and player:canEffect(p, self:objectName()) then
							targets:append(p)
						end
					end
					if not targets:isEmpty() then
						local to = room:askForPlayerChosen(player, targets, self:objectName(), "@luashenhui_sub_get", false, false)
						if to then
							room:doAnimate(1, player:objectName(), to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
							local id = room:askForCardChosen(player, to, "hej", self:objectName(), false, sgs.Card_MethodNone)
							player:obtainCard(sgs.Sanguosha:getCard(id))
						end
					end
				elseif player:getMark("luashenhui_effect") == 5 then
					room:askForUseCard(player, "@@luashenhui_sub!", "@luashenhui_sub_slash")
				elseif player:getMark("luashenhui_effect") == 6 then
					local targets = sgs.SPlayerList()
					for _,p in sgs.qlist(room:getAlivePlayers()) do
						if p:getCards("he"):length() >= 2 and player:canEffect(p, self:objectName()) then
							targets:append(p)
						end
					end
					if not targets:isEmpty() then
						local to = room:askForPlayerChosen(player, targets, self:objectName(), "@luashenhui_sub_banish", false, false)
						if to then
							BanishNCards(player, to, 2, "he", "luashenhui_sub", true)
						end
					end
				end
			end
		end
		return false
	end
}
table.insert(turn_end_banish_pile, "luashenhui_sub")	--除外直到回合结束

paryi:addSkill(luashenhui)
paryi:addSkill(luashenhui_subbuff)
local skills = sgs.SkillList()
if not sgs.Sanguosha:getSkill("luashenhui_sub") then skills:append(luashenhui_sub) end	--神绘子技能
sgs.Sanguosha:addSkills(skills)

sgs.LoadTranslationTable{
	["luashenhui"] = "神绘",
	[":luashenhui"] = "游戏开始时，你从<font color='green'>时机</font>、<font color='orange'>代价</font>、<font color='purple'>效果</font>中制造一个技能“绘生”并获得。回合结束时，你可以<font color='#A9A9A9'>发动此技能</font>，重写“绘生”。\
	<br/><font color='green'>时机：①出牌阶段开始时 ②你受到1点伤害后 </font>\
	<br/><font color='orange'>代价：①弃置一张基本牌 ②失去1点体力 ③将角色牌翻面 </font>\
	<br/><font color='purple'>效果：①令一名角色摸两张牌 ②摸一张牌并展示之，若为红色则回复1点体力 ③观看并排列牌堆顶的4张牌 ④获得一名其他角色区域内的一张牌 ⑤视为使用一张无距离限制的【杀】 ⑥除外一名角色的两张牌直到回合结束 </font>",
	["luashenhui_event1"] = "出牌阶段开始时",
	["luashenhui_event2"] = "你受到1点伤害后",
	["luashenhui_cost1"] = "弃置一张基本牌",
	["luashenhui_cost2"] = "失去1点体力",
	["luashenhui_cost3"] = "将角色牌翻面",
	["luashenhui_effect1"] = "令一名角色摸两张牌",
	["luashenhui_effect2"] = "摸一张牌并展示之，若为红色则回复1点体力",
	["luashenhui_effect3"] = "观看并排列牌堆顶的4张牌",
	["luashenhui_effect4"] = "获得一名其他角色区域内的一张牌",
	["luashenhui_effect5"] = "视为使用一张无距离限制的【杀】",
	["luashenhui_effect6"] = "除外一名角色的两张牌直到回合结束",
	["luashenhui_sub"] = "绘生",
	["#luashenhui_subbuff"] = "绘生",
	[":luashenhui_sub"] = "",
	["luashenhui_sub:choice"] = "你可以发动“绘生”，%src",
	["@luashenhui_sub_basic"] = "你可以发动“绘生”，弃置一张基本牌",
	["@luashenhui_sub_draw"] = "请选择一名角色，令其摸两张牌",
	["@luashenhui_sub_get"] = "请选择一名角色，获得其区域内的一张牌",
	["@luashenhui_sub_slash"] = "你可以视为使用一张无距离限制的【杀】",
	["@luashenhui_sub_banish"] = "请选择一名角色，除外其两张牌直到回合结束",
	["~luashenhui_sub"] = "选择此【杀】的目标角色→确定",
	["$luashenhui1"] = "召唤！",
	["$luashenhui2"] = "Shiori酱",
	["$luashenhui3"] = "Mea酱",
	["$luashenhui4"] = "千草hana",
	["$luashenhui5"] = "双叶sui酱",
	["$luashenhui6"] = "Miu",
	["$luashenhui7"] = "Mana酱",
	["$luashenhui8"] = "律酱",
	["$luashenhui9"] = "Serena",
	["$luashenhui10"] = "Ena酱",
	["$luashenhui11"] = "千秋",
	["$luashenhui12"] = "Oto酱",
	["$luashenhui13"] = "来梦Meruto",
	["$luashenhui14"] = "血遊",
	["$luashenhui15"] = "鸣酱",
	["$luashenhui16"] = "艾利欧",
	["$luashenhui17"] = "花音",
	["$luashenhui18"] = "爱音",
	["$luashenhui19"] = "妃奈酱",
	["$luashenhui20"] = "铃",
	["$luashenhui21"] = "阿媂娅",
	["$luashenhui_sub1"] = "",
	["$luashenhui_sub2"] = "",
}

--------------------------------------------------
--萝里
--设计者：--
--------------------------------------------------

loryi = sgs.General(extension,"loryi","usthree","3",false,true,true)

sgs.LoadTranslationTable{
	["loryi"] = "萝里",
	["&loryi"] = "萝里",
	["#loryi"] = "本体在中间",
	["$loryi"] = "硬核",
	["designer:loryi"] = "萌龙少主",
	["cv:loryi"] = "",
	["illustrator:loryi"] = "paryi",
	["unlock:loryi"] = "一局游戏中使用帕里的“绘生”执行过全部6种效果",	--解锁条件
	["~loryi"] = "",
}

loryi:setGender(sgs.General_Neuter)
loryi:setBonus(true)	--设为奖励角色

--------------------------------------------------
--心映
--------------------------------------------------

xinying = sgs.CreateFilterSkill{
	name = "xinying",
	view_filter = function(self,to_select)
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return not to_select:isKindOf("EquipCard") and place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local class_name
		if card:getSuit() == sgs.Card_Heart then
			class_name = "Peach"
		elseif card:getSuit() == sgs.Card_Diamond then
			class_name = "Jink"
		elseif card:getSuit() == sgs.Card_Spade then
			class_name = "Nullification"
		elseif card:getSuit() == sgs.Card_Club then
			class_name = "IceSlash"
		end
		
		local new_card = sgs.Sanguosha:cloneCard(class_name, card:getSuit(), card:getNumber())
		new_card:setSkillName("xinying")
		local _card = sgs.Sanguosha:getWrappedCard(card:getId())
		_card:takeOver(new_card)
		return _card
	end
}

loryi:addSkill(xinying)

sgs.LoadTranslationTable{
	["xinying"] = "心映",
	[":xinying"] = "锁定技，你的非装备手牌均遵循以下规则：<br/>红桃牌视为【桃】；方块牌视为【闪】；<br/>黑桃牌视为【无懈可击】；梅花牌视为冰【杀】。",
	["$xinying"] = "",
}

--------------------------------------------------
--泥嚎
--------------------------------------------------

function isStraight(list)	--返回一个数组table是否是连续数列
	if #list < 2 then
		return false
	end
	local small = 0
	table.sort(list)
	for _,num in ipairs(list) do
		if small == 0 then
			small = num
		else
			if num == small + 1 then
				small = num
			else
				return false
			end
		end
	end
	return true
end

nihao_card = sgs.CreateSkillCard{
	name = "nihao",
	will_throw = true,
	handling_method = sgs.Card_MethodDiscard,
	filter = function(self, targets, to_select)
		local numbers = {}
		local sum = 0
		for _, id in sgs.qlist(self:getSubcards()) do
			local card = sgs.Sanguosha:getCard(id)
			sum = sum + card:getNumber()
			table.insert(numbers, card:getNumber())
		end
		if sum == 24 and #targets < 2 and to_select:objectName() ~= sgs.Self:objectName() then
			return true
		end
		if (isStraight(numbers) and #targets < self:subcardsLength() and to_select:objectName() ~= sgs.Self:objectName() and not to_select:isKongcheng()) then
			return true
		end
		return false
	end,
	feasible = function(self, targets)
		local numbers = {}
		local sum = 0
		for _, id in sgs.qlist(self:getSubcards()) do
			local card = sgs.Sanguosha:getCard(id)
			sum = sum + card:getNumber()
			table.insert(numbers, card:getNumber())
		end
		if (sum == 7 and #targets == 0) or (sum == 24 and #targets > 0 and #targets <= 2) or (isStraight(numbers) and #targets == self:subcardsLength()) then
			return true
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		source:speak("bubble:你好！")
		if #targets > 0 then
			local sum = 0
			for _, id in sgs.qlist(self:getSubcards()) do
				local card = sgs.Sanguosha:getCard(id)
				sum = sum + card:getNumber()
			end
			if sum == 24 and #targets > 0 and #targets <= 2 then
				if #targets == 1 and source:canEffect(targets[1], self:objectName()) then
					room:damage(sgs.DamageStruct(self:objectName(), source, targets[1], 2, sgs.DamageStruct_Ice))
				else
					if source:canEffect(targets[1], self:objectName()) then
						room:damage(sgs.DamageStruct(self:objectName(), source, targets[1], 1, sgs.DamageStruct_Ice))
					end
					if source:canEffect(targets[2], self:objectName()) then
						room:damage(sgs.DamageStruct(self:objectName(), source, targets[2], 1, sgs.DamageStruct_Ice))
					end
				end
			else
				for _, target in ipairs(targets) do
					room:cardEffect(self, source, target)
				end
				if not source:isKongcheng() then
					room:askForDiscard(source, self:objectName(), 1, 1, false, false)
				end
			end
		else
			source:drawCards(2, self:objectName())
		end
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		if not effect.to:isKongcheng() and effect.from:canEffect(effect.to, self:objectName()) then
			effect.to:speak("bubble:paryi kimo")
			local card = room:askForCard(effect.to, ".|.|.|hand!", "@nihao_give:" .. effect.from:objectName(), sgs.QVariant(), sgs.Card_MethodNone)
			if card then
				room:moveCardTo(card, effect.from, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, effect.to:objectName(), effect.from:objectName(), "luajuzhong", ""))
			end
		end
	end
}
nihao = sgs.CreateViewAsSkill{
	name = "nihao",
	n = 999,
	view_filter = function(self, selected, to_select)
		if #selected == 0 then
			return true
		else
			local numbers = {}
			local sum = 0
			for _,card in ipairs(selected) do
				sum = sum + card:getNumber()
				table.insert(numbers, card:getNumber())
			end
			table.insert(numbers, to_select:getNumber())
			if sum + to_select:getNumber() <= 24 or isStraight(numbers) then
				return true
			end
		end
		return false
	end,
	view_as = function(self, cards)
		local new = nihao_card:clone()
		if #cards ~= 0 then
			for _, c in ipairs(cards) do
				new:addSubcard(c)
			end
		end
		return new
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#nihao") < 1
	end
}

loryi:addSkill(nihao)

sgs.LoadTranslationTable{
	["nihao"] = "泥嚎",
	[":nihao"] = "出牌阶段限一次，你可以按以下规则弃置任意张牌并执行一项对应的效果：<br/><font color='#9400D3'>点数和=7</font>，摸两张牌；<br/><font color='#9400D3'>点数和=24</font>，对其他角色造成共计2点冰霜伤害；<br/><font color='#9400D3'>点数连续</font>，令等量名角色各交给你一张手牌、你弃置一张手牌。",
	["@nihao_give"] = "请将一张手牌交给 %src",
	["$nihao1"] = "你好↗你好↘",
	["$nihao2"] = "你好",
	["$nihao3"] = "你好→你好↗↘",
	["$nihao4"] = "你好你好你好",
	["$nihao5"] = "你↗好↘",
	["$nihao6"] = "你↗好~~",
	["$nihao7"] = "↗你↗好↗",
	["$nihao8"] = "↗你↘好→",
	["$nihao9"] = "哦，你好！",
}
--[[
--------------------------------------------------
--京华
--设计者：萌佬
--------------------------------------------------

jinghua = sgs.General(extension,"jinghua","usthree","3",true)

sgs.LoadTranslationTable{
	["jinghua"] = "京华",
	["&jinghua"] = "京华",
	["#jinghua"] = "超越想象",
	["$jinghua"] = "硬核",
	["designer:jinghua"] = "萌龙少主",
	["cv:jinghua"] = "",
	["illustrator:jinghua"] = "",
	["~jinghua"] = "我不要看冰糖！我不要…我不需要…我…我不…我不要…我赢了…是我赢了……",
}

jinghua:setGender(sgs.General_Neuter)
table.insert(robot_change_general, "jinghua")	--对电脑禁用
]]
--------------------------------------------------
--校规
--------------------------------------------------

local luaxiaogui_banned_list = {"yueyinvs", "HLyingyuan", "HLsurrender", "lianglunche_skill", "milianvs", "weihuvs"}	--禁止无效的技能

luaxiaogui = sgs.CreateTriggerSkill{
	name = "luaxiaogui",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged, sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local damage = data:toDamage()
			if damage.damage > 0 then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getOtherPlayers(player)) do
					if SkillCanTarget(p, player, self:objectName()) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local target = room:askForPlayerChosen(player, targets, self:objectName(), "@xiaogui_ask", true, true)
					if target and not SkillNullify(player, self:objectName()) and player:canEffect(target, self:objectName()) then
						room:broadcastSkillInvoke(self:objectName())	--播放配音
						local choices = {}
						for _, skill in sgs.qlist(target:getSkillList(false, true)) do	--getSkillList 参数1：是否包含装备技能 参数2：是否只列出可见技能
							if not table.contains(luaxiaogui_banned_list, skill:objectName()) and target:getMark("Qingcheng"..skill:objectName()) == 0 then
								table.insert(choices, 1, "xiaogui_draw")
								break
							end
						end
						if not target:isNude() and target:canDiscard(target, "he") then
							table.insert(choices, 1, "xiaogui_discard")
						end
						local choice = room:askForChoice(target, self:objectName(), table.concat(choices, "+"))
						if choice and choice ~= "" then
							ChoiceLog(target, choice)
						end
						if choice == "xiaogui_discard" then
							if not target:isNude() then
								room:askForDiscard(target, self:objectName(), 1, 1, false, true)
								room:loseHp(target, 1, player, self:objectName())
							end
						elseif choice == "xiaogui_draw" then
							local skills = {}
							for _, skill in sgs.qlist(target:getSkillList(false, true)) do	--getSkillList 参数1：是否包含装备技能 参数2：是否只列出可见技能
								if not table.contains(luaxiaogui_banned_list, skill:objectName()) and target:getMark("Qingcheng"..skill:objectName()) == 0 then
									table.insert(skills, skill:objectName())
								end
							end
							local skill_name = room:askForChoice(player, self:objectName().."+xiaogui_choice_log", table.concat(skills, "+"))
							if skill_name and skill_name ~= "" then
								ChoiceLog(player, skill_name)
								room:addPlayerMark(target, "Qingcheng"..skill_name)
								room:addPlayerMark(target, "luaxiaogui_"..skill_name)	--记录被校规无效的主技能（子技能不用记录）
								for _, sk in sgs.qlist(sgs.Sanguosha:getRelatedSkills(skill_name)) do
									room:addPlayerMark(target, "Qingcheng"..sk:objectName())
								end
							end
							target:drawCards(1, self:objectName())
						end
					end
				end
			end
			return false
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.from ~= sgs.Player_NotActive and change.to == sgs.Player_NotActive then
				for _, mark in sgs.list(player:getMarkNames()) do
					if string.sub(mark, 1, 11) == "luaxiaogui_" and player:getMark(mark) > 0 then
						room:setPlayerMark(player, mark, 0)
						local skill_name = string.sub(mark, 12, -1)
						if skill_name and skill_name ~= "" then
							local log = sgs.LogMessage()
							log.from = player
							log.arg = skill_name
							log.type = "#luaxiaogui_skill_available"
							room:sendLog(log)
							room:setPlayerMark(player, "Qingcheng"..skill_name, 0)
							for _, sk in sgs.qlist(sgs.Sanguosha:getRelatedSkills(skill_name)) do
								room:setPlayerMark(player, "Qingcheng"..sk:objectName(), 0)
							end
						end
					end
				end
			end
		end
	end
}

--jinghua:addSkill(luaxiaogui)
vup_anjiang:addSkill(luaxiaogui)

sgs.LoadTranslationTable{
	["luaxiaogui"] = "校规",
	[":luaxiaogui"] = "你受到伤害后，你可以指定一名其他角色，<font color='#A9A9A9'>发动此技能</font>，令其选择一项：1.弃置一张牌，失去1点体力；2.你令其一个技能无效直到其下个回合结束，其摸一张牌。",
	["@xiaogui_ask"] = "你可以对一名角色发动“校规”，其须选择被你无效技能或弃牌失去体力",
	["xiaogui_discard"] = "弃置一张牌，然后失去1点体力",
	["xiaogui_draw"] = "被无效一个技能，然后摸一张牌",
	["#luaxiaogui_skill_available"] = "%from 的“%arg”无效效果解除",
	["xiaogui_choice_log"] = "选择要无效的技能\n鼠标悬停可查看技能描述",
	["$luaxiaogui1"] = "我说你啊，已经做好觉悟了吧！",
	["$luaxiaogui2"] = "反正打不过单推人的知道吗？",
}

--------------------------------------------------
--推皇
--------------------------------------------------

luatuihuangcard = sgs.CreateSkillCard{
	name = "luatuihuang",
	filter = function(self, targets, to_select)
		return SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_use = function(self, room, source, targets)
		for _, target in ipairs(targets) do
			target:drawCards(1, self:objectName())
		end
		if #targets > (source:aliveCount() / 2) then
			local recover = sgs.RecoverStruct()
			recover.who = source
			recover.recover = 1
			room:recover(source, recover)
		end
	end
}
luatuihuangvs = sgs.CreateZeroCardViewAsSkill{
	name = "luatuihuang",
	response_pattern = "@@luatuihuang",
	view_as = function()
		return luatuihuangcard:clone()
	end
}
luatuihuang = sgs.CreateTriggerSkill{
	name = "luatuihuang",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = luatuihuangvs,
	events = {sgs.DrawNCards},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards then
			if room:askForUseCard(player, "@@luatuihuang", "@luatuihuang:"..math.ceil(player:aliveCount() / 2 + 0.01)) then
				local n = data:toInt()
				data:setValue(0)
				return true		--已放弃摸牌，阻止后续结算
			end
		end
	end,
	--priority = -1,
}

--jinghua:addSkill(luatuihuang)

sgs.LoadTranslationTable{
	["luatuihuang"] = "推皇",
	[":luatuihuang"] = "摸牌阶段，你可以改为指定任意名角色，令其各摸一张牌，若指定角色数大于在场人数的一半，你回复1点体力。",
	["@luatuihuang"] = "你可以放弃摸牌，令任意名角色各摸一张牌，若选择不少于 %src 名角色则你回复体力",
	["~luatuihuang"] = "选择若干名角色→确定",
	["$luatuihuang1"] = "我们遇到什么单推，也不要怕。",
	["$luatuihuang2"] = "微笑着面对他。",
	["$luatuihuang3"] = "消除单推最好办法就是面对单推。",
	["$luatuihuang4"] = "坚持，才是DD！",
}
--[[
--------------------------------------------------
--京华β
--设计者：萌佬
--------------------------------------------------

jinghua_beta = sgs.General(extension,"jinghua_beta","usthree","4",true,true,true)

sgs.LoadTranslationTable{
	["jinghua_beta"] = "京华β",
	["&jinghua_beta"] = "京华β",
	["#jinghua_beta"] = "里与表",
	["$jinghua_beta"] = "硬核",
	["designer:jinghua_beta"] = "萌龙少主",
	["cv:jinghua_beta"] = "",
	["illustrator:jinghua_beta"] = "",
	["unlock:jinghua_beta"] = "使用京华在被翻面的情况下获得游戏的胜利",	--解锁条件
	["~jinghua_beta"] = "",
}

jinghua_beta:setBonus(true)	--设为奖励角色
]]
--------------------------------------------------
--法则
--------------------------------------------------

faze = sgs.CreateTriggerSkill{
	name = "faze",
	frequency = sgs.Skill_Limited,
	limit_mark = "@faze",
	events = {},
	on_trigger = function(self, event, player, data)
	end
}

--jinghua_beta:addSkill(faze)

sgs.LoadTranslationTable{
	["faze"] = "法则",
	[":faze"] = "限定技，其他角色发动技能时，你可以弃置一张黑色牌，令此发动无效。",
	["$faze"] = "",
	["@faze"] = "纯金DD鸟",
	["@faze_dis"] = "你可以弃置一张黑色牌，无效“%src”的发动",
}

--------------------------------------------------
--Ｄ帝
--------------------------------------------------

ddi = sgs.CreateTriggerSkill{
	name = "ddi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card:isKindOf("Peach") then
				for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
					local choices = {}
					table.insert(choices, "ddi_general2")
					if myself:hasSkill("faze") and myself:getMark("@faze") == 0 then
						table.insert(choices, "ddi_faze")
					end
					table.insert(choices, "cancel")
					local choice = room:askForChoice(myself, self:objectName(), table.concat(choices, "+"))
					if choice ~= "cancel" then
						local logg = sgs.LogMessage()
						logg.from = myself
						logg.type = "#InvokeSkill"
						logg.arg = self:objectName()
						room:sendLog(logg)	--显示技能发动提示信息
						room:notifySkillInvoked(myself, self:objectName())	--在武将牌上显示技能名
						ChoiceLog(myself, choice)
						
						if choice == "ddi_general2" then
							local all = sgs.Sanguosha:getLimitedGeneralNames()
							for _,myself in sgs.qlist(room:getAlivePlayers())do
								local name = myself:getGeneralName()
								if sgs.Sanguosha:isGeneralHidden(name) then
									local fname = sgs.Sanguosha:findConvertFrom(name);
									if fname ~= "" then name = fname end
								end
								table.removeOne(all, name)
						
								if myself:getGeneral2() == nil then continue end
						
								name = myself:getGeneral2Name();
								if sgs.Sanguosha:isGeneralHidden(name) then
									local fname = sgs.Sanguosha:findConvertFrom(name);
									if fname ~= "" then name = fname end
								end
								table.removeOne(all, name)
							end
							
							local targets = room:getPlayers()
							local to_change = {}
							local general_names = {}
							
							if #all == 0 then return end
							n = math.min(3, #all)
							local acquired = {}
							repeat
								local rand = math.random(1,#all)
								if not table.contains(acquired,all[rand]) then
									table.insert(acquired,(all[rand]))
								end
							until #acquired == n
							
							local general_name = room:askForGeneral(myself, table.concat(acquired,"+"))
							if general_name then
								local maxhp = myself:getMaxHp()
								local hp = myself:getHp()
								room:changeHero(myself, general_name, false, true, true, true)
								room:setPlayerProperty(myself, "maxhp", sgs.QVariant(maxhp))
								room:setPlayerProperty(myself, "hp", sgs.QVariant(hp))
								if myself:getTag("luajiantui_skill") then	--清除荐推的额外技能
									local jiantui_skill = myself:getTag("luajiantui_skill"):toString()
									if jiantui_skill and jiantui_skill ~= "" then
										room:detachSkillFromPlayer(myself, jiantui_skill, false, false, true, true)	--新增最后一项代表会停止化身动画
									end
								end
							end
						elseif choice == "ddi_faze" then
							myself:gainMark("@faze", 1)
						end
					end
				end
			end
			return false
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

--jinghua_beta:addSkill(ddi)

sgs.LoadTranslationTable{
	["ddi"] = "Ｄ帝",
	[":ddi"] = "一名角色使用【桃】结算结束后，你可以选择一项：1.招募一名角色（三选一） 2.重置“法则”。",
	["$ddi"] = "",
	["ddi_general2"] = "招募一名角色",
	["ddi_faze"] = "重置“法则”",
}
--[[
--------------------------------------------------
--京华
--设计者：萌佬
--------------------------------------------------

jinghua_if = sgs.General(extension,"jinghua_if","usthree","3",true,true,true)

sgs.LoadTranslationTable{
	["jinghua_if"] = "京华",
	["&jinghua_if"] = "京华",
	["#jinghua_if"] = "超越想象",
	["$jinghua_if"] = "进阶",
	["designer:jinghua_if"] = "萌龙少主",
	["cv:jinghua_if"] = "",
	["illustrator:jinghua_if"] = "",
	["~jinghua_if"] = "",
}

jinghua_if:setGender(sgs.General_Neuter)
]]
--------------------------------------------------
--创世
--------------------------------------------------

chuangshi = sgs.CreateTriggerSkill{
	name = "chuangshi",
	frequency = sgs.Skill_Frequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.card then
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			for _,id in sgs.qlist(damage.card:getSubcards()) do
				if room:getCardPlace(id) == sgs.Player_PlaceTable then
					dummy:addSubcard(id)
				end
			end
			if dummy:subcardsLength() > 0 then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAllPlayers()) do
					if SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				local target
				if not targets:isEmpty() then
					target = room:askForPlayerChosen(player, targets, self:objectName(), "@chuangshi_ask:"..damage.card:objectName(), true, true)
				end
				if target and not SkillNullify(player, self:objectName()) then
					player:setTag("chuangshi", data)	--AI用
					local choice = room:askForChoice(player, self:objectName().."+chuangshi_choice_log", "drawPileTop+drawPileEnd")
					player:removeTag("chuangshi")	--AI用
					ChoiceLog(player, choice)
					if choice == "drawPileTop" then
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
						room:moveCardTo(dummy, nil, nil, sgs.Player_DrawPile, reason, true, true)	--最后一个参数为真意味着多张牌会给观星框让玩家自行决定顺序
						
						target:drawCards(2, self:objectName(), false)
					elseif choice == "drawPileEnd" then
						player:setFlags("Fake_Move")
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, "hide_move_skill", nil)	--源码修正：reason技能为hide_move_skill的移动不会被显示
						room:moveCardTo(dummy, player, nil, sgs.Player_DrawPile, reason, false, false)	--最后一个参数为真意味着多张牌会给观星框让玩家自行决定顺序
						local new_return_ids = room:getNCards(dummy:subcardsLength())
						player:setFlags("-Fake_Move")
						room:askForGuanxing(player, new_return_ids, sgs.Room_GuanxingDownOnly)
						
						target:drawCards(2, self:objectName())
					end
				end
			end
			dummy:deleteLater()
		end
	end
}

--jinghua_if:addSkill(chuangshi)

sgs.LoadTranslationTable{
	["chuangshi"] = "创世",
	--[":chuangshi"] = "你受到伤害后，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其获得伤害来源牌，然后其交给你一张牌。",
	[":chuangshi"] = "你受到伤害后，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，将伤害来源牌置于牌堆<font color='#9400D3'>顶/底</font>，令其从牌堆<font color='#9400D3'>底/顶</font>摸两张牌。",
	["$chuangshi"] = "",
	--["@chuangshi_ask"] = "你可以发动“创世”，令一名角色获得对你造成伤害的 %src，然后其交给你一张牌",
	["@chuangshi_ask"] = "你可以发动“创世”指定一名角色，你将对你造成伤害的 %src 置于牌堆一端后，其将从另一端摸两张牌",
	["chuangshi_choice_log"] = "请将伤害来源牌置于：",
}

--------------------------------------------------
--冰糖
--设计者：NSX
--------------------------------------------------

bingtang = sgs.General(extension,"bingtang","usthree","3",false)

sgs.LoadTranslationTable{
	["bingtang"] = "冰糖",
	["&bingtang"] = "冰糖",
	["#bingtang"] = "玉皇大D",
	["$bingtang"] = "硬核",
	["designer:bingtang"] = "NSX",
	["cv:bingtang"] = "",
	["illustrator:bingtang"] = "",
	["~bingtang"] = "欸？（你是个好人）好过分啊……",
}

table.insert(robot_change_general, "bingtang")	--对电脑禁用

--------------------------------------------------
--荐推
--------------------------------------------------

local luajiantui_banned_list = {"luajiantui", "luajiyuan", "luashenhui", "youlian", "yanling", "heli", "qiji", "milian"}	--禁止荐推获得的技能
local luajiantui_extra_generals_list = {"lingyuan", "hanazono_serena", "takatsuki_ritsu", "otome_oto"}	--荐推额外可获取的角色名

luajiantui = sgs.CreateTriggerSkill{
	name = "luajiantui",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.GameStart, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart or (event == sgs.EventPhaseChanging and data:toPhaseChange().from == sgs.Player_NotActive and data:toPhaseChange().to ~= sgs.Player_NotActive) then
			if event == sgs.GameStart or (player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName())) then
				if event == sgs.GameStart then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				end
				room:broadcastSkillInvoke(self:objectName())	--播放配音
				
				if player:getTag("luajiantui_skill") then
					local jiantui_skill = player:getTag("luajiantui_skill"):toString()
					if jiantui_skill and jiantui_skill ~= "" then
						room:detachSkillFromPlayer(player, jiantui_skill, false, false, true, true)	--新增最后一项代表会停止化身动画
					end
				end
				
				local generals = sgs.Sanguosha:getLimitedGeneralNames()
				for _, general_name in ipairs(luajiantui_extra_generals_list) do
					if not table.contains(generals, general_name) then
						table.insert(generals, general_name)
					end
				end
				for _, p in sgs.qlist(room:getAllPlayers(true)) do	--包括死亡角色
					table.removeOne(generals, p:getGeneralName())
				end
				
				local canget_skills = {}
				for _, general_name in ipairs(generals) do
					local general = sgs.Sanguosha:getGeneral(general_name)
					local skills = general:getSkillList()	--General::getSkillList()无参数，后面使用isVisible确定技能不是隐藏技能
					for _, skill in sgs.qlist(skills) do
						if skill:isVisible() and skill:getFrequency() ~= sgs.Skill_Limited and skill:getFrequency() ~= sgs.Skill_Wake and not skill:isLordSkill() and not skill:isChangeSkill() and not table.contains(luajiantui_banned_list, skill:objectName()) then
							if not player:hasSkill(skill:objectName()) then
								local repeated = false
								for _, name in ipairs(canget_skills) do
									if skill:objectName() == name then
										repeated = true
										break
									end
								end
								if not repeated then
									table.insert(canget_skills, skill:objectName())
								end
							end
						end
					end
				end
				
				::luajiantui_refresh_point::
				local choices = {}
				local X = 3
				--[[if player:getMark("@luajiyuan_add") > 0 then
					room:setPlayerMark(player, "@luajiyuan_add", 0)
					X = 5
				end]]
				while #choices < X and #canget_skills > 0 do
					local random_one = math.random(1, #canget_skills)
					table.insert(choices, canget_skills[random_one])
					table.removeOne(canget_skills, canget_skills[random_one])
				end
				local minus = 0
				if player:getMark("@luajiyuan_add") > 0 then
					room:setPlayerMark(player, "@luajiyuan_add", 0)
					table.insert(choices, "cancel_refresh")
					minus = 1
				end
				--table.insert(choices, "shuoyi")	--测试用
				local choice = room:askForChoice(player, self:objectName().."+".."jiantui_choice_log1".."+"..tostring(#choices - minus).."+".."jiantui_choice_log2", table.concat(choices, "+"))
				if choice and choice ~= "" then
					if choice == "cancel_refresh" then
						goto luajiantui_refresh_point
					end
					room:acquireSkill(player, choice)
					player:setTag("luajiantui_skill", sgs.QVariant(choice))
					room:setEmotion(player, "bingtang")
					
					local all_generals = sgs.Sanguosha:getAllGeneralNames()
					local banned_kingdom = {"wei","shu","wu","qun","god","die"}
					for _, general_name in ipairs(all_generals) do	--左慈同款特效
						local general = sgs.Sanguosha:getGeneral(general_name)
						if not table.contains(banned_kingdom, general:getKingdom()) then
							local skills = general:getSkillList()	--General::getSkillList()无参数，后面使用isVisible确定技能不是隐藏技能
							for _, skill in sgs.qlist(skills) do
								if skill:objectName() == choice then
									RecordUnlockGenerals(player, general_name)	--为玩家记录可解锁角色
									
									local jsonValue = {
										10,		--S_GAME_EVENT_HUASHEN,
										player:objectName(),
										general_name,
										choice,
									}
									room:doBroadcastNotify(sgs.CommandType.S_COMMAND_LOG_EVENT, json.encode(jsonValue))
									break
								end
							end
						end
					end
				end
			end
		end
		return false
	end
}

bingtang:addSkill(luajiantui)

sgs.LoadTranslationTable{
	["luajiantui"] = "荐推",
	[":luajiantui"] = "游戏开始时，你从三个随机技能中选择一个获得（不能是出场角色的技能；限定技、觉醒技、转换技、主公技、特殊技能除外）。回合开始时，你可以<font color='#A9A9A9'>发动此技能</font>，以相同的方式选择一个技能替换之。",
	["jiantui_choice_log1"] = "请从以下",
	["jiantui_choice_log2"] = "个技能中选择一个获得\n鼠标悬停可查看技能描述",
	["cancel_refresh"] = "刷新",
	["$luajiantui1"] = "他们都很可爱的",
	["$luajiantui2"] = "都是可爱的孩子",
	["$luajiantui3"] = "都可爱！",
	["$luajiantui4"] = "全部可爱",
}

--------------------------------------------------
--机缘
--------------------------------------------------

luajiyuan = sgs.CreateTriggerSkill{
	name = "luajiyuan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if player:getPhase() == sgs.Player_Discard and not player:isKongcheng() then
			local choices = {"cancel"}
			for _,card in sgs.qlist(player:getHandcards()) do
				if card:isRed() and not table.contains(choices, "luajiyuan_red") then
					table.insert(choices, 1, "luajiyuan_red")
				elseif card:isBlack() and not table.contains(choices, "luajiyuan_black") then
					table.insert(choices, 1, "luajiyuan_black")
				end
				if #choices == 3 then
					break
				end
			end
			local choice = room:askForChoice(player, self:objectName().."+jiyuan_choice_log", table.concat(choices, "+"))
			if choice ~= "cancel" then
				local logg = sgs.LogMessage()
				logg.from = player
				logg.type = "#InvokeSkill"
				logg.arg = self:objectName()
				room:sendLog(logg)	--显示技能发动提示信息
				room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
				ChoiceLog(player, choice)
				room:broadcastSkillInvoke(self:objectName(), math.random(1,2))	--播放配音
				player:setFlags("luajiyuan_used")
				
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _,card in sgs.qlist(player:getHandcards()) do
					if (card:isRed() and choice == "luajiyuan_red") or (card:isBlack() and choice == "luajiyuan_black") then
						dummy:addSubcard(card)
					end
				end
				if dummy:subcardsLength() > 0 then
					room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), self:objectName(), nil), player)
				end
				dummy:deleteLater()
				if not SkillNullify(player, self:objectName()) then
					return true
				end
			end
		elseif player:getPhase() == sgs.Player_Finish and player:getHandcardNum() < player:getHp() and player:getMark("@luajiyuan_add") == 0 then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			if not player:hasFlag("luajiyuan_used") then
				room:broadcastSkillInvoke(self:objectName(), math.random(3,4))	--播放配音
			end
			player:setFlags("-luajiyuan_used")
			room:setPlayerMark(player, "@luajiyuan_add", 1)
		end
	end 
}

bingtang:addSkill(luajiyuan)

sgs.LoadTranslationTable{
	["luajiyuan"] = "机缘",
	[":luajiyuan"] = "弃牌阶段开始时，你可以弃置一种颜色的所有手牌、<font color='#A9A9A9'>发动此技能</font>，结束弃牌阶段。结束阶段，若你的手牌数小于体力值，你下次发动“荐推”可以刷新一次选项。",
	["luajiyuan_red"] = "红色",
	[":luajiyuan_red"] = "弃置所有红色手牌，结束弃牌阶段",
	["luajiyuan_black"] = "黑色",
	[":luajiyuan_black"] = "弃置所有黑色手牌，结束弃牌阶段",
	["@luajiyuan_add"] = "机缘",
	["jiyuan_choice_log"] = "你可以弃置一种颜色的所有手牌，结束弃牌阶段",
	["$luajiyuan1"] = "你上当了！ww",
	["$luajiyuan2"] = "只是在整活而已~",
	["$luajiyuan3"] = "来来来给我上！",
	["$luajiyuan4"] = "快，快来给我上舰长！",
}

--------------------------------------------------
--冰糖
--设计者：NSX
--------------------------------------------------

bingtang_if = sgs.General(extension,"bingtang_if","usthree","3",false,true,true)

sgs.LoadTranslationTable{
	["bingtang_if"] = "冰糖",
	["&bingtang_if"] = "冰糖",
	["#bingtang_if"] = "玉皇大D",
	["$bingtang_if"] = "一般",
	["designer:bingtang_if"] = "NSX",
	["cv:bingtang_if"] = "",
	["illustrator:bingtang_if"] = "",
	["~bingtang_if"] = "",
}

--------------------------------------------------
--执儡
--------------------------------------------------

zhileibuff = sgs.CreateTargetModSkill{
	name = "#zhileibuff",
	pattern = ".",
	distance_limit_func = function(self, from, card, to)
		local n = 0
		if card and card:getSkillName() == "zhilei" then
			n = n + 1000
		end
		return n
	end
}
zhileiUseCard = sgs.CreateSkillCard{
	name = "zhileiUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		
		if card:isKindOf("EquipCard") then
			return card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
		else
			local new_card = sgs.Sanguosha:cloneCard(card:objectName(), sgs.Card_NoSuit, 0)	--仅用于无视距离限制，注意排除装备牌
			if new_card then
				new_card:addSubcard(card)
				new_card:setSkillName("zhilei")
				new_card:deleteLater()
				return card and not card:targetFixed() and new_card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
			end
		end
		return false
	end, 
	feasible = function(self, targets)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		return card and card:targetsFeasible(targets_list, sgs.Self)
	end,
	about_to_use = function(self, room, use)
		local logg = sgs.LogMessage()
		logg.from = use.from
		logg.type = "#InvokeSkill"
		logg.arg = "zhilei"
		room:sendLog(logg)	--显示技能发动提示信息
		room:notifySkillInvoked(use.from, "zhilei")	--在武将牌上显示技能名
		room:setChangeSkillState(use.from, "zhilei", Ternary(use.from:getChangeSkillState("zhilei") <= 1, 2, 1))
		use.from:setFlags("zhilei_used")
		
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:setCardFlag(card, "-zhilei")
		for _,cd in sgs.qlist(use.from:getHandcards()) do		--及时清除所有flag，避免此牌结算中获得牌产生的错误情况
			room:setCardFlag(cd, "-zhilei")
		end
		local card_for_use = sgs.Sanguosha:getCard(self:getSubcards():first())
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
zhileivs = sgs.CreateViewAsSkill{
	n = 1,
	name = "zhilei",
	view_filter = function(self, selected, to_select)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@zhilei" and #selected == 0 then
			return to_select:hasFlag(self:objectName())
		end
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@zhilei" and #cards == 1 then
			local skillcard = zhileiUseCard:clone()
			skillcard:addSubcard(cards[1])
			return skillcard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@zhilei"
	end
}
zhilei = sgs.CreateTriggerSkill{
	name = "zhilei",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = zhileivs,
	events = {sgs.EventPhaseStart},
	change_skill = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and not player:hasFlag("zhilei_used") and player:getPhase() == Ternary(player:getChangeSkillState(self:objectName()) <= 1, sgs.Player_Start, sgs.Player_Finish) then
			local usable_ids = {}
			for _,card in sgs.qlist(player:getHandcards()) do
				local card_id = card:getId()
				if room:getCardOwner(card_id) and room:getCardOwner(card_id):objectName() == player:objectName() and room:getCardPlace(card_id) == sgs.Player_PlaceHand then
					if player:canUse(card) then
						room:setCardFlag(card, self:objectName())
						table.insert(usable_ids, card_id)
					end
				end
			end
			if #usable_ids > 0 --[[and player:askForSkillInvoke(self:objectName(), sgs.QVariant("use:")) and not SkillNullify(player, self:objectName())]] then
				room:askForUseCard(player, "@@zhilei", "@zhilei_useCard")
			end
			for _, id in ipairs(usable_ids) do
				local card = sgs.Sanguosha:getCard(id)
				room:setCardFlag(card, "-"..self:objectName())
			end
		end
		return false
	end
}

bingtang_if:addSkill(zhilei)
bingtang_if:addSkill(zhileibuff)

sgs.LoadTranslationTable{
	["zhilei"] = "执儡",
	["#zhileibuff"] = "执儡",
	[":zhilei"] = "转换技，每回合限一次，<font color='#CB5063'>①准备阶段 ②结束阶段</font>，你可以使用一张牌。（无距离限制）",
	[":zhilei1"] = "转换技，每回合限一次，①准备阶段 <font color=\"#01A5AF\"><s>②结束阶段</s></font>，你可以使用一张牌。（无距离限制）",
	[":zhilei2"] = "转换技，每回合限一次，<font color=\"#01A5AF\"><s>①准备阶段</s></font> ②结束阶段，你可以使用一张牌。（无距离限制）",
	["$zhilei"] = "",
	--["zhilei:use"] = "你可以发动“执儡”，使用一张牌",
	["@zhilei_useCard"] = "你可以使用一张牌（无距离限制）",
	["~zhilei"] = "选择一张牌→选择目标→确定",
}

--------------------------------------------------
--旧魇
--------------------------------------------------

jiuyan = sgs.CreateTriggerSkill{
	name = "jiuyan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged, sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.from and damage.from:isAlive() then
				local _data = sgs.QVariant()
				_data:setValue(damage.from)
				if player:askForSkillInvoke(self:objectName(), _data) and not SkillNullify(player, self:objectName()) and player:canEffect(damage.from, self:objectName()) then
					room:doAnimate(1, player:objectName(), damage.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					local choices = {}
					if player:canDiscard(damage.from, "he") then
						table.insert(choices, "jiuyan_discard")
					end
					table.insert(choices, "jiuyan_damage")
					local choice = room:askForChoice(damage.from, self:objectName().."+jiuyan_choice_log1+"..player:getGeneralName().."+jiuyan_choice_log2", table.concat(choices, "+"))
					if choice and choice ~= "" then
						if choice == "jiuyan_discard" and player:canDiscard(damage.from, "he") then
							room:setPlayerMark(player, "IF_gaincheer", 1)	--获得应援力
							room:throwCard(room:askForCardChosen(player, damage.from, "he", self:objectName(), false, sgs.Card_MethodDiscard), damage.from, player)
						elseif choice == "jiuyan_damage" then
							local do_damage = sgs.DamageStruct(self:objectName(), nil, damage.from)
							do_damage.damage = 2
							room:damage(do_damage)
							
							room:addPlayerMark(player, "&jiuyan", 1)
						end
					end
				end
			end
			return false
		elseif event == sgs.EventPhaseChanging then
			if player:getMark("&jiuyan") > 0 and data:toPhaseChange().to == sgs.Player_Play and not player:isSkipped(sgs.Player_Play) then	--旧魇
				room:sendCompulsoryTriggerLog(player, "jiuyan")	--显示锁定技发动
				room:removePlayerMark(player, "&jiuyan", 1)
				player:skip(sgs.Player_Play)
			elseif player:getMark("&fuwei") > 0 and data:toPhaseChange().to == sgs.Player_Play and not player:isSkipped(sgs.Player_Play) then	--复维
				room:sendCompulsoryTriggerLog(player, "fuwei")	--显示锁定技发动
				room:removePlayerMark(player, "&fuwei", 1)
				player:skip(sgs.Player_Play)
			elseif player:getMark("&yinqi") > 0 and data:toPhaseChange().to == sgs.Player_Draw and not player:isSkipped(sgs.Player_Draw) then	--阴憩
				room:sendCompulsoryTriggerLog(player, "yinqi")	--显示锁定技发动
				room:removePlayerMark(player, "&yinqi", 1)
				player:skip(sgs.Player_Draw)
			elseif player:getMark("gehun_skip") > 0 and data:toPhaseChange().to == sgs.Player_Draw and not player:isSkipped(sgs.Player_Draw) then	--鸽魂
				room:sendCompulsoryTriggerLog(player, "gehun")	--显示锁定技发动
				room:removePlayerMark(player, "gehun_skip", 1)
				player:skip(sgs.Player_Draw)
			end
		end
	end
}

bingtang_if:addSkill(jiuyan)

sgs.LoadTranslationTable{
	["jiuyan"] = "旧魇",
	[":jiuyan"] = "你受到伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，令伤害来源选择一项：1.你获得1应援力，破坏其一张牌 2.其受到2点伤害，你跳过下个出牌阶段。",
	["$jiuyan"] = "",
	["@jiuyan_ask"] = "你可以发动“旧魇”，令一名角色判定，判定成功则摸两张牌",
	["jiuyan_choice_log1"] = "请选择一项令",
	["jiuyan_choice_log2"] = "执行：",
	["jiuyan_discard"] = "其获得1应援力，破坏你一张牌",
	["jiuyan_damage"] = "受到2点伤害，令其跳过出牌阶段",
	[":mark:&jiuyan"] = "跳过下个出牌阶段",
}

--------------------------------------------------
--泠鸢
--设计者：--
--------------------------------------------------

lingyuan = sgs.General(extension,"lingyuan","usthree","3",false,true,true)

sgs.LoadTranslationTable{
	["lingyuan"] = "泠鸢",
	["&lingyuan"] = "泠鸢",
	["#lingyuan"] = "冷血皇后（划掉）",
	["$lingyuan"] = "进阶",
	["designer:lingyuan"] = "萌龙少主",
	["cv:lingyuan"] = "",
	["illustrator:lingyuan"] = "paryi",
	["unlock:lingyuan"] = "使用冰糖的“荐推”获得技能“绝情”或“袅袅”",	--解锁条件
	["~lingyuan"] = "",
}

lingyuan:setBonus(true)	--设为奖励角色

table.insert(robot_change_general, "lingyuan")	--对电脑禁用

--------------------------------------------------
--绝情
--------------------------------------------------

lingyuan:addSkill("jueqing")

--------------------------------------------------
--袅袅
--------------------------------------------------

--歌唱类技能
local song_skills_list = {"hunyin", "xiange", "yongxing", "yangge", "diyin", "yunyao", "newmoyin", "qianchang", "hange", "zhuge", "juediao", "newfengsheng", "luafenyin", "yangyin", "huage"}	--袅袅技能池
local song_skills_state = "<font color='#008B8B'>歌唱类技能：混音、闲歌、咏星、扬歌、低吟、云谣、魔音、浅唱、酣歌、贮歌、绝调、奉声、奋音、扬音、花歌</font>"

function getRandomSongSkill(player)	--获得随机歌唱类技能（针对不同模式平替技能）
	local room = player:getRoom()
	if room and room:getMode() == "04_if" then	--冰火歌会
		table.removeOne(song_skills_list, "hange")	--酣歌
		table.insert(song_skills_list, "hange_if")
	end
	return song_skills_list[math.random(1, #song_skills_list)]
end

niaoniao = sgs.CreateTriggerSkill{
	name = "niaoniao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging and data:toPhaseChange().from == sgs.Player_NotActive and data:toPhaseChange().to ~= sgs.Player_NotActive then
			local random_one = getRandomSongSkill(player)
			local choice = room:askForChoice(player, self:objectName().."+".."niaoniao_choice_log", "niaoniao_draw+"..random_one.."+cancel")
			if choice ~= "cancel" and choice ~= "" then
				local logg = sgs.LogMessage()
				logg.from = player
				logg.type = "#InvokeSkill"
				logg.arg = self:objectName()
				room:sendLog(logg)	--显示技能发动提示信息
				room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
				ChoiceLog(player, choice)
				if SkillNullify(player, self:objectName()) then
					return false
				end
				if choice == "niaoniao_draw" then
					--room:addPlayerMark(player, "&niaoniao+slash", 1)
					--room:setPlayerCardLimitation(player, "use", "Slash", true)
					player:drawCards(1, self:objectName())
				else
					room:addPlayerMark(player, "&niaoniao+"..random_one, 1)
					if not player:hasSkill(random_one) then
						room:acquireOneTurnSkills(player, self:objectName(), random_one)
						if random_one == "hange" then
							RecordUnlockGenerals(player, "hanazono_serena")	--为玩家记录可解锁角色
						end
					end
				end
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark_prefix, "&niaoniao+")	--回合结束清除指定前缀的标记

lingyuan:addSkill(niaoniao)

sgs.LoadTranslationTable{
	["niaoniao"] = "袅袅",
	[":niaoniao"] = "回合开始时，你可以<font color='#A9A9A9'>发动此技能</font>，选择一项：1.摸一张牌 2.获得一个随机的<u>歌唱类技能</u>直到回合结束。<br/>"..song_skills_state,
	["$niaoniao"] = "",
	["niaoniao_choice_log"] = "请选择摸一张牌或获得以下技能：\n鼠标悬停可查看技能描述",
	["niaoniao_draw"] = "摸一张牌",
	--[":niaoniao_draw"] = "摸一张牌，本回合不能使用【杀】",
}

--------------------------------------------------
--花園セレナ
--设计者：--
--------------------------------------------------

hanazono_serena = sgs.General(extension,"hanazono_serena","usthree","3",false,true,true)

sgs.LoadTranslationTable{
	["hanazono_serena"] = "花園セレナ",
	["&hanazono_serena"] = "花園セレナ",
	["#hanazono_serena"] = "清楚夜行猫",
	["$hanazono_serena"] = "萌新",
	["designer:hanazono_serena"] = "萌龙少主",
	["cv:hanazono_serena"] = "",
	["illustrator:hanazono_serena"] = "paryi/冰糖",
	["unlock:hanazono_serena"] = "完成以下任意一项：<br/>1.于20:00~27:59时，使用帕里的“神绘”选择②③①<br/>2.使用冰糖的“荐推”获得技能“伏昼”或“酣歌”<br/>3.使用泠鸢的“袅袅”、穆小泠的“破印”获得技能“酣歌”",	--解锁条件
	["~hanazono_serena"] = "",
}

hanazono_serena:setBonus(true)	--设为奖励角色

table.insert(robot_change_general, "hanazono_serena")	--对电脑禁用

--------------------------------------------------
--伏昼
--------------------------------------------------

fuzhou_serena = sgs.CreateTriggerSkill{
	name = "fuzhou_serena",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 then
			for i = 1,damage.damage,1 do
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					local hour = tonumber(os.date("%H"))
					if hour >= 4 and hour < 20 then
						player:turnOver()
					end
					player:drawCards(2, self:objectName())
					local targets = room:getAlivePlayers()
					--[[for _, p in sgs.qlist(room:getAlivePlayers()) do
						if SkillCanTarget(p, player, self:objectName()) then
							targets:append(p)
						end
					end]]
					if not targets:isEmpty() then
						local target = room:askForPlayerChosen(player, targets, self:objectName(), "@fuzhou_serena_ask", true, false)
						if target and target:isAlive() and target:objectName() ~= player:objectName() and player:canEffect(target, self:objectName()) and player:getHandcardNum() >= 2 then
							room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
							local dummy = room:askForExchange(player, self:objectName(), 2, 2, false, "#fuzhou_serena_give:" .. target:objectName(), false)
							if dummy and dummy:subcardsLength() > 0 then
								local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), target:objectName(), self:objectName(), "")
								room:moveCardTo(dummy, target, sgs.Player_PlaceHand, reason, false)
							end
							dummy:deleteLater()
						end
					end
				end
			end
		end
		return false
	end
}

hanazono_serena:addSkill(fuzhou_serena)

sgs.LoadTranslationTable{
	["fuzhou_serena"] = "伏昼",
	[":fuzhou_serena"] = "你受到1点伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，你翻面，摸两张牌，然后可以交给一名角色两张手牌。<br/><font color='#9400D3'>若此时为20:00~27:59则你无须翻面</font>。",
	["$fuzhou_serena"] = "",
	["@fuzhou_serena_ask"] = "你可以选择一名角色，然后交给其两张手牌<br/>操作提示：选择一名角色→确定",
	["#fuzhou_serena_give"] = "请选择两张手牌交给 %src<br/>操作提示：选择两张手牌→确定",
}

--------------------------------------------------
--酣歌
--------------------------------------------------

hange_vs = sgs.CreateViewAsSkill{
	name = "hange",
	n = 1,
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return to_select:getSuit() == sgs.Card_Spade
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local analeptic = sgs.Sanguosha:cloneCard("analeptic", cards[1]:getSuit(), cards[1]:getNumber())
			analeptic:setSkillName(self:objectName())
			analeptic:addSubcard(cards[1])
			return analeptic
		end
	end,
	enabled_at_play = function(self, player)
		local newanal = sgs.Sanguosha:cloneCard("analeptic", sgs.Card_NoSuit, 0)
		if player:isCardLimited(newanal, sgs.Card_MethodUse) or player:isProhibited(player, newanal) then return false end
		local result = player:usedTimes("Analeptic") <= sgs.Sanguosha:correctCardTarget(sgs.TargetModSkill_Residue, player, newanal)
		newanal:deleteLater()
		return result
	end,
	enabled_at_response = function(self, player, pattern)
		return string.find(pattern, "analeptic")
	end
}
hange = sgs.CreateTriggerSkill{
	name = "hange",
	view_as_skill = hange_vs,
	events = {sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and use.card:getSkillName() == "hange" and not use.card:isKindOf("SkillCard") then
				if player:faceUp() then
					player:turnOver()
				end
			end
		end
	end
}

hanazono_serena:addSkill(hange)

sgs.LoadTranslationTable{
	["hange"] = "酣歌",
	[":hange"] = "你可以将一张黑桃牌当【酒】使用，然后若你正面朝上，你翻面。",
	["$hange"] = "",
}

--------------------------------------------------
--花園セレナ
--设计者：--
--------------------------------------------------

hanazono_serena_if = sgs.General(extension,"hanazono_serena_if","usthree","3",false,true,true)

sgs.LoadTranslationTable{
	["hanazono_serena_if"] = "花園セレナ",
	["&hanazono_serena_if"] = "花園セレナ",
	["#hanazono_serena_if"] = "清楚夜行猫",
	["$hanazono_serena_if"] = "萌新",
	["designer:hanazono_serena_if"] = "萌龙少主",
	["cv:hanazono_serena_if"] = "",
	["illustrator:hanazono_serena_if"] = "paryi",
	["~hanazono_serena_if"] = "",
}

--------------------------------------------------
--酣歌
--------------------------------------------------

hange_if = sgs.CreateTriggerSkill{
	name = "hange_if",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseEnd},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseEnd and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getPhase() == sgs.Player_Discard then
			if player:getMark("discard_counter") >= 2 then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAllPlayers()) do
					if SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				local target
				if not targets:isEmpty() then
					target = room:askForPlayerChosen(player, targets, self:objectName(), "@hange_if_ask", true, true)
				end
				if target and not SkillNullify(player, self:objectName()) then
					target:drawCards(1, self:objectName())
					
					local recover = sgs.RecoverStruct()
					recover.who = player
					recover.recover = 1
					room:recover(target, recover)
				end
			end
		end
		return false
	end
}

hanazono_serena_if:addSkill(hange_if)

sgs.LoadTranslationTable{
	["hange_if"] = "酣歌",
	[":hange_if"] = "弃牌阶段结束时，若你本阶段弃置了至少两张牌，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其摸一张牌并回复1点体力。",
	["$hange_if"] = "",
	["@hange_if_ask"] = "你可以发动“酣歌”，令一名角色摸一张牌并回复1点体力",
}

--------------------------------------------------
--高槻りつ
--设计者：--
--------------------------------------------------

takatsuki_ritsu = sgs.General(extension,"takatsuki_ritsu","usthree","4",false,true,true)

sgs.LoadTranslationTable{
	["takatsuki_ritsu"] = "高槻りつ",
	["&takatsuki_ritsu"] = "高槻りつ",
	["#takatsuki_ritsu"] = "清楚高太尉",
	["$takatsuki_ritsu"] = "萌新",
	["designer:takatsuki_ritsu"] = "萌龙少主",
	["cv:takatsuki_ritsu"] = "",
	["illustrator:takatsuki_ritsu"] = "paryi",
	["unlock:takatsuki_ritsu"] = "完成以下任意一项：<br/>1.体力值为1时，使用帕里的“神绘”选择①②②<br/>2.使用冰糖的“荐推”获得技能“虚体”或“极道”",	--解锁条件
	["~takatsuki_ritsu"] = "",
}

takatsuki_ritsu:setBonus(true)	--设为奖励角色

--------------------------------------------------
--虚体
--------------------------------------------------

xuti = sgs.CreateTriggerSkill{
	name = "xuti",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart, sgs.FinishJudge},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Finish then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:loseHp(player, 1)
				
				local judge = sgs.JudgeStruct()
				judge.pattern = ".|red"
				judge.good = true
				judge.reason = self:objectName()
				judge.who = player
				judge.time_consuming = false
				room:judge(judge)
				if judge:isGood() then
					local recover = sgs.RecoverStruct()
					recover.who = player
					recover.recover = 1
					room:recover(player, recover)
				end
			end
		elseif event == sgs.FinishJudge then
			local judge = data:toJudge()
			if judge.card and table.contains({sgs.Player_PlaceJudge, sgs.Player_PlaceTable, sgs.Player_DiscardPile}, room:getCardPlace(judge.card:getId())) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				player:obtainCard(judge.card)
			end
		end
		return false
	end
}

takatsuki_ritsu:addSkill(xuti)

sgs.LoadTranslationTable{
	["xuti"] = "虚体",
	[":xuti"] = "锁定技，你进行的判定结束时，你获得判定牌。<br/>结束阶段，你失去1点体力，进行一次判定，若结果为红色则回复1点体力。",
	["$xuti"] = "",
}

--------------------------------------------------
--极道
--------------------------------------------------

jidao = sgs.CreateTriggerSkill{
	name = "jidao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.HpRecover},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.HpRecover then
			local recover = data:toRecover()
			if recover.recover > 0 then
				local targets = sgs.SPlayerList()
				local max_card_num = player:getHandcardNum()
				for _,to in sgs.qlist(room:getOtherPlayers(player)) do
					if to:getHandcardNum() > max_card_num then
						max_card_num = to:getHandcardNum()
						targets = sgs.SPlayerList()			--清空已记录的角色
						targets:append(to)
					elseif to:getHandcardNum() == max_card_num then
						targets:append(to)
					end
				end
				if not targets:isEmpty() and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					room:sortByActionOrder(targets)
					for _,target in sgs.qlist(targets) do
						room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					end
					local log = sgs.LogMessage()
					log.from = player
					log.type = "#jidao_log"
					log.arg = self:objectName()
					log.to = targets
					room:sendLog(log)	--显示技能发动提示信息
					for _,target in sgs.qlist(targets) do
						if target:isNude() or not player:canEffect(target, self:objectName()) then continue end
						
						player:setFlags("jidao_receiver_AI")		--AI用
						local dummy = room:askForExchange(target, self:objectName(), 1, 1, true, "#jidao_give:" .. player:objectName(), false)
						player:setFlags("-jidao_receiver_AI")		--AI用
						if dummy and dummy:subcardsLength() > 0 then
							local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, target:objectName(), player:objectName(), self:objectName(), "")
							room:moveCardTo(dummy, player, sgs.Player_PlaceHand, reason, false)
						end
						dummy:deleteLater()
					end
				end
			end
		end
	end
}

takatsuki_ritsu:addSkill(jidao)

sgs.LoadTranslationTable{
	["jidao"] = "极道",
	[":jidao"] = "你回复体力后，你可以<font color='#A9A9A9'>发动此技能</font>，令手牌数最多的角色各交给你一张牌。",
	["$jidao"] = "",
	["#jidao_log"] = "由于“%arg”的效果，%to 须交给 %from 一张牌",
	["#jidao_give"] = "请交给 %src 一张牌（包括装备区的牌）",
}

--------------------------------------------------
--夢乃栞
--设计者：--
--------------------------------------------------

yumeno_shiori = sgs.General(extension,"yumeno_shiori","usthree","0",false,true,true,4)

sgs.LoadTranslationTable{
	["yumeno_shiori"] = "夢乃栞",
	["&yumeno_shiori"] = "夢乃栞",
	["#yumeno_shiori"] = "清楚堕天使",
	["$yumeno_shiori"] = "萌新",
	["designer:yumeno_shiori"] = "萌龙少主",
	["cv:yumeno_shiori"] = "",
	["illustrator:yumeno_shiori"] = "paryi",
	["unlock:yumeno_shiori"] = "完成以下任意一项：<br/>1.使用帕里的“神绘”于游戏开始时选择①①②，且本局游戏内你发动过至少3次【雌雄双股剑MK2】的效果<br/>2.使用拉法发动“圣光”后，自己的判定区和装备区全部被废除",	--解锁条件
	["~yumeno_shiori"] = "",
}

yumeno_shiori:setBonus(true)	--设为奖励角色

--------------------------------------------------
--健全
--------------------------------------------------

jianquan = sgs.CreateTriggerSkill{
	name = "jianquan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DrawNCards},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards then
			local X = 5
			for i = 0,4,1 do
				if player:hasEquipArea(i) and player:getEquip(i) == nil then
					X = X + 1
				end
			end
			if player:getPhase() == sgs.Player_Draw and data:toInt() > 0 and player:getHp() < X then
				if room:askForSkillInvoke(player, self:objectName(), data) then 
					data:setValue(0)
					
					local judge = sgs.JudgeStruct()
					judge.pattern = ".|heart"
					judge.good = true
					judge.reason = self:objectName()
					judge.who = player
					room:judge(judge)
					
					local recover = sgs.RecoverStruct()
					recover.who = player
					if judge:isGood() then
						room:doPicAnimate(player:objectName(), "skill/shiori_emotionB")	--doPicAnimate:令指定玩家短暂显示一张图片
						player:drawCards(2, self:objectName())
						recover.recover = 2
					else
						room:doPicAnimate(player:objectName(), "skill/shiori_emotionA")	--doPicAnimate:令指定玩家短暂显示一张图片
						if judge.card and room:getCardPlace(judge.card:getEffectiveId()) == sgs.Player_DiscardPile then
							player:obtainCard(judge.card, true)
						end
						recover.recover = 1
					end
					room:recover(player, recover, false, X)
				end
			end
			return false
		end
	end,
}

yumeno_shiori:addSkill(jianquan)

sgs.LoadTranslationTable{
	["jianquan"] = "健全",
	[":jianquan"] = "摸牌阶段，你可以改为进行一次判定，若结果为：红桃，你摸两张牌、"..WordState("滋养", word_ziyang_str).."2点体力；方块黑桃梅花，你获得判定牌、"..WordState("滋养", word_ziyang_str).."1点体力。（滋养上限为5＋你的空装备栏数）",
	["$jianquan"] = "",
}

--------------------------------------------------
--迷音
--------------------------------------------------

miyin_card = sgs.CreateSkillCard{
	name = "miyin",
	target_fixed = false,
	will_throw = true,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:getMark("&miyin") == 0 and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		room:setPlayerMark(target, "&miyin", 1)
		room:addPlayerMark(target, "Equips_Nullified_to_Yourself", 1)
	end
}
miyin_vs = sgs.CreateViewAsSkill{
	name = "miyin",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return to_select:isKindOf("EquipCard") and not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = miyin_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#miyin") < 1
	end
}
miyin = sgs.CreateTriggerSkill{
	name = "miyin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseChanging},
	view_as_skill = miyin_vs,
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging and data:toPhaseChange().to == sgs.Player_NotActive and data:toPhaseChange().from ~= sgs.Player_NotActive then
			if player:getMark("&miyin") > 0 then
				room:setPlayerMark(player, "&miyin", 0)
				room:removePlayerMark(player, "Equips_Nullified_to_Yourself", 1)
			end
		end
	end
}

yumeno_shiori:addSkill(miyin)

sgs.LoadTranslationTable{
	["miyin"] = "迷音",
	[":miyin"] = "出牌阶段限一次，你可以弃置一张装备牌，指定一名角色，令其装备技能失效直到其下个回合结束。",
	["$miyin"] = "",
	[":mark:&miyin"] = "装备技能无效",
}

--------------------------------------------------
--乙女おと
--设计者：--
--------------------------------------------------

otome_oto = sgs.General(extension,"otome_oto","usthree","4",false,true,true)

sgs.LoadTranslationTable{
	["otome_oto"] = "乙女おと",
	["&otome_oto"] = "乙女おと",
	["#otome_oto"] = "新语之龙姬",
	["$otome_oto"] = "进阶",
	["designer:otome_oto"] = "萌龙少主",
	["cv:otome_oto"] = "",
	["illustrator:otome_oto"] = "paryi",
	["unlock:otome_oto"] = "完成以下任意一项：<br/>1.体力值为1时，使用帕里的“神绘”选择①②①<br/>2.使用冰糖的“荐推”获得技能“龙韵”或“筑城”",	--解锁条件
	["~otome_oto"] = "",
}

otome_oto:setBonus(true)	--设为奖励角色

--------------------------------------------------
--龙韵
--------------------------------------------------

longyun_otocard = sgs.CreateSkillCard{
	name = "longyun_oto",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if to_select:objectName() ~= sgs.Self:objectName() and not to_select:hasSkill("jiang") then
				return SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
			end
		end
		return false
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		if not SkillNullify(effect.from, self:objectName()) then
			room:acquireSkill(effect.to, "jiang")
			if not effect.to:isNude() then
				--偷个懒，交牌套用豹晒
				effect.from:setFlags("baoshai_receiver_AI")		--AI用
				local dummy = room:askForExchange(effect.to, "baoshai", 1, 1, true, "#baoshai_give:" .. effect.from:objectName(), false)
				effect.from:setFlags("-baoshai_receiver_AI")		--AI用
				if dummy and dummy:subcardsLength() > 0 then
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, effect.to:objectName(), effect.from:objectName(), "longyun_oto", "")
					room:moveCardTo(dummy, effect.from, sgs.Player_PlaceHand, reason, true)
				end
				dummy:deleteLater()
			end
		end
	end
}
longyun_oto = sgs.CreateViewAsSkill{
	name = "longyun_oto",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		if #cards == 0 then
			local NewSkillCard = longyun_otocard:clone()
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return not player:hasUsed("#longyun_oto")
	end,
}

otome_oto:addSkill(longyun_oto)
otome_oto:addRelateSkill("jiang")

sgs.LoadTranslationTable{
	["longyun_oto"] = "龙韵",
	[":longyun_oto"] = "出牌阶段限一次，你可以指定一名其他角色<font color='#A9A9A9'>发动此技能</font>，令其获得“激昂”，其须交给你一张牌。",
	["$longyun_oto"] = "",
	["^longyun_oto"] = "操作提示：选择一名没有“激昂”的其他角色→确定",
}

--------------------------------------------------
--筑城
--------------------------------------------------

zhucheng_oto = sgs.CreateTriggerSkill{
	name = "zhucheng_oto",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.DamageInflicted},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish and player:getHp() > 0 then
			local X = 0
			for _,p in sgs.qlist(room:getAlivePlayers()) do
				if p:isFemale() then
					X = X + 1
				end
			end
			X = math.min(5, X)
			if X > 0 and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. X)) then
				room:loseHp(player, 1, nil, self:objectName())
				if not SkillNullify(player, self:objectName()) then
					local X = 0		--重新算一遍X保证准确
					for _,p in sgs.qlist(room:getAlivePlayers()) do
						if p:isFemale() then
							X = X + 1
						end
					end
					X = math.min(5, X)
					player:drawCards(X, self:objectName())
				end
			end
		elseif event == sgs.DamageInflicted and player:getHandcardNum() > player:getHp() then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.nature == sgs.DamageStruct_Thunder then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				damage.damage = damage.damage * 4
				data:setValue(damage)
			end
		end
		return false
	end
}

otome_oto:addSkill(zhucheng_oto)

sgs.LoadTranslationTable{
	["zhucheng_oto"] = "筑城",
	[":zhucheng_oto"] = "结束阶段，你可以失去1点体力<font color='#A9A9A9'>发动此技能</font>，摸X张牌。（X为在场女性角色数，至多为5）<br/>锁定技，你的手牌数＞体力值时，你受到的雷电伤害×4。",
	["$zhucheng_oto"] = "",
	["zhucheng_oto:choice"] = "你可以失去1点体力发动“筑城”，摸 %src 张牌",
}

--------------------------------------------------
--乙女おと
--设计者：--
--------------------------------------------------

otome_oto_if = sgs.General(extension,"otome_oto_if","usthree","4",false,true,true)

sgs.LoadTranslationTable{
	["otome_oto_if"] = "乙女おと",
	["&otome_oto_if"] = "乙女おと",
	["#otome_oto_if"] = "新语之龙姬",
	["$otome_oto_if"] = "萌新",
	["designer:otome_oto_if"] = "萌龙少主",
	["cv:otome_oto_if"] = "",
	["illustrator:otome_oto_if"] = "paryi",
	["~otome_oto_if"] = "",
}

--------------------------------------------------
--龙韵
--------------------------------------------------

local cheer_marks = {"@Cheer_1","@Cheer_2","@Cheer_3","@Cheer_4","@Cheer_5","@Cheer_6","@Cheer_7","@Cheer_8"}

function countCheer(player)
	local count = 0
	for _, cheer_mark in ipairs(cheer_marks) do
		if player:getMark(cheer_mark) > 0 then
			count = count + 1
		end
	end
	return count
end

longyun_if_card = sgs.CreateSkillCard{
	name = "longyun_if",
	target_fixed = true,
	will_throw = true,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		room:setPlayerMark(source, "IF_losecheer", 1)	--失去应援力
		if not SkillNullify(source, self:objectName()) then
			source:drawCards(math.min(3, countCheer(source)), self:objectName())
			room:acquireNextTurnSkills(source, self:objectName(), "jiang")
		end
	end
}
longyun_if = sgs.CreateViewAsSkill{
	name = "longyun_if",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped() and not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = longyun_if_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#longyun_if") < 1 and not player:isKongcheng() and countCheer(player) > 0
	end
}

otome_oto_if:addSkill(longyun_if)
otome_oto_if:addRelateSkill("jiang")

sgs.LoadTranslationTable{
	["longyun_if"] = "龙韵",
	[":longyun_if"] = "出牌阶段限一次，你可以弃置一张手牌、消耗1应援力<font color='#A9A9A9'>发动此技能</font>，摸X张牌，获得“激昂”直到下回合开始。（X为你的应援力，至多为3）",
	["$longyun_if"] = "",
}

--------------------------------------------------
--千草はな
--设计者：--
--------------------------------------------------

chigusa_hana = sgs.General(extension,"chigusa_hana","usthree","4",false,true,true)

sgs.LoadTranslationTable{
	["chigusa_hana"] = "千草はな",
	["&chigusa_hana"] = "千草はな",
	["#chigusa_hana"] = "真清楚松狐",
	["$chigusa_hana"] = "一般",
	["designer:chigusa_hana"] = "萌龙少主",
	["cv:chigusa_hana"] = "",
	["illustrator:chigusa_hana"] = "paryi",
	["unlock:chigusa_hana"] = "完成以下任意一项：<br/>1.一局游戏内使用帕里成功发动至少两次对应选项为②①③的“绘生”<br/>2.使用泠鸢的“袅袅”、穆小泠的“破印”获得技能“花歌”",	--解锁条件
	["~chigusa_hana"] = "",
}

chigusa_hana:setBonus(true)	--设为奖励角色

--------------------------------------------------
--花歌
--------------------------------------------------

huage = sgs.CreateTriggerSkill{
	name = "huage",
	frequency = sgs.Skill_Frequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 then
			local cost_card = room:askForDiscard(player, self:objectName(), 1, 1, true, true, "@huage_invoke", ".", self:objectName())
			if cost_card then
				if not SkillNullify(player, self:objectName()) then
					local card_ids = room:getNCards(4)
					local remove_ids = sgs.IntList()
					local left_ids = sgs.IntList()
					for _,id in sgs.qlist(card_ids) do
						left_ids:append(id)
					end
					local dummy_get = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					local other_ids = sgs.IntList()
					local foot_notes = {"","","",""}
					while (not left_ids:isEmpty()) do
						room:fillAG(card_ids, player, remove_ids, false, table.concat(foot_notes, "|"), false)
						local card_id = room:askForAG(player, left_ids, true, self:objectName())
						if card_id == -1 then
							for _,id in sgs.qlist(left_ids) do
								other_ids:append(id)
							end
							room:clearAG(player)
							goto huage_label
						end
						
						left_ids:removeOne(card_id)
						remove_ids:append(card_id)
						for i=1,4,1 do
							if card_ids:at(i-1) == card_id then
								foot_notes[i] = "selected"
								break
							end
						end
						local card = sgs.Sanguosha:getCard(card_id)
						dummy_get:addSubcard(card)
						local removelist = {}
						for _,id in sgs.qlist(left_ids) do
							local c = sgs.Sanguosha:getCard(id)
							if c:getSuit() == card:getSuit() then	--类别相同的牌全部不可选
								--room:takeAG(nil, c:getId())
								table.insert(removelist, id)
							end
						end
						if #removelist > 0 then
							for _,id in ipairs(removelist) do
								if left_ids:contains(id) then
									left_ids:removeOne(id)
									remove_ids:append(id)
									other_ids:append(id)
								end
							end
						end
						room:clearAG(player)
					end
					::huage_label::
					if dummy_get:subcardsLength() > 0 then
						player:obtainCard(dummy_get, true)
					end
					dummy_get:deleteLater()
					if not other_ids:isEmpty() then
						room:askForGuanxing(player, other_ids, sgs.Room_GuanxingUpOnly)
					end
				end
			end
        end
	end
}

chigusa_hana:addSkill(huage)

sgs.LoadTranslationTable{
	["huage"] = "花歌",
	[":huage"] = "你受到伤害后，你可以弃置一张牌<font color='#A9A9A9'>发动此技能</font>，观看牌堆顶的四张牌，获得其中任意张花色不同的牌，排列其余牌。",
	["$huage"] = "",
	["@huage_invoke"] = "你可以弃置一张牌发动“花歌”，获得牌堆顶的四张牌中任意张花色不同的牌",
	["^AG_huage"] = "<b>花歌</b><br/>获得牌：双击以选择一张牌获得之<br/>不获得牌：直接点击确定",
}

--------------------------------------------------
--私易
--------------------------------------------------

siyi_card = sgs.CreateSkillCard{
	name = "siyi",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and not to_select:getEquips():isEmpty() and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local to = targets[1]
		if not SkillNullify(source, self:objectName()) and not to:getEquips():isEmpty() then
			local id = room:askForCardChosen(source, to, "e", self:objectName(), false, sgs.Card_MethodNone)
			local get_card = sgs.Sanguosha:getCard(id)
			source:obtainCard(get_card, true)
			
			local _data = sgs.QVariant()
			_data:setValue(to)
			local card = room:askForCard(source, "EquipCard|.|.|hand,equipped!", "@siyi_give:"..to:objectName(), _data, sgs.Card_MethodNone)
			if card then
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), to:objectName(), self:objectName(), "")
				room:moveCardTo(card, to, sgs.Player_PlaceHand, reason, true)
				local card_id = card:getId()
				if (room:getCardOwner(card_id) and room:getCardOwner(card_id):objectName() == to:objectName() and room:getCardPlace(card_id) == sgs.Player_PlaceHand) and to:canUse(card) then
					room:setCardFlag(card, "qingleng")	--使用牌部分借用清冷
					source:setFlags("qingleng_from_AI")	--AI用
					local choice = room:askForChoice(to, self:objectName(), "siyi_use+cancel")
					source:setFlags("-qingleng_from_AI")	--AI用
					if choice == "siyi_use" then
						ChoiceLog(to, choice)
						room:attachSkillToPlayer(to, "qinglengvs")	--临时技能按钮
						room:askForUseCard(to, "@@qingleng!", "@qingleng")
						room:detachSkillFromPlayer(to, "qinglengvs", true, true)	--临时技能按钮
					end
					room:setCardFlag(card, "-qingleng")
				end
			end
		end
	end
}
siyi = sgs.CreateZeroCardViewAsSkill{
	name = "siyi",
	view_as = function(self, cards)
		return siyi_card:clone()
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#siyi") < 1
	end
}

chigusa_hana:addSkill(siyi)

sgs.LoadTranslationTable{
	["siyi"] = "私易",
	[":siyi"] = "出牌阶段限一次，你可以<font color='#A9A9A9'>发动此技能</font>，获得一名其他角色装备区的一张牌，交给其一张<font color='#9400D3'>装备牌</font>，其可以使用<font color='#9400D3'>此牌</font>。",
	["$siyi"] = "",
	["@siyi_give"] = "请交给 %src 一张装备牌（包括装备区的牌）",
	["siyi_use"] = "使用此装备牌",
}

--------------------------------------------------
--卡缇娅α
--设计者：--
--------------------------------------------------

katya_uranova = sgs.General(extension,"katya_uranova","usthree","3",false,true,true)

sgs.LoadTranslationTable{
	["katya_uranova"] = "卡缇娅α",
	["&katya_uranova"] = "卡缇娅",
	["#katya_uranova"] = "超灵魂绘师",
	["$katya_uranova"] = "萌新",
	["designer:katya_uranova"] = "萌龙少主",
	["cv:katya_uranova"] = "",
	["illustrator:katya_uranova"] = "",
	["unlock:katya_uranova"] = "通过火焰伤害令帕里进入濒危状态",	--解锁条件
	["~katya_uranova"] = "",
}

katya_uranova:setBonus(true)	--设为奖励角色

--------------------------------------------------
--爆肝
--------------------------------------------------

baogan = sgs.CreateTriggerSkill{
	name = "baogan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and player:getMark("&baogan+using") == 0 then
			if player:getMark("@extra_turn") == 0 and room:askForSkillInvoke(player, self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				room:setPlayerMark(player, "&baogan+using", 1)
				player:gainAnExtraTurn()
				--[[if damage.nature == sgs.DamageStruct_Fire then
					local recover = sgs.RecoverStruct()
					recover.who = player
					recover.recover = 1
					room:recover(player, recover)
				else]]
				if damage.nature ~= sgs.DamageStruct_Fire and not player:isNude() then
					room:askForDiscard(player, self:objectName(), 1, 1, false, true)
				end
				room:setPlayerMark(player, "&baogan+using", 0)
			end
		end
		return false
	end
}

katya_uranova:addSkill(baogan)

sgs.LoadTranslationTable{
	["baogan"] = "爆肝",
	[":baogan"] = "你受到伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，执行一个额外回合，然后若之不为火焰伤害则你弃置一张牌。<br/><font color='#B22222'>此技能不能嵌套发动</font>",
	["$baogan"] = "",
	["using"] = "使用中",
}

--------------------------------------------------
--卡缇娅β
--设计者：--
--------------------------------------------------

katya_if = sgs.General(extension,"katya_if","usthree","4",false,true,true)

sgs.LoadTranslationTable{
	["katya_if"] = "卡缇娅β",
	["&katya_if"] = "卡缇娅",
	["#katya_if"] = "量子鸭",
	["$katya_if"] = "萌新",
	["designer:katya_if"] = "萌龙少主",
	["cv:katya_if"] = "",
	["illustrator:katya_if"] = "",
	["unlock:katya_if"] = "使用以下角色完成总计15场游戏：Nia、诗小雅、花见汐梨",
	["~katya_if"] = "",
}

katya_if:setBonus(true)	--设为奖励角色

--------------------------------------------------
--冲鸭
--------------------------------------------------

chongya = sgs.CreateTriggerSkill{
	name = "chongya",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecified},
	on_trigger = function(self, event, player, data, room)
		local use = data:toCardUse()
		if use.card and (use.card:isKindOf("Slash") or use.card:isKindOf("Duel")) and use.to:length() == 1 then
			local target = use.to:first()
			if not target:isKongcheng() and target:objectName() ~= player:objectName() and player:canEffect(target, self:objectName()) then
				local data2 = sgs.QVariant()	--askForSkillInvoke会变为“你想对 player 发动...”
				data2:setValue(target)
				if room:askForSkillInvoke(player, self:objectName(), data2) then
					room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					if not target:isKongcheng() and not SkillNullify(player, self:objectName()) then
						local card_id = room:askForCardChosen(player, target, "h", self:objectName())
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_EXTRACTION, player:objectName())
						room:moveCardTo(sgs.Sanguosha:getCard(card_id), player, sgs.Player_PlaceHand, reason)
					end
				end
			end
		end
		return false
	end
}

katya_if:addSkill(chongya)

sgs.LoadTranslationTable{
	["chongya"] = "冲鸭",
	[":chongya"] = "你使用【杀】或【决斗】指定其他角色为唯一目标后，你可以<font color='#A9A9A9'>发动此技能</font>，获得其一张手牌。",
	["$chongya"] = "",
}

--------------------------------------------------
--罗兹
--设计者：--
--------------------------------------------------

rose_barrett = sgs.General(extension,"rose_barrett","usthree","4",false,true,true)

sgs.LoadTranslationTable{
	["rose_barrett"] = "罗兹",
	["&rose_barrett"] = "罗兹",
	["#rose_barrett"] = "超位面史官",
	["$rose_barrett"] = "萌新",
	["designer:rose_barrett"] = "SunFlower",
	["cv:rose_barrett"] = "",
	["illustrator:rose_barrett"] = "",
	["unlock:rose_barrett"] = "对未受伤的帕里造成火焰伤害",	--解锁条件
	["~rose_barrett"] = "",
}

rose_barrett:setBonus(true)	--设为奖励角色

--------------------------------------------------
--沉
--------------------------------------------------

chen_rose = sgs.CreateTargetModSkill{	--无效部分耦合入源码NonCompulsoryInvalidity技能
	name = "chen_rose",
	pattern = ".",
	extra_target_func = function(self, from, card)
		if from:hasSkill("chen_rose") and card:isKindOf("IronChain") then
			return -1
		end
		return 0
	end
}
rose_barrett:addSkill(chen_rose)

sgs.LoadTranslationTable{
	["chen_rose"] = "沉",
	[":chen_rose"] = "锁定技，你使用【铁索连环】可指定目标数－1。横置的角色所有非锁定技失效。",
	["$chen_rose"] = "",
}

--------------------------------------------------
--燃
--------------------------------------------------

ran_rose = sgs.CreateTriggerSkill{
	name = "ran_rose",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageCaused},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.nature == sgs.DamageStruct_Fire then
				if damage.nature == sgs.DamageStruct_Light then return false end
				
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				damage.damage = damage.damage + 1
				data:setValue(damage)
			end
		end
		return false
	end
}

rose_barrett:addSkill(ran_rose)

sgs.LoadTranslationTable{
	["ran_rose"] = "燃",
	[":ran_rose"] = "锁定技，你造成的火焰伤害＋1。",
	["$ran_rose"] = "",
}

--------------------------------------------------
--角色特性：认输？不可能！
--------------------------------------------------

characteristic_neversurrender = sgs.CreateTriggerSkill{	--空壳技能，用于判定
	name = "#characteristic_neversurrender",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
characteristic_neversurrender_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_neversurrender_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_neversurrender_state)
rose_barrett:addSkill(characteristic_neversurrender)
rose_barrett:addRelateSkill("characteristic_neversurrender_state")

sgs.LoadTranslationTable{
	["characteristic_neversurrender"] = "认输？不可能！",
	["#characteristic_neversurrender"] = "认输？不可能！",
	["characteristic_neversurrender_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_neversurrender_state"] = "<font color='#DAA520'><b>认输？不可能！</b><br/>你发动“投降”后，失去“投降”，获得“绝境”。</font>",
	["$characteristic_neversurrender_state"] = "",
}

--------------------------------------------------
--链心魔女 尤特（套用一设试作西魔幽）
--设计者：萌龙少主
--------------------------------------------------

--youte_lianxinmonv = sgs.General(extension,"youte_lianxinmonv","facemoe","4",false,false,false,3)
youte_lianxinmonv = sgs.General(extension,"youte_lianxinmonv","facemoe","4",false)

sgs.LoadTranslationTable{
	["youte_lianxinmonv"] = "尤特",
	["&youte_lianxinmonv"] = "尤特",
	["#youte_lianxinmonv"] = "链心魔女",	--链心魔女
	["$youte_lianxinmonv"] = "进阶",
	["designer:youte_lianxinmonv"] = "萌龙少主",
	["cv:youte_lianxinmonv"] = "",
	["illustrator:youte_lianxinmonv"] = "",
	["~youte_lianxinmonv"] = "",
}

--------------------------------------------------
--连心待燃（一设试作） 西魔幽
--设计者：萌佬
--------------------------------------------------
--[[
ximoyou_shizuo = sgs.General(extension,"ximoyou_shizuo","psp","4",true)

sgs.LoadTranslationTable{
	["ximoyou_shizuo"] = "西魔幽·设",
	["&ximoyou_shizuo"] = "西魔幽",
	["#ximoyou_shizuo"] = "连心待燃",	--一设试作
	["designer:ximoyou_shizuo"] = "萌龙少主",
	["cv:ximoyou_shizuo"] = "",
	["illustrator:ximoyou_shizuo"] = "",
	["~ximoyou_shizuo"] = "",
}]]

--------------------------------------------------
--锁魂（链心）
--------------------------------------------------

lianxin = sgs.CreateTriggerSkill{
	name = "lianxin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DamageInflicted},
	on_trigger = function(self, event, player, data)
		local damage = data:toDamage()
		local room = player:getRoom()
		if damage.damage > 0 then
			local targets = sgs.SPlayerList()
			for _,p in sgs.qlist(room:getAlivePlayers()) do
				if not p:isChained() and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			if not targets:isEmpty() then
				local target = room:askForPlayerChosen(player, targets, self:objectName(), "@lianxin_target", true, true)
				if target and not SkillNullify(player, self:objectName()) then
					target:setChained(true)
					room:broadcastProperty(target, "chained")
					room:setEmotion(target, "chain")
					room:getThread():trigger(sgs.ChainStateChanged, room, target)
					if --[[target:isWounded() and]] player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. target:objectName())) then
						local recover = sgs.RecoverStruct()
						recover.who = player
						recover.recover = 1
						room:recover(target, recover)
					end
				end
			end
		end
		return false
	end
}

--ximoyou_shizuo:addSkill(suohun)
youte_lianxinmonv:addSkill(lianxin)

sgs.LoadTranslationTable{
	["lianxin"] = "链心",
	[":lianxin"] = "当你受到伤害时，你可以<font color='#A9A9A9'>发动此技能</font>，横置一名角色，然后你可以令其回复1点体力。",
	["$lianxin"] = "",
	["lianxin:choice"] = "你可以令 %src 回复1点体力",
	["@lianxin_target"] = "你可以发动“链心”，横置一名角色且可令其回复体力",
}

--------------------------------------------------
--魔炎（惑炎）
--------------------------------------------------

huoyancard = sgs.CreateSkillCard{
	name = "huoyan",
	no_indicator = true,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local fire_attack = sgs.Sanguosha:cloneCard("fire_attack", sgs.Card_NoSuit, 0)
		fire_attack:setSkillName("_"..self:objectName())
		fire_attack:deleteLater()
		return fire_attack:targetFilter(targets_list, to_select, sgs.Self)
	end,
	on_use = function(self, room, source, targets)
		local targets_list = sgs.SPlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		if not targets_list:isEmpty() then
			local fire_attack = sgs.Sanguosha:cloneCard("fire_attack", sgs.Card_NoSuit, 0)
			fire_attack:setSkillName("_"..self:objectName())
			room:useCard(sgs.CardUseStruct(fire_attack, source, targets_list))
		end
	end
}
huoyan_vs = sgs.CreateZeroCardViewAsSkill{
	name = "huoyan",
	response_pattern = "@@huoyan",
	view_as = function(self, cards)
		--local ncard = sgs.Sanguosha:cloneCard("fire_attack", sgs.Card_NoSuit, 0)
		--ncard:setSkillName(self:objectName())
		local ncard = huoyancard:clone()
		return ncard
	end
}
huoyan = sgs.CreateTriggerSkill{
	name = "huoyan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseChanging},
	view_as_skill = huoyan_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Play and not player:isSkipped(sgs.Player_Play) then
				if room:askForUseCard(player, "@@huoyan", "@huoyan") then
					return true
				end
			end
			return false
		end
	end,
}

--ximoyou_shizuo:addSkill(moyan)
youte_lianxinmonv:addSkill(huoyan)

sgs.LoadTranslationTable{
	["huoyan"] = "惑炎",
	[":huoyan"] = "你可以跳过出牌阶段，视为使用一张【火攻】。",
	["$huoyan"] = "",
	["@huoyan"] = "你可以使用“惑炎”，跳过出牌阶段视为使用【火攻】",
	["~huoyan"] = "选择目标角色→确定",
}

--------------------------------------------------
--多变女仆 蜜恩
--设计者：萌龙少主
--------------------------------------------------

mien_duobiannvpu = sgs.General(extension,"mien_duobiannvpu","facemoe","4",false)

sgs.LoadTranslationTable{
	["mien_duobiannvpu"] = "蜜恩",
	["&mien_duobiannvpu"] = "蜜恩",
	["#mien_duobiannvpu"] = "多变女仆",
	["$mien_duobiannvpu"] = "萌新",
	["designer:mien_duobiannvpu"] = "萌龙少主",
	["cv:mien_duobiannvpu"] = "",
	["illustrator:mien_duobiannvpu"] = "",
	["~mien_duobiannvpu"] = "",
}

--------------------------------------------------
--全能
--------------------------------------------------

quannengcard = sgs.CreateSkillCard{
	name = "quanneng",
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local plist = sgs.PlayerList()
		for i = 1, #targets do plist:append(targets[i]) end
		local rangefix = 0
		if not self:getSubcards():isEmpty() and sgs.Self:getWeapon() and sgs.Self:getWeapon():getId() == self:getSubcards():first() then
			local card = sgs.Self:getWeapon():getRealCard():toWeapon()
			rangefix = rangefix + card:getRange() - sgs.Self:getAttackRange(false)
		end
		if not self:getSubcards():isEmpty() and sgs.Self:getOffensiveHorse() and sgs.Self:getOffensiveHorse():getId() == self:getSubcards():first() then
			rangefix = rangefix + 1
		end
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE then
			local card, user_str = nil, self:getUserString()
			if user_str ~= "" then
				local us = user_str:split("+")
				card = sgs.Sanguosha:cloneCard(us[1])
			end
			local result = card and card:targetFilter(plist, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card, plist)
				and (card:isKindOf("Slash") and sgs.Self:canSlash(to_select, true, rangefix))
			card:deleteLater()
			return result
		elseif sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE then
			return false
		end
		local card = sgs.Self:getTag("quanneng"):toCard()
		return card and card:targetFilter(plist, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card, plist)
			and (card:isKindOf("Slash") and sgs.Self:canSlash(to_select, true, rangefix))
	end,
	target_fixed = function(self)
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE then
			local card, user_str = nil, self:getUserString()
			if user_str ~= "" then
				local us = user_str:split("+")
				card = sgs.Sanguosha:cloneCard(us[1])
			end
			local result = card and card:targetFixed()
			card:deleteLater()
			return result
		elseif sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE then
			return true
		end
		local card = sgs.Self:getTag("quanneng"):toCard()
		return card and card:targetFixed()
	end,
	feasible = function(self, targets)
		local plist = sgs.PlayerList()
		for i = 1, #targets do plist:append(targets[i]) end
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE then
			local card, user_str = nil, self:getUserString()
			if user_str ~= "" then
				local us = user_str:split("+")
				card = sgs.Sanguosha:cloneCard(us[1])
			end
			local result = card and card:targetsFeasible(plist, sgs.Self)
			card:deleteLater()
			return result
		elseif sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE then
			return true
		end
		local card = sgs.Self:getTag("quanneng"):toCard()
		return card and card:targetsFeasible(plist, sgs.Self)
	end,
	on_validate = function(self, card_use)
		local player = card_use.from
		local room, to_quanneng = player:getRoom(), self:getUserString()
		if self:getUserString() == "slash" and sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE then
			local quanneng_list = {}
			table.insert(quanneng_list, "slash")
			if not (Set(sgs.Sanguosha:getBanPackages()))["maneuvering"] then
				table.insert(quanneng_list, "normal_slash")
				table.insert(quanneng_list, "thunder_slash")
				table.insert(quanneng_list, "fire_slash")
				table.insert(quanneng_list, "ice_slash")
			end
			to_quanneng = room:askForChoice(player, "quanneng_slash", table.concat(quanneng_list, "+"))
		end
		local card = nil
		if self:subcardsLength() == 1 then card = sgs.Sanguosha:cloneCard(sgs.Sanguosha:getCard(self:getSubcards():first())) end
		local user_str
		if to_quanneng == "slash" then
			if card and card:isKindOf("Slash") then
				user_str = card:objectName()
			else
				user_str = "slash"
			end
		elseif to_quanneng == "normal_slash" then
			user_str = "slash"
		else
			user_str = to_quanneng
		end
		local use_card = sgs.Sanguosha:cloneCard(user_str, card and card:getSuit() or sgs.Card_SuitToBeDecided, card and card:getNumber() or -1)
		card:deleteLater()
		use_card:setSkillName("_quanneng")
		use_card:addSubcards(self:getSubcards())
		use_card:deleteLater()
		return use_card
	end,
	on_validate_in_response = function(self, user)
		local room, user_str = user:getRoom(), self:getUserString()
		local to_quanneng
		if user_str == "peach+analeptic" then
			local quanneng_list = {}
			table.insert(quanneng_list, "peach")
			if not (Set(sgs.Sanguosha:getBanPackages()))["maneuvering"] then
				table.insert(quanneng_list, "analeptic")
			end
			to_quanneng = room:askForChoice(user, "quanneng_saveself", table.concat(quanneng_list, "+"))
		elseif user_str == "slash" then
			local quanneng_list = {}
			table.insert(quanneng_list, "slash")
			if not (Set(sgs.Sanguosha:getBanPackages()))["maneuvering"] then
				table.insert(quanneng_list, "normal_slash")
				table.insert(quanneng_list, "thunder_slash")
				table.insert(quanneng_list, "fire_slash")
				table.insert(quanneng_list, "ice_slash")
			end
			to_quanneng = room:askForChoice(user, "quanneng_slash", table.concat(quanneng_list, "+"))
		else
			to_quanneng = user_str
		end
		local card = nil
		if self:subcardsLength() == 1 then card = sgs.Sanguosha:cloneCard(sgs.Sanguosha:getCard(self:getSubcards():first())) end
		local user_str
		if to_quanneng == "slash" then
			if card and card:isKindOf("Slash") then
				user_str = card:objectName()
			else
				user_str = "slash"
			end
		elseif to_quanneng == "normal_slash" then
			user_str = "slash"
		else
			user_str = to_quanneng
		end
		local use_card = sgs.Sanguosha:cloneCard(user_str, card and card:getSuit() or sgs.Card_SuitToBeDecided, card and card:getNumber() or -1)
		card:deleteLater()
		use_card:setSkillName("_quanneng")
		use_card:addSubcards(self:getSubcards())
		use_card:deleteLater()
		return use_card
	end
}
quannengvs = sgs.CreateViewAsSkill{
	name = "quanneng",
	n = 1,
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		if #selected == 0 then
			return to_select:isKindOf("BasicCard")
		end
		return false
	end,
	view_as = function(self, cards)
		if #cards ~= 1 then return nil end
		local skillcard = quannengcard:clone()
		skillcard:setSkillName(self:objectName())
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE
			or sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE then
			skillcard:setUserString(sgs.Sanguosha:getCurrentCardUsePattern())
			for _, card in ipairs(cards) do
				skillcard:addSubcard(card)
			end
			return skillcard
		end
		local c = sgs.Self:getTag("quanneng"):toCard()
		if c then
			skillcard:setUserString(c:objectName())
			for _, card in ipairs(cards) do
				skillcard:addSubcard(card)
			end
			return skillcard
		else
			return nil
		end
	end,
	enabled_at_play = function(self, player)
		if player:getMark("quanneng_used") > 0 then return false end
		local basic = {"slash", "peach"}
		if not (Set(sgs.Sanguosha:getBanPackages()))["maneuvering"] then
			table.insert(basic, "thunder_slash")
			table.insert(basic, "fire_slash")
			table.insert(basic, "ice_slash")
			table.insert(basic, "analeptic")
		end
		for _, patt in ipairs(basic) do
			local poi = sgs.Sanguosha:cloneCard(patt, sgs.Card_NoSuit, -1)
			if poi and poi:isAvailable(player) and not (patt == "peach" and not player:isWounded()) then
				poi:deleteLater()
				return true
			end
		end
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		if player:getMark("quanneng_used") > 0 then return false end
        if string.startsWith(pattern, ".") or string.startsWith(pattern, "@") then return false end
        if pattern == "peach" and player:getMark("Global_PreventPeach") > 0 then return false end
        return pattern ~= "nullification"
	end
}
quanneng = sgs.CreateTriggerSkill{
	name = "quanneng",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.PreCardUsed, sgs.PreCardResponded},
	view_as_skill = quannengvs,
	on_trigger = function(self, event, player, data, room)
		local card
		if event == sgs.PreCardUsed then
			card = data:toCardUse().card
		else
			--if data:toCardResponse().m_isUse then
				card = data:toCardResponse().m_card
			--end
		end
		if card then
			if card:getSkillName() == "quanneng" then
				room:setPlayerMark(player, "quanneng_used", 1)
				
				--if card:isKindOf("Slash") then	--使用的杀视为有酒效果
				--	room:setCardFlag(card, "drank")
				--	card:setTag("drank", sgs.QVariant(1))	--酒效果叠加层数
				--end
				
				--[[local before = sgs.Sanguosha:getCard(card:getSubcards():first())
				if (before:isKindOf("Slash") and card:isKindOf("Jink")) or (before:isKindOf("Jink") and card:isKindOf("Slash")) then
					room:broadcastSkillInvoke(self:objectName(), 2)	--播放配音
				elseif card:isKindOf("Slash") then
					room:broadcastSkillInvoke(self:objectName(), 3)	--播放配音
				elseif card:isKindOf("Peach") then
					room:broadcastSkillInvoke(self:objectName(), 4)	--播放配音
				else
					room:broadcastSkillInvoke(self:objectName(), 1)	--播放配音
				end
				return true		--静音]]
			end
		end
	end
}
table.insert(turn_end_clear_mark, "quanneng_used")	--回合结束清除标记

quanneng:setGuhuoDialog("l")
mien_duobiannvpu:addSkill(quanneng)

sgs.LoadTranslationTable{
	["quanneng"] = "全能？",
	[":quanneng"] = "每回合限一次，你可以将一张基本牌当任意基本牌使用或打出。",
	["quanneng_slash"] = "全能",
	["$quanneng"] = "",
}

--------------------------------------------------
--无年花匠 花满
--设计者：空月之羽、月音风源、萌龙少主
--------------------------------------------------

huaman_wunianhuajiang = sgs.General(extension,"huaman_wunianhuajiang","facemoe","3",false)

sgs.LoadTranslationTable{
	["huaman_wunianhuajiang"] = "花满",
	["&huaman_wunianhuajiang"] = "花满",
	["#huaman_wunianhuajiang"] = "无年花匠",
	["$huaman_wunianhuajiang"] = "简单",
	["designer:huaman_wunianhuajiang"] = "空月之羽、月音风源等",
	["cv:huaman_wunianhuajiang"] = "",
	["illustrator:huaman_wunianhuajiang"] = "",
	["~huaman_wunianhuajiang"] = "",
}

--------------------------------------------------
--结硕
--------------------------------------------------

jieshuo_card = sgs.CreateSkillCard{
	name = "jieshuo",
	target_fixed = false,
	will_throw = true,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:isWounded() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, "jieshuo")
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		if not SkillNullify(source, self:objectName()) then
			local target = targets[1]
			room:setPlayerMark(target, "@jieshuo", 1)
			room:setPlayerMark(target, "jieshuo"..source:objectName(), 1)
		end
	end
}
jieshuo_vs = sgs.CreateViewAsSkill{
	name = "jieshuo",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped() and not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = jieshuo_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#jieshuo") < 1
	end
}
jieshuo = sgs.CreateTriggerSkill{
	name = "jieshuo",
	global = true,
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.HpRecover},
	view_as_skill = jieshuo_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getMark("@jieshuo") > 0 and player:getPhase() == sgs.Player_Start then
			
			for _,p in sgs.qlist(room:getAlivePlayers()) do
				if player:getMark("jieshuo"..p:objectName()) > 0 then
					room:sendCompulsoryTriggerLog(p, self:objectName())	--显示锁定技发动
					room:doAnimate(1, p:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					
					local recover = sgs.RecoverStruct()
					recover.who = p
					recover.recover = player:getMark("jieshuo"..p:objectName())
					room:recover(player, recover)
					
					--player:drawCards(player:getMark("jieshuo"..p:objectName()), self:objectName())
					
					room:setPlayerMark(player, "@jieshuo", player:getMark("@jieshuo") - player:getMark("jieshuo"..p:objectName()))
					room:setPlayerMark(player, "jieshuo"..p:objectName(), 0)
				end
			end
			
			if player:getMark("@jieshuo") > 0 then
				local X = player:getMark("@jieshuo")
				room:setPlayerMark(player, "@jieshuo", 0)
				
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				
				local recover = sgs.RecoverStruct()
				recover.who = nil
				recover.recover = X
				room:recover(player, recover)
				
				--player:drawCards(X, self:objectName())
			end
			
			room:getThread():delay(500)
		elseif event == sgs.HpRecover then
			local recover = data:toRecover()
			if recover.who and (recover.who:objectName() ~= player:objectName()) and recover.who:hasSkill(self:objectName()) then
				room:sendCompulsoryTriggerLog(recover.who, self:objectName())	--显示锁定技发动
				for i = 1,recover.recover,1 do
					player:drawCards(1,self:objectName())
				end
			end
		end
	end,
}

huaman_wunianhuajiang:addSkill(jieshuo)

sgs.LoadTranslationTable{
	["jieshuo"] = "结硕",
	[":jieshuo"] = "出牌阶段限一次，你可以弃置一张手牌，指定一名已受伤的角色，<font color='#A9A9A9'>发动此技能</font>，令其于其下个准备阶段回复1点体力。你令其他角色回复1点体力后，其摸一张牌。",
	["$jieshuo1"] = "",
	["$jieshuo2"] = "",
	["@jieshuo"] = "结硕",
}

--------------------------------------------------
--芳馥
--------------------------------------------------

fangfu = sgs.CreateMaxCardsSkill{
	name = "fangfu",
	extra_func = function(self, target)
		local count = 0
		if target:hasSkill(self:objectName()) then
			count = count + 1
		end
		for _, p in sgs.qlist(target:getSiblings()) do
			if p:hasSkill(self:objectName()) and p:getHp() == target:getHp() and p:canEffect(target, "fangfu") then
				count = count + 1
			end
		end
		return count
	end
}

huaman_wunianhuajiang:addSkill(fangfu)

sgs.LoadTranslationTable{
	["fangfu"] = "芳馥",
	[":fangfu"] = "锁定技，体力值与你相同的角色手牌上限＋1。",
	["$fangfu1"] = "",
	["$fangfu2"] = "",
}

--------------------------------------------------
--春泥
--------------------------------------------------

chunnicard = sgs.CreateSkillCard{
	name = "chunni",
	filter = function(self, targets, to_select)
		return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "chunni")
	end,
	on_effect = function(self, effect)
		local recover = sgs.RecoverStruct()
		recover.who = effect.from
		recover.recover = 1
		effect.to:getRoom():recover(effect.to, recover)
	end
}
chunnivs = sgs.CreateZeroCardViewAsSkill{
	name = "chunni",
	response_pattern = "@@chunni",
	view_as = function()
		return chunnicard:clone()
	end
}
chunni = sgs.CreateTriggerSkill{
	name = "chunni",
	events = {sgs.Death},
	view_as_skill = chunnivs,
	on_trigger = function(self, event, player, data, room)
		if data:toDeath().who:objectName() == player:objectName() then
			room:askForUseCard(player, "@@chunni", "@chunni")
		end
	end,
	can_trigger = function(self, target)
		return target and target:hasSkill(self:objectName())
	end
}

huaman_wunianhuajiang:addSkill(chunni)

sgs.LoadTranslationTable{
	["chunni"] = "春泥",
	[":chunni"] = "当你离场时，你可以令任意名角色各回复1点体力。",
	["@chunni"] = "你可以令任意名角色回复1点体力",
	["~chunni"] = "选择任意名角色→确定",
	["$chunni1"] = "",
	["$chunni2"] = "",
}

--------------------------------------------------
--「三绝韦编」 希贝尔
--设计者：空月之羽
--------------------------------------------------

xibeier_sanjueweibian = sgs.General(extension,"xibeier_sanjueweibian","facemoe","4",false)

sgs.LoadTranslationTable{
	["xibeier_sanjueweibian"] = "希贝尔",
	["&xibeier_sanjueweibian"] = "希贝尔",
	["#xibeier_sanjueweibian"] = "「三绝韦编」",
	["designer:xibeier_sanjueweibian"] = "空月之羽",
	["cv:xibeier_sanjueweibian"] = "",
	["illustrator:xibeier_sanjueweibian"] = "",
	["~xibeier_sanjueweibian"] = "",
}

--------------------------------------------------
--化武
--------------------------------------------------

huawu = sgs.CreateTriggerSkill{
	name = "huawu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.EventPhaseEnd},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			if player:getPhase() == sgs.Player_Play and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				local equips = sgs.CardList()
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:isKindOf("EquipCard") and card:isAvailable(player) then
						local equip_index = card:getRealCard():toEquipCard():location()
						if player:hasEquipArea(equip_index) then	--检测对应装备区是否可用
							equips:append(card)
						end
					end
				end
				if not equips:isEmpty() then
					local card_ids = sgs.IntList()
					for i=1,math.min(equips:length(), 3),1 do
						local random_one = equips:at(math.random(0, equips:length() - 1))
						equips:removeOne(random_one)
						card_ids:append(random_one:getId())
					end
					if not card_ids:isEmpty() then
						room:fillAG(card_ids, player)
						local id = room:askForAG(player, card_ids, false, self:objectName())
						room:clearAG(player)
						local card = sgs.Sanguosha:getCard(id)
						if card then
							room:useCard(sgs.CardUseStruct(card, player, player))
							room:setPlayerMark(player, "huawu_"..card:getEffectiveId(), 1)
						end
					end
				end
			end
		elseif event == sgs.EventPhaseEnd then
			if player:getPhase() == sgs.Player_Play then
				for _, mark in sgs.list(player:getMarkNames()) do
					if string.sub(mark, 1, 6) == "huawu_" and player:getMark(mark) > 0 then
						local id = tonumber(string.sub(mark, 7, -1))
						for _,card in sgs.qlist(player:getCards("e")) do
							if card:getId() == id then
								room:moveCardsInToDrawpile(player, card, self:objectName(), -1, true)
							end
						end
						room:setPlayerMark(player, mark, 0)
					end
				end
			end
		end
		return false
	end
}

xibeier_sanjueweibian:addSkill(huawu)

sgs.LoadTranslationTable{
	["huawu"] = "化武",
	[":huawu"] = "出牌阶段开始时，你可以<font color='#A9A9A9'>发动此技能</font>，从牌堆中的随机3张装备牌中使用一张，出牌阶段结束时，将你装备区内的此牌返回牌堆。",
	["$huawu"] = "",
	["^AG_huawu"] = "<b>化武</b><br/>双击以选择一张装备牌使用之",
}

--------------------------------------------------
--三叹
--------------------------------------------------

santan = sgs.CreateTriggerSkill{
	name = "santan",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardUsed, sgs.CardResponded, sgs.CardFinished, sgs.TargetSpecified, sgs.TrickCardCanceling},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardUsed or event == sgs.CardResponded then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			elseif event == sgs.CardResponded then
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and card:getTypeId() ~= sgs.Card_TypeSkill then
				room:addPlayerMark(player, "santan_counter", 1)
				
				room:setPlayerMark(player, "&santan+[1]", 0)
				room:setPlayerMark(player, "&santan+[2]", 0)
				room:setPlayerMark(player, "&santan+[3]", 0)
				if player:hasSkill("santan") then
					room:setPlayerMark(player, "&santan+["..player:getMark("santan_counter").."]", 1)
				end
			end
			if player:getMark("santan_counter") == 3 then
				room:setPlayerMark(player, "santan_counter", 0)
				if player:isAlive() and player:hasSkill(self:objectName()) then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					room:setCardFlag(card, self:objectName())
				end
			end
		elseif event == sgs.CardFinished then	--清理flag
			local use = data:toCardUse()
			if use.card and use.card:hasFlag(self:objectName()) then
				room:setCardFlag(use.card, "-"..self:objectName())
			end
		elseif event == sgs.TrickCardCanceling then	--跳过对应的无懈询问
			local effect = data:toCardEffect()
			if effect.card and effect.card:hasFlag(self:objectName()) then return true end
		elseif event == sgs.TargetSpecified and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local use = data:toCardUse()
			if use.from and player:objectName() == use.from:objectName() and use.card and use.card:hasFlag(self:objectName()) then
				local no_respond_list = use.no_respond_list	--不可响应目标列表
				for _, target in sgs.qlist(use.to) do
					table.insert(no_respond_list, target:objectName())
				end
				use.no_respond_list = no_respond_list
				data:setValue(use)
			end
		end
	end
}

xibeier_sanjueweibian:addSkill(santan)

sgs.LoadTranslationTable{
	["santan"] = "三叹",
	[":santan"] = "锁定技，你使用的第3X张牌不可被响应。",
	["$santan"] = "",
}

--------------------------------------------------
--淬炼之缘 蕾蒂
--设计者：萌龙少主、NSX
--------------------------------------------------

leidi_cuilianzhiyuan = sgs.General(extension,"leidi_cuilianzhiyuan","facemoe","3",false)

sgs.LoadTranslationTable{
	["leidi_cuilianzhiyuan"] = "使魔蕾蒂",
	["&leidi_cuilianzhiyuan"] = "蕾蒂",
	["#leidi_cuilianzhiyuan"] = "淬炼之缘",
	["$leidi_cuilianzhiyuan"] = "一般",
	["designer:leidi_cuilianzhiyuan"] = "萌龙少主、NSX",
	["cv:leidi_cuilianzhiyuan"] = "",
	["illustrator:leidi_cuilianzhiyuan"] = "",
	["~leidi_cuilianzhiyuan"] = "",
}

--------------------------------------------------
--浴火
--------------------------------------------------

yuhuo = sgs.CreateTriggerSkill{
	name = "yuhuo",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageInflicted},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.nature == sgs.DamageStruct_Fire then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				local choices = {"yuhuo_draw"}
				--if player:isWounded() then
					table.insert(choices, 1, "yuhuo_recover")
				--end
				local choice = room:askForChoice(player, self:objectName(), table.concat(choices, "+"))
				if choice == "yuhuo_recover" then
					local recover = sgs.RecoverStruct()
					recover.who = player
					recover.recover = damage.damage
					room:recover(player, recover)
				else
					player:drawCards(damage.damage, self:objectName())
				end
				return true
			end
		end
	end
}

leidi_cuilianzhiyuan:addSkill(yuhuo)

sgs.LoadTranslationTable{
	["yuhuo"] = "浴火",
	[":yuhuo"] = "锁定技，你受到火焰伤害时，防止之，然后你回复等量体力或摸等量张牌。",
	["$yuhuo"] = "",
	["yuhuo_recover"] = "回复等同于伤害量的体力",
	["yuhuo_draw"] = "摸等同于伤害量的牌",
}

--------------------------------------------------
--凭代
--------------------------------------------------

pingdai = sgs.CreateTriggerSkill{
	name = "pingdai",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damage, sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damage then
			local damage = data:toDamage()
			if damage.card and damage.card:isKindOf("Slash") and damage.damage > 0 then
				room:setCardFlag(damage.card, self:objectName())
			end
		elseif event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and use.card:hasFlag(self:objectName()) then
				room:setCardFlag(use.card, "-"..self:objectName())
				if use.from and use.from:isAlive() and not use.from:isNude() then
					for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
						if room:getCurrent() and room:getCurrent():hasFlag("pingdai_"..myself:objectName()) then continue end
						local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
						if use.card:subcardsLength() > 0 then
							for _,id in sgs.qlist(use.card:getSubcards()) do
								if room:getCardPlace(id) == sgs.Player_DiscardPile then
									dummy:addSubcard(id)
								end
							end
						elseif use.card:subcardsLength() == 0 and use.card:getId() >= 0 then	--AI使用的非转化杀没有子卡，但是有id（转化牌的id均为-1）
							if room:getCardPlace(use.card:getId()) == sgs.Player_DiscardPile then
								dummy:addSubcard(use.card:getId())
							end
						end
						local _data = sgs.QVariant()
						_data:setValue(use.from)
						if dummy:subcardsLength() > 0 and myself:askForSkillInvoke(self:objectName(), _data) and not SkillNullify(myself, self:objectName()) and myself:canEffect(use.from, self:objectName()) then
							room:getCurrent():setFlags("pingdai_"..myself:objectName())
							room:doAnimate(1, myself:objectName(), use.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
							if not use.from:isNude() then
								--room:askForDiscard(use.from, self:objectName(), 1, 1, false, true)
								
								local card = room:askForCard(use.from, ".|.|.|hand,equipped!", "@pingdai_choose:"..myself:objectName(), _data, sgs.Card_MethodNone)
								if card then
									if card:isKindOf("BasicCard") then
										room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, myself:objectName(), self:objectName(), nil), use.from)
									else
										if use.from:objectName() == myself:objectName() and room:getCardPlace(card:getId()) == sgs.Player_PlaceHand then
											room:showCard(myself, card:getId())
										end
										local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, use.from:objectName(), myself:objectName(), self:objectName(), "")
										room:moveCardTo(card, myself, sgs.Player_PlaceHand, reason, true)
									end
								end
							end
							use.from:obtainCard(dummy, true)
						end
						dummy:deleteLater()
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

leidi_cuilianzhiyuan:addSkill(pingdai)

sgs.LoadTranslationTable{
	["pingdai"] = "凭代",
	[":pingdai"] = "每回合限一次，一名角色使用【杀】结算结束后，若此【杀】造成过伤害，你可以<font color='#A9A9A9'>发动此技能</font>，其须弃置一张基本牌或交给你一张非基本牌，然后其收回此【杀】。",
	["$pingdai"] = "",
	["@pingdai_choose"] = "请弃置一张基本牌或交给 %src 一张非基本牌",
}

--------------------------------------------------
--海藻猫 蕾蒂
--设计者：萌龙少主
--------------------------------------------------

leidi_haizaomao = sgs.General(extension,"leidi_haizaomao","facemoe","3",false)

sgs.LoadTranslationTable{
	["leidi_haizaomao"] = "蕾蒂",
	["&leidi_haizaomao"] = "蕾蒂",
	["#leidi_haizaomao"] = "海藻猫",
	["$leidi_haizaomao"] = "简单",
	["designer:leidi_haizaomao"] = "萌龙少主",
	["cv:leidi_haizaomao"] = "",
	["illustrator:leidi_haizaomao"] = "",
	["~leidi_haizaomao"] = "",
}

--------------------------------------------------
--沐光
--------------------------------------------------

muguang = sgs.CreateTriggerSkill{
	name = "muguang",
	frequency = sgs.Skill_Frequent,
	events = {sgs.HpRecover},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.HpRecover then
			local recover = data:toRecover()
			if player:getPhase() == sgs.Player_Play and --[[player:getMark("muguang_recovered") == 0 and]] recover.recover > 0 then
				--room:setPlayerMark(player, "muguang_recovered", 1)
				local myselves = room:findPlayersBySkillName(self:objectName())
				for _,myself in sgs.qlist(myselves) do
					local _data = sgs.QVariant()
					_data:setValue(player)
					if myself:askForSkillInvoke(self:objectName(), _data) and not SkillNullify(myself, self:objectName()) then
						room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						myself:drawCards(1, self:objectName())
						if myself:objectName() ~= player:objectName() and myself:canEffect(player, self:objectName()) then
							local card = room:askForCard(myself, ".", "@muguang_give:"..player:objectName(), _data, sgs.Card_MethodNone)
							if card then
								local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, myself:objectName(), player:objectName(), self:objectName(), "")
								room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, true)
							end
						end
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}
--table.insert(turn_end_clear_mark, "muguang_recovered")

leidi_haizaomao:addSkill(muguang)

sgs.LoadTranslationTable{
	["muguang"] = "沐光",
	[":muguang"] = "一名角色于其出牌阶段内回复体力后，你可以<font color='#A9A9A9'>发动此技能</font>，摸一张牌，然后可以正面向上交给其一张手牌。",
	["$muguang1"] = "",
	["$muguang2"] = "",
	["@muguang_give"] = "你可以交给 %src 一张手牌",
}

--------------------------------------------------
--摸鱼
--①版：摸到黑桃牌破坏回血
--②版：出牌阶段内，成为牌的目标时可以转移给其他角色
--------------------------------------------------
--[[
moyu = sgs.CreateTriggerSkill{
	name = "moyu",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		local move = data:toMoveOneTime()
		if not room:getTag("FirstRound"):toBool() and move.to and move.to:objectName() == player:objectName() and move.reason.m_reason == sgs.CardMoveReason_S_REASON_DRAW and move.to_place == sgs.Player_PlaceHand and move.reason.m_skillName ~= self:objectName() then
			local dummy_card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			for _, id in sgs.qlist(move.card_ids) do
				if sgs.Sanguosha:getCard(id):getSuit() == sgs.Card_Spade and room:getCardPlace(id) == sgs.Player_PlaceHand then
					dummy_card:addSubcard(sgs.Sanguosha:getCard(id))
				end
			end
			if dummy_card:subcardsLength() > 0 and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:throwCard(dummy_card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, player:objectName(), player:objectName(), self:objectName(), ""), player)
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
			end
			dummy_card:deleteLater()
		end
		return false
	end
}]]

--[[
moyu = sgs.CreateTriggerSkill{
	name = "moyu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetConfirming},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetConfirming and player:getPhase() == sgs.Player_Play then
			local use = data:toCardUse()
			if use.to and use.to:contains(player) and use.card and not use.card:isKindOf("SkillCard") then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getOtherPlayers(player)) do
					if not use.to:contains(p) and not room:isProhibited(use.from, p, use.card) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local target = room:askForPlayerChosen(player, targets, self:objectName(), "@moyu_ask", true, true)
					if target then
						use.to:removeOne(player)
						use.to:append(target)
						room:sortByActionOrder(use.to)
						data:setValue(use)
						room:getThread():trigger(sgs.TargetConfirming, room, target, data)
						return false
					end
				end
			end
		end
	end
}]]

moyu_card = sgs.CreateSkillCard{
	name = "moyu",
	target_fixed = true,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		local return_ids = sgs.IntList()
		for _,card in sgs.qlist(source:getHandcards()) do
			return_ids:append(card:getId())
		end
		local N = return_ids:length()
		if N > 0 then
			room:shuffleIntoDrawPile(source, return_ids, self:objectName(), false)
			local ids = room:getNCards(N)
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			local will_skip = false
			for _,id in sgs.qlist(ids) do
				dummy:addSubcard(id)
				if not will_skip and sgs.Sanguosha:getCard(id):getSuit() == sgs.Card_Spade then
					will_skip = true
				end
			end
			source:obtainCard(dummy, false)
			dummy:deleteLater()
			room:getThread():delay(500)
			if will_skip then
				room:setPlayerFlag(source, "Global_PlayPhaseTerminated")
			end
		end
	end
}
moyu = sgs.CreateZeroCardViewAsSkill{
	name = "moyu",
	view_as = function(self, cards)
		return moyu_card:clone()
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#moyu") < 1 and not player:isKongcheng()
	end
}

leidi_haizaomao:addSkill(moyu)

sgs.LoadTranslationTable{
	["moyu"] = "摸鱼",
	[":moyu"] = "出牌阶段限一次，你可以将所有手牌返回牌堆，摸等量张牌。若你以此法获得了黑桃牌，结束本阶段。",
	["$moyu1"] = "",
	["$moyu2"] = "",
}

--------------------------------------------------
--堕落天使 拉法
--设计者：萌龙少主、NSX
--------------------------------------------------

lafa_duoluotianshi = sgs.General(extension,"lafa_duoluotianshi","facemoe","3",false)

sgs.LoadTranslationTable{
	["lafa_duoluotianshi"] = "拉法",
	["&lafa_duoluotianshi"] = "拉法",
	["#lafa_duoluotianshi"] = "堕落天使",
	["$lafa_duoluotianshi"] = "一般",
	["designer:lafa_duoluotianshi"] = "萌龙少主、NSX",
	["cv:lafa_duoluotianshi"] = "",
	["illustrator:lafa_duoluotianshi"] = "",
	["~lafa_duoluotianshi"] = "",
}
--[[
--------------------------------------------------
--废宅
--------------------------------------------------

feizhai_buff = sgs.CreateProhibitSkill{
	name = "#feizhai_buff",
	is_prohibited = function(self, from, to, card)
		if not card:isKindOf("SkillCard") then
			local card_length = 0
			if card:subcardsLength() > 0 then
				for _,id in sgs.qlist(card:getSubcards()) do
					if inHand(from, sgs.Sanguosha:getCard(id)) then
						card_length = card_length + 1
					end
				end
			elseif card:getId() ~= -1 then	--AI使用的非转化牌没有子卡，但是有id（转化牌的id均为-1）
				if inHand(from, card) then
					card_length = 1
				end
			end
			if from:getMark("&feizhai") > 0 and from:objectName() ~= to:objectName() and to:getHandcardNum() < (from:getHandcardNum() - card_length) then
				return true
			end
		end
	end
}
feizhai = sgs.CreateTriggerSkill{
	name = "feizhai",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Play then
			local has_equip_area = 0
			for i = 0, 4 do
				if player:hasEquipArea(i) then
					has_equip_area = has_equip_area + 1
				end
			end
			if has_equip_area > 0 and ThrowEquipArea(self:objectName(), player, true, "feizhai_throw_log1+"..tostring(6-has_equip_area).."+feizhai_throw_log2", true) ~= -1 then
				room:setPlayerMark(player, "&feizhai", 1)
				local count = 0
				for i = 0, 4 do
					if not player:hasEquipArea(i) then
						count = count + 1
					end
				end
				local choices = {}
				for i=1,count,1 do
					table.insert(choices, tostring(i))
				end
				local choice = room:askForChoice(player, self:objectName().."+feizhai_choice_log", table.concat(choices, "+"))
				player:drawCards(tonumber(choice), self:objectName())
			end
		end
	end
}
table.insert(play_end_clear_mark, "&feizhai")	--回合结束清除标记

lafa_duoluotianshi:addSkill(feizhai)
lafa_duoluotianshi:addSkill(feizhai_buff)

sgs.LoadTranslationTable{
	["feizhai"] = "废宅",
	["#feizhai_buff"] = "废宅",
	[":feizhai"] = "出牌阶段开始时，你可以废除一个装备栏，摸至多X张牌（X为你已废除的装备栏数），本阶段你不能对手牌数少于你的角色使用牌。",
	["$feizhai"] = "",
	["feizhai:choice"] = "你可以发动“废宅”，废除一个装备栏，摸至多 %src 张牌、本阶段用牌受到限制",
	["feizhai_choice_log"] = "选择你要摸牌的张数",
	["feizhai_throw_log1"] = "你可以废除一个装备栏，摸至多",
	["feizhai_throw_log2"] = "张牌\n但本回合使用牌受到限制",
	[":mark:&feizhai"] = "本阶段不能对手牌数少于你的角色使用牌",
}

--------------------------------------------------
--萌生
--------------------------------------------------

mengsheng = sgs.CreateTriggerSkill{
	name = "mengsheng",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Draw and not player:isSkipped(sgs.Player_Draw) then
				local can_obtain_equiparea = false
				for i = 0, 4 do
					if not player:hasEquipArea(i) then
						can_obtain_equiparea = true
						break
					end
				end
				if can_obtain_equiparea and ObtainEquipArea(self:objectName(), player, true, "mengsheng_choice_log", true) ~= -1 then
					player:skip(change.to)
				end
			end
		end
		return false
	end
}

lafa_duoluotianshi:addSkill(mengsheng)

sgs.LoadTranslationTable{
	["mengsheng"] = "萌生",
	[":mengsheng"] = "你可以跳过摸牌阶段，恢复一个装备栏。",
	["$mengsheng"] = "",
	["mengsheng_choice_log"] = "你可以跳过摸牌阶段，恢复一个装备栏",
}

--------------------------------------------------
--圣光
--------------------------------------------------

shengguang = sgs.CreateTriggerSkill{
	name = "shengguang",
	events = {sgs.EventPhaseStart},
	frequency = sgs.Skill_Limited,
	limit_mark = "@halo",
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start then
			if player:getMark("shengguang_used") > 0 then
				room:setPlayerMark(player, "shengguang_used", 0)
				if player:getMark("shengguang_recover") > 0 then
					room:loseHp(player, player:getMark("shengguang_recover"))
					room:setPlayerMark(player, "shengguang_recover", 0)
				end
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _, mark in sgs.list(player:getMarkNames()) do
					if string.sub(mark, 1, 16) == "shengguang_card_" and player:getMark(mark) > 0 then
						local id = tonumber(string.sub(mark, 17, -1))
						for _,card in sgs.qlist(player:getCards("he")) do
							if card:getId() == id then
								dummy:addSubcard(id)
							end
						end
						room:setPlayerMark(player, mark, 0)
					end
				end
				if dummy:subcardsLength() > 0 then
					room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, player:objectName(), player:objectName(), self:objectName(), ""), player)
				end
				dummy:deleteLater()
			end
			if player and player:isAlive() and player:hasSkill(self:objectName()) and player:getMark("@halo") > 0 and player:isWounded() then
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					--room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					room:setEmotion(player, "shengguang")
					room:broadcastSkillInvoke("audio_effect", 9)	--播放配音
					room:getThread():delay(1312)	--大约是16帧/秒
					room:broadcastSkillInvoke("audio_effect", 7)	--播放配音
					room:getThread():delay(2688)
					player:loseMark("@halo")
					room:setPlayerMark(player, "shengguang_used", 1)
					--local X = math.max(0, player:getMaxHp() - player:getHp())
					local X = 3
					if X > 0 then
						local recover = sgs.RecoverStruct()
						recover.who = player
						recover.recover = X
						room:recover(player, recover, false, 999)
						room:setPlayerMark(player, "shengguang_recover", X)
					end
					
					local card_ids = room:getNCards(3)
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					for _,id in sgs.qlist(card_ids) do
						room:setPlayerMark(player, "shengguang_card_" .. id, 1)
						dummy:addSubcard(id)
						room:setCardFlag(sgs.Sanguosha:getCard(id), "&shengguang")	--可见手牌下标
					end
					player:obtainCard(dummy, false)
					dummy:deleteLater()
					room:getThread():delay(500)
				end
			end
		end
	end
}
table.insert(discard_clear_flag, "&shengguang")			--进弃牌堆清除flag
table.insert(change_owner_clear_flag, "&shengguang")	--持有者变化清除flag

lafa_duoluotianshi:addSkill(shengguang)

sgs.LoadTranslationTable{
	["shengguang"] = "圣光",
	[":shengguang"] = "限定技，准备阶段若你已受伤，你可以<font color='#A9A9A9'>发动此技能</font>，"..WordState("滋养", word_ziyang_str).."3点体力值、摸三张牌。你的下个准备阶段，你失去等同于回复量的体力，破坏以此法获得的牌。",
	["$shengguang"] = "",
	["@halo"] = "天使光环（一次性）",
	["&shengguang"] = "圣光",
}]]

--------------------------------------------------
--废宅（新）
--------------------------------------------------

feizhaiN_buff = sgs.CreateMaxCardsSkill{
	name = "#feizhaiN_buff",
	extra_func = function(self, target)
		if target:getMark("feizhaiN_maxcard") > 0 then
			return target:getMark("feizhaiN_maxcard")
		end
	end
}
feizhaiN = sgs.CreateTriggerSkill{
	name = "feizhaiN",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DrawNCards},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards then
			local has_equip_area = 0
			for i = 0, 4 do
				if player:hasEquipArea(i) then
					has_equip_area = has_equip_area + 1
				end
			end
			if has_equip_area > 0 and ThrowEquipArea(self:objectName(), player, true, "feizhai_throw_log", true) ~= -1 and not SkillNullify(player, self:objectName()) then
				room:addPlayerMark(player, "feizhaiN_maxcard", 1)
				local count = data:toInt() + 2
				data:setValue(count)
			end
		end
	end
}

lafa_duoluotianshi:addSkill(feizhaiN)
lafa_duoluotianshi:addSkill(feizhaiN_buff)

sgs.LoadTranslationTable{
	["feizhaiN"] = "废宅",
	["#feizhaiN_buff"] = "废宅",
	[":feizhaiN"] = "摸牌阶段，你可以废除一个装备栏<font color='#A9A9A9'>发动此技能</font>，你的手牌上限＋1，本阶段你的摸牌数＋2。",
	["$feizhaiN"] = "",
	["feizhai_throw_log"] = "你可以废除一个装备栏，多摸2张牌，手牌上限+1",
}
--[[
feizhaiN = sgs.CreateTriggerSkill{
	name = "feizhaiN",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start and not player:hasSkill("chouka") then
			local has_equip_area = 0
			for i = 0, 4 do
				if player:hasEquipArea(i) then
					has_equip_area = has_equip_area + 1
				end
			end
			if has_equip_area > 0 and ThrowEquipArea(self:objectName(), player, true, "feizhai_throw_log", true) ~= -1 and not SkillNullify(player, self:objectName()) then
				room:acquireOneTurnSkills(player, self:objectName(), "chouka")
			end
		end
	end
}

lafa_duoluotianshi:addSkill(feizhaiN)
lafa_duoluotianshi:addRelateSkill("chouka")

sgs.LoadTranslationTable{
	["feizhaiN"] = "废宅",
	[":feizhaiN"] = "准备阶段，你可以废除一个装备栏<font color='#A9A9A9'>发动此技能</font>，获得“抽卡”直到回合结束。",
	["$feizhaiN"] = "",
	["feizhai_throw_log"] = "你可以废除一个装备栏，获得“抽卡”",
}]]

--------------------------------------------------
--圣光（新）
--------------------------------------------------

shengguangN = sgs.CreateTriggerSkill{
	name = "shengguangN",
	frequency = sgs.Skill_Limited,
	events = {sgs.AskForPeaches},
	limit_mark = "@halo",
	on_trigger = function(self, event, player, data)
		local room = player:getRoom()
		local dying = data:toDying()
		if dying.who:objectName() == player:objectName() and player:getMark("@halo") > 0 then
			if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				--room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:setEmotion(player, "shengguang")
				room:broadcastSkillInvoke("audio_effect", 9)	--播放配音
				room:getThread():delay(1312)	--大约是16帧/秒
				room:broadcastSkillInvoke("audio_effect", 7)	--播放配音
				room:getThread():delay(2688)
				player:loseMark("@halo")
				
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 3
				room:recover(player, recover, false, 999)
				room:loseMaxHp(player, player:getMaxHp(), true)
				player:throwJudgeArea()
				if player:isChained() then
					local damage = dying_data.damage
					if (damage == nil) or (damage.nature == sgs.DamageStruct_Normal) then
						room:setPlayerProperty(player, "chained", sgs.QVariant(false))
					end
				end
				if not player:faceUp() then
					player:turnOver()
				end
				if not player:hasJudgeArea() and not player:hasEquipArea() then
					RecordUnlockGenerals(player, "yumeno_shiori")	--为玩家记录可解锁角色
				end
			end
		end
		return false
	end,
}

lafa_duoluotianshi:addSkill(shengguangN)

sgs.LoadTranslationTable{
	["shengguangN"] = "圣光",
	[":shengguangN"] = "限定技，你处于濒危状态时，你可以<font color='#A9A9A9'>发动此技能</font>，回复3点体力值，将体力上限变为0，废除判定区，复原角色牌。",
	["$shengguangN"] = "",
	["@halo"] = "天使光环（一次性）",
}

--------------------------------------------------
--潮涌余歌 库姬
--设计者：月音风源
--------------------------------------------------

kuji_chaoyongyuge = sgs.General(extension,"kuji_chaoyongyuge","facemoe","4",false)

sgs.LoadTranslationTable{
	["kuji_chaoyongyuge"] = "库姬",
	["&kuji_chaoyongyuge"] = "库姬",
	["#kuji_chaoyongyuge"] = "潮涌余歌",
	["$kuji_chaoyongyuge"] = "进阶",
	["designer:kuji_chaoyongyuge"] = "月音风源",
	["cv:kuji_chaoyongyuge"] = "",
	["illustrator:kuji_chaoyongyuge"] = "",
	["~kuji_chaoyongyuge"] = "",
}

--------------------------------------------------
--低吟
--------------------------------------------------

local damage_cards = {"duel", "fire_attack", "savage_assault", "archery_attack"}	--转化远交近攻会报错，filter找不到sgs.Self

diyin_card = sgs.CreateSkillCard{
	name = "diyin",
	target_fixed = true,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	on_use = function(self, room, source, targets)
		local choices = {}
		for _,name in ipairs(damage_cards) do
			local dummy_card = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, 0)
			for _,card in sgs.qlist(source:getHandcards()) do
				dummy_card:addSubcard(card)
			end
			
			for _, p in sgs.qlist(room:getAlivePlayers()) do
				if dummy_card:isAvailable(source) and not room:isProhibited(source, p, dummy_card) and dummy_card:targetFilter(sgs.PlayerList(), p, source) then
					table.insert(choices, name)
					break
				end
			end
			dummy_card:deleteLater()
		end
		
		if #choices > 0 then
			local choice = room:askForChoice(source, self:objectName(), table.concat(choices, "+"))
			ChoiceLog(source, choice)
			room:setPlayerMark(source, "diyincard_"..choice, 1)
			room:askForUseCard(source, "@@diyin!", "@diyin_useCard:"..choice)
			room:setPlayerMark(source, "diyincard_"..choice, 0)
		else
			local log = sgs.LogMessage()
			log.from = player
			log.type = "#diyin_error"
			log.arg = "diyin"
			room:sendLog(log)	--显示技能发动提示信息
		end
	end
}
diyin_vs = sgs.CreateZeroCardViewAsSkill{
	name = "diyin",
	response_pattern = "@@diyin!",
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@diyin!" then
			local name = ""
			for _, mark in sgs.list(sgs.Self:getMarkNames()) do
				if string.find(mark, "diyincard_") and sgs.Self:getMark(mark) > 0 then	--截取"diyincard_"后面的部分作为牌名
					name = string.sub(mark, 11, -1)
					break
				end
			end
			if name and name ~= "" then
				local ncard = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, 0)
				for _,card in sgs.qlist(sgs.Self:getHandcards()) do
					ncard:addSubcard(card:getId())
				end
				ncard:setSkillName("_"..self:objectName())
				return ncard
			end
		else
			return diyin_card:clone()
		end
	end,
	enabled_at_play = function(self, player)
		if player:usedTimes("#diyin") < 1 and player:getMark("diyin_used") == 0 and not player:isKongcheng() then
			for _,name in ipairs(damage_cards) do
				local dummy_card = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, 0)
				for _,card in sgs.qlist(player:getHandcards()) do
					dummy_card:addSubcard(card)
				end
				if dummy_card:isAvailable(player) then
					dummy_card:deleteLater()
					return true
				end
				dummy_card:deleteLater()
			end
		end
		return false
	end
}
diyin = sgs.CreateTriggerSkill{
	name = "diyin",
	view_as_skill = diyin_vs,
	global = true,
	events = {sgs.Damaged, sgs.PreCardUsed, sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.card and damage.card:getSkillName() == "diyin" and not damage.card:isKindOf("SkillCard") and damage.to and damage.to:isAlive() then
				room:setPlayerMark(damage.to, "diyin_damage", 1)
				room:setCardFlag(damage.card, "diyin_damaged")
			end
		elseif event == sgs.PreCardUsed then
			local card = data:toCardUse().card
			if card then
				if card:getSkillName() == "diyin" and not card:isKindOf("SkillCard") then
					room:setPlayerMark(player, "diyin_used", 1)
				end
			end
		elseif event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and use.card:getSkillName() == "diyin" and not use.card:isKindOf("SkillCard") then
				--local drawed = false
				if use.from and use.from:isAlive() then
					use.from:drawCards(1, self:objectName())
				end
				for _, p in sgs.qlist(room:getAllPlayers()) do
					if p:getMark("diyin_damage") > 0 then
						room:setPlayerMark(p, "diyin_damage", 0)
						if use.from:canEffect(p, self:objectName()) then
							p:drawCards(1, self:objectName())
							drawed = true
						end
					end
				end
				--if --[[not drawed]] not use.card:hasFlag("diyin_damaged") and use.from then
				--	use.from:drawCards(1, self:objectName())
				--end
			end
		end
	end
}
--清除标记确保不会有标记残留
table.insert(play_end_clear_mark_prefix, "diyincard_")	--出牌结束清除指定前缀的标记
table.insert(play_end_clear_mark, "diyin_damage")	--出牌结束清除标记
table.insert(play_end_clear_mark, "diyin_used")	--出牌结束清除标记

kuji_chaoyongyuge:addSkill(diyin)

sgs.LoadTranslationTable{
	["diyin"] = "低吟",
	[":diyin"] = "出牌阶段限一次，你可以将所有手牌当一张伤害类锦囊牌使用。此牌结算结束后，你与因此牌受到伤害的角色各摸一张牌。",
	["$diyin1"] = "",
	["$diyin2"] = "",
	["@diyin_useCard"] = "请将所有手牌当 %src 使用",
	["~diyin"] = "选择目标→点击“确定”",
	["#diyin_error"] = "%from 不能通过“%arg”视为使用任何牌",
}

--------------------------------------------------
--函矢相攻 玖麻
--设计者：月音风源、NSX
--------------------------------------------------

jiuma_hanshixianggong = sgs.General(extension,"jiuma_hanshixianggong","facemoe","5",false,false,false,4)

sgs.LoadTranslationTable{
	["jiuma_hanshixianggong"] = "玖麻",
	["&jiuma_hanshixianggong"] = "玖麻",
	["#jiuma_hanshixianggong"] = "函矢相攻",
	["designer:jiuma_hanshixianggong"] = "月音风源、NSX",
	["cv:jiuma_hanshixianggong"] = "",
	["illustrator:jiuma_hanshixianggong"] = "",
	["~jiuma_hanshixianggong"] = "",
}

--------------------------------------------------
--矛盾
--------------------------------------------------

maodun = sgs.CreateTriggerSkill{
	name = "maodun",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageInflicted, sgs.DamageCaused},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageCaused or event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.damage > 0 then
				if damage.nature == sgs.DamageStruct_Light then return false end
				for _,p in sgs.qlist(room:getOtherPlayers(player)) do
					if p:getHp() >= player:getHp() then
						return false
					end
				end
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				damage.damage = damage.damage + 1
				data:setValue(damage)
				if event == sgs.DamageCaused and damage.to then
					room:setPlayerMark(player, "maodun_damage_to_"..damage.to:objectName(), 1)	--用于特殊击败动画
				end
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark_prefix, "maodun_damage_to_")	--回合结束清除指定前缀的标记

jiuma_hanshixianggong:addSkill(maodun)

sgs.LoadTranslationTable{
	["maodun"] = "矛盾",
	[":maodun"] = "锁定技，你造成或受到伤害时，若你的体力值为全场唯一最高，此伤害＋1。",
	["$maodun"] = "啊~玖麻的力量（迫真）",
}

--------------------------------------------------
--制冷
--------------------------------------------------

zhileng = sgs.CreateTriggerSkill{
	name = "zhileng",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DamageInflicted, sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.nature == sgs.DamageStruct_Light then return false end
			player:setTag("zhileng", data)	--AI用
			if damage.damage > 0 and player:getCards("he"):length() >= 2 and room:askForDiscard(player, self:objectName(), 2, 2, true, true, "@zhileng", ".", self:objectName()) then
				player:removeTag("zhileng")	--AI用
				room:setEmotion(player, "jiuma_small")
				return true
			end
			player:removeTag("zhileng")	--AI用
		elseif event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			local equips = sgs.CardList()
			for _,id in sgs.qlist(room:getDrawPile()) do
				local card = sgs.Sanguosha:getCard(id)
				if card:isKindOf("IceSword") and card:isAvailable(player) then
					local equip_index = card:getRealCard():toEquipCard():location()
					if player:hasEquipArea(equip_index) then	--检测对应装备区是否可用
						equips:append(card)
					end
				end
			end
			if not equips:isEmpty() then
				local card = equips:at(math.random(0, equips:length() - 1))
				room:useCard(sgs.CardUseStruct(card, player, player))
			end
		end
		return false
	end
}

jiuma_hanshixianggong:addSkill(zhileng)

sgs.LoadTranslationTable{
	["zhileng"] = "制冷",
	[":zhileng"] = "游戏开始时，你从牌堆使用一张【寒冰剑】。你受到伤害时，你可以弃置两张牌，防止之。",
	["$zhileng1"] = "",
	["$zhileng2"] = "",
	["@zhileng"] = "你可以弃置两张牌，防止此伤害",
}

--------------------------------------------------
--ENIAC 小希小桃
--设计者：
--------------------------------------------------

xiaoxixiaotao_eniac = sgs.General(extension,"xiaoxixiaotao_eniac$","xuyanshe","4",false)

sgs.LoadTranslationTable{
	["xiaoxixiaotao_eniac"] = "小希小桃",
	["&xiaoxixiaotao_eniac"] = "小希小桃",
	["#xiaoxixiaotao_eniac"] = "ENIAC",
	["$xiaoxixiaotao_eniac"] = "萌新",
	["designer:xiaoxixiaotao_eniac"] = "NSX、yakui",
	["cv:xiaoxixiaotao_eniac"] = "",
	["illustrator:xiaoxixiaotao_eniac"] = "",
	["~xiaoxixiaotao_eniac"] = "",
}

--------------------------------------------------
--联袂
--------------------------------------------------

lianmei = sgs.CreateTriggerSkill{
	name = "lianmei",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 then
			--for i = 1,damage.damage,1 do
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAlivePlayers()) do
					if not p:isNude() and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local target = room:askForPlayerChosen(player, targets, self:objectName(), "@lianmei_ask", true, true)
					if target and not SkillNullify(player, self:objectName()) then
						if not target:isNude() then
							room:askForDiscard(target, self:objectName(), 1, 1, false, true)
						end
						if player:canDiscard(target, "he") then
							room:throwCard(room:askForCardChosen(player, target, "he", self:objectName(), false, sgs.Card_MethodDiscard), target, player)
						end
					end
				end
			--end
		end
		return false
	end
}

xiaoxixiaotao_eniac:addSkill(lianmei)

sgs.LoadTranslationTable{
	["lianmei"] = "联袂",
	[":lianmei"] = "你受到伤害后，你可以指定一名角色，<font color='#A9A9A9'>发动此技能</font>，令其弃置一张牌，然后你破坏其一张牌。",
	["$lianmei1"] = "",
	["$lianmei2"] = "",
	["@lianmei_ask"] = "你可以发动“联袂”，令一名角色弃置一张牌再被你破坏其一张牌",
}

--------------------------------------------------
--维护
--------------------------------------------------

weihucard = sgs.CreateSkillCard{
	name = "weihuvs",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return to_select:getRole() == "lord"
	end,
	feasible = function(self, targets)
		return #targets == 1 and self:subcardsLength() == 2
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		if target and target:isAlive() then
			room:notifySkillInvoked(target, "weihu")	--在武将牌上显示技能名
			room:broadcastSkillInvoke("weihu")	--播放配音
			room:throwCard(self, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, source:objectName(), source:objectName(), self:objectName(), ""), source)
			local recover = sgs.RecoverStruct()
			recover.who = source
			recover.recover = 1
			room:recover(target, recover)
		end
	end
}
weihuvs = sgs.CreateViewAsSkill{
	n = 2,
	name = "weihuvs&",
	view_filter = function(self, selected, to_select)
		return #selected < 2 --and sgs.Self:canDiscard(sgs.Self, to_select:getId())
	end,
	view_as = function(self, cards)
		if #cards <= 2 then		--让选好牌前按钮也能亮着
			local card = weihucard:clone()
			for _, c in ipairs(cards) do
				card:addSubcard(c)
			end
			return card
		end
	end,
	enabled_at_play = function(self, player)
		return player:getKingdom() == "xuyanshe" and player:getRole() ~= "lord" and player:getCardCount(true) >= 2 and player:usedTimes("#weihuvs") < 1
	end
}
weihu = sgs.CreateTriggerSkill{
	name = "weihu$",
	events = {sgs.GameStart, sgs.EventAcquireSkill},
	on_trigger = function(self, event, player, data, room)
		if (event == sgs.EventAcquireSkill and data:toString() == self:objectName() or event == sgs.GameStart) and player:hasLordSkill(self:objectName()) then
			for _,p in sgs.qlist(room:getAllPlayers()) do
				if not p:hasSkill("weihuvs") then
					room:attachSkillToPlayer(p, "weihuvs")
				end
			end
		end
	end
}
table.insert(play_end_clear_mark, "weihu_used")	--出牌结束清除标记

xiaoxixiaotao_eniac:addSkill(weihu)
local skills = sgs.SkillList()
if not sgs.Sanguosha:getSkill("weihuvs") then skills:append(weihuvs) end	--维护（其他角色）
sgs.Sanguosha:addSkills(skills)

sgs.LoadTranslationTable{
	["weihu"] = "维护",
	["weihuvs"] = "维护",
	["weihuvs>>"] = "xiaoxixiaotao",	--技能按钮上的角色小图标
	[":weihu"] = "主公技，其他虚研社角色的出牌阶段限一次，其可以破坏两张牌，令你回复1点体力。",
	[":weihuvs"] = "出牌阶段限一次，你可以破坏两张牌，令主公回复1点体力。",
	["$weihu"] = "",
	["^weihuvs"] = "你可以破坏两张牌，令主公回复1点体力<br><br>操作提示：选择两张牌→选择主公（自动选择）→确定",
}

--------------------------------------------------
--电子幽灵 幽灵子辰
--设计者：萌龙少主
--------------------------------------------------

youlingzichen_dianziyouling = sgs.General(extension,"youlingzichen_dianziyouling","xuyanshe","4",true)

sgs.LoadTranslationTable{
	["youlingzichen_dianziyouling"] = "幽灵子辰",
	["&youlingzichen_dianziyouling"] = "幽灵子辰",
	["#youlingzichen_dianziyouling"] = "电子幽灵",
	["$youlingzichen_dianziyouling"] = "萌新",
	["designer:youlingzichen_dianziyouling"] = "萌龙少主",
	["cv:youlingzichen_dianziyouling"] = "",
	["illustrator:youlingzichen_dianziyouling"] = "",
	["~youlingzichen_dianziyouling"] = "",
}

--------------------------------------------------
--竭心
--------------------------------------------------

jiexin = sgs.CreateTriggerSkill{
	name = "jiexin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 then
			for i = 1,damage.damage,1 do
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAlivePlayers()) do
					if SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local target = room:askForPlayerChosen(player, targets, self:objectName(), "@jiexin_ask", true, true)
					if target and not SkillNullify(player, self:objectName()) then
						local judge = sgs.JudgeStruct()
						judge.pattern = ".|diamond,spade,club"
						judge.good = true
						judge.reason = self:objectName()
						judge.who = target
						room:judge(judge)
						if judge:isGood() then
							target:drawCards(2, self:objectName())
						else
							room:addPlayerMark(player, "jiexin_heart_count", 1)
							if player:getMark("jiexin_heart_count") >= 3 then
								RecordUnlockGenerals(player, "youlingzichen_shangjinlieren")	--为玩家记录可解锁角色
							end
						end
					end
				end
			end
		end
		return false
	end
}

youlingzichen_dianziyouling:addSkill(jiexin)

sgs.LoadTranslationTable{
	["jiexin"] = "竭心",
	[":jiexin"] = "你受到1点伤害后，你可以指定一名角色，<font color='#A9A9A9'>发动此技能</font>，令其进行一次判定，若判定结果不为红桃，其摸两张牌。",
	["$jiexin1"] = "",
	["$jiexin2"] = "",
	["@jiexin_ask"] = "你可以发动“竭心”，令一名角色判定，判定成功则摸两张牌",
}

--------------------------------------------------
--赏金猎人 幽灵子辰
--设计者：萌龙少主
--------------------------------------------------

youlingzichen_shangjinlieren = sgs.General(extension,"youlingzichen_shangjinlieren","xuyanshe","4",true,true,true)

sgs.LoadTranslationTable{
	["youlingzichen_shangjinlieren"] = "幽灵子辰",
	["&youlingzichen_shangjinlieren"] = "幽灵子辰",
	["#youlingzichen_shangjinlieren"] = "赏金猎人",
	["$youlingzichen_shangjinlieren"] = "进阶",
	["designer:youlingzichen_shangjinlieren"] = "萌龙少主",
	["cv:youlingzichen_shangjinlieren"] = "",
	["illustrator:youlingzichen_shangjinlieren"] = "",
	["unlock:youlingzichen_shangjinlieren"] = "一局游戏中使用幽灵子辰的“竭心”判定红桃至少3次",
	["~youlingzichen_shangjinlieren"] = "",
}

youlingzichen_shangjinlieren:setBonus(true)		--设为奖励角色

--------------------------------------------------
--演史
--------------------------------------------------

yanshi = sgs.CreateTriggerSkill{
	name = "yanshi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DrawNCards},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards and room:getDrawPile():length() >= 2 and room:getDiscardPile():length() >= 2 then
			local card_ids = sgs.IntList()
			card_ids:append(room:getDrawPile():at(0))
			card_ids:append(room:getDrawPile():at(1))
			card_ids:append(room:getDiscardPile():at(0))
			card_ids:append(room:getDiscardPile():at(1))
			
			if card_ids:length() < 4 then
				return false
			end
			
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			dummy:addSubcard(room:getDiscardPile():at(0))
			dummy:addSubcard(room:getDiscardPile():at(1))
			dummy:deleteLater()
			
			room:fillAG(card_ids, player, sgs.IntList(), false, "drawPileTop|drawPileTop|discardPileTop|discardPileTop")
			
			local log = sgs.LogMessage()
			log.type = "#yanshi_log"
			log.from = player
			log.arg = self:objectName()
			room:sendLog(log)	--发送信息框消息
			
			if player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:")) then
				room:clearAG(player)
				player:obtainCard(dummy, true)
				
				local n = data:toInt()
				data:setValue(0)
				return true		--已放弃摸牌，阻止后续结算
			end
			room:clearAG(player)
		end
	end,
}

youlingzichen_shangjinlieren:addSkill(yanshi)

sgs.LoadTranslationTable{
	["yanshi"] = "演史",
	[":yanshi"] = "摸牌阶段，你观看牌堆顶、弃牌堆顶的各两张牌，然后你可以改为获得弃牌堆顶的两张牌。",
	["$yanshi"] = "",
	["yanshi:choice"] = "你可以放弃摸牌，改为获得弃牌堆顶的两张牌",
	["#yanshi_log"] = "由于“%arg”的效果，%from 观看了牌堆顶、弃牌堆顶的各 <b><font color='yellow'>2</font></b> 张牌",
}

--------------------------------------------------
--缉凶
--------------------------------------------------

jixiongcard = sgs.CreateSkillCard{
	name = "jixiong",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if sgs.Self:inMyAttackRange(to_select) and to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "jixiong") then
				return SkillCanTarget(to_select, sgs.Self, self:objectName())
			end
		end
		return false
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		if not SkillNullify(effect.from, self:objectName()) then
			local card_ids = sgs.IntList()
			local foot_notes = {}
			for _, card in sgs.qlist(effect.from:getCards("h")) do
				local id = card:getId()
				card_ids:append(id)
				table.insert(foot_notes, effect.from:getGeneralName().."+hand_area")
			end
			for _, card in sgs.qlist(effect.from:getCards("e")) do
				local id = card:getId()
				card_ids:append(id)
				table.insert(foot_notes, effect.from:getGeneralName().."+equip_area")
			end
			for _, card in sgs.qlist(effect.to:getCards("h")) do
				local id = card:getId()
				card_ids:append(id)
				table.insert(foot_notes, effect.to:getGeneralName().."+hand_area")
			end
			for _, card in sgs.qlist(effect.to:getCards("e")) do
				local id = card:getId()
				card_ids:append(id)
				table.insert(foot_notes, effect.to:getGeneralName().."+equip_area")
			end
			
			local suits = {}
			local repeat_suits = {}
			for _, id in sgs.qlist(card_ids) do
				local card = sgs.Sanguosha:getCard(id)
				local suit_str = card:getSuitString()
				if table.contains(suits, suit_str) and not table.contains(repeat_suits, suit_str) then
					table.insert(repeat_suits, suit_str)
				else
					table.insert(suits, suit_str)
				end
			end
			
			if #repeat_suits > 0 then
				local can_choose_ids, cannot_choose_ids = sgs.IntList(), sgs.IntList()
				
				for _, id in sgs.qlist(card_ids) do
					local card = sgs.Sanguosha:getCard(id)
					local suit_str = card:getSuitString()
					if table.contains(repeat_suits, suit_str) then
						can_choose_ids:append(id)
					else
						cannot_choose_ids:append(id)
					end
				end
				
				room:fillAG(card_ids, effect.from, cannot_choose_ids, false, table.concat(foot_notes, "|"), true)
				local id1 = room:askForAG(effect.from, can_choose_ids, true, self:objectName())
				if id1 and id1 ~= -1 then
					room:clearAG(effect.from)
					
					local can_choose_ids, cannot_choose_ids = sgs.IntList(), sgs.IntList()
					
					local card1 = sgs.Sanguosha:getCard(id1)
					for _, id in sgs.qlist(card_ids) do
						local card = sgs.Sanguosha:getCard(id)
						if card:getSuit() == card1:getSuit() and id ~= id1 then
							can_choose_ids:append(id)
						else
							cannot_choose_ids:append(id)
						end
					end
					local index = card_ids:indexOf(id1)
					if index ~= -1 then
						foot_notes[index+1] = "is_chosen"
					end
					room:fillAG(card_ids, effect.from, cannot_choose_ids, false, table.concat(foot_notes, "|"), true)
					local id2 = room:askForAG(effect.from, can_choose_ids, true, self:objectName())
					if id2 and id2 ~= -1 then
						room:clearAG(effect.from)
						
						local card2 = sgs.Sanguosha:getCard(id2)
						local from_discardnum, to_discardnum = 0, 0
						
						local moveA = sgs.CardsMoveStruct()
						moveA.card_ids = sgs.IntList()
						moveA.card_ids:append(id1)
						moveA.from_place = room:getCardPlace(id1)
						moveA.to_place = sgs.Player_DiscardPile
						moveA.from = room:getCardOwner(id1)
						moveA.to = nil
						moveA.reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, effect.from:objectName(), moveA.from:objectName(), self:objectName(), "")
						
						local moveB = sgs.CardsMoveStruct()
						moveB.card_ids = sgs.IntList()
						moveB.card_ids:append(id2)
						moveB.from_place = room:getCardPlace(id2)
						moveB.to_place = sgs.Player_DiscardPile
						moveB.from = room:getCardOwner(id2)
						moveB.to = nil
						moveB.reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, effect.from:objectName(), moveB.from:objectName(), self:objectName(), "")
						
						local moves = sgs.CardsMoveList()
						if not moveA.card_ids:isEmpty() then
							moves:append(moveA)
						end
						if not moveB.card_ids:isEmpty() then
							moves:append(moveB)
						end
						
						if room:getCardOwner(id1) == effect.from then from_discardnum = from_discardnum + 1 else to_discardnum = to_discardnum + 1 end
						if room:getCardOwner(id2) == effect.from then from_discardnum = from_discardnum + 1 else to_discardnum = to_discardnum + 1 end
						
						if not moves:isEmpty() then
							local log = sgs.LogMessage()
							log.type = "#jixiong_log"
							log.from = effect.from
							log.arg = self:objectName()
							log.to:append(room:getCardOwner(id1))
							log.card_str = card1:toString()
							room:sendLog(log)	--发送信息框消息
							
							local log = sgs.LogMessage()
							log.type = "#jixiong_log"
							log.from = effect.from
							log.arg = self:objectName()
							log.to:append(room:getCardOwner(id2))
							log.card_str = card2:toString()
							room:sendLog(log)	--发送信息框消息
							
							room:moveCardsAtomic(moves, true)
							
							if from_discardnum > to_discardnum then
								room:damage(sgs.DamageStruct(self:objectName(), effect.from, effect.to))
							elseif from_discardnum < to_discardnum then
								room:damage(sgs.DamageStruct(self:objectName(), effect.to, effect.from))
							end
						end
					end
				end
			else
				room:fillAG(card_ids, effect.from, card_ids, false, table.concat(foot_notes, "|"), true)
				room:askForAG(effect.from, sgs.IntList(), true, self:objectName())
			end
			room:clearAG(effect.from)
		end
	end
}
jixiong = sgs.CreateViewAsSkill{
	name = "jixiong",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		if #cards == 0 then
			local NewSkillCard = jixiongcard:clone()
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return not player:hasUsed("#jixiong")
	end,
}

youlingzichen_shangjinlieren:addSkill(jixiong)

sgs.LoadTranslationTable{
	["jixiong"] = "缉凶",
	[":jixiong"] = "出牌阶段限一次，你可以指定一名你攻击范围内的其他角色，<font color='#A9A9A9'>发动此技能</font>，你观看其手牌，然后可以从双方的所有牌中破坏两张相同花色的牌，被破坏牌数较多的一方对另一方造成1点伤害。",
	["$jixiong"] = "",
	["is_chosen"] = "已选择",
	["#jixiong_log"] = "%from 执行了“%arg”的效果，破坏了 %to 的 %card",
	["^AG_jixiong"] = "<b>缉凶</b><br/>破坏牌：依次双击选择两张同花色的牌破坏<br/>不破坏牌：直接点击确定",
}

--------------------------------------------------
--智能助手 小奈
--设计者：萌龙少主
--------------------------------------------------

xiaonai_zhinengzhushou = sgs.General(extension,"xiaonai_zhinengzhushou","individual","3",true)

sgs.LoadTranslationTable{
	["xiaonai_zhinengzhushou"] = "小奈",
	["&xiaonai_zhinengzhushou"] = "小奈",
	["#xiaonai_zhinengzhushou"] = "智能助手",
	["$xiaonai_zhinengzhushou"] = "硬核",
	["designer:xiaonai_zhinengzhushou"] = "萌龙少主",
	["cv:xiaonai_zhinengzhushou"] = "",
	["illustrator:xiaonai_zhinengzhushou"] = "",
	["~xiaonai_zhinengzhushou"] = "",
}

xiaonai_zhinengzhushou:setGender(sgs.General_Sexless)

--------------------------------------------------
--全能！
--------------------------------------------------

function generateAllCardObjectNameTablePatterns()
	--[[local patterns = {}
	for i = 0, 500 do
		local card = sgs.Sanguosha:getEngineCard(i)
		if card == nil then break end
		if (card:isKindOf("BasicCard") or card:isKindOf("TrickCard")) and not table.contains(patterns, card:objectName()) then
			table.insert(patterns, card:objectName())
		end
	end
	return patterns]]
	return {"slash","fire_slash","thunder_slash","ice_slash","jink","peach","analeptic","ex_nihilo","amazing_grace","god_salvation","archery_attack","savage_assault","collateral","dismantlement","snatch","duel","fire_attack","iron_chain","fudichouxin","nullification"}
end
function getPos(table, value)
	for i, v in ipairs(table) do
		if v == value then
			return i
		end
	end
	return 0
end
local pos = 0
quanneng_xiaonai_select = sgs.CreateSkillCard{
	name = "quanneng_xiaonai",
	will_throw = false,
	target_fixed = true,
	handling_method = sgs.Card_MethodNone,
	on_use = function(self, room, source, targets)
		local patterns = generateAllCardObjectNameTablePatterns()
		local choices = {}
		local selected_card = self:getSubcards():first()
		
		for i = 0, 500 do
			local card = sgs.Sanguosha:getEngineCard(i)
			if card == nil then break end
			if (not (Set(sgs.Sanguosha:getBanPackages()))[card:getPackage()]) and not (table.contains(choices, card:objectName())) then
				if source:canUse(card) and --[[source:getMark("quanneng_xiaonai"..card:objectName()) == 0 and]] (card:isKindOf("BasicCard") or card:isNDTrick()) then
					table.insert(choices, card:objectName())
				end
			end
		end
		
		for i,obj_name in ipairs(choices) do	--再次检查能否用手牌转化，防止选择后被卡死
			local check_card = sgs.Sanguosha:cloneCard(obj_name, sgs.Card_NoSuit, -1)
			check_card:addSubcard(selected_card)
			check_card:setSkillName("quanneng_xiaonai")
			if not source:canUse(check_card) then
				table.remove(choices, i)
			end
			check_card:deleteLater()
		end
		
		if next(choices) ~= nil then
			--table.insert(choices, "cancel")
			--local pattern = room:askForChoice(source, "quanneng_xiaonai", table.concat(choices, "+"))
			
			local pattern = "cancel"
			local from_ids = sgs.Sanguosha:getRandomCards()
			local ids = sgs.IntList()
			local include_list = {}
			--[[for _,id in sgs.qlist(from_ids) do
				local engine_card = sgs.Sanguosha:getEngineCard(id)
				if engine_card:isKindOf("BasicCard") then
					local obj_name = engine_card:objectName()
					if table.contains(choices, obj_name) and not table.contains(include_list, obj_name) then
						ids:append(id)
						table.insert(include_list, obj_name)
					end
				end
			end
			for _,id in sgs.qlist(from_ids) do
				local engine_card = sgs.Sanguosha:getEngineCard(id)
				if engine_card:isNDTrick() then
					local obj_name = engine_card:objectName()
					if table.contains(choices, obj_name) and not table.contains(include_list, obj_name) then
						ids:append(id)
						table.insert(include_list, obj_name)
					end
				end
			end]]
			for _,obj_name in ipairs(patterns) do
				if table.contains(choices, obj_name) and not table.contains(include_list, obj_name) then
					for _,id in sgs.qlist(from_ids) do
						if sgs.Sanguosha:getEngineCard(id):objectName() == obj_name then
							ids:append(id)
							table.insert(include_list, obj_name)
							break
						end
					end
				end
			end
			
			room:fillAG(ids, source, sgs.IntList(), true)
			local id = -1
			id = room:askForAG(source, ids, false, "quanneng_xiaonai")
			room:clearAG(source)
			if id > -1 then
				pattern = sgs.Sanguosha:getEngineCard(id):objectName()
			end
			
			if pattern and pattern ~= "cancel" then
				--ChoiceLog(source, pattern)
				local poi = sgs.Sanguosha:cloneCard(pattern, sgs.Card_NoSuit, -1)
				--if poi:targetFixed() then
				--	poi:setSkillName("quanneng_xiaonai")
				--	poi:addSubcard(selected_card)
				--	if source:canUse(poi) then
				--		room:useCard(sgs.CardUseStruct(poi, source, source), true)
				--	end
				--else
					pos = getPos(patterns, pattern)
					room:setPlayerMark(source, "quanneng_xiaonaipos", pos)
					room:setPlayerProperty(source, "quanneng_xiaonai", sgs.QVariant(selected_card))
					if not room:askForUseCard(source, "@@quanneng_xiaonai", Ternary(poi:targetFixed(),"@quanneng_xiaonai_tergetfixed:" ,"@quanneng_xiaonai:")..pattern) then
						room:setPlayerFlag(source, "Global_QuannengFailed")	--激将类flag，进行其他操作前不可再用
					end
				--end
			else
				--room:setPlayerMark(player, "&quanneng_xiaonai_used+_lun", 1)
				room:setPlayerFlag(source, "Global_QuannengFailed")	--激将类flag，进行其他操作前不可再用
			end
		else
			local log = sgs.LogMessage()
			log.type = "#quanneng_xiaonai_nil_log"
			log.from = source
			log.arg = "quanneng_xiaonai"
			room:sendLog(log)	--发送信息框消息
			room:setPlayerMark(source, "&quanneng_xiaonai_used+_lun", 1)
		end
	end
}
quanneng_xiaonaiCard = sgs.CreateSkillCard{
	name = "quanneng_xiaonaiCard",
	will_throw = false,
	filter = function(self, targets, to_select)
		local name = ""
		local card
		local plist = sgs.PlayerList()
		for i = 1, #targets do plist:append(targets[i]) end
		local aocaistring = self:getUserString()
		if aocaistring ~= "" then
			local uses = aocaistring:split("+")
			name = uses[1]
			card = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, -1)
			card:addSubcard(self:getSubcards():first())
			if card and card:targetFixed() then
				return false
			else
				return card and card:targetFilter(plist, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card, plist)
			end
		end
		return true
	end,
	target_fixed = function(self)
		local name = ""
		local card
		local aocaistring = self:getUserString()
		if aocaistring ~= "" then
			local uses = aocaistring:split("+")
			name = uses[1]
			card = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, -1)
		end
		card:addSubcard(self:getSubcards():first())
		return card and card:targetFixed()
	end,
	feasible = function(self, targets)
		local name = ""
		local card
		local plist = sgs.PlayerList()
		for i = 1, #targets do plist:append(targets[i]) end
		local aocaistring = self:getUserString()
		if aocaistring ~= "" then
			local uses = aocaistring:split("+")
			name = uses[1]
			card = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, -1)
		end
		card:addSubcard(self:getSubcards():first())
		return card and card:targetsFeasible(plist, sgs.Self)
	end,
	on_validate_in_response = function(self, user)
		local room = user:getRoom()
		local aocaistring = self:getUserString()
		local use_card = sgs.Sanguosha:cloneCard(self:getUserString(), sgs.Card_NoSuit, -1)
		if string.find(aocaistring, "+")  then
			local uses = {}
			for _, name in pairs(aocaistring:split("+")) do
				--if user:getMark("quanneng_xiaonai"..name) == 0 then
				table.insert(uses, name)
				--end
			end
			local name = room:askForChoice(user, "quanneng_xiaonai", table.concat(uses, "+"))
			use_card = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, -1)
		end
		use_card:addSubcard(self:getSubcards():first())
		use_card:setSkillName("quanneng_xiaonai")
		return use_card
	end,
	on_validate = function(self, card_use)
		local room = card_use.from:getRoom()
		local aocaistring = self:getUserString()
		local use_card = sgs.Sanguosha:cloneCard(self:getUserString(), sgs.Card_NoSuit, -1)
		if string.find(aocaistring, "+")  then
			local uses = {}
			for _, name in pairs(aocaistring:split("+")) do
				--if card_use.from:getMark("quanneng_xiaonai"..name) == 0 then
				table.insert(uses, name)
				--end
			end
			local name = room:askForChoice(card_use.from, "quanneng_xiaonai", table.concat(uses, "+"))
			use_card = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, -1)
		end
		if use_card == nil then return false end
		use_card:setSkillName("quanneng_xiaonai")
		local available = true
		for _, p in sgs.qlist(card_use.to) do
			if card_use.from:isProhibited(p, use_card)	then
				available = false
				break
			end
		end
		if not available then return nil end
		use_card:addSubcard(self:getSubcards():first())
		return use_card
	end
}
quanneng_xiaonaiVS = sgs.CreateViewAsSkill{
	name = "quanneng_xiaonai",
	n = 1,
	--response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern and pattern == "@@quanneng_xiaonai" then
			return false
		else
			return not to_select:isEquipped() and to_select:getSuit() ~= sgs.Card_Heart
		end
	end,
	view_as = function(self, cards)
		local patterns = generateAllCardObjectNameTablePatterns()
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_PLAY then
			if #cards == 1 then
				local acard = quanneng_xiaonai_select:clone()
				acard:addSubcard(cards[1]:getId())
				return acard
			end
		else
			local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
			if pattern == "slash" then
				pattern = "slash+thunder_slash+fire_slash+ice_slash"
			end
			local acard = quanneng_xiaonaiCard:clone()
			if pattern and pattern == "@@quanneng_xiaonai" then
				pattern = patterns[sgs.Self:getMark("quanneng_xiaonaipos")]
				acard:addSubcard(sgs.Self:property("quanneng_xiaonai"):toInt())
				if #cards ~= 0 then return end
			else
				if #cards ~= 1 then return end
				acard:addSubcard(cards[1]:getId())
			end
			if pattern == "peach+analeptic" and sgs.Self:hasFlag("Global_PreventPeach") then
				pattern = "analeptic"
			end
			acard:setUserString(pattern)
			return acard
		end
	end,
	enabled_at_play = function(self, player)
		local patterns = generateAllCardObjectNameTablePatterns()
		local choices = {}
		for _, name in ipairs(patterns) do
			local poi = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, -1)
			if poi:isAvailable(player) --[[and player:getMark("quanneng_xiaonai"..name) == 0]] then
				table.insert(choices, name)
			end
		end
		--[[for _, p in sgs.qlist(player:getAliveSiblings()) do	--禁止濒死使用
			if p:hasFlag("Global_Dying") or player:hasFlag("Global_Dying") then
				return false
			end
		end]]
		return next(choices) and player:getMark("&quanneng_xiaonai_used+_lun") == 0 and not player:hasFlag("Global_QuannengFailed")
	end,
	enabled_at_response = function(self, player, pattern)
		if sgs.Sanguosha:getCurrentCardUseReason() ~= sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE or player:getMark("&quanneng_xiaonai_used+_lun") > 0 then return false end
		--[[for _, p in sgs.qlist(player:getAliveSiblings()) do	--禁止濒死使用
			if p:hasFlag("Global_Dying") or player:hasFlag("Global_Dying") then
				return false
			end
		end]]
		for _, p in pairs(pattern:split("+")) do
			if player:getMark(self:objectName()..p) == 0 then return true end
		end
	end,
	enabled_at_nullification = function(self, player, pattern)
		return player:getMark("quanneng_xiaonainullification") == 0 and player:getMark("&quanneng_xiaonai_used+_lun") == 0
	end
}
quanneng_xiaonai = sgs.CreateTriggerSkill{
	name = "quanneng_xiaonai",
	view_as_skill = quanneng_xiaonaiVS,
	events = {sgs.PreCardUsed, sgs.PreCardResponded},
	on_trigger = function(self, event, player, data)
		local room = player:getRoom()
		if event == sgs.PreCardUsed or event == sgs.PreCardResponded then
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				local response = data:toCardResponse()
				if response.m_isUse then
					card = response.m_card
				end
			end
			if card and card:getHandlingMethod() == sgs.Card_MethodUse then
				if card:getSkillName() == "quanneng_xiaonai" then
					room:setPlayerMark(player, "&quanneng_xiaonai_used+_lun", 1)
					
					local log = sgs.LogMessage()
					log.type = "#quanneng_xiaonai_forbid_log"
					log.from = player
					log.arg = "quanneng_xiaonai"
					log.arg2 = getTypeKindString(card)
					room:sendLog(log)	--发送信息框消息
					local forbid_types = {"BasicCard", "TrickCard", "EquipCard"}
					table.removeOne(forbid_types, getTypeKindString(card))
					room:setPlayerMark(player, "quanneng_xiaonai_limit+use+"..table.concat(forbid_types, ","), 1)
					room:setPlayerCardLimitation(player, "use", table.concat(forbid_types, ","), false)
					room:setPlayerMark(player, "&quanneng_xiaonai_short+"..getTypeKindString(card), 1)
				end
			end
		--elseif event == sgs.CardFinished then
		--	local use = data:toCardUse()
		--	if use.card:getSkillName() == "quanneng_xiaonai" and not use.card:isKindOf("SkillCard") then
		--		local forbid_types = {"BasicCard", "TrickCard", "EquipCard"}
		--		table.removeOne(forbid_types, getTypeKindString(use.card))
		--		room:setPlayerCardLimitation(player, "use", table.concat(forbid_types, ","), true)
		--		room:setPlayerMark(player, "&quanneng_xiaonai_short+"..getTypeKindString(use.card), 1)
		--	end
		end
	end
}
table.insert(turn_end_clear_mark_prefix, "&quanneng_xiaonai_short+")	--回合结束清除指定前缀的标记
table.insert(turn_end_limit_card_prefix, "quanneng_xiaonai_limit")	--封印直到回合结束


xiaonai_zhinengzhushou:addSkill(quanneng_xiaonai)

sgs.LoadTranslationTable{
	["quanneng_xiaonai"] = "全能！",
	["quanneng_xiaonai_short"] = "全能",
	[":quanneng_xiaonai"] = "每轮限一次，你可以将一张非红桃手牌当任意<font color='#9400D3'>基本牌或普通锦囊牌</font>使用，本回合你只能使用<font color='#9400D3'>此类别</font>的牌。",
	["$quanneng_xiaonai"] = "",
	["^quanneng_xiaonai"] = "请选择你要转化的手牌<br><br>操作提示：选择一张牌→确定",
	["^AG_quanneng_xiaonai"] = "<b>全能！</b><br/>双击以选择一个牌名，将你选择的牌当此牌使用",
	["@quanneng_xiaonai"] = "请选择 %src 的目标",
	["@quanneng_xiaonai_tergetfixed"] = "你可以将所选牌当 %src 使用",
	["~quanneng_xiaonai"] = "选择目标→点击确定",
	["quanneng_xiaonai_used"] = "全能已使用",
	["#quanneng_xiaonai_nil_log"] = "%from 没有能通过“%arg”转化的牌",
	["#quanneng_xiaonai_forbid_log"] = "由于“%arg”的效果，%from 本回合只能使用 %arg2",
}

--------------------------------------------------
--χ型AI 小希
--设计者：NSX
--------------------------------------------------

xiaoxi_chixingai = sgs.General(extension,"xiaoxi_chixingai","xuyanshe","4",false)

sgs.LoadTranslationTable{
	["xiaoxi_chixingai"] = "小希",
	["&xiaoxi_chixingai"] = "小希",
	["#xiaoxi_chixingai"] = "χ型AI",
	["$xiaoxi_chixingai"] = "进阶",
	["designer:xiaoxi_chixingai"] = "NSX",
	["cv:xiaoxi_chixingai"] = "",
	["illustrator:xiaoxi_chixingai"] = "",
	["~xiaoxi_chixingai"] = "",
}

--------------------------------------------------
--元初
--------------------------------------------------

yuanchubuff = sgs.CreateMaxCardsSkill{
	name = "#yuanchubuff",
	extra_func = function(self, target)
		if target:hasSkill("yuanchu") then
			local X = target:aliveCount()
			if target:getMark("&yuanchu") > 0 then
				X = math.floor(X/2)
			end
			return X - target:getHp()
		end
	end
}
yuanchu = sgs.CreateTriggerSkill{
	name = "yuanchu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Discard and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. player:getMaxCards()-(player:aliveCount()/2))) then
				player:drawCards(1, self:objectName())
				room:setPlayerMark(player, "&yuanchu", 1)
			end
		end
		return false
	end
}
table.insert(discard_end_clear_mark, "&yuanchu")	--弃牌结束清除标记

xiaoxi_chixingai:addSkill(yuanchu)
xiaoxi_chixingai:addSkill(yuanchubuff)

sgs.LoadTranslationTable{
	["yuanchu"] = "元初",
	["#yuanchubuff"] = "元初",
	[":yuanchu"] = "锁定技，你的手牌上限等于X。（X为在场角色数）<br/>弃牌阶段开始时，你可以摸一张牌，本阶段X减半。",
	["$yuanchu"] = "",
	[":mark:&yuanchu"] = "本阶段手牌上限减半",
	["yuanchu:choice"] = "你可以摸一张牌，手牌上限减少为 %src",
}

--------------------------------------------------
--精算
--------------------------------------------------

jingsuan_card = sgs.CreateSkillCard{
	name = "jingsuan" ,
	will_throw = false,
	filter = function(self, targets, to_select)
		return #targets == 0 and to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canDiscard(to_select, "h") and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		effect.from:loseMark("@byte", effect.from:getMark("@byte"))
		if effect.from:canDiscard(effect.to, "h") then
			room:throwCard(room:askForCardChosen(effect.from, effect.to, "h", "jingsuan", false, sgs.Card_MethodDiscard), effect.to, effect.from)
		end
	end
}
jingsuan_vs = sgs.CreateViewAsSkill{
	name = "jingsuan",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end ,
	view_as = function(self, cards)
		if #cards == 0 then
			local new_card = jingsuan_card:clone()
			new_card:setSkillName("jingsuan")
			return new_card
		else
			return nil
		end
	end,
	enabled_at_play = function(self, player)
		return player:getMark("@byte") >= 16
	end
}
jingsuan = sgs.CreateTriggerSkill{
	name = "jingsuan",
	frequency = sgs.Skill_Limited,
	events = {sgs.CardUsed, sgs.CardResponded},
	view_as_skill = jingsuan_vs,
	limit_mark = "@jingsuan",
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardUsed or event == sgs.CardResponded then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			elseif event == sgs.CardResponded then
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and card:getTypeId() ~= sgs.Card_TypeSkill and card:getNumber() > 0 and card:getNumber() <= 13 and card:getId() ~= -1 then	--神杀的多张牌转化，点数为和。这里只接受非转化的情况（有id）。
				room:addPlayerMark(player, "@byte", card:getNumber())
				if player:getMark("@byte") == 48 or player:getMark("@byte") == 64 then
					local to = room:askForPlayerChosen(player, room:getAlivePlayers(), self:objectName(), "@jingsuan_invoke", true, true)
					if to and player:canEffect(to, self:objectName()) then
						player:loseMark("@byte", player:getMark("@byte"))
						if to:isChained() then
							to:setChained(false)
						else
							to:setChained(true)
						end
						room:broadcastProperty(to, "chained")
						room:setEmotion(to, "chain")
						to:turnOver()
						for _, skill in sgs.qlist(to:getSkillList(false, true)) do	--getSkillList 参数1：是否包含装备技能 参数2：是否只列出可见技能
							if skill:isChangeSkill() then
								if skill:objectName() == "fuwei" then	--特殊处理：复维（4档转换）
									room:setChangeSkillState(to, skill:objectName(), Ternary(to:getChangeSkillState(skill:objectName()) == 4, 1, to:getChangeSkillState(skill:objectName())+1))
								else
									room:setChangeSkillState(to, skill:objectName(), Ternary(to:getChangeSkillState(skill:objectName()) <= 1, 2, 1))
								end
							end
						end
					end
				end
			end
		end
	end
}

xiaoxi_chixingai:addSkill(jingsuan)

sgs.LoadTranslationTable{
	["jingsuan"] = "精算",
	[":jingsuan"] = "你使用牌时，获得与此牌点数相同的“字节”。<font color='#EE82EE'>你可以在对应时机消耗全部“字节”(χ=“字节”数)，执行对应效果：</font><br/><font color='#9400D3'>χ≥16</font> 出牌阶段，破坏一名其他角色的一张手牌；<br/><font color='#9400D3'>χ=32</font> 限定技，技能发动时，无效之；<br/><font color='#9400D3'>χ=48或χ=64</font> 获得“字节”后，反转一名角色的横置、翻面、转换技的状态。",
	["$jingsuan1"] = "",
	["$jingsuan2"] = "",
	["@byte"] = "字节",
	["@jingsuan"] = "精算",
	["@jingsuan_invoke"] = "你可以消耗全部字节，反转一名角色的角色牌（横置/翻面）、转换技的状态",
	["jingsuan:choice"] = "你可以消耗全部字节，无效“%src”的发动",
}

--------------------------------------------------
--τ型AI 小桃
--设计者：NSX
--------------------------------------------------

xiaotao_tauxingai = sgs.General(extension,"xiaotao_tauxingai","xuyanshe","3",false)

sgs.LoadTranslationTable{
	["xiaotao_tauxingai"] = "小桃",
	["&xiaotao_tauxingai"] = "小桃",
	["#xiaotao_tauxingai"] = "τ型AI",
	["$xiaotao_tauxingai"] = "一般",
	["designer:xiaotao_tauxingai"] = "NSX",
	["cv:xiaotao_tauxingai"] = "",
	["illustrator:xiaotao_tauxingai"] = "",
	["~xiaotao_tauxingai"] = "",
}

--------------------------------------------------
--散热
--------------------------------------------------

sanre = sgs.CreateTriggerSkill{
	name = "sanre",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			if move.from and move.from:objectName() == player:objectName() and move.card_ids:length() > 0 and (move.from_places:contains(sgs.Player_PlaceHand) or move.from_places:contains(sgs.Player_PlaceEquip)) and move.reason.m_reason == sgs.CardMoveReason_S_REASON_DISMANTLE then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getOtherPlayers(player)) do
					if not p:isAllNude() and player:canDiscard(p, "hej") and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local to = room:askForPlayerChosen(player, targets, self:objectName(), "@sanre", true, true)
					if to and not SkillNullify(player, self:objectName()) then
						local card_id = room:askForCardChosen(player, to, "hej", self:objectName())
						room:throwCard(sgs.Sanguosha:getCard(card_id), sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), self:objectName(), nil), to)
					end
				end
			end
		end
		return false
	end
}

xiaotao_tauxingai:addSkill(sanre)

sgs.LoadTranslationTable{
	["sanre"] = "散热",
	[":sanre"] = "你的牌被破坏时，你可以指定一名其他角色<font color='#A9A9A9'>发动此技能</font>，弃置其区域内的一张牌。",
	["$sanre"] = "",
	["@sanre"] = "你可以发动“散热”，弃置一名角色区域内的一张牌",
}

--------------------------------------------------
--变频
--------------------------------------------------

bianpin_target = sgs.CreateProhibitSkill{
	name = "#bianpin_target",
	is_prohibited = function(self, from, to, card)
		if not card:isKindOf("SkillCard") then
			if from:getMark("bianpin_A") > 0 and to:objectName() ~= from:objectName() then
				return true
			elseif from:getMark("bianpin_B") > 0 and to:objectName() == from:objectName() then
				return true
			end
		end
	end
}
bianpin_max = sgs.CreateMaxCardsSkill{
	name = "#bianpin_max",
	extra_func = function(self, target)
		if target:getMark("bianpin_A") > 0 then
			--return 4 - target:getHp()
			return 1
		end
	end
}

bianpin_card = sgs.CreateSkillCard{
	name = "bianpin",
	target_fixed = false,
	will_throw = true,
	filter = function(self, targets, to_select)
		return to_select:objectName() == sgs.Self:objectName()
	end,
	on_use = function(self, room, source, targets)
		
	end
}
bianpin_vs = sgs.CreateZeroCardViewAsSkill{
	name = "bianpin",
	view_as = function()
		return bianpin_card:clone()
	end,
	enabled_at_play = function()
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@bianpin"
	end
}
bianpin = sgs.CreateTriggerSkill{
	name = "bianpin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.DamageCaused},
	--view_as_skill = bianpin_vs,
	change_skill = true,
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			--if player:getPhase() == sgs.Player_Play and room:askForUseCard(player, "@@bianpin", "@bianpin_invoke"..Ternary(player:getChangeSkillState(self:objectName()) <= 1, "A", "B")) and not SkillNullify(player, self:objectName()) then
			if player:getPhase() == sgs.Player_Play and room:askForSkillInvoke(player, self:objectName(), sgs.QVariant(Ternary(player:getChangeSkillState(self:objectName()) <= 1, "A", "B")..":")) and not SkillNullify(player, self:objectName()) then
				if player:getChangeSkillState(self:objectName()) <= 1 then
					room:setPlayerMark(player, "bianpin_A", 1)
					player:drawCards(2, self:objectName())
				else
					room:setPlayerMark(player, "bianpin_B", 1)
					if not player:isNude() then
						local dummy = room:askForExchange(player, self:objectName(), 2, 2, true, "#bianpin_discard", false)
						room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, player:objectName(), player:objectName(), self:objectName(), ""), player)
						dummy:deleteLater()
					end
				end
				room:setChangeSkillState(player, self:objectName(), Ternary(player:getChangeSkillState(self:objectName()) <= 1, 2, 1))
			end
		elseif event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage.from and damage.to and damage.from:getMark("bianpin_B") > 0 and not damage.chain and not damage.transfer then
				if damage.nature == sgs.DamageStruct_Light then return false end
				room:sendCompulsoryTriggerLog(damage.from, self:objectName()) --显示锁定技发动
				--room:setPlayerMark(player, "bianpin_B", 2)	--表示已触发+1
				damage.damage = damage.damage + 1
				data:setValue(damage)
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark, "bianpin_A")	--回合结束清除标记
table.insert(turn_end_clear_mark, "bianpin_B")

xiaotao_tauxingai:addSkill(bianpin)
xiaotao_tauxingai:addSkill(bianpin_max)
xiaotao_tauxingai:addSkill(bianpin_target)

sgs.LoadTranslationTable{
	["bianpin"] = "变频",
	["#bianpin_max"] = "变频",
	["#bianpin_target"] = "变频",
	[":bianpin"] = "转换技，出牌阶段开始时，你可以<font color='#A9A9A9'>发动此技能</font>，<font color='#CB5063'><br/>①摸两张牌，本回合你的手牌上限＋1且你不能对其他角色使用牌<br/>②破坏两张牌，本回合你造成的伤害＋1且你不能对自己使用牌</font>。",
	[":bianpin1"] = "转换技，出牌阶段开始时，你可以<font color='#A9A9A9'>发动此技能</font>，<br/>①摸两张牌，本回合你的手牌上限＋1且你不能对其他角色使用牌<br/><font color=\"#01A5AF\"><s>②破坏两张牌，本回合你造成的伤害＋1且你不能对自己使用牌</s></font>。",
	[":bianpin2"] = "转换技，出牌阶段开始时，你可以<font color='#A9A9A9'>发动此技能</font>，<br/><font color=\"#01A5AF\"><s>①摸两张牌，本回合你的手牌上限＋1且你不能对其他角色使用牌</s></font><br/>②破坏两张牌，本回合你造成的伤害＋1且你不能对自己使用牌。",
	["$bianpin1"] = "",
	["$bianpin2"] = "",
	["bianpin:A"] = "你可以发动“变频”，摸两张牌，本回合手牌上限+1、不能对其他角色用牌",
	["bianpin:B"] = "你可以发动“变频”，破坏两张牌，本回合造成伤害+1、不能对自己用牌",
	["~bianpin"] = "选择自己→点击“确定”",
	["#bianpin_discard"] = "请破坏 2 张牌（包括装备区的牌）",
}

--------------------------------------------------
--ρ型AI 小柔
--设计者：月音风源
--------------------------------------------------

xiaorou_rhoxingai = sgs.General(extension,"xiaorou_rhoxingai","xuyanshe","3",false)

sgs.LoadTranslationTable{
	["xiaorou_rhoxingai"] = "小柔",
	["&xiaorou_rhoxingai"] = "小柔",
	["#xiaorou_rhoxingai"] = "ρ型AI",
	["$xiaorou_rhoxingai"] = "硬核",
	["designer:xiaorou_rhoxingai"] = "月音风源",
	["cv:xiaorou_rhoxingai"] = "",
	["illustrator:xiaorou_rhoxingai"] = "",	--换源前使用卡卡呜呜的插图
	["~xiaorou_rhoxingai"] = "",
}

table.insert(robot_change_general, "xiaorou_rhoxingai")	--对电脑禁用

--------------------------------------------------
--清冷
--------------------------------------------------

qinglengUseCard = sgs.CreateSkillCard{
	name = "qinglengUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		return card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
	end,
	feasible = function(self, targets)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		return card and card:targetsFeasible(targets_list, sgs.Self)
	end,
	about_to_use = function(self, room, use)
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:setCardFlag(card, "-qingleng")
		local card_for_use = sgs.Sanguosha:getCard(self:getSubcards():first())
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
qinglengvs = sgs.CreateViewAsSkill{
	n = 1,
	name = "qinglengvs&",
	response_pattern = "@@qingleng!",
	view_filter = function(self, selected, to_select)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@qingleng!" and #selected == 0 then
			return to_select:hasFlag("qingleng")
		end
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@qingleng!" and #cards == 1 then
			local skillcard = qinglengUseCard:clone()
			skillcard:addSubcard(cards[1])
			return skillcard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end
}
qingleng = sgs.CreateTriggerSkill{
	name = "qingleng",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = qinglengvs,
	events = {sgs.TargetConfirmed},
	on_trigger = function(self, event, player, data, room)
		local use = data:toCardUse()
		if use.card and not use.card:isKindOf("SkillCard") and use.to and use.to:contains(player) and player:getMark("&qingleng_used") == 0 then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getOtherPlayers(player)) do
				if not p:isNude() and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			if not targets:isEmpty() then
				local to = room:askForPlayerChosen(player, targets, self:objectName(), "@qingleng-invoke", true, true)
				if to and not to:isNude() and not SkillNullify(player, self:objectName()) then
					room:setPlayerMark(player, "&qingleng_used", 1)
					local card_id = room:askForCardChosen(player, to, "he", self:objectName())
					local card = sgs.Sanguosha:getCard(card_id)
					room:setCardFlag(card, "qingleng")
					room:showCard(to, card_id)
					room:getThread():delay(500)
					
					local choiceList = {}
					table.insert(choiceList, "qingleng_destroy")
					if room:getCardOwner(card_id) and room:getCardOwner(card_id):objectName() == to:objectName() and room:getCardPlace(card_id) == sgs.Player_PlaceHand then
						for _, p in sgs.qlist(room:getAlivePlayers()) do
							if card:isAvailable(to) and not room:isProhibited(to, p, card) and card:targetFilter(sgs.PlayerList(), p, to) then
								table.insert(choiceList, "qingleng_use")
								break
							end
						end
					end
					if room:getCardPlace(card_id) ~= sgs.Player_PlaceHand then
						table.insert(choiceList, "qingleng_get")
					end
					player:setFlags("qingleng_from_AI")	--AI用
					local choice = room:askForChoice(to, self:objectName(), table.concat(choiceList, "+"))
					player:setFlags("-qingleng_from_AI")	--AI用
					ChoiceLog(to, choice)
					if choice == "qingleng_use" then
						room:attachSkillToPlayer(to, "qinglengvs")	--临时技能按钮
						room:askForUseCard(to, "@@qingleng!", "@qingleng")
						room:detachSkillFromPlayer(to, "qinglengvs", true, true)	--临时技能按钮
					elseif choice == "qingleng_get" then
						to:obtainCard(card, true)
					elseif choice == "qingleng_destroy" and player:canDiscard(to, card_id) and room:getCardOwner(card_id) and room:getCardOwner(card_id):objectName() == to:objectName() then
						room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, player:objectName(), to:objectName(), self:objectName(), ""), to)
					end
					room:setCardFlag(card, "-qingleng")
				end
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark, "&qingleng_used")

xiaorou_rhoxingai:addSkill(qingleng)

sgs.LoadTranslationTable{
	["qingleng"] = "清冷",
	["qinglengvs"] = "清冷",
	["#qingleng_target"] = "清冷",
	[":qingleng"] = "每回合限一次，你成为牌的目标后，你可以指定一名其他角色<font color='#A9A9A9'>发动此技能</font>，你展示其一张牌，令其选择一项：1.使用此牌 2.将此牌收回手牌 3.你破坏此牌。",
	["$qingleng"] = "",
	["qingleng_used"] = "清冷已使用",
	["@qingleng-invoke"] = "你可以发动“清冷”，选择一名角色",
	["qingleng_destroy"] = "破坏此牌",
	["qingleng_use"] = "使用此牌",
	["qingleng_get"] = "收回此牌",
	["@qingleng"] = "请使用此牌",
	["~qingleng"] = "选择此牌→选择目标→确定",
}

--------------------------------------------------
--情柔
--------------------------------------------------

qingrou = sgs.CreateTriggerSkill{
	name = "qingrou",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			if move.from and move.from:objectName() ~= player:objectName() and move.card_ids:length() > 0 and (move.from_places:contains(sgs.Player_PlaceHand) or move.from_places:contains(sgs.Player_PlaceEquip)) and move.reason.m_reason == sgs.CardMoveReason_S_REASON_DISMANTLE --[[and move.reason.m_playerId == player:objectName()]] then
				local from = nil	--无法直接使用move.from
				for _,p in sgs.qlist(room:getAllPlayers()) do
					if p:objectName() == move.from:objectName() then
						from = p
						break
					end
				end
				local _data = sgs.QVariant()
				_data:setValue(from)
				if player:askForSkillInvoke(self:objectName(), _data) and not SkillNullify(player, self:objectName()) then
					room:doAnimate(1, player:objectName(), from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					player:drawCards(1, self:objectName())
					
					if player:isDead() or from:isDead() then return false end
					if not player:canEffect(from, self:objectName()) then return false end
					
					local card = room:askForCard(player, ".|.|.|hand,equipped", "@qingrou_give:"..from:objectName(), data, sgs.Card_MethodNone)
					if card then
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), from:objectName(), self:objectName(), "")
						room:moveCardTo(card, from, sgs.Player_PlaceHand, reason, false)
					end
				end
			end
		end
		return false
	end
}

xiaorou_rhoxingai:addSkill(qingrou)

sgs.LoadTranslationTable{
	["qingrou"] = "情柔",
	[":qingrou"] = "其他角色的牌被破坏后，你可以<font color='#A9A9A9'>发动此技能</font>，摸一张牌，交给其一张牌。",
	["$qingrou"] = "",
	["@qingrou_give"] = "请交给 %src 一张牌（包括装备区的牌）",
}

--------------------------------------------------
--ρ型AI 小柔
--设计者：空月之羽
--------------------------------------------------

xiaorou_cpmode = sgs.General(extension,"xiaorou_cpmode","xuyanshe","3",false,true,true)

sgs.LoadTranslationTable{
	["xiaorou_cpmode"] = "小柔",
	["&xiaorou_cpmode"] = "小柔",
	["#xiaorou_cpmode"] = "ρ型AI",
	["$xiaorou_cpmode"] = "一般",
	["parent:xiaorou_cpmode"] = "xiaorou_rhoxingai",	--本体角色名
	["designer:xiaorou_cpmode"] = "空月之羽",
	["cv:xiaorou_cpmode"] = "",
	["illustrator:xiaorou_cpmode"] = "卡卡呜呜",
	["~xiaorou_cpmode"] = "",
}

--------------------------------------------------
--ρ型AI 小柔
--设计者：空月之羽
--------------------------------------------------

xiaorou_if = sgs.General(extension,"xiaorou_if","xuyanshe","3",false,true,true)

sgs.LoadTranslationTable{
	["xiaorou_if"] = "小柔",
	["&xiaorou_if"] = "小柔",
	["#xiaorou_if"] = "ρ型AI",
	["$xiaorou_if"] = "一般",
	["designer:xiaorou_if"] = "空月之羽",
	["cv:xiaorou_if"] = "",
	["illustrator:xiaorou_if"] = "卡卡呜呜",
	["~xiaorou_if"] = "",
}

--------------------------------------------------
--卸载
--------------------------------------------------

xiezai = sgs.CreateOneCardViewAsSkill{
	name = "xiezai", 
	filter_pattern = "TrickCard,EquipCard",
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_as = function(self, card) 
		local acard = sgs.Sanguosha:cloneCard("dismantlement", card:getSuit(), card:getNumber())
		acard:addSubcard(card:getId())
		acard:setSkillName(self:objectName())
		return acard
	end, 
}

xiaorou_cpmode:addSkill(xiezai)
xiaorou_if:addSkill(xiezai)

sgs.LoadTranslationTable{
	["xiezai"] = "卸载",
	[":xiezai"] = "你可以将一张非基本牌当【过河拆桥】使用。",
	["$xiezai"] = "",
}

--------------------------------------------------
--柔辉
--------------------------------------------------

rouhuicard = sgs.CreateSkillCard{
	name = "rouhui",
	filter = function(self, targets, to_select)
		return #targets < sgs.Self:getMark("&rouhui!") and sgs.Self:canEffect(to_select, "rouhui")
	end,
	on_effect = function(self, effect)
		effect.to:drawCards(1, self:objectName())
	end
}
rouhuivs = sgs.CreateZeroCardViewAsSkill{
	name = "rouhui",
	response_pattern = "@@rouhui",
	view_as = function()
		return rouhuicard:clone()
	end
}
rouhui = sgs.CreateTriggerSkill{
	name = "rouhui",
	events = {sgs.EventPhaseStart, sgs.CardsMoveOneTime},
	view_as_skill = rouhuivs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			if player:getPhase() ~= sgs.Player_NotActive and move.to_place == sgs.Player_DiscardPile and move.card_ids:length() >= 1 then
				for _,id in sgs.qlist(move.card_ids) do
					if sgs.Sanguosha:getCard(id):isKindOf("EquipCard") then
						room:addPlayerMark(player, "&rouhui!", 1)
					end
				end
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			if player:getMark("&rouhui!") > 0 then
				room:askForUseCard(player, "@@rouhui", "@rouhui:"..player:getMark("&rouhui!"))
			end
			return false
		end
	end
}
table.insert(turn_end_clear_mark, "&rouhui!")	--回合结束清除标记

xiaorou_cpmode:addSkill(rouhui)
xiaorou_if:addSkill(rouhui)

sgs.LoadTranslationTable{
	["rouhui"] = "柔辉",
	[":rouhui"] = "结束阶段，你可以令至多X名角色各摸一张牌。（X为本回合进入弃牌堆的装备牌数）",
	["@rouhui"] = "你可以发动“柔辉”，令至多 %src 名角色各摸一张牌",
	["~rouhui"] = "选择若干名角色→确定",
	["$rouhui"] = "",
}

--------------------------------------------------
--月之公主兔 兰音
--设计者：NSX、萌龙少主
--------------------------------------------------

lanyin_yuezhigongzhutu = sgs.General(extension,"lanyin_yuezhigongzhutu","xuyanshe","3",false)

sgs.LoadTranslationTable{
	["lanyin_yuezhigongzhutu"] = "兰音",
	["&lanyin_yuezhigongzhutu"] = "兰音",
	["#lanyin_yuezhigongzhutu"] = "月之公主兔",
	["designer:lanyin_yuezhigongzhutu"] = "NSX、萌龙少主",
	["cv:lanyin_yuezhigongzhutu"] = "",
	["illustrator:lanyin_yuezhigongzhutu"] = "",
	["~lanyin_yuezhigongzhutu"] = "",
}

--------------------------------------------------
--云谣
--------------------------------------------------

yunyao_buff_black = sgs.CreateFilterSkill{
	name = "yunyao_buff_black",	
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return to_select:isBlack() and place == sgs.Player_PlaceHand
	end,	
	view_as = function(self, card)
		local new_card = sgs.Sanguosha:cloneCard("nullification", card:getSuit(), card:getNumber())
		new_card:setSkillName(self:objectName())	--注意此处技能名与主技能不同，所以不会触发主技能的标记
		local _card = sgs.Sanguosha:getWrappedCard(card:getId())
		_card:takeOver(new_card)
		return _card
	end
}
yunyao_buff_red = sgs.CreateFilterSkill{
	name = "yunyao_buff_red",	
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return to_select:isRed() and place == sgs.Player_PlaceHand
	end,	
	view_as = function(self, card)
		local new_card = sgs.Sanguosha:cloneCard("nullification", card:getSuit(), card:getNumber())
		new_card:setSkillName(self:objectName())	--注意此处技能名与主技能不同，所以不会触发主技能的标记
		local _card = sgs.Sanguosha:getWrappedCard(card:getId())
		_card:takeOver(new_card)
		return _card
	end
}
yunyao_vs = sgs.CreateViewAsSkill{
	name = "yunyao",
	n = 1,
	--expand_pile = "wooden_ox",
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return not to_select:isKindOf("BasicCard")
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local first = cards[1]
			local ncard = sgs.Sanguosha:cloneCard("nullification", first:getSuit(), first:getNumber())
			ncard:addSubcard(first)
			ncard:setSkillName(self:objectName())
			return ncard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		if player:getMark("@yunyao_using_black") + player:getMark("@yunyao_using_red") == 0 then
			return pattern == "nullification"
		end
	end,
	enabled_at_nullification = function(self, player)
		if player:getMark("@yunyao_using_black") + player:getMark("@yunyao_using_red") == 0 then
			for _, card in sgs.qlist(player:getCards("he")) do
				if not card:isKindOf("BasicCard") then return true end
			end
		end
		return false
	end
}
yunyao = sgs.CreateTriggerSkill{
	name = "yunyao",
	view_as_skill = yunyao_vs,
	events = {sgs.PreCardUsed, sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PreCardUsed and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local card = data:toCardUse().card
			if card and card:getSkillName() == self:objectName() then
				if card:isRed() then
					room:setPlayerMark(player, "@yunyao_using_red", 1)
					room:acquireSkill(player, "yunyao_buff_black")
				elseif card:isBlack() then
					room:setPlayerMark(player, "@yunyao_using_black", 1)
					room:acquireSkill(player, "yunyao_buff_red")
				end
			end
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.from ~= sgs.Player_NotActive and change.to == sgs.Player_NotActive then
				for _,p in sgs.qlist(room:getAlivePlayers()) do
					if p:hasSkill("yunyao_buff_black") then
						room:setPlayerMark(p, "@yunyao_using_red", 0)
						room:detachSkillFromPlayer(p, "yunyao_buff_black")
					end
					if p:hasSkill("yunyao_buff_red") then
						room:setPlayerMark(p, "@yunyao_using_black", 0)
						room:detachSkillFromPlayer(p, "yunyao_buff_red")
					end
				end
			end
		end
	end
}

lanyin_yuezhigongzhutu:addSkill(yunyao)
vup_anjiang:addSkill(yunyao_buff_black)	--加给暗将（不能给系统……）
vup_anjiang:addSkill(yunyao_buff_red)	--加给暗将
--lanyin_yuezhigongzhutu:addRelateSkill("yunyao_buff_red")
--lanyin_yuezhigongzhutu:addRelateSkill("yunyao_buff_black")

sgs.LoadTranslationTable{
	["yunyao"] = "云谣",
	[":yunyao"] = "每回合限一次，你可以将一张非基本牌当【无懈可击】使用，然后本回合你与之颜色不同的手牌均视为【无懈可击】。",
	["$yunyao1"] = "",
	["$yunyao2"] = "",
	["yunyao_buff_black"] = "罗绡",
	[":yunyao_buff_black"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的<font color='black'><i>黑色</i></font>手牌均视为【无懈可击】。",
	["yunyao_buff_red"] = "凤羽",
	[":yunyao_buff_red"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的<font color='red'><i>红色</i></font>手牌均视为【无懈可击】。",
	["@yunyao_using_red"] = "云谣·红",
	["@yunyao_using_black"] = "云谣·黑",
}

--------------------------------------------------
--国宝
--------------------------------------------------

guobao = sgs.CreateTriggerSkill{
	name = "guobao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAlivePlayers()) do
					if p:hasEquipArea(4) and not p:getTreasure() and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				local to
				if not targets:isEmpty() then
					to = room:askForPlayerChosen(player, targets, self:objectName(), "@guobao-invoke", true, true)
				end
				if to and not SkillNullify(player, self:objectName()) then
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					local equips = sgs.CardList()
					for _,id in sgs.qlist(room:getDrawPile()) do
						local card = sgs.Sanguosha:getCard(id)
						if card:isKindOf("Yuhangtu") then
							equips:append(card)
						end
					end
					for _,id in sgs.qlist(room:getDiscardPile()) do
						local card = sgs.Sanguosha:getCard(id)
						if card:isKindOf("Yuhangtu") then
							equips:append(card)
						end
					end
					for _, p in sgs.qlist(room:getAllPlayers()) do
						for _,card in sgs.qlist(p:getCards("e")) do
							if card:isKindOf("Yuhangtu") then
								equips:append(card)
							end
						end
					end
					if not equips:isEmpty() then
						local equip_ids = sgs.IntList()
						for _,cd in sgs.qlist(equips) do
							equip_ids:append(cd:getId())
						end
						room:fillAG(equip_ids)
						local id = room:askForAG(player, equip_ids, false, self:objectName())
						room:clearAG()
						local card = sgs.Sanguosha:getCard(id)
						--local card = equips:at(math.random(0, equips:length() - 1))
						room:useCard(sgs.CardUseStruct(card, to, to))
						
						--player:setFlags("guobao_used")	--技能cost通常摸牌数-1
					end
				end
			end
		--[[elseif event == sgs.DrawNCards then
			if player:hasFlag("guobao_used") then
				local n = data:toInt()
				data:setValue(n-1)
			end]]
		end
	end 
}

lanyin_yuezhigongzhutu:addSkill(guobao)

sgs.LoadTranslationTable{
	["guobao"] = "国宝",
	--[":guobao"] = "准备阶段，你可以指定一名宝物栏为空的角色<font color='#A9A9A9'>发动此技能</font>，令其使用牌堆、弃牌堆、场上的一张【宇航兔】，然后本回合你的通常摸牌数－1。",
	[":guobao"] = "准备阶段，你可以指定一名宝物栏为空的角色<font color='#A9A9A9'>发动此技能</font>，令其使用牌堆、弃牌堆、场上的一张【宇航兔】。",
	["$guobao1"] = "",
	["$guobao2"] = "",
	--["@guobao-invoke"] = "你可以发动“国宝”指定一名角色，令其使用一张宇航兔，你少摸一张牌",
	["@guobao-invoke"] = "你可以发动“国宝”指定一名角色，令其使用一张宇航兔",
	["^AG_guobao"] = "<b>国宝</b><br/>双击以选择一张【宇航兔】令目标角色使用",
}

--------------------------------------------------
--胡闹小熊猫 艾露露
--设计者：萌龙少主
--------------------------------------------------

ailulu_hunaoxiaoxiongmao = sgs.General(extension,"ailulu_hunaoxiaoxiongmao","xuyanshe","4",false)

sgs.LoadTranslationTable{
	["ailulu_hunaoxiaoxiongmao"] = "艾露露",
	["&ailulu_hunaoxiaoxiongmao"] = "艾露露",
	["#ailulu_hunaoxiaoxiongmao"] = "胡闹小熊猫",
	["$ailulu_hunaoxiaoxiongmao"] = "简单",
	["designer:ailulu_hunaoxiaoxiongmao"] = "萌龙少主",
	["cv:ailulu_hunaoxiaoxiongmao"] = "",
	["illustrator:ailulu_hunaoxiaoxiongmao"] = "",
	["~ailulu_hunaoxiaoxiongmao"] = "",
}

--------------------------------------------------
--藏宝
--------------------------------------------------

cangbao_card = sgs.CreateSkillCard{
	name = "cangbao",
	target_fixed = false,
	will_throw = true,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return not to_select:isNude() and to_select:getHandcardNum() > sgs.Self:getHandcardNum() - Ternary(sgs.Sanguosha:getCard(self:getSubcards():first()):isEquipped(),0,1) and to_select:objectName() ~= sgs.Self:objectName() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local to = targets[1]
		if not to:isNude() then
			local id = room:askForCardChosen(source, to, "he", self:objectName(), false, sgs.Card_MethodNone)
			local card = sgs.Sanguosha:getCard(id)
			room:showCard(to, id)
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_EXTRACTION, source:objectName(), to:objectName(), self:objectName(), "")
			room:moveCardTo(card, source, sgs.Player_PlaceHand, reason, true)
			room:setPlayerMark(source, "cangbao_limit+use,response,discard+"..getCardClassName(card), 1)
			room:setPlayerCardLimitation(source, "use,response,discard", getCardClassName(card), false)
			room:setPlayerMark(source, "&cangbao+"..getCardObjName(card), 1)
			if math.random(1,100) <= 25 then
				to:speak("bubble:你干嘛呀！")
			end
		end
	end
}
cangbao = sgs.CreateOneCardViewAsSkill{
	name = "cangbao",
	filter_pattern = ".|.|.|hand,equipped",
	view_as = function(self, card)
		local cards = cangbao_card:clone()
		cards:addSubcard(card)
		return cards
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#cangbao") < 1
	end
}

table.insert(turn_end_clear_mark_prefix, "&cangbao+")	--回合结束清除指定前缀的标记
table.insert(turn_end_limit_card_prefix, "cangbao_limit")	--封印直到回合结束

ailulu_hunaoxiaoxiongmao:addSkill(cangbao)

sgs.LoadTranslationTable{
	["cangbao"] = "藏宝",
	[":cangbao"] = "出牌阶段限一次，你可以弃置一张牌，指定一名手牌数多于你的其他角色，展示并获得其一张牌，本回合你不能使用、打出、弃置与获得的牌牌名相同的牌。",
	["$cangbao1"] = "",
	["$cangbao2"] = "",
}

--------------------------------------------------
--虚研鱼 杨
--设计者：NSX
--------------------------------------------------

yang_xuyanyu = sgs.General(extension,"yang_xuyanyu","xuyanshe","3",false,true)

sgs.LoadTranslationTable{
	["yang_xuyanyu"] = "杨",
	["&yang_xuyanyu"] = "杨",
	["#yang_xuyanyu"] = "虚研鱼",
	["$yang_xuyanyu"] = "一般",
	["designer:yang_xuyanyu"] = "NSX",
	["cv:yang_xuyanyu"] = "",
	["illustrator:yang_xuyanyu"] = "",
	["~yang_xuyanyu"] = "",
}

--------------------------------------------------
--腌渍
--------------------------------------------------

yanzi = sgs.CreateTriggerSkill{
	name = "yanzi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageCaused, sgs.DamageInflicted},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageCaused or event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.to and damage.to:isAllNude() and player:canEffect(damage.to, self:objectName()) then
				if damage.nature == sgs.DamageStruct_Light then return false end
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				damage.damage = damage.damage + 1
				data:setValue(damage)
			end
		end
		return false
	end
}

yang_xuyanyu:addSkill(yanzi)

sgs.LoadTranslationTable{
	["yanzi"] = "腌渍",
	[":yanzi"] = "锁定技，你对造成或受到伤害时，若受伤者区域内没有牌，此伤害＋1。",
	["$yanzi"] = "",
}

--------------------------------------------------
--筹措
--------------------------------------------------

swapEquip = function(first, second)
	local room = first:getRoom()
	local equips1, equips2 = sgs.IntList(), sgs.IntList()
	for _, equip in sgs.qlist(first:getEquips()) do
		equips1:append(equip:getId())
	end
	for _, equip in sgs.qlist(second:getEquips()) do
		equips2:append(equip:getId())
	end
	local exchangeMove = sgs.CardsMoveList()
	local move1 = sgs.CardsMoveStruct(equips1, second, sgs.Player_PlaceEquip, 
			sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, first:objectName(), second:objectName(), "choucuo", ""))
	local move2 = sgs.CardsMoveStruct(equips2, first, sgs.Player_PlaceEquip,
			sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, first:objectName(), second:objectName(), "choucuo", ""))
	exchangeMove:append(move2)
	exchangeMove:append(move1)
	room:broadcastSkillInvoke("audio_effect", 20)	--播放配音（换装备）
	room:moveCardsAtomic(exchangeMove, false)
end

choucuocard = sgs.CreateSkillCard{
	name = "choucuo",
	will_throw = true,
	target_fixed = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return sgs.Self:canEffect(to_select, self:objectName())
		elseif #targets == 1 then
			local n1 = targets[1]:getEquips():length()
			local n2 = to_select:getEquips():length()
			return math.abs(n1 - n2) <= self:subcardsLength() and n1 + n2 > 0 and sgs.Self:canEffect(to_select, self:objectName())
		else
			return false
		end
	end,
	feasible = function(self, targets)
		if #targets == 2 then
			local n1 = targets[1]:getEquips():length()
			local n2 = targets[2]:getEquips():length()
			return math.abs(n1 - n2) == self:subcardsLength() and n1 + n2 > 0
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		swapEquip(targets[1], targets[2])
	end
}
choucuo = sgs.CreateViewAsSkill{
	name = "choucuo",
	n = 999,
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		if #cards >= 0 then
			local choucuocard = choucuocard:clone()
			for _, card in ipairs(cards) do
				choucuocard:addSubcard(card)
			end
			choucuocard:setSkillName("choucuo")
			return choucuocard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#choucuo") < 1
	end
}

yang_xuyanyu:addSkill(choucuo)

sgs.LoadTranslationTable{
	["choucuo"] = "筹措",
	[":choucuo"] = "出牌阶段限一次，你可以弃置X张手牌，令两名角色交换装备区内的牌。（X为这两名角色装备区内的牌数之差）",
	["$choucuo"] = "",
	["^choucuo"] = "操作提示：选择任意张牌→选择满足条件的两名角色→确定",
}

--------------------------------------------------
--阿坎鲁尔半龙 卡诺娅
--设计者：
--------------------------------------------------

kanuoya_akanluerbanlong = sgs.General(extension,"kanuoya_akanluerbanlong","xuyanshe","4",false)

sgs.LoadTranslationTable{
	["kanuoya_akanluerbanlong"] = "卡诺娅",
	["&kanuoya_akanluerbanlong"] = "卡诺娅",
	["#kanuoya_akanluerbanlong"] = "阿坎鲁尔半龙",
	["$kanuoya_akanluerbanlong"] = "萌新",
	["designer:kanuoya_akanluerbanlong"] = "月音风源",
	["cv:kanuoya_akanluerbanlong"] = "",
	["illustrator:kanuoya_akanluerbanlong"] = "",
	["~kanuoya_akanluerbanlong"] = "",
}

--------------------------------------------------
--龙息
--------------------------------------------------

longxi = sgs.CreateTriggerSkill{
	name = "longxi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.TargetSpecified, sgs.PreCardUsed, sgs.PreCardResponded},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if (event == sgs.PreCardUsed or event == sgs.PreCardResponded) and player:getPhase() == sgs.Player_Play and player:getMark("longxi_used") == 0 then
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and not card:isKindOf("SkillCard") then
				room:setPlayerMark(player, "longxi_used", 1)
				room:setCardFlag(card, "longxi")
			end
		elseif event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if use.from and player:objectName() == use.from:objectName() and use.card and not use.card:isKindOf("SkillCard") and use.card:hasFlag("longxi") and use.to:length() > 0 then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				for _, p in sgs.qlist(use.to) do
					if player:canDiscard(p, "he") and player:canEffect(p, self:objectName()) then
						room:throwCard(room:askForCardChosen(player, p, "he", self:objectName(), false, sgs.Card_MethodDiscard), p, player)
					end
				end
			end
		end
	end 
}
table.insert(play_end_clear_mark, "longxi_used")	--出牌结束清除标记

kanuoya_akanluerbanlong:addSkill(longxi)

sgs.LoadTranslationTable{
	["longxi"] = "龙息",
	[":longxi"] = "锁定技，你于出牌阶段内使用的第一张牌指定目标后，你破坏所有目标角色的各一张牌。",
	["$longxi"] = "",
}

--------------------------------------------------
--六刺螈偶像 山椒阿露波
--设计者：
--------------------------------------------------

shanjiaoalubo_liuciyuanouxiang = sgs.General(extension,"shanjiaoalubo_liuciyuanouxiang","xuyanshe","3",false)

sgs.LoadTranslationTable{
	["shanjiaoalubo_liuciyuanouxiang"] = "山椒阿露波",
	["&shanjiaoalubo_liuciyuanouxiang"] = "山椒阿露波",
	["#shanjiaoalubo_liuciyuanouxiang"] = "六刺螈偶像",
	["$shanjiaoalubo_liuciyuanouxiang"] = "进阶",
	["designer:shanjiaoalubo_liuciyuanouxiang"] = "NSX",
	["cv:shanjiaoalubo_liuciyuanouxiang"] = "",
	["illustrator:shanjiaoalubo_liuciyuanouxiang"] = "",
	["~shanjiaoalubo_liuciyuanouxiang"] = "",
}

--------------------------------------------------
--扬音
--------------------------------------------------

yangyin = sgs.CreateTriggerSkill{
	name = "yangyin",
	frequency = sgs.Skill_Frequent,
	events = {sgs.DrawNCards},
	on_trigger = function(self, event, player, data)
		local room = player:getRoom()
		if event == sgs.DrawNCards then
			if player:getPhase() == sgs.Player_Draw and data:toInt() > 0 and player:askForSkillInvoke(self:objectName()) and not SkillNullify(player, self:objectName()) then
				local card_ids = room:getNCards(4)
				local remove_ids = sgs.IntList()
				local left_ids = sgs.IntList()
				for _,id in sgs.qlist(card_ids) do
					left_ids:append(id)
				end
				local dummy_get = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				local other_ids = sgs.IntList()
				local foot_notes = {"","","",""}
				while (not left_ids:isEmpty()) do
					room:fillAG(card_ids, player, remove_ids, false, table.concat(foot_notes, "|"), false)
					local card_id = room:askForAG(player, left_ids, true, self:objectName())
					if card_id == -1 then
						for _,id in sgs.qlist(left_ids) do
							other_ids:append(id)
						end
						room:clearAG(player)
						goto yangyin_label
					end
					
					left_ids:removeOne(card_id)
					remove_ids:append(card_id)
					for i=1,4,1 do
						if card_ids:at(i-1) == card_id then
							foot_notes[i] = "selected"
							break
						end
					end
					local card = sgs.Sanguosha:getCard(card_id)
					dummy_get:addSubcard(card)
					local removelist = {}
					for _,id in sgs.qlist(left_ids) do
						local c = sgs.Sanguosha:getCard(id)
						if c:getTypeId() == card:getTypeId() then	--类别相同的牌全部不可选
							--room:takeAG(nil, c:getId())
							table.insert(removelist, id)
						end
					end
					if #removelist > 0 then
						for _,id in ipairs(removelist) do
							if left_ids:contains(id) then
								left_ids:removeOne(id)
								remove_ids:append(id)
								other_ids:append(id)
							end
						end
					end
					room:clearAG(player)
				end
				::yangyin_label::
				if dummy_get:subcardsLength() > 0 then
					player:obtainCard(dummy_get, true)
				end
				dummy_get:deleteLater()
				if not other_ids:isEmpty() then
					room:askForGuanxing(player, other_ids, sgs.Room_GuanxingUpOnly)
				end
				data:setValue(0)
				return true
			end
        end
	end,
	priority = -1
}

shanjiaoalubo_liuciyuanouxiang:addSkill(yangyin)

sgs.LoadTranslationTable{
	["yangyin"] = "扬音",
	[":yangyin"] = "摸牌阶段，你可以<font color='#A9A9A9'>发动此技能</font>，改为观看牌堆顶的四张牌，获得其中任意张类别不同的牌，排列其余牌。",
	["$yangyin"] = "",
	["^AG_yangyin"] = "<b>扬音</b><br/>获得牌：双击以选择一张牌获得之<br/>不获得牌：直接点击确定",
	["selected"] = "已选择",
}

--------------------------------------------------
--惊弦
--------------------------------------------------

jingxian = sgs.CreateTriggerSkill{
	name = "jingxian",
	events = {sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() == sgs.Player_NotActive then return false end
		local use = data:toCardUse()
		if use.card and (use.card:isKindOf("BasicCard") or use.card:isNDTrick()) and not use.card:isKindOf("SkillCard") and not use.to:isEmpty() then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getAlivePlayers()) do
				if not use.to:contains(p) and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			local target = nil
			if not targets:isEmpty() then
				player:setTag("jingxian", data)	--AI用
				target = room:askForPlayerChosen(player, targets, self:objectName(), "jingxian-invoke:"..use.card:objectName(), true, true)
				player:removeTag("jingxian")	--AI用
			end
			if target and not SkillNullify(player, self:objectName()) then
				target:drawCards(1, self:objectName())
				if player:canDiscard(target, "he") then
					local throw_card
					if player == target then
						throw_card = room:askForCard(player, ".|.|.|hand,equipped!", "@jingxian_dismantle", data, sgs.Card_MethodNone)
					else
						throw_card = room:askForCardChosen(player, target, "he", self:objectName(), false, sgs.Card_MethodDiscard)
					end
					if throw_card then
						room:throwCard(throw_card, target, player)
					end
				end
			end
		end
		return false
	end
}

shanjiaoalubo_liuciyuanouxiang:addSkill(jingxian)

sgs.LoadTranslationTable{
	["jingxian"] = "惊弦",
	[":jingxian"] = "你于回合内使用基本牌或普通锦囊牌结算结束后，你可以指定一名不为此牌目标的角色，<font color='#A9A9A9'>发动此技能</font>，其摸一张牌、你破坏其一张牌。",
	["$jingxian"] = "",
	["jingxian-invoke"] = "你可以发动“惊弦”，令一名 %src 目标以外的角色摸一张牌，然后破坏其一张牌",
	["@jingxian_dismantle"] = "请破坏 1 张牌（包括装备区的牌）",
}

--------------------------------------------------
--西瓜喵 紫海由爱
--设计者：
--------------------------------------------------

zihaiyouai_xiguamiao = sgs.General(extension,"zihaiyouai_xiguamiao","xuyanshe","3",false)

sgs.LoadTranslationTable{
	["zihaiyouai_xiguamiao"] = "紫海由爱",
	["&zihaiyouai_xiguamiao"] = "紫海由爱",
	["#zihaiyouai_xiguamiao"] = "西瓜喵",
	["$zihaiyouai_xiguamiao"] = "简单",
	["designer:zihaiyouai_xiguamiao"] = "夜玥紫英、萌龙少主",
	["cv:zihaiyouai_xiguamiao"] = "",
	["illustrator:zihaiyouai_xiguamiao"] = "",
	["~zihaiyouai_xiguamiao"] = "",
}

--------------------------------------------------
--瓜田
--------------------------------------------------

guatian = sgs.CreateTriggerSkill{
	name = "guatian",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardsMoveOneTime, sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if room:getTag("FirstRound"):toBool() then return false end
		if event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			local source = move.from
			local target = move.to
			if not source or source:objectName() ~= player:objectName() then
				if not target or target:objectName() ~= player:objectName() then
					return false
				end
			end
			if move.to_place ~= sgs.Player_PlaceHand then
				if not move.from_places:contains(sgs.Player_PlaceHand) then
					return false
				end
			end
			if player:getPhase() ~= sgs.Player_NotActive then
				return false
			end
		elseif event == sgs.EventPhaseStart then
			if player:getPhase() ~= sgs.Player_NotActive then
				return false
			end
		end
		local can_invoke = true
		for _, card in sgs.qlist(player:getHandcards()) do
			if card:isKindOf("BasicCard") then
				can_invoke = false
				break
			end
		end
		if can_invoke then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			local card_ids = {}
			for _, id in sgs.qlist(room:getDrawPile()) do
				local cd = sgs.Sanguosha:getCard(id)
				if cd:isKindOf("BasicCard") then
					table.insert(card_ids, id)
				end
			end
			if #card_ids == 0 then
				for _, id in sgs.qlist(room:getDiscardPile()) do
					local cd = sgs.Sanguosha:getCard(id)
					if cd:isKindOf("BasicCard") then
						table.insert(card_ids, id)
					end
				end
			end
			if #card_ids > 0 then
				player:obtainCard(sgs.Sanguosha:getCard(card_ids[math.random(1, #card_ids)]), true)
			end
		end
		return false
	end
}

zihaiyouai_xiguamiao:addSkill(guatian)

sgs.LoadTranslationTable{
	["guatian"] = "瓜田",
	[":guatian"] = "锁定技，回合外你的手牌中"..WordState("始终有基本牌", word_always_has_basic).."。",
	["$guatian"] = "",
}

--------------------------------------------------
--音爆
--------------------------------------------------

yinbao = sgs.CreateTriggerSkill{
	name = "yinbao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardsMoveOneTime},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			if not room:getTag("FirstRound"):toBool() and move.to and move.to:isAlive() and move.to:objectName() == player:objectName() and move.reason.m_reason == sgs.CardMoveReason_S_REASON_DRAW and move.to_place == sgs.Player_PlaceHand and (not move.from or move.from:objectName() ~= move.to:objectName()) and move.card_ids:length() >= 1 then
				if player:getPhase() ~= sgs.Player_Draw and player:getMark("&yinbao") == 0 then
					for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
						if player:objectName() ~= myself:objectName() and player:getMark("&yinbao") == 0 and myself:canDiscard(myself, "h") and myself:canEffect(player, self:objectName()) then
							local throw_card = room:askForCard(myself, ".|.|.|hand", "@yinbao_invoke:"..player:objectName(), data, sgs.Card_MethodNone)
							if throw_card then
								local logg = sgs.LogMessage()
								logg.from = myself
								logg.type = "#InvokeSkill"
								logg.arg = "yinbao"
								room:sendLog(logg)	--显示技能发动提示信息
								room:notifySkillInvoked(myself, "yinbao")	--在武将牌上显示技能名
								room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
								room:throwCard(throw_card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, myself:objectName(), myself:objectName(), self:objectName(), ""), myself)
								if not SkillNullify(myself, self:objectName()) then
									room:setPlayerMark(player, "&yinbao", 1)
								end
							end
						end
					end
				elseif player:getMark("&yinbao") > 0 then
					room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
					if not player:isKongcheng() then
						room:moveCardsInToDrawpile(player, player:getRandomHandCard(), self:objectName(), -1, false)
					end
				end
			end
			return false
		end
	end
}
table.insert(turn_end_clear_mark, "&yinbao")	--回合结束清除标记

zihaiyouai_xiguamiao:addSkill(yinbao)

sgs.LoadTranslationTable{
	["yinbao"] = "音爆",
	[":yinbao"] = "一名其他角色于其摸牌阶段外摸牌后，你可以破坏一张手牌<font color='#A9A9A9'>发动此技能</font>，本回合其摸牌后，其将一张随机手牌返回牌堆。",
	["$yinbao"] = "",
	[":mark:&yinbao"] = "本回合摸牌后，将一张随机手牌返回牌堆",
	["@yinbao_invoke"] = "你可以破坏一张手牌，对 %src 发动“音爆”，本回合其摸牌后须将一张随机手牌返回牌堆",
}

--------------------------------------------------
--旧忆新声 黎歌
--设计者：
--------------------------------------------------

lige_jiuyixinsheng = sgs.General(extension,"lige_jiuyixinsheng","xuyanshe","3",false)

sgs.LoadTranslationTable{
	["lige_jiuyixinsheng"] = "黎歌",
	["&lige_jiuyixinsheng"] = "黎歌",
	["#lige_jiuyixinsheng"] = "旧忆新声",
	["$lige_jiuyixinsheng"] = "一般",
	["designer:lige_jiuyixinsheng"] = "月音风源",
	["cv:lige_jiuyixinsheng"] = "",
	["illustrator:lige_jiuyixinsheng"] = "",
	["~lige_jiuyixinsheng"] = "",
}

--------------------------------------------------
--离鸢
--------------------------------------------------

liyuanbuff = sgs.CreateDistanceSkill{
	name = "#liyuanbuff",
	correct_func = function(self, from, to)
		if from:objectName() ~= to:objectName() and (from:hasSkill("liyuan") or to:hasSkill("liyuan")) then
			return Ternary(from:hasSkill("liyuan"), from:getMark("liyuan_inc") - from:getMark("liyuan_dec"), 0) + Ternary(to:hasSkill("liyuan"), to:getMark("liyuan_inc") - to:getMark("liyuan_dec"), 0)
		end
	end
}
liyuan = sgs.CreateTriggerSkill{
	name = "liyuan",
	events = {sgs.Damage, sgs.Damaged --[[, sgs.GameStart]]},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		--if event == sgs.GameStart then
		--	room:setPlayerMark(player, "liyuan_inc", 1)
		--	room:setPlayerMark(player, "&liyuan+liyuan_inc+1", 1)
		--else
			local damage = data:toDamage()
			if damage.damage > 0 then
				if player:askForSkillInvoke(self:objectName(), sgs.QVariant(Ternary(event == sgs.Damage, "dec:", "inc:"))) then
					local X = player:getMark("liyuan_inc") - player:getMark("liyuan_dec")
					if X ~= 0 then
						room:setPlayerMark(player, "&liyuan+"..Ternary(X>0,"liyuan_inc","liyuan_dec").."+"..math.abs(X), 0)
					end
					if event == sgs.Damage then
						if player:getMark("liyuan_inc") > 0 then
							room:removePlayerMark(player, "liyuan_inc", 1)
						else
							room:addPlayerMark(player, "liyuan_dec", 1)
						end
					elseif event == sgs.Damaged then
						if player:getMark("liyuan_dec") > 0 then
							room:removePlayerMark(player, "liyuan_dec", 1)
						else
							room:addPlayerMark(player, "liyuan_inc", 1)
						end
					end
					local X = player:getMark("liyuan_inc") - player:getMark("liyuan_dec")
					if X ~= 0 then
						room:setPlayerMark(player, "&liyuan+"..Ternary(X>0,"liyuan_inc","liyuan_dec").."+"..math.abs(X), 1)
					end
				end
			end
		--end
	end
}

lige_jiuyixinsheng:addSkill(liyuan)
lige_jiuyixinsheng:addSkill(liyuanbuff)

sgs.LoadTranslationTable{
	["liyuan"] = "离鸢",
	["#liyuanbuff"] = "离鸢",
	[":liyuan"] = "你↔其他角色 距离<font color='#FF6699'>＋0</font>。你 <font color='#9400D3'>造成/受到</font> 伤害后，你可以令<font color='#FF6699'>此数字</font> <font color='#9400D3'>－1/＋1</font>。",
	["$liyuan"] = "",
	["liyuan:inc"] = "令你与其他角色距离互相＋1",
	["liyuan:dec"] = "令你与其他角色距离互相－1",
	["liyuan_inc"] = "＋",
	["liyuan_dec"] = "－",
}

--------------------------------------------------
--不倦
--------------------------------------------------

bujuancard = sgs.CreateSkillCard{
	name = "bujuan",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return #targets == 0 and sgs.Self:distanceTo(to_select) == self:subcardsLength() and to_select:objectName() ~= sgs.Self:objectName() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
	end,
	feasible = function(self, targets)
		return #targets == 1 and sgs.Self:distanceTo(targets[1]) == self:subcardsLength() and targets[1]:objectName() ~= sgs.Self:objectName() and SkillCanTarget(targets[1], sgs.Self, self:objectName()) and sgs.Self:canEffect(targets[1], self:objectName())
	end,
	on_use = function(self, room, source, targets)
		if self:subcardsLength() > 0 then
			room:throwCard(self, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, source:objectName(), source:objectName(), self:objectName(), ""), source)
		end
		local target = targets[1]
		if target and target:isAlive() and not SkillNullify(source, self:objectName()) then
			room:damage(sgs.DamageStruct(self:objectName(), source, target, 1, sgs.DamageStruct_Normal))
		end
	end
}
bujuan = sgs.CreateViewAsSkill{
	n = 999,
	name = "bujuan",
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		--if #cards <= 2 then		--让选好牌前按钮也能亮着
			local card = bujuancard:clone()
			for _, c in ipairs(cards) do
				card:addSubcard(c)
			end
			return card
		--end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#bujuan") < 1
	end
}

lige_jiuyixinsheng:addSkill(bujuan)

sgs.LoadTranslationTable{
	["bujuan"] = "不倦",
	[":bujuan"] = "出牌阶段限一次，你可以破坏X张手牌，指定一名距离为X的其他角色<font color='#A9A9A9'>发动此技能</font>，对其造成1点伤害。",
	["$bujuan"] = "",
	["^bujuan"] = "操作提示：选择若干张牌→选择一名角色→确定<br/>你可以按<font color='blue'>D键</font>快速查看距离",
}

--------------------------------------------------
--福运座敷童 柚月蛍
--设计者：萌龙少主
--------------------------------------------------

youyueying_fuyunzuofutong = sgs.General(extension,"youyueying_fuyunzuofutong","yueshaoshe","3",false)

sgs.LoadTranslationTable{
	["youyueying_fuyunzuofutong"] = "柚月蛍",
	["&youyueying_fuyunzuofutong"] = "柚月蛍",
	["#youyueying_fuyunzuofutong"] = "福运座敷童",
	["$youyueying_fuyunzuofutong"] = "简单",
	["designer:youyueying_fuyunzuofutong"] = "萌龙少主",
	["cv:youyueying_fuyunzuofutong"] = "",
	["illustrator:youyueying_fuyunzuofutong"] = "",
	["~youyueying_fuyunzuofutong"] = "",
}

--------------------------------------------------
--满愿
--------------------------------------------------

manyuan_maxcards = sgs.CreateMaxCardsSkill{
	name = "#manyuan_maxcards",
	extra_func = function(self, target)
		if target:getMark("&manyuan") > 0 then
			return -target:getMark("&manyuan")
		end
		if target:getMark("&xianzhi") > 0 then
			return -target:getMark("&xianzhi")
		end
	end
}

manyuan_card = sgs.CreateSkillCard{
	name = "manyuan",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "manyuan")
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		for _,card in sgs.qlist(source:getHandcards()) do
			dummy:addSubcard(card)
		end
		if dummy:subcardsLength() > 0 then
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), target:objectName(), self:objectName(), "")
			room:moveCardTo(dummy, target, sgs.Player_PlaceHand, reason, false)
		end
		dummy:deleteLater()
		room:addPlayerMark(target, "&manyuan", 1)
	end
}
manyuan_vs = sgs.CreateZeroCardViewAsSkill{
	name = "manyuan",
	view_as = function(self, cards)
		return manyuan_card:clone()
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#manyuan") < 1 and not player:isKongcheng()
	end
}
manyuan = sgs.CreateTriggerSkill{
	name = "manyuan",
	view_as_skill = manyuan_vs,
	events = {sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.from ~= sgs.Player_NotActive and change.to == sgs.Player_NotActive then
				if player:getMark("&manyuan") > 0 then
					room:setPlayerMark(player, "&manyuan", 0)
				end
				if player:getMark("&xianzhi") > 0 then
					room:setPlayerMark(player, "&xianzhi", 0)
				end
			end
		end
	end
}

youyueying_fuyunzuofutong:addSkill(manyuan)
youyueying_fuyunzuofutong:addSkill(manyuan_maxcards)

sgs.LoadTranslationTable{
	["manyuan"] = "满愿",
	["#manyuan_maxcards"] = "满愿",
	[":manyuan"] = "出牌阶段限一次，你可以将所有手牌交给一名角色，令其手牌上限－1直到其下个回合结束。",
	["$manyuan"] = "",
	[":mark:&manyuan"] = "手牌上限-1",
}

--------------------------------------------------
--福佑
--------------------------------------------------

fuyou = sgs.CreateTriggerSkill{
	name = "fuyou",
	events = {sgs.QuitDying},
	frequency = sgs.Skill_NotFrequent,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.QuitDying then
			local dying = data:toDying()
			if not dying.who or dying.who:isDead() then return false end
			local _data = sgs.QVariant()
			_data:setValue(dying.who)
			for _, p in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				dying.who:setFlags("fuyou_dying_AI")
				if dying.who:getHandcardNum() <= dying.who:getMaxHp() and room:askForSkillInvoke(p, self:objectName(), _data) and not SkillNullify(p, self:objectName()) and p:canEffect(dying.who, self:objectName()) then
					dying.who:setFlags("-fuyou_dying_AI")	--若选择则及时清理避免插结
					room:setEmotion(p, "youyueying")
					room:broadcastSkillInvoke(self:objectName())
					room:doAnimate(1, p:objectName(), dying.who:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					if dying.who:getHandcardNum() <= dying.who:getMaxHp() then
						dying.who:drawCards(math.min(5, dying.who:getMaxHp() - dying.who:getHandcardNum()), self:objectName())
					end
				end
				dying.who:setFlags("-fuyou_dying_AI")
			end
		end
		return false
	end,
	can_trigger = function(self, target)
		return target
	end
}

youyueying_fuyunzuofutong:addSkill(fuyou)

sgs.LoadTranslationTable{
	["fuyou"] = "福佑",
	[":fuyou"] = "一名角色脱离濒危状态时，你可以<font color='#A9A9A9'>发动此技能</font>，令其将手牌摸至X张（X为其体力上限，至多摸5张）。",
	["$fuyou"] = "",
}

--------------------------------------------------
--绚烂窜天猴 北上花火
--设计者：萌龙少主
--------------------------------------------------

beishanghuahuo_xuanlancuantianhou = sgs.General(extension,"beishanghuahuo_xuanlancuantianhou","yueshaoshe","3",true)

sgs.LoadTranslationTable{
	["beishanghuahuo_xuanlancuantianhou"] = "北上花火",
	["&beishanghuahuo_xuanlancuantianhou"] = "北上花火",
	["#beishanghuahuo_xuanlancuantianhou"] = "绚烂窜天猴",
	["$beishanghuahuo_xuanlancuantianhou"] = "简单",
	["designer:beishanghuahuo_xuanlancuantianhou"] = "萌龙少主",
	["cv:beishanghuahuo_xuanlancuantianhou"] = "",
	["illustrator:beishanghuahuo_xuanlancuantianhou"] = "",
	["~beishanghuahuo_xuanlancuantianhou"] = "",
}

beishanghuahuo_xuanlancuantianhou:setGender(sgs.General_Neuter)

--------------------------------------------------
--自荐
--------------------------------------------------

zijian = sgs.CreateTriggerSkill{
	name = "zijian",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			if move.from and move.from:isAlive() and player:objectName() == move.from:objectName()
					and (move.from_places:contains(sgs.Player_PlaceHand) or move.from_places:contains(sgs.Player_PlaceEquip))
					and (bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD)
					--[[and move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_DISMANTLE]] then
				--local dummy_card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				local card_ids = sgs.IntList()
				for _, id in sgs.qlist(move.card_ids) do
					if room:getCardPlace(id) == sgs.Player_DiscardPile then
						--dummy_card:addSubcard(sgs.Sanguosha:getCard(id))
						card_ids:append(id)
					end
				end
				--local N = dummy_card:subcardsLength()
				local N = card_ids:length()
				if N > 0 then
					room:setPlayerMark(player, "zijian_AI", N)	--AI用
					local to = room:askForPlayerChosen(player, room:getOtherPlayers(player), self:objectName(), "@zijian:"..N, true, true)
					room:setPlayerMark(player, "zijian_AI", 0)	--AI用
					if to and not SkillNullify(player, self:objectName()) and player:canEffect(to, self:objectName()) then
						--local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), to:objectName(), self:objectName(), "")
						--room:moveCardTo(dummy_card, to, sgs.Player_PlaceHand, reason, true)
						local id = -1
						if N > 1 then
							room:fillAG(card_ids, to)
							id = room:askForAG(to, card_ids, false, self:objectName())
							room:clearAG(to)
						else
							id = card_ids:first()
						end
						local card = sgs.Sanguosha:getCard(id)
						if card then
							to:obtainCard(card, true)
						end
					end
				end
				--dummy_card:deleteLater()
			end
		end
		return false
	end
}

beishanghuahuo_xuanlancuantianhou:addSkill(zijian)

sgs.LoadTranslationTable{
	["zijian"] = "自荐",
	[":zijian"] = "你因弃置或破坏而失去牌后，你可以<font color='#A9A9A9'>发动此技能</font>，令一名其他角色选择其中一张获得。",
	["$zijian1"] = "",
	["$zijian2"] = "",
	["@zijian"] = "你可以发动“自荐”，令一名角色从被弃置的 %src 张牌中获得一张",
	["^AG_zijian"] = "<b>自荐</b><br/>双击以选择一张牌获得之",
}

--------------------------------------------------
--惊心
--------------------------------------------------

jingxin = sgs.CreateTriggerSkill{
	name = "jingxin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetConfirmed, sgs.TrickCardCanceling},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TrickCardCanceling then	--跳过对应的无懈询问
			local effect = data:toCardEffect()
			if effect.card:hasFlag(self:objectName()..effect.to:objectName()) then return true end
		elseif event == sgs.TargetConfirmed and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local use = data:toCardUse()
			if use.to and use.to:contains(player) and use.to:length() == 1 and use.card and not use.card:isKindOf("SkillCard") and use.card:isDamageCard() --[[(use.card:isKindOf("Slash") or (use.card:isNDTrick() and use.card:isBlack()))]] then
				if use.from then
					use.from:setFlags("jingxin_usefrom_AI")	--AI用
				end
				if player:getMark("&jingxin+used") == 0 and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. use.card:objectName())) and not SkillNullify(player, self:objectName()) then
					room:setPlayerMark(player, "&jingxin+used", 1)
					local X = math.min(3, player:getHp())
					local result = throwCoin(player, self:objectName(), X)
					
					player:drawCards(result, self:objectName())
					if X-result > 0 then
						room:askForDiscard(player, self:objectName(), X-result, X-result, false, true)
					end
					
					if result == X then
						local nullified_list = use.nullified_list	--无效目标列表
						table.insert(nullified_list, player:objectName())
						use.nullified_list = nullified_list
						
						--player:drawCards(X, self:objectName())
					elseif result == 0 then
						local no_respond_list = use.no_respond_list	--不可响应目标列表
						table.insert(no_respond_list, player:objectName())
						use.no_respond_list = no_respond_list
						room:setCardFlag(use.card, self:objectName()..player:objectName())
						
						--room:askForDiscard(player, self:objectName(), X, X, false, true)
					end
					data:setValue(use)
				end
				if use.from then
					use.from:setFlags("-jingxin_usefrom_AI")	--AI用
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}
table.insert(turn_end_clear_mark, "&jingxin+used")	--回合结束清除标记


beishanghuahuo_xuanlancuantianhou:addSkill(jingxin)

sgs.LoadTranslationTable{
	["jingxin"] = "惊心",
	[":jingxin"] = "每回合限一次，你成为伤害类牌的唯一目标后，你可以<font color='#A9A9A9'>发动此技能</font>，掷X枚硬币，摸正面枚数张牌，弃置反面枚数张牌，若结果：<font color='#007979'>均为正面</font>，此牌对你无效；<font color='#977C00'>均为反面</font>，你不能响应此牌。（X为你的体力值且至多为3）",
	["$jingxin1"] = "",
	["$jingxin2"] = "",
	["jingxin:choice"] = "你成为了 %src 的目标，你可以发动“惊心”",
}

--------------------------------------------------
--寄旅精灵猫 胧月悠
--设计者：萌龙少主
--------------------------------------------------

longyueyou_jilvjinglingmao = sgs.General(extension,"longyueyou_jilvjinglingmao","yueshaoshe","4",true)

sgs.LoadTranslationTable{
	["longyueyou_jilvjinglingmao"] = "胧月悠",
	["&longyueyou_jilvjinglingmao"] = "胧月悠",
	["#longyueyou_jilvjinglingmao"] = "寄旅精灵猫",
	["designer:longyueyou_jilvjinglingmao"] = "萌龙少主",
	["cv:longyueyou_jilvjinglingmao"] = "",
	["illustrator:longyueyou_jilvjinglingmao"] = "",
	["~longyueyou_jilvjinglingmao"] = "",
}

--------------------------------------------------
--占梦
--------------------------------------------------

zhanmeng = sgs.CreateTriggerSkill{
	name = "zhanmeng",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getOtherPlayers(player)) do
					if player:canPindian(p) --[[and SkillCanTarget(p, player, self:objectName())]] and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				--if not targets:isEmpty() then
					local to = room:askForPlayerChosen(player, targets, self:objectName(), "@zhanmeng", true, true)
					if to then
						if SkillNullify(player, self:objectName()) then return false end
						local success = player:pindian(to, "zhanmeng", nil)
						if success then
							if not to:isNude() then
								room:askForDiscard(to, self:objectName(), 1, 1, false, true)
							end
							--player:drawCards(1, self:objectName(), false, false)	--参数3为false则从牌堆底摸，参数4为是否正面向上摸
						else
							if not player:isNude() then
								local card = room:askForCard(player, ".|.|.|hand,equipped!", "@zhanmeng_put", data, sgs.Card_MethodNone)
								if card then
									local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
									room:moveCardTo(card, player, nil, sgs.Player_DrawPile, reason, false)
								end
							end
						end
					elseif player:canPintian() and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:")) and not SkillNullify(player, self:objectName()) then
						local pindian = player:PinTian("zhanmeng", nil)
						if pindian.success then
							--local card_id = room:drawCard()
							--local card = sgs.Sanguosha:getCard(card_id)
							--room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), self:objectName(), nil), player)
							--player:drawCards(1, self:objectName(), false, false)	--参数3为false则从牌堆底摸，参数4为是否正面向上摸
						else
							if not player:isNude() then
								local card = room:askForCard(player, ".|.|.|hand,equipped!", "@zhanmeng_put", data, sgs.Card_MethodNone)
								if card then
									local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
									room:moveCardTo(card, player, nil, sgs.Player_DrawPile, reason, false)
								end
							end
						end
					end
				--end
			end
		end
		return false
	end
}

longyueyou_jilvjinglingmao:addSkill(zhanmeng)

sgs.LoadTranslationTable{
	["zhanmeng"] = "占梦",
	[":zhanmeng"] = "准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，与一名角色或牌堆拼点：若你赢，其须弃置一张牌；若你没赢，你将一张牌置于牌堆顶。",
	["$zhanmeng"] = "",
	["@zhanmeng"] = "你可以发动“占梦”，与一名角色拼点",
	["@zhanmeng_put"] = "请将一张牌置于牌堆顶",
	["zhanmeng:choice"] = "你想与牌堆拼点吗？",
}

--------------------------------------------------
--游憩
--------------------------------------------------

youqi = sgs.CreateTriggerSkill{
	name = "youqi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Pindian},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Pindian then
			local pindian = data:toPindian()
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				if pindian.from and pindian.to and pindian.from:isAlive() and pindian.to:isAlive() and (pindian.from:objectName() == myself:objectName() or pindian.to:objectName() == myself:objectName()) and myself:canEffect(pindian.from, self:objectName()) and myself:canEffect(pindian.to, self:objectName()) then
					if room:getCardPlace(pindian.from_card:getId()) == sgs.Player_PlaceTable and room:getCardPlace(pindian.to_card:getId()) == sgs.Player_PlaceTable then
						if myself:askForSkillInvoke(self:objectName(), data) and not SkillNullify(myself, self:objectName()) then
							local exchangeMove = sgs.CardsMoveList()
							exchangeMove:append(sgs.CardsMoveStruct(pindian.from_card:getId(), pindian.to, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, pindian.from:objectName(), pindian.to:objectName(), self:objectName(), "")))
							exchangeMove:append(sgs.CardsMoveStruct(pindian.to_card:getId(), pindian.from, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, pindian.to:objectName(), pindian.from:objectName(), self:objectName(), "")))
							room:moveCardsAtomic(exchangeMove, false)
						end
					end
				elseif pindian.from and not pindian.to and pindian.from:isAlive() and pindian.from:objectName() == myself:objectName() and myself:canEffect(pindian.from, self:objectName()) then
					if room:getCardPlace(pindian.from_card:getId()) == sgs.Player_PlaceTable and room:getCardPlace(pindian.to_card:getId()) == sgs.Player_PlaceTable then
						if myself:askForSkillInvoke(self:objectName(), data) and not SkillNullify(myself, self:objectName()) then
							local exchangeMove = sgs.CardsMoveList()
							exchangeMove:append(sgs.CardsMoveStruct(pindian.from_card:getId(), pindian.to, sgs.Player_DrawPile, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, pindian.from:objectName(), nil, self:objectName(), "")))
							exchangeMove:append(sgs.CardsMoveStruct(pindian.to_card:getId(), pindian.from, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, nil, pindian.from:objectName(), self:objectName(), "")))
							room:moveCardsAtomic(exchangeMove, false)
						end
					end
				end
			end
			return false
		end
	end,
    can_trigger = function(self, target)
        return target
    end
}

longyueyou_jilvjinglingmao:addSkill(youqi)

sgs.LoadTranslationTable{
	["youqi"] = "游憩",
	[":youqi"] = "当你与一名角色的拼点结果确定后，你可以<font color='#A9A9A9'>发动此技能</font>，令拼点双方获得对方的拼点牌（若对方为牌堆则置于牌堆顶）。",
	["$youqi"] = "",
}

--------------------------------------------------
--幼儿园园长 Nia
--设计者：NSX、萌龙少主
--------------------------------------------------

nia_youeryuanyuanzhang = sgs.General(extension,"nia_youeryuanyuanzhang$","niya","4",false)

sgs.LoadTranslationTable{
	["nia_youeryuanyuanzhang"] = "Nia",
	["&nia_youeryuanyuanzhang"] = "Nia",
	["#nia_youeryuanyuanzhang"] = "幼儿园园长",
	["$nia_youeryuanyuanzhang"] = "简单",
	["designer:nia_youeryuanyuanzhang"] = "NSX、萌龙少主",
	["cv:nia_youeryuanyuanzhang"] = "",
	["illustrator:nia_youeryuanyuanzhang"] = "",
	["~nia_youeryuanyuanzhang"] = "",
}

nia_youeryuanyuanzhang:setGender(sgs.General_Neuter)

--------------------------------------------------
--抚育
--------------------------------------------------

fuyu = sgs.CreateTriggerSkill{
	name = "fuyu",
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() == sgs.Player_Play then
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				if myself:objectName() == player:objectName() then continue end
				if myself:isKongcheng() or player:isKongcheng() then continue end
				local data2 = sgs.QVariant()
				data2:setValue(myself)
				local card = room:askForCard(player, ".|.|.|hand", "@fuyu_show:" .. myself:objectName(), data2, sgs.Card_MethodNone)
				if card then
					room:sendCompulsoryTriggerLog(myself, self:objectName()) --显示锁定技发动
					room:showCard(player, card:getId())
					local data3 = sgs.QVariant()
					data3:setValue(player)
					local card2 = room:askForCard(myself, ".|.|.|hand!", "@fuyu_swap:" .. player:objectName(), data3, sgs.Card_MethodNone)
					if card2 then
						local exchangeMove = sgs.CardsMoveList()
						exchangeMove:append(sgs.CardsMoveStruct(card2:getId(), player, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, myself:objectName(), player:objectName(), self:objectName(), "")))
						exchangeMove:append(sgs.CardsMoveStruct(card:getId(), myself, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, player:objectName(), myself:objectName(), self:objectName(), "")))
						room:moveCardsAtomic(exchangeMove, false)
					end
				end
			end
		end
	end,
    can_trigger = function(self, target)
        return target
    end
}

--nia_youeryuanyuanzhang:addSkill(fuyu)

sgs.LoadTranslationTable{
	["fuyu"] = "抚育",
	[":fuyu"] = "其他角色的出牌阶段开始时，若你有手牌，其可以展示一张手牌，然后你须选择一张手牌与之交换。",
	["@fuyu_show"] = "你可以展示一张手牌，%src 须与你交换此牌",
	["@fuyu_swap"] = "请选择一张手牌与 %src 展示的牌交换",
	["$fuyu"] = "",
}

--------------------------------------------------
--抚育
--------------------------------------------------

newfuyucard = sgs.CreateSkillCard{
	name = "newfuyu",
	filter = function(self, targets, to_select, source)
		if #targets < sgs.Self:getMark(self:objectName()) and sgs.Self:canEffect(to_select, "newfuyu") then
			return true
		end
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		effect.to:drawCards(1, self:objectName())
		if not effect.to:isKongcheng() then
			--effect.to:getRoom():askForDiscard(effect.to, self:objectName(), 1, 1, false, false)
			local _data = sgs.QVariant() 
			_data:setValue(effect.from)
			local card
			card = room:askForCard(effect.to, ".!", "@newfuyu_dis:"..effect.from:objectName(), _data, sgs.Card_MethodNone)
			if not card then
				card = effect.to:getRandomHandCard()
			end
			if card then
				room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, effect.to:objectName(), self:objectName(), nil), effect.to)
				if card:getNumber() == 1 or card:getNumber() == 5 or card:getNumber() == 6 then
					room:addPlayerMark(effect.from, "newfuyu_counter_156", 1)
				end
				if card:getSuit() == sgs.Card_Heart then
					room:addPlayerMark(effect.from, "newfuyu_counter_heart", 1)
					
					local recover = sgs.RecoverStruct()
					recover.who = effect.from
					recover.recover = 1
					room:recover(effect.from, recover)
				end
			end
		end
	end
}
newfuyuvs = sgs.CreateZeroCardViewAsSkill{
	name = "newfuyu",
	response_pattern = "@@newfuyu",
	view_as = function()
		return newfuyucard:clone()
	end
}
newfuyu = sgs.CreateTriggerSkill{
	name = "newfuyu",
	events = {sgs.EventPhaseStart},
	view_as_skill = newfuyuvs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Finish and player:getLostHp() > 0 then
				room:setPlayerMark(player, self:objectName(), player:getLostHp())
				room:setPlayerMark(player, "newfuyu_counter_heart", 0)	--抚育弃红桃计数
				room:setPlayerMark(player, "newfuyu_counter_156", 0)	--抚育弃1/5/6计数
				room:askForUseCard(player, "@@newfuyu", "@newfuyu")
				room:setPlayerMark(player, self:objectName(), 0)
				
				if player:getMark("newfuyu_counter_heart") >= 2 then
					RecordUnlockGenerals(player, "nia_mamamiya")	--为玩家记录可解锁角色
				end
				if player:getMark("newfuyu_counter_156") >= 2 then
					RecordUnlockGenerals(player, "ywwuyi")	--为玩家记录可解锁角色
				end
			end
		end
		return false
	end
}

nia_youeryuanyuanzhang:addSkill(newfuyu)

sgs.LoadTranslationTable{
	["newfuyu"] = "抚育",
	[":newfuyu"] = "结束阶段，你可以令至多X名角色依次摸一张牌并弃置一张手牌，若其弃置了红桃牌，你回复1点体力。（X为你已损失的体力值）",
	["$newfuyu1"] = "",
	["$newfuyu2"] = "",
	["@newfuyu"] = "你可以发动“抚育”令若干名角色各摸一张牌、弃一张手牌",
	["~newfuyu"] = "选择若干名角色→确定",
	["@newfuyu_dis"] = "请弃置一张手牌，若此牌为红桃牌则 %src 回复1点体力",
}

--------------------------------------------------
--呵护
--------------------------------------------------

hehu = sgs.CreateTriggerSkill{
	name = "hehu$",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageCaused, sgs.DamageInflicted},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.nature == sgs.DamageStruct_Light then return false end
		if room:getTag("TurnLengthCount") and room:getTag("TurnLengthCount"):toInt() and room:getTag("TurnLengthCount"):toInt() == 1 and room:getLord() and room:getLord():hasLordSkill(self:objectName()) and player:getKingdom() == "niya" and player:objectName() ~= room:getLord():objectName() and damage.damage > 0 then
			if event == sgs.DamageInflicted then
				room:sendCompulsoryTriggerLog(room:getLord(), self:objectName())	--显示锁定技发动
				room:doAnimate(1, room:getLord():objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				return true
			elseif (event == sgs.DamageCaused) and (damage.from and damage.from:isAlive()) then
				room:sendCompulsoryTriggerLog(room:getLord(), self:objectName())	--显示锁定技发动
				room:doAnimate(1, room:getLord():objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				return true
			end
		end
		return false
	end,
	can_trigger = function(self, target)
		return target
	end
}

nia_youeryuanyuanzhang:addSkill(hehu)

sgs.LoadTranslationTable{
	["hehu"] = "呵护",
	[":hehu"] = "主公技，锁定技，防止所有泥鸭幼儿园势力的其他角色于第一轮造成或受到的伤害。",
	["$hehu"] = "",
}

--------------------------------------------------
--妈妈咪鸭 泥鸭
--设计者：
--------------------------------------------------

nia_mamamiya = sgs.General(extension,"nia_mamamiya","niya","4",false,true,true)

sgs.LoadTranslationTable{
	["nia_mamamiya"] = "泥鸭",
	["&nia_mamamiya"] = "泥鸭",
	["#nia_mamamiya"] = "妈妈咪鸭",
	["$nia_mamamiya"] = "简单",
	["designer:nia_mamamiya"] = "萌龙少主",
	["cv:nia_mamamiya"] = "",
	["illustrator:nia_mamamiya"] = "",
	["unlock:nia_mamamiya"] = "使用Nia在一次“抚育”结算中令至少两名角色因“抚育”而弃置红桃牌",
	["~nia_mamamiya"] = "",
}

nia_mamamiya:setGender(sgs.General_Neuter)

nia_mamamiya:setBonus(true)	--设为奖励角色

--------------------------------------------------
--美宴
--------------------------------------------------

luameiyanvs = sgs.CreateViewAsSkill{
	name = "luameiyan",
	n = 1,
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return to_select:getSuit() == sgs.Card_Heart
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local new_card = sgs.Sanguosha:cloneCard("god_salvation", cards[1]:getSuit(), cards[1]:getNumber())
			new_card:addSubcard(cards[1])
			new_card:setSkillName(self:objectName())
			return new_card
		end
	end,
	enabled_at_play = function(self, player)
		return not player:hasFlag("luameiyan")
	end
}

luameiyan = sgs.CreateTriggerSkill{
	name = "luameiyan",
	view_as_skill = luameiyanvs,
	events = {sgs.PreCardUsed},
	frequency = sgs.Skill_NotFrequent,
	on_trigger = function(self,event,player,data)
		if data:toCardUse().card:getSkillName() == "luameiyan" then 
			player:getRoom():setPlayerFlag(player,"luameiyan")
		end
	end
}

nia_mamamiya:addSkill(luameiyan)

sgs.LoadTranslationTable{
	["luameiyan"] = "美宴",
	[":luameiyan"] = "出牌阶段限一次，你可以将一张红桃牌当【桃园结义】使用。",
	["$luameiyan"] = "",
}

--------------------------------------------------
--飨雏
--------------------------------------------------

luaxiangchu = sgs.CreateTriggerSkill{
	name = "luaxiangchu",
	events = {sgs.HpRecover, sgs.OverHealing},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data)
		local recover = data:toRecover()
		if recover.who and (recover.who:objectName() ~= player:objectName()) and recover.who:hasSkill(self:objectName()) then
			player:getRoom():sendCompulsoryTriggerLog(recover.who, self:objectName())	--显示锁定技发动
			if event == sgs.HpRecover then
				if player:canEffect(recover.who, self:objectName()) then
					recover.who:drawCards(1, self:objectName())
				end
			else
				player:drawCards(1, self:objectName())
			end
		end
		return false
	end,
    can_trigger = function(self, target)
        return target
    end
}

nia_mamamiya:addSkill(luaxiangchu)

sgs.LoadTranslationTable{
	["luaxiangchu"] = "飨雏",
	[":luaxiangchu"] = "锁定技，你令其他角色 <font color='#9400D3'>回复体力/体力回复溢出</font> 后，<font color='#9400D3'>你/其</font> 摸一张牌。",
	["$luaxiangchu"] = "",
}

--------------------------------------------------
--精灵雪貂 初霜
--设计者：萌龙少主
--------------------------------------------------

chushuang_jinglingxuediao = sgs.General(extension,"chushuang_jinglingxuediao","niya","3",false)

sgs.LoadTranslationTable{
	["chushuang_jinglingxuediao"] = "初霜",
	["&chushuang_jinglingxuediao"] = "初霜",
	["#chushuang_jinglingxuediao"] = "精灵雪貂",
	["$chushuang_jinglingxuediao"] = "萌新",
	["designer:chushuang_jinglingxuediao"] = "萌龙少主",
	["cv:chushuang_jinglingxuediao"] = "",
	["illustrator:chushuang_jinglingxuediao"] = "",
	["~chushuang_jinglingxuediao"] = "",
}

--------------------------------------------------
--朔易
--------------------------------------------------

shuoyi = sgs.CreateTriggerSkill{
	name = "shuoyi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.PreCardUsed, sgs.PreCardResponded, sgs.CardFinished, sgs.EventAcquireSkill},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PreCardUsed or event == sgs.PreCardResponded then
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and not card:isKindOf("SkillCard") and (card:subcardsLength() == 1 or (card:subcardsLength() == 0 and card:getId() >= 0)) then		--AI使用的非转化杀没有子卡，但是有id（转化牌的id均为-1）
				if player:isKongcheng() then return false end	--不然通过创制使用非手牌的装备牌，然后弃置所有手牌就会卡崩（因为不存在handcards:first())
				if card:getEffectiveId() == player:getHandcards():first():getEffectiveId() then
					room:setPlayerMark(player, "shuoyi_card"..card:getEffectiveId(), 1)
				elseif card:getEffectiveId() == player:getHandcards():last():getEffectiveId() then
					room:setPlayerMark(player, "shuoyi_card"..card:getEffectiveId(), 2)
				end
			end
		elseif event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and not use.card:isKindOf("SkillCard") and (use.card:subcardsLength() == 1 or (use.card:subcardsLength() == 0 and use.card:getId() >= 0)) and player:getMark("shuoyi_card"..use.card:getEffectiveId()) > 0 then
				if player:getMark("shuoyi_card"..use.card:getEffectiveId()) == 1 then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					room:setPlayerMark(player, "shuoyi_card"..use.card:getEffectiveId(), 0)
					room:broadcastSkillInvoke(self:objectName()) --播放配音
					player:drawCards(1, self:objectName())
					return false
				elseif player:getMark("shuoyi_card"..use.card:getEffectiveId()) == 2 and not player:isKongcheng() then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					room:setPlayerMark(player, "shuoyi_card"..use.card:getEffectiveId(), 0)
					room:broadcastSkillInvoke(self:objectName()) --播放配音
					room:askForDiscard(player, self:objectName(), 1, 1, false, false)
					if player:getPhase() == sgs.Player_Play then
						room:setPlayerFlag(player, "Global_PlayPhaseTerminated")
					end
					return false
				end
			end
		elseif event == sgs.EventAcquireSkill and data:toString() == self:objectName() and not player:isKongcheng() then	--获得朔易时刷新手牌
			RefreshHandcards(player)
		end
	end
}

chushuang_jinglingxuediao:addSkill(shuoyi)

sgs.LoadTranslationTable{
	["shuoyi"] = "朔易",
	[":shuoyi"] = "锁定技，你使用最左边的手牌结算结束后，你摸一张牌；你使用最右边的手牌结算结束后，你须弃置一张手牌，然后结束你的出牌阶段。",
	["$shuoyi1"] = "",
	["$shuoyi2"] = "",
}

--------------------------------------------------
--神圣玄兔 汐月
--设计者：NSX、萌龙少主
--------------------------------------------------

xiyue_shenshengxuantu = sgs.General(extension,"xiyue_shenshengxuantu","niya","4",false)

sgs.LoadTranslationTable{
	["xiyue_shenshengxuantu"] = "汐月",
	["&xiyue_shenshengxuantu"] = "汐月",
	["#xiyue_shenshengxuantu"] = "神圣玄兔",
	["$xiyue_shenshengxuantu"] = "萌新",
	["designer:xiyue_shenshengxuantu"] = "NSX、萌龙少主",
	["cv:xiyue_shenshengxuantu"] = "",
	["illustrator:xiyue_shenshengxuantu"] = "",
	["~xiyue_shenshengxuantu"] = "",
}

--------------------------------------------------
--月引
--------------------------------------------------

yueyincard = sgs.CreateSkillCard{
	name = "yueyinvs",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select) 
		if #targets == 0 then
			return to_select:hasSkill("yueyin") and to_select:getMark("yueyin_used") == 0 and to_select:objectName() ~= sgs.Self:objectName()
		end
		return false
	end,
	on_effect = function(self, effect)
		local room = effect.to:getRoom()
		room:notifySkillInvoked(effect.to, "yueyin")	--在武将牌上显示技能名
		room:broadcastSkillInvoke("yueyin")	--播放配音
		room:setPlayerMark(effect.to, "yueyin_used", 1)
		effect.to:setFlags("yueyin_first_move")
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, effect.from:objectName(), effect.to:objectName(), self:objectName(), "")
		room:moveCardTo(self, effect.to, sgs.Player_PlaceHand, reason, false)
		effect.to:setFlags("-yueyin_first_move")
		if effect.to:getHandcardNum() < effect.to:getHp() then
			effect.to:drawCards(1, self:objectName())
		end
	end
}
yueyinvs = sgs.CreateViewAsSkill{
	n = 1,
	name = "yueyinvs&",
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		if #cards ~= 0 then
			local card = yueyincard:clone()
			for _, c in ipairs(cards) do
				card:addSubcard(c)
			end
			return card
		end
	end,
	enabled_at_play = function(self, player)
		return player:getHandcardNum() > player:getHp()
	end
}
yueyin = sgs.CreateTriggerSkill{
	name = "yueyin",
	events = {sgs.GameStart, sgs.EventAcquireSkill},
	on_trigger = function(self, event, player, data, room)
		if (event == sgs.EventAcquireSkill and data:toString() == self:objectName() or event == sgs.GameStart) then
			for _,p in sgs.qlist(room:getAllPlayers()) do
				if not p:hasSkill("yueyinvs") then
					room:attachSkillToPlayer(p, "yueyinvs")
				end
			end
		end
	end
}
table.insert(play_end_clear_mark, "yueyin_used")	--出牌结束清除标记

xiyue_shenshengxuantu:addSkill(yueyin)
local skills = sgs.SkillList()
if not sgs.Sanguosha:getSkill("yueyinvs") then skills:append(yueyinvs) end	--月引（其他角色）
sgs.Sanguosha:addSkills(skills)

sgs.LoadTranslationTable{
	["yueyin"] = "月引",
	["yueyinvs"] = "月引",
	["yueyinvs>>"] = "xiyue",	--技能按钮上的角色小图标
	[":yueyin"] = "其他角色的出牌阶段限一次，若其手牌数＞体力值，其可以交给你一张手牌，然后若你手牌数＜体力值，你摸一张牌。",
	[":yueyinvs"] = "出牌阶段，若你手牌数＞体力值，你可以将一张手牌交给有“月引”的角色。（每阶段对每名角色限一次）",
	["$yueyin"] = "",
}

--------------------------------------------------
--星移
--------------------------------------------------

xingyiUseCard = sgs.CreateSkillCard{
	name = "xingyiUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		return card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
	end, 
	feasible = function(self, targets)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		return card and card:targetsFeasible(targets_list, sgs.Self)
	end,
	about_to_use = function(self, room, use)
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:setCardFlag(card, "-xingyi")
		for _,cd in sgs.qlist(use.from:getHandcards()) do		--及时清除所有flag，避免此牌结算中获得牌产生的错误情况
			room:setCardFlag(cd, "-xingyi")
		end
		local card_for_use = sgs.Sanguosha:getCard(self:getSubcards():first())
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
xingyivs = sgs.CreateViewAsSkill{
	n = 1,
	name = "xingyi",
	response_pattern = "@@xingyi!",
	view_filter = function(self, selected, to_select)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@xingyi!" and #selected == 0 then
			return to_select:hasFlag(self:objectName())
		end
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@xingyi!" and #cards == 1 then
			local skillcard = xingyiUseCard:clone()
			skillcard:addSubcard(cards[1])
			return skillcard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end
}
xingyi = sgs.CreateTriggerSkill{
	name = "xingyi",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = xingyivs,
	events = {sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime and player:getPhase() == sgs.Player_NotActive then
			local move = data:toMoveOneTime()
			if not room:getTag("FirstRound"):toBool() and move.to and move.to:objectName() == player:objectName() and move.to_place == sgs.Player_PlaceHand and (not move.from or move.from:objectName() ~= move.to:objectName()) and move.card_ids:length() >= 1 then
				local choiceList = {}
				table.insert(choiceList, "cancel")
				
				local usable_ids = {}
				for _, xingyi_id in sgs.qlist(move.card_ids) do
					local card = sgs.Sanguosha:getCard(xingyi_id)
					if room:getCardOwner(xingyi_id) and room:getCardOwner(xingyi_id):objectName() == player:objectName() and room:getCardPlace(xingyi_id) == sgs.Player_PlaceHand then
						for _, p in sgs.qlist(room:getAlivePlayers()) do
							if card:isAvailable(player) and not room:isProhibited(player, p, card) and card:targetFilter(sgs.PlayerList(), p, player) then
								room:setCardFlag(card, self:objectName())
								table.insert(usable_ids, xingyi_id)
							end
						end
					end
				end
				if #usable_ids > 0 then
					table.insert(choiceList, "xingyi_use")
				end
				table.insert(choiceList, "xingyi_discard")
				if #choiceList > 1 then
					local choice = room:askForChoice(player, self:objectName(), table.concat(choiceList, "+"))
					if choice ~= "cancel" then
						local logg = sgs.LogMessage()
						logg.from = player
						logg.type = "#InvokeSkill"
						logg.arg = "xingyi"
						room:sendLog(logg)	--显示技能发动提示信息
						room:notifySkillInvoked(player, "xingyi")	--在武将牌上显示技能名
						if choice == "xingyi_use" then
							room:askForUseCard(player, "@@xingyi!", "@xingyi_useCard")
						elseif choice == "xingyi_discard" then
							local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
							for _, card_id in sgs.qlist(move.card_ids) do
								if room:getCardOwner(card_id) and room:getCardOwner(card_id) == player and room:getCardPlace(card_id) == sgs.Player_PlaceHand then
									dummy:addSubcard(card_id)
								end
							end
							if dummy:subcardsLength() > 0 then
								room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), self:objectName(), nil), player)
							end
							dummy:deleteLater()
						end
					end
				end
				for _, id in ipairs(usable_ids) do
					local card = sgs.Sanguosha:getCard(id)
					room:setCardFlag(card, "-"..self:objectName())
				end
			end
			return false
		end
	end
}

xiyue_shenshengxuantu:addSkill(xingyi)

sgs.LoadTranslationTable{
	["xingyi"] = "星移",
	[":xingyi"] = "你于回合外获得手牌后，你可以使用其中一张或弃置之。",
	["$xingyi"] = "",
	["xingyi_use"] = "使用获得的牌",
	["xingyi_discard"] = "弃置获得的牌",
	["@xingyi_useCard"] = "请使用一张牌",
	["~xingyi"] = "选择一张牌→选择目标→确定",
}

--------------------------------------------------
--卓荦风蝉 蓬山木
--设计者：萌龙少主
--------------------------------------------------

pengshanmu_zhuoluofengchan = sgs.General(extension,"pengshanmu_zhuoluofengchan","niya","4",true)

sgs.LoadTranslationTable{
	["pengshanmu_zhuoluofengchan"] = "蓬山木",
	["&pengshanmu_zhuoluofengchan"] = "蓬山木",
	["#pengshanmu_zhuoluofengchan"] = "卓荦风蝉",
	["$pengshanmu_zhuoluofengchan"] = "萌新",
	["designer:pengshanmu_zhuoluofengchan"] = "萌龙少主",
	["cv:pengshanmu_zhuoluofengchan"] = "",
	["illustrator:pengshanmu_zhuoluofengchan"] = "",
	["~pengshanmu_zhuoluofengchan"] = "",
}

--------------------------------------------------
--青衿
--------------------------------------------------

pengshanmu_zhuoluofengchan:addSkill("bossmanjia")	--直接调用“蛮甲”

--------------------------------------------------
--郁生
--------------------------------------------------

yusheng_buff = sgs.CreateMaxCardsSkill{
	name = "#yusheng_buff",
	extra_func = function(self, target)
		if target:getMark("&yusheng!") > 0 then
			return target:getMark("&yusheng!")
		end
	end
}
yusheng = sgs.CreateTriggerSkill{
	name = "yusheng",
	frequency = sgs.Skill_Frequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Discard and player:getHandcardNum() == player:getHp() and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				local choices = {"yusheng_draw"}
				if player:getMark("&yusheng!") < 3 then
					table.insert(choices, "yusheng_keep")
				end
				local choice = room:askForChoice(player, self:objectName(), table.concat(choices, "+"))
				if choice and choice ~= "" then
					ChoiceLog(player, choice)
					if choice == "yusheng_draw" then
						player:drawCards(1, self:objectName())
					elseif choice == "yusheng_keep" then
						room:addPlayerMark(player, "&yusheng!", 1)
					end
				end
			end
		end
		return false
	end
}

pengshanmu_zhuoluofengchan:addSkill(yusheng)
pengshanmu_zhuoluofengchan:addSkill(yusheng_buff)

sgs.LoadTranslationTable{
	["yusheng"] = "郁生",
	["#yusheng_buff"] = "郁生",
	[":yusheng"] = "弃牌阶段开始时，若你的手牌数=体力值，你可以<font color='#A9A9A9'>发动此技能</font>，选择一项：1.摸一张牌 2.手牌上限＋1（至多＋3）。",
	["$yusheng"] = "",
	["yusheng_draw"] = "摸一张牌",
	["yusheng_keep"] = "手牌上限+1",
}

--------------------------------------------------
--玲珑业魔 纱音
--设计者：萌龙少主
--------------------------------------------------

shayin_linglongyemo = sgs.General(extension,"shayin_linglongyemo","niya","4",false)

sgs.LoadTranslationTable{
	["shayin_linglongyemo"] = "纱音",
	["&shayin_linglongyemo"] = "纱音",
	["#shayin_linglongyemo"] = "玲珑业魔",
	["designer:shayin_linglongyemo"] = "萌龙少主",
	["cv:shayin_linglongyemo"] = "",
	["illustrator:shayin_linglongyemo"] = "",
	["~shayin_linglongyemo"] = "",
}

--------------------------------------------------
--魔音
--------------------------------------------------
--[[
moyin_card = sgs.CreateSkillCard{
	name = "moyin",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and SkillCanTarget(to_select, sgs.Self, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local to = targets[1]
		
		local color_str = room:askForChoice(source, self:objectName(), "red+black")
		local type_str = room:askForChoice(source, self:objectName(), "basic+trick+equip")
		
		local kind_str
		if type_str == "basic" then
			kind_str = "BasicCard"
		elseif type_str == "trick" then
			kind_str = "TrickCard"
		elseif type_str == "equip" then
			kind_str = "EquipCard"
		end
		
		if not SkillNullify(source, self:objectName()) then
			local cards = {}
			for _,cd in sgs.qlist(to:getHandcards()) do
				if getColorString(cd) == color_str and getTypeString(cd) == type_str then
					table.insert(cards, cd)
				end
			end
			if #cards == 0 then
				local log = sgs.LogMessage()
				log.type = "#moyin_log"
				log.from = to
				log.arg = "#moyin_naidesu"
				room:sendLog(log)	--发送信息框消息
				
				--to:drawCards(1, self:objectName())
				
				local card_ids = {}
				for _, id in sgs.qlist(room:getDiscardPile()) do
					local cd = sgs.Sanguosha:getCard(id)
					if getColorString(cd) == color_str and getTypeString(cd) == type_str then
						table.insert(card_ids, id)
					end
				end
				if #card_ids > 0 then
					to:obtainCard(sgs.Sanguosha:getCard(card_ids[math.random(1, #card_ids)]), true)
				end
				
				--room:damage(sgs.DamageStruct(self:objectName(), source, to))
			else
				local log = sgs.LogMessage()
				log.type = "#moyin_log"
				log.from = to
				log.arg = "#moyin_has"
				room:sendLog(log)	--发送信息框消息
				
				room:setEmotion(source, "shayin")
				--room:getThread():delay(500)
				
				--local jink = cards[math.random(1, #cards)]
				local _data = sgs.QVariant(type_str..":"..color_str)
				local jink = room:askForCard(to, kind_str.."|"..color_str.."|.|hand!", "@moyin_discard", _data, sgs.Card_MethodNone)
				room:throwCard(jink, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, source:objectName(), self:objectName(), nil), to)
			end
		end
	end
}
moyin = sgs.CreateZeroCardViewAsSkill{
	name = "moyin",
	view_as = function(self, cards)
		return moyin_card:clone()
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#moyin") < 1
	end
}

shayin_linglongyemo:addSkill(moyin)

sgs.LoadTranslationTable{
	["moyin"] = "魔音",
	[":moyin"] = "出牌阶段限一次，你可以指定一名其他角色，声明一种颜色和类型<font color='#A9A9A9'>发动此技能</font>，若其手牌中有符合条件的牌则其须弃置其中一张，否则其从弃牌堆随机获得一张。",
	["$moyin"] = "",
	["@moyin_discard"] = "请弃置一张闪",
	["#moyin_log"] = "%from 的手牌中 %arg 闪",
	["#moyin_has"] = "有",
	["#moyin_naidesu"] = "没有",
}
]]
--------------------------------------------------
--魔音（新）
--------------------------------------------------

newmoyin_card = sgs.CreateSkillCard{
	name = "newmoyin",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and not to_select:isKongcheng() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local to = targets[1]
		if not SkillNullify(source, self:objectName()) and not to:isKongcheng() then
			local card_ids = room:getNCards(2)
			--local correct_handcard = to:getRandomHandCard()
			local _data = sgs.QVariant()
			local correct_handcard = room:askForCard(to, ".|.|.|hand!", "#newmoyin_selectcard:"..source:objectName(), _data, sgs.Card_MethodNone)
			card_ids:append(correct_handcard:getId())
			
			local shuffle_ids = sgs.IntList()	--获取乱序数组
			while not card_ids:isEmpty() do
				local random_one = card_ids:at(math.random(0, card_ids:length() - 1))
				shuffle_ids:append(random_one)
				card_ids:removeOne(random_one)
			end
			
			room:fillAG(shuffle_ids)
			to:setFlags("newmoyin_target_AI")	--AI用
			local id = room:askForAG(source, shuffle_ids, false, self:objectName())
			to:setFlags("-newmoyin_target_AI")	--AI用
			room:clearAG()
			
			if id and id ~= -1 then
				local card = sgs.Sanguosha:getCard(id)
				--牌名花色点数完全相同也算（玩家没有能力分辨两张id不同的牌）
				if id == correct_handcard:getId() or (card:objectName() == correct_handcard:objectName() and card:getNumber() == correct_handcard:getNumber() and card:getSuit() == correct_handcard:getSuit()) then
					local log = sgs.LogMessage()
					log.type = "#newmoyin_log"
					log.from = source
					log.to:append(to)
					log.card_str = card:toString()
					log.arg = "#newmoyin_yes"
					room:sendLog(log)	--发送信息框消息
					
					shuffle_ids:removeOne(id)
					--选对了给“正确”的那一张，而不是选择的那一张（防止牌名花色点数完全相同的情况）
					if room:getCardPlace(correct_handcard:getId()) == sgs.Player_PlaceHand and room:getCardOwner(correct_handcard:getId()) == to then
						source:obtainCard(correct_handcard, true)
					end
				else
					local log = sgs.LogMessage()
					log.type = "#newmoyin_log"
					log.from = source
					log.to:append(to)
					log.card_str = card:toString()
					log.arg = "#newmoyin_no"
					room:sendLog(log)	--发送信息框消息
					
					room:setEmotion(source, "shayin")
					
					if room:getCardPlace(correct_handcard:getId()) == sgs.Player_PlaceHand and room:getCardOwner(correct_handcard:getId()) == to then
						room:showCard(to, correct_handcard:getId(), nil, true, false)	--不触发时机
					end
				end
			end
			
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			for _, id in sgs.qlist(shuffle_ids) do
				if room:getCardPlace(id) == sgs.Player_DrawPile then
					dummy:addSubcard(id)
				end
			end
			if dummy:subcardsLength() > 0 then
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, source:objectName(), nil, self:objectName(), nil)
				room:moveCardTo(dummy, source, nil, sgs.Player_DiscardPile, reason, true)
			end
			dummy:deleteLater()
		end
	end
}
newmoyin = sgs.CreateZeroCardViewAsSkill{
	name = "newmoyin",
	view_as = function(self, cards)
		return newmoyin_card:clone()
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#newmoyin") < 1
	end
}

shayin_linglongyemo:addSkill(newmoyin)

sgs.LoadTranslationTable{
	["newmoyin"] = "魔音",
	[":newmoyin"] = "出牌阶段限一次，你可以指定一名有手牌的其他角色<font color='#A9A9A9'>发动此技能</font>，其选择一张手牌与牌堆顶的两张牌混合展示，你选择其中一张，若之为其手牌则你获得之。",
	["$newmoyin"] = "",
	["#newmoyin_log"] = "%from 选择的 %card %arg %to 的手牌",
	["#newmoyin_yes"] = "是",
	["#newmoyin_no"] = "不是",
	["^AG_newmoyin"] = "<b>魔音</b><br/>猜测哪张牌是目标的手牌，双击以选择你猜测的牌",
	["#newmoyin_selectcard"] = "请选择一张手牌令 %src 猜测，若其猜对则其将获得此牌",
}

--------------------------------------------------
--融熠宵狐 星梦真雪
--设计者：戦、月音风源
--------------------------------------------------

xingmengzhenxue_rongyixiaohu = sgs.General(extension,"xingmengzhenxue_rongyixiaohu","niya","4",false)

sgs.LoadTranslationTable{
	["xingmengzhenxue_rongyixiaohu"] = "星梦真雪",
	["&xingmengzhenxue_rongyixiaohu"] = "星梦真雪",
	["#xingmengzhenxue_rongyixiaohu"] = "融熠宵狐",
	["$xingmengzhenxue_rongyixiaohu"] = "萌新",
	["designer:xingmengzhenxue_rongyixiaohu"] = "戦、月音风源",
	["cv:xingmengzhenxue_rongyixiaohu"] = "",
	["illustrator:xingmengzhenxue_rongyixiaohu"] = "",
	["~xingmengzhenxue_rongyixiaohu"] = "",
}

xingmengzhenxue_rongyixiaohu:setGender(sgs.General_Neuter)

--------------------------------------------------
--狐尾扇
--------------------------------------------------

huweishan = sgs.CreateTriggerSkill{
	name = "huweishan",
	frequency = sgs.Skill_Frequent,
	events = {sgs.CardUsed},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardUsed and player:getMark("huweishan_used") == 0 then
			local use = data:toCardUse()
			if use.card and use.card:isKindOf("Slash") then
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					room:setPlayerMark(player, "huweishan_used", 1)
					local card_id = room:drawCard()
					local card = sgs.Sanguosha:getCard(card_id)
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DRAW, player:objectName(), self:objectName(), "")
					room:obtainCard(player, card, reason, true)
					room:getThread():delay(250)
					if room:getCardOwner(card_id) == player then
						room:showCard(player, card_id)
						--room:getThread():delay(500)
						if card:isKindOf("BasicCard") then
							room:setCardFlag(card, "huweishan_get")
							if room:askForSkillInvoke(player, "huweishan_throw", sgs.QVariant("choice:")) then
								room:setCardFlag(card, "-huweishan_get")
								
								room:setEmotion(player, "xingmengzhenxue")
								room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), self:objectName(), nil), player)
								room:addPlayerHistory(player, use.card:getClassName(), -1)
								
								local log = sgs.LogMessage()
								log.type = "#huweishan_success"
								log.from = player
								log.arg = self:objectName()
								log.card_str = use.card:toString()
								room:sendLog(log)	--发送信息框消息
							end
							room:setCardFlag(card, "-huweishan_get")
						end
					end
				end
			end
			return false
		end
	end
}
table.insert(turn_end_clear_mark, "huweishan_used")	--回合结束清除标记

xingmengzhenxue_rongyixiaohu:addSkill(huweishan)

sgs.LoadTranslationTable{
	["huweishan"] = "狐尾扇",
	["huweishan_throw"] = "狐尾扇",
	[":huweishan"] = "每回合限一次，你使用【杀】时，你可以<font color='#A9A9A9'>发动此技能</font>，摸一张牌并展示之，若之为基本牌则你可以弃置之，令此【杀】不计入出牌阶段的使用次数。",
	["$huweishan1"] = "",
	["$huweishan2"] = "",
	["#huweishan_success"] = "由于“%arg”的效果，%from 的 %card 不计入使用次数",
	["huweishan_throw:choice"] = "你可以弃置获得的牌，令此杀不计入使用次数",
}

--------------------------------------------------
--休和血魔 桐谷和纱
--设计者：萌龙少主
--------------------------------------------------

tongguhesha_xiuhexuemo = sgs.General(extension,"tongguhesha_xiuhexuemo","niya","4",true)

sgs.LoadTranslationTable{
	["tongguhesha_xiuhexuemo"] = "桐谷和纱",
	["&tongguhesha_xiuhexuemo"] = "桐谷和纱",
	["#tongguhesha_xiuhexuemo"] = "休和血魔",
	["$tongguhesha_xiuhexuemo"] = "进阶",
	["designer:tongguhesha_xiuhexuemo"] = "萌龙少主",
	["cv:tongguhesha_xiuhexuemo"] = "",
	["illustrator:tongguhesha_xiuhexuemo"] = "",
	["~tongguhesha_xiuhexuemo"] = "",
}

table.insert(robot_change_general, "tongguhesha_xiuhexuemo")	--对电脑禁用

--------------------------------------------------
--眷异
--------------------------------------------------

juanyi_buff = sgs.CreateProhibitSkill{
	name = "#juanyi_buff",
	is_prohibited = function(self, from, to, card)
		if card:isKindOf("Slash") and card:getSkillName() == "juanyi" and from:getHandcardNum() >= to:getHandcardNum() then
			return true
		end
	end
}
juanyi_slash = sgs.CreateSkillCard{
	name = "juanyi_slash",
	no_indicator = true,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		slash:setSkillName("_juanyi")
		slash:deleteLater()
		return slash:targetFilter(targets_list, to_select, sgs.Self)
	end,
	on_use = function(self, room, source, targets)
		local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		slash:setSkillName("_juanyi")
		local targets_list = sgs.SPlayerList()
		for _, target in ipairs(targets) do
			if source:canSlash(target, slash, true) then
				targets_list:append(target)
			end
		end
		if not targets_list:isEmpty() and slash:isAvailable(source) then
			--room:broadcastSkillInvoke("juanyi", math.random(3,4))	--播放配音
			room:addPlayerHistory(source, "Slash", 1)
			room:useCard(sgs.CardUseStruct(slash, source, targets_list))
		end
		slash:deleteLater()
	end
}
juanyi_card = sgs.CreateSkillCard{
	name = "juanyi",
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and to_select:getHandcardNum() <= sgs.Self:getHandcardNum() and sgs.Self:canEffect(to_select, self:objectName())
		end
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		
		local exchangeMove = sgs.CardsMoveList()
		exchangeMove:append(sgs.CardsMoveStruct(effect.from:handCards(), effect.to, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, effect.from:objectName(), effect.to:objectName(), self:objectName(), "")))
		exchangeMove:append(sgs.CardsMoveStruct(effect.to:handCards(), effect.from, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, effect.to:objectName(), effect.from:objectName(), self:objectName(), "")))
		room:moveCardsAtomic(exchangeMove, false)
		
		--[[local can_use = false
		local card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		card:setSkillName("_juanyi")
		for _, p in sgs.qlist(room:getAlivePlayers()) do
			if card:isAvailable(effect.from) and not room:isProhibited(effect.from, p, card) and card:targetFilter(sgs.PlayerList(), p, effect.from) then
				can_use = true
				break
			end
		end
		if can_use then]]

		local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		slash:setSkillName("_juanyi")
        slash:deleteLater()
        if slash:isAvailable(effect.from) then
			room:askForUseCard(effect.from, "@@juanyi", "@juanyi_slash")
		end
		
		--end
	end
}
juanyi = sgs.CreateViewAsSkill{
	name = "juanyi",
	n = 0,
	response_pattern = "@@juanyi",
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@juanyi" then
			return juanyi_slash:clone()
		else
			return juanyi_card:clone()
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#juanyi") < 1 and not player:isKongcheng()
	end
}

tongguhesha_xiuhexuemo:addSkill(juanyi)
tongguhesha_xiuhexuemo:addSkill(juanyi_buff)

sgs.LoadTranslationTable{
	["juanyi"] = "眷异",
	["juanyi_slash"] = "眷异",
	[":juanyi"] = "出牌阶段限一次，你可以与一名手牌数不多于你的角色交换手牌，然后你可以视为对一名手牌数多于你的角色"..WordState("通常使用", word_normaluse_str).."一张【杀】。",
	["$juanyi"] = "",
	["@juanyi_slash"] = "你可以视为对一名手牌比你多的角色使用一张【杀】",
	["~juanyi"] = "选择此【杀】的目标角色→确定",
	["^juanyi"] = "操作提示：选择一名手牌数不多于你的角色→确定",
}

--------------------------------------------------
--休和血魔 桐谷和纱
--设计者：萌龙少主
--------------------------------------------------

tongguhesha_cpmode = sgs.General(extension,"tongguhesha_cpmode","niya","4",true,true,true)

sgs.LoadTranslationTable{
	["tongguhesha_cpmode"] = "桐谷和纱",
	["&tongguhesha_cpmode"] = "桐谷和纱",
	["#tongguhesha_cpmode"] = "休和血魔",
	["$tongguhesha_cpmode"] = "简单",
	["parent:tongguhesha_cpmode"] = "tongguhesha_xiuhexuemo",	--本体角色名
	["designer:tongguhesha_cpmode"] = "萌龙少主",
	["cv:tongguhesha_cpmode"] = "",
	["illustrator:tongguhesha_cpmode"] = "",
	["~tongguhesha_cpmode"] = "",
}

--------------------------------------------------
--巧任
--------------------------------------------------

qiaorencard = sgs.CreateSkillCard{
	name = "qiaoren",
	will_throw = true,
	filter = function(self, targets, to_select) 
		if #targets > 2 then return false end
		if #targets == 0 then
			return not to_select:getEquips():isEmpty()
		elseif #targets == 1 then
			local cards = sgs.QList2Table(targets[1]:getEquips())
			local can_move = false
			for _, card in ipairs(cards) do
				local equip = card:getRealCard():toEquipCard()
				local equip_index = equip:location()
				if to_select:getEquip(equip_index) == nil and to_select:hasEquipArea(equip_index) then
					can_move = true
					break
				end
			end
			return can_move
		elseif targets == 2 then
			return false
		end
	end,
	feasible = function(self, targets)
		return #targets == 2
	end,
	about_to_use = function(self, room, use)
		local from = use.to:first()
		local to = use.to:last()
		local source = use.from
		
		local logg = sgs.LogMessage()
		logg.from = use.from
		logg.to = use.to
		logg.type = "#UseCard"
		logg.card_str = self:toString()
		room:sendLog(logg)
		
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_THROW, use.from:objectName(), "", "qiaoren", "")
		room:moveCardTo(self, use.from, nil, sgs.Player_DiscardPile, reason, true)
		
		local cards = sgs.QList2Table(from:getEquips())
		local ids = sgs.IntList()
		for _, card in ipairs(cards) do
			local equip = card:getRealCard():toEquipCard()
			local equip_index = equip:location()
			if to:getEquip(equip_index) == nil and to:hasEquipArea(equip_index) then
				ids:append(card:getId())
			end
		end
		room:fillAG(ids)
		local id = room:askForAG(source, ids, false, self:objectName())
		room:broadcastSkillInvoke(self:objectName())	--播放配音
		room:moveCardTo(sgs.Sanguosha:getCard(id), from, to, sgs.Player_PlaceEquip, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, source:objectName(), self:objectName(), ""))
		room:clearAG()
	end,
}
qiaorenvs = sgs.CreateViewAsSkill{
	name = "qiaoren",
	n = 1,
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		if #cards ~= 0 then
			local card = qiaorencard:clone()
			for _, c in ipairs(cards) do
				card:addSubcard(c)
			end
			return card
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@qiaoren"
	end
}
qiaoren = sgs.CreateTriggerSkill{
	name = "qiaoren",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = qiaorenvs,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged then
			local damage = data:toDamage()
			local x = damage.damage
			for i = 0, x - 1, 1 do
				room:askForUseCard(player, "@@qiaoren", "@qiaoren")
			end
		end
	end
}

tongguhesha_cpmode:addSkill(qiaoren)

sgs.LoadTranslationTable{
	["qiaoren"] = "巧任",
	[":qiaoren"] = "你受到1点伤害后，你可以弃置一张手牌，移动场上的一张装备牌。",
	["@qiaoren"] = "你可以使用“巧任”，弃置一张手牌，移动场上的一张装备",
	["~qiaoren"] = "选择一张牌→选择被移动装备的角色→选择装备移动到的角色→确定",
	["$qiaoren"] = "",
	["^AG_qiaoren"] = "<b>巧任</b><br/>双击以选择要移动的牌",
}

--------------------------------------------------
--真知宅狐 ⑨狐
--设计者：萌龙少主
--------------------------------------------------

jiuhu_zhenzhizhaihu = sgs.General(extension,"jiuhu_zhenzhizhaihu","niya","5",true,false,false,9)

sgs.LoadTranslationTable{
	["jiuhu_zhenzhizhaihu"] = "⑨狐",
	["&jiuhu_zhenzhizhaihu"] = "⑨狐",
	["#jiuhu_zhenzhizhaihu"] = "真知宅狐",
	["$jiuhu_zhenzhizhaihu"] = "一般",
	["designer:jiuhu_zhenzhizhaihu"] = "萌龙少主",
	["cv:jiuhu_zhenzhizhaihu"] = "",
	["illustrator:jiuhu_zhenzhizhaihu"] = "",
	["~jiuhu_zhenzhizhaihu"] = "",
}

--------------------------------------------------
--布教
--------------------------------------------------

bujiao = sgs.CreateTriggerSkill{
	name = "bujiao",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseEnd},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseEnd and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getPhase() == sgs.Player_Discard then
			if player:getMark("discard_counter") == 0 then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:loseHp(player, 1)
				
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAllPlayers()) do
					if p:getHp() < player:getHp() and not p:hasSkills("bujiao") and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				local target
				if not targets:isEmpty() then
					target = room:askForPlayerChosen(player, targets, self:objectName(), "@bujiao", true, false)
				end
				if target then
					room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					--room:acquireSkill(target, "bujiao_sleep")
					room:acquireTurnEndSkills(target, "", "bujiao")	--获得技能直到下回合结束
				end
			end
		end
		return false
	end
}

jiuhu_zhenzhizhaihu:addSkill(bujiao)

sgs.LoadTranslationTable{
	["bujiao"] = "布教",
	[":bujiao"] = "锁定技，弃牌阶段结束时，若你本阶段未弃置牌，你失去1点体力，然后你可以令一名体力值低于你的角色获得“布教”直到其下个回合结束。",
	["$bujiao"] = "",
	--["@bujiao"] = "你可以令一名体力值低于你的角色获得“补觉”<br/><br/>〖补觉〗衍生技，锁定技，弃牌阶段结束时，若你本阶段未弃置牌，你失去此技能，然后弃置一张牌。<br/>",
	["@bujiao"] = "你可以令一名体力值低于你的角色获得本技能",
}

--------------------------------------------------
--补觉
--------------------------------------------------
--[[
bujiao_sleep = sgs.CreateTriggerSkill{
	name = "bujiao_sleep",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseEnd},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseEnd and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getPhase() == sgs.Player_Discard then
			if player:getMark("discard_counter") == 0 then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:detachSkillFromPlayer(player, self:objectName())
				if not player:isNude() then
					room:askForDiscard(player, self:objectName(), 1, 1, false, true)
				end
			end
		end
		return false
	end
}

vup_anjiang:addSkill(bujiao_sleep)
jiuhu_zhenzhizhaihu:addRelateSkill("bujiao_sleep")

sgs.LoadTranslationTable{
	["bujiao_sleep"] = "补觉",
	[":bujiao_sleep"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，弃牌阶段结束时，若你本阶段未弃置牌，你失去此技能，然后弃置一张牌。",
	["$bujiao_sleep"] = "",
}]]

--------------------------------------------------
--伏间睡魔 柏凛
--设计者：
--------------------------------------------------

bailin_fujianshuimo = sgs.General(extension,"bailin_fujianshuimo","niya","4",false,true)

sgs.LoadTranslationTable{
	["bailin_fujianshuimo"] = "柏凛",
	["&bailin_fujianshuimo"] = "柏凛",
	["#bailin_fujianshuimo"] = "伏间睡魔",
	["designer:bailin_fujianshuimo"] = "萌龙少主",
	["cv:bailin_fujianshuimo"] = "",
	["illustrator:bailin_fujianshuimo"] = "",
	["~bailin_fujianshuimo"] = "",
}

--------------------------------------------------
--沉梦
--------------------------------------------------

chenmengbuff = sgs.CreateTargetModSkill{
	name = "#chenmengbuff",
	pattern = ".",
	distance_limit_func = function(self, from, card, to)
		local n = 0
		if card and card:isKindOf("SupplyShortage") and card:getSkillName() == "chenmeng" then
			n = n + 1000
		end
		return n
	end
}
chenmeng_card = sgs.CreateSkillCard{
	name = "chenmeng",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and to_select:canDiscard(sgs.Self, "he") and SkillCanTarget(to_select, sgs.Self, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local card_id = self:getSubcards():first()
		local card = sgs.Sanguosha:getCard(card_id)
		room:showCard(source, card_id)
		if not SkillNullify(source, self:objectName()) then
			local target = targets[1]
			if target:canDiscard(source, "he") then
				local throw_id = room:askForCardChosen(target, source, "he", self:objectName(), false, sgs.Card_MethodDiscard)
				room:throwCard(throw_id, source, target)
				if room:getCardOwner(card_id) == source and room:getCardPlace(card_id) == sgs.Player_PlaceHand then
					local new_card = sgs.Sanguosha:cloneCard(Ternary(source:getChangeSkillState(self:objectName()) <= 1, "supply_shortage", "indulgence"), sgs.Card_NoSuit, 0)
					new_card:addSubcard(card_id)
					new_card:setSkillName("_"..self:objectName())
					if target and source:canUse(new_card, target) then
						room:useCard(sgs.CardUseStruct(new_card, source, target))
					end
				end
			end
			if source:getChangeSkillState(self:objectName()) <= 1 then
				room:setChangeSkillState(source, self:objectName(), 2)
			elseif source:getChangeSkillState(self:objectName()) == 2 then
				room:setChangeSkillState(source, self:objectName(), 1)
			end
		end
	end
}
chenmeng_vs = sgs.CreateViewAsSkill{
	name = "chenmeng",
	n = 1,
	view_filter = function(self, selected, to_select)
		return Ternary(sgs.Self:getChangeSkillState("chenmeng") <= 1, to_select:isBlack(), to_select:isRed()) and not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = chenmeng_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#chenmeng") < 1 and not player:isKongcheng()
	end
}
chenmeng = sgs.CreateTriggerSkill{	--空壳技能，用于装载转换技机制（只有TriggerSkill能设置change_skill为真）
	name = "chenmeng",
	frequency = sgs.Skill_Compulsory,
	change_skill = true,
	view_as_skill = chenmeng_vs,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}

bailin_fujianshuimo:addSkill(chenmeng)
bailin_fujianshuimo:addSkill(chenmengbuff)

sgs.LoadTranslationTable{
	["chenmeng"] = "沉梦",
	["#chenmengbuff"] = "沉梦",
	[":chenmeng"] = "转换技，出牌阶段限一次，你可以<font color='#9400D3'>展示一张<font color='#CB5063'>①黑色 ②红色</font>手牌</font>，指定一名其他角色<font color='#A9A9A9'>发动此技能</font>，令其破坏你一张牌，然后你将手牌中的<font color='#9400D3'>此牌</font>当<font color='#CB5063'>①【兵粮寸断】（无距离限制） ②【乐不思蜀】</font>对其使用。",
	[":chenmeng1"] = "转换技，出牌阶段限一次，你可以<font color='#9400D3'>展示一张①黑色 <font color=\"#01A5AF\"><s>②红色</s></font>手牌</font>，指定一名其他角色<font color='#A9A9A9'>发动此技能</font>，令其破坏你一张牌，然后你将手牌中的<font color='#9400D3'>此牌</font>当①【兵粮寸断】（无距离限制） <font color=\"#01A5AF\"><s>②【乐不思蜀】</s></font>对其使用。",
	[":chenmeng2"] = "转换技，出牌阶段限一次，你可以<font color='#9400D3'>展示一张<font color=\"#01A5AF\"><s>①黑色</s></font> ②红色手牌</font>，指定一名其他角色<font color='#A9A9A9'>发动此技能</font>，令其破坏你一张牌，然后你将手牌中的<font color='#9400D3'>此牌</font>当<font color=\"#01A5AF\"><s>①【兵粮寸断】（无距离限制）</s></font> ②【乐不思蜀】对其使用。",
	["$chenmeng"] = "",
	["^chenmeng"] = "操作提示：<br/>选择一张牌→选择一名角色→确定",
}

--------------------------------------------------
--馋魔
--------------------------------------------------

chanmoUseCard = sgs.CreateSkillCard{
	name = "chanmoUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		return card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
	end, 
	feasible = function(self, targets)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		return card and card:targetsFeasible(targets_list, sgs.Self)
	end,
	about_to_use = function(self, room, use)
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:setCardFlag(card, "-chanmo")
		for _,cd in sgs.qlist(use.from:getHandcards()) do		--及时清除所有flag，避免此牌结算中获得牌产生的错误情况
			room:setCardFlag(cd, "-chanmo")
		end
		local card_for_use = sgs.Sanguosha:getCard(self:getSubcards():first())
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
chanmovs = sgs.CreateViewAsSkill{
	n = 1,
	name = "chanmo",
	response_pattern = "@@chanmo!",
	view_filter = function(self, selected, to_select)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@chanmo!" and #selected == 0 then
			return to_select:hasFlag(self:objectName())
		end
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@chanmo!" and #cards == 1 then
			local skillcard = chanmoUseCard:clone()
			skillcard:addSubcard(cards[1])
			return skillcard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end
}
chanmo = sgs.CreateTriggerSkill{
	name = "chanmo",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = chanmovs,
	events = {sgs.EventPhaseSkipping},
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() == sgs.Player_Play or player:getPhase() == sgs.Player_Draw then
			for _,p in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if p:objectName() == player:objectName() then continue end
				
				if player:getPhase() == sgs.Player_Draw and p:askForSkillInvoke(self:objectName(), sgs.QVariant("draw:")) and not SkillNullify(p, self:objectName()) then
					room:drawCards(p, 1, self:objectName())
				elseif player:getPhase() == sgs.Player_Play then
					local usable_ids = {}
					for _,card in sgs.qlist(p:getHandcards()) do
						local card_id = card:getId()
						if room:getCardOwner(card_id) and room:getCardOwner(card_id):objectName() == p:objectName() and room:getCardPlace(card_id) == sgs.Player_PlaceHand then
							if p:canUse(card) then
								room:setCardFlag(card, self:objectName())
								table.insert(usable_ids, card_id)
							end
						end
					end
					if #usable_ids > 0 and p:askForSkillInvoke(self:objectName(), sgs.QVariant("use:")) and not SkillNullify(p, self:objectName()) then
						room:askForUseCard(p, "@@chanmo!", "@chanmo_useCard")
					end
					for _, id in ipairs(usable_ids) do
						local card = sgs.Sanguosha:getCard(id)
						room:setCardFlag(card, "-"..self:objectName())
					end
				end
			end
		end
		return false
	end, 
	can_trigger = function(self, target)
		return target
	end
}

bailin_fujianshuimo:addSkill(chanmo)

sgs.LoadTranslationTable{
	["chanmo"] = "馋魔",
	[":chanmo"] = "其他角色跳过 <font color='#9400D3'>摸牌/出牌</font> 阶段后，你可以<font color='#A9A9A9'>发动此技能</font>，<font color='#9400D3'>摸/使用</font> 一张牌。",
	["$chanmo"] = "",
	["chanmo:draw"] = "你可以发动“馋魔”，摸一张牌",
	["chanmo:use"] = "你可以发动“馋魔”，使用一张牌",
	["@chanmo_useCard"] = "请使用一张牌",
	["~chanmo"] = "选择一张牌→选择目标→确定",
}

--------------------------------------------------
--角色特性：潜入任务
--------------------------------------------------

characteristic_qianrurenwu = sgs.CreateTriggerSkill{
	name = "#characteristic_qianrurenwu",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if player:getKingdom() == "mofuf" then return false end
		for _, p in sgs.qlist(room:getAllPlayers()) do
			if p:getKingdom() == "mofuf" then
				room:sendCompulsoryTriggerLog(player, "characteristic_qianrurenwu")	--显示锁定技发动
				local old_kingdom = player:getKingdom()
				room:setPlayerProperty(player, "kingdom", sgs.QVariant("mofuf"))
				local log = sgs.LogMessage()
				log.type = "#ChangeKingdom"
				log.arg = old_kingdom
				log.arg2 = "mofuf"
				log.from = player
				log.to:append(player)
				room:sendLog(log)	--发送信息框消息
				return false
			end
		end
	end,
}
characteristic_qianrurenwu_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_qianrurenwu_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_qianrurenwu_state)
bailin_fujianshuimo:addSkill(characteristic_qianrurenwu)
bailin_fujianshuimo:addRelateSkill("characteristic_qianrurenwu_state")

sgs.LoadTranslationTable{
	["characteristic_qianrurenwu"] = "潜入任务",
	["#characteristic_qianrurenwu"] = "潜入任务",
	["characteristic_qianrurenwu_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_qianrurenwu_state"] = "<font color='#DAA520'><b>潜入任务</b><br/>游戏开始时，若场上有MOFU-F势力角色，你将势力改为MOFU-F。</font>",
	["$characteristic_qianrurenwu_state"] = "",
}

--------------------------------------------------
--穹灵金雀 苍宇翎
--设计者：萌龙少主
--------------------------------------------------

cangyuling_qionglingjinque = sgs.General(extension,"cangyuling_qionglingjinque","niya","4")

sgs.LoadTranslationTable{
	["cangyuling_qionglingjinque"] = "苍宇翎",
	["&cangyuling_qionglingjinque"] = "苍宇翎",
	["#cangyuling_qionglingjinque"] = "穹灵金雀",
	["$cangyuling_qionglingjinque"] = "简单",
	["designer:cangyuling_qionglingjinque"] = "萌龙少主",
	["cv:cangyuling_qionglingjinque"] = "",
	["illustrator:cangyuling_qionglingjinque"] = "",
	["~cangyuling_qionglingjinque"] = "",
}

--------------------------------------------------
--灵羽
--------------------------------------------------

lingyu_card = sgs.CreateSkillCard{
	name = "lingyu",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local cost_card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:moveCardsInToDrawpile(source, cost_card, self:objectName(), -1, true)
		if not SkillNullify(source, self:objectName()) then
			local target = targets[1]
			
			--if true then
				local card_id = room:drawCard()
				local card = sgs.Sanguosha:getCard(card_id)
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DRAW, source:objectName(), self:objectName(), "")
				room:obtainCard(source, card, reason, true)
				room:getThread():delay(250)
				if room:getCardOwner(card_id) == source then
					room:showCard(source, card_id, nil, true, false)	--不触发展示时机
				end
				if card:getSuit() == cost_card:getSuit() then
					room:getThread():delay(250)
					local do_damage = sgs.DamageStruct(self:objectName(), source, target)
					do_damage.nature = sgs.DamageStruct_Thunder
					room:damage(do_damage)
				end
				if card:getNumber() == cost_card:getNumber() then
					room:getThread():delay(250)
					local do_damage = sgs.DamageStruct(self:objectName(), source, target)
					do_damage.nature = sgs.DamageStruct_Fire
					room:damage(do_damage)
				end
				if card:getId() == cost_card:getId() then
					room:getThread():delay(250)
					local do_damage = sgs.DamageStruct(self:objectName(), source, target)
					do_damage.nature = sgs.DamageStruct_Ice
					room:damage(do_damage)
				end
			--end
		end
	end
}
lingyu = sgs.CreateViewAsSkill{
	name = "lingyu",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return not sgs.Self:isJilei(to_select) and not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = lingyu_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#lingyu") < 1
	end
}

cangyuling_qionglingjinque:addSkill(lingyu)

sgs.LoadTranslationTable{
	["lingyu"] = "灵羽",
	[":lingyu"] = "出牌阶段限一次，你可以<font color='#007979'>将一张手牌返回牌堆</font>并指定一名其他角色，<font color='#A9A9A9'>发动此技能</font>，你<font color='#977C00'>摸一张牌</font>，若你以此法<font color='#007979'>失去</font>和<font color='#977C00'>获得</font>的牌：<br/><font color='#9400D3'>花色相同</font> 你对其造成1点雷电伤害；<br/><font color='#9400D3'>点数相同</font> 你对其造成1点火焰伤害；<br/><font color='#9400D3'>同一张牌</font> 你对其造成1点冰霜伤害。",
	["$lingyu"] = "",
	["^lingyu"] = "操作提示：<br/>选择一张牌→选择一名角色→确定",
}

--------------------------------------------------
--俐齿伶牙 步玎
--设计者：
--------------------------------------------------

buding_lichilingya = sgs.General(extension,"buding_lichilingya","niya","3",false)

sgs.LoadTranslationTable{
	["buding_lichilingya"] = "幼步玎",
	["&buding_lichilingya"] = "步玎",
	["#buding_lichilingya"] = "俐齿伶牙",
	["$buding_lichilingya"] = "简单",
	["designer:buding_lichilingya"] = "月音风源",
	["cv:buding_lichilingya"] = "",
	["illustrator:buding_lichilingya"] = "",
	["~buding_lichilingya"] = "",
}

--------------------------------------------------
--无忌
--------------------------------------------------

function refresh_wuji_buding_mark(player, set_num)
	local suits = {}
	if player:getMark("wuji_buding_suit_heart") > 0 then
		table.insert(suits, "heart_char")
	end
	if player:getMark("wuji_buding_suit_diamond") > 0 then
		table.insert(suits, "diamond_char")
	end
	if player:getMark("wuji_buding_suit_spade") > 0 then
		table.insert(suits, "spade_char")
	end
	if player:getMark("wuji_buding_suit_club") > 0 then
		table.insert(suits, "club_char")
	end
	player:getRoom():setPlayerMark(player, "&wuji_buding+"..table.concat(suits, "+"), set_num)
end
wuji_buding = sgs.CreateTriggerSkill{
	name = "wuji_buding",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and not use.card:isKindOf("SkillCard") then
				local suits = {"heart","diamond","spade","club"}
				local suit_str = use.card:getSuitString()
				if suit_str and suit_str ~= "" and table.contains(suits, suit_str) and player:getMark("wuji_buding_suit_"..suit_str) == 0 then
					refresh_wuji_buding_mark(player, 0)
					room:setPlayerMark(player, "wuji_buding_suit_"..suit_str, 1)
					refresh_wuji_buding_mark(player, 1)
					local count = player:getMark("wuji_buding_suit_heart") + player:getMark("wuji_buding_suit_diamond") + player:getMark("wuji_buding_suit_spade") + player:getMark("wuji_buding_suit_club")
					if count == 3 then
						room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
						player:drawCards(1, self:objectName())
					elseif count == 4 then
						room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
						
						refresh_wuji_buding_mark(player, 0)
						room:setPlayerMark(player, "wuji_buding_suit_heart", 0)
						room:setPlayerMark(player, "wuji_buding_suit_diamond", 0)
						room:setPlayerMark(player, "wuji_buding_suit_spade", 0)
						room:setPlayerMark(player, "wuji_buding_suit_club", 0)
						
						local targets = sgs.SPlayerList()
						for _, p in sgs.qlist(room:getAlivePlayers()) do
							if --[[SkillCanTarget(p, player, self:objectName()) and]] player:canEffect(p, self:objectName()) then
								targets:append(p)
							end
						end
						if not targets:isEmpty() then
							local target = room:askForPlayerChosen(player, targets, self:objectName(), "@wuji_buding_ask", false, false)
							if target then
								room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
								room:damage(sgs.DamageStruct(self:objectName(), player, target, 1, sgs.DamageStruct_Normal))
							end
						end
					end
				end
			end
			return false
		end
	end
}

buding_lichilingya:addSkill(wuji_buding)

sgs.LoadTranslationTable{
	["wuji_buding"] = "无忌",
	[":wuji_buding"] = "锁定技，你使用牌结算结束后，若此牌花色未记录，记录之，若你已记录：<br/><font color='#9400D3'>三种花色</font>，摸一张牌；<br/><font color='#9400D3'>四种花色</font>，清除记录，对一名角色造成1点伤害。",
	["$wuji_buding"] = "",
	["@wuji_buding_ask"] = "请对一名角色造成1点伤害",
}

--------------------------------------------------
--角色特性：还是小时候可爱……
--------------------------------------------------

characteristic_xiaoshihoukeai = sgs.CreateTriggerSkill{
	name = "#characteristic_xiaoshihoukeai",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			if player:askForSkillInvoke("luck_card", sgs.QVariant("choice:")) then
				local return_ids = sgs.IntList()
				for _,card in sgs.qlist(player:getHandcards()) do
					return_ids:append(card:getId())
				end
				local N = return_ids:length()
				if N > 0 then
					room:shuffleIntoDrawPile(player, return_ids, "luck_card", false)
					player:drawCards(N, "luck_card")
				end
			end
		end
	end,
}
characteristic_xiaoshihoukeai_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_xiaoshihoukeai_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_xiaoshihoukeai_state)
buding_lichilingya:addSkill(characteristic_xiaoshihoukeai)
buding_lichilingya:addRelateSkill("characteristic_xiaoshihoukeai_state")

sgs.LoadTranslationTable{
	["characteristic_xiaoshihoukeai"] = "还是小时候可爱……",
	["#characteristic_xiaoshihoukeai"] = "还是小时候可爱……",
	["characteristic_xiaoshihoukeai_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_xiaoshihoukeai_state"] = "<font color='#DAA520'><b>还是小时候可爱……</b><br/>游戏开始时，你可以使用一次手气卡。</font>",
	["$characteristic_xiaoshihoukeai_state"] = "",
	["luck_card:choice"] = "你想使用手气卡吗？",
}

--------------------------------------------------
--称号太长我不写了 爽哥
--设计者：
--------------------------------------------------

ywwuyi = sgs.General(extension,"ywwuyi","niya","4",true,true,true)

sgs.LoadTranslationTable{
	["ywwuyi"] = "爽哥",
	["&ywwuyi"] = "爽哥",
	["#ywwuyi"] = "真主在大地上的影子，真主使者的继承人，哈里发，奥斯曼最高统治者，众苏丹之苏丹，众可汗之可汗，两圣地之仆，罗马之凯撒，君士坦丁堡、亚德里安堡和布尔萨三城之皇帝，大马士革和开罗之苏丹，巴格达、阿勒颇、巴士拉、摩苏尔、伊拉克、阿塞拜疆、格鲁吉亚、柏柏尔、切尔克斯、鞑靼、库尔德、的黎波里、塞浦路斯、希腊、莫里亚、鲁米尼亚、波斯尼亚、阿尔巴尼亚诸地之国王和苏丹。这么长的称号才适合我。",
	["$ywwuyi"] = "一般",
	["designer:ywwuyi"] = "月音风源",
	["cv:ywwuyi"] = "",
	["illustrator:ywwuyi"] = "",
	["unlock:ywwuyi"] = "使用Nia在一次“抚育”结算中令至少两名角色因“抚育”而弃置点数为1/5/6的牌",
	["~ywwuyi"] = "",
}

ywwuyi:setBonus(true)	--设为奖励角色

--------------------------------------------------
--涉世
--------------------------------------------------

sheshi = sgs.CreateTriggerSkill{
	name = "sheshi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardFinished and player:isFemale() then
			local use = data:toCardUse()
			if not use.card or (use.card:isVirtualCard() and use.card:subcardsLength() == 0) then return false end
			
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if not use.to:isEmpty() and use.to:contains(myself) then
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					local subcards = sgs.IntList()
					if use.card:isVirtualCard() then
						subcards = use.card:getSubcards()
					else
						subcards:append(use.card:getId())
					end
					for _,cid in sgs.qlist(subcards) do
						if room:getCardPlace(cid) == sgs.Player_Discard or room:getCardPlace(cid) == sgs.Player_PlaceTable or room:getCardPlace(cid) == sgs.Player_PlaceEquip or room:getCardPlace(cid) == sgs.Player_PlaceDelayedTrick then
							dummy:addSubcard(cid)
						end
					end
					if dummy:subcardsLength() > 0 then
						room:sendCompulsoryTriggerLog(myself, self:objectName())	--显示锁定技发动
						if not myself:isKongcheng() then
							room:throwCard(myself:getRandomHandCard(), sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, myself:objectName(), self:objectName(), nil), myself)
						end
						myself:obtainCard(dummy, true)
						if dummy:getSuit() == sgs.Card_Heart then
							room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
							--myself:drawCards(1, self:objectName())
							player:drawCards(1, self:objectName())
						end
					end
					dummy:deleteLater()
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

ywwuyi:addSkill(sheshi)

sgs.LoadTranslationTable{
	["sheshi"] = "涉世",
	[":sheshi"] = "锁定技，其他女性角色使用的牌结算结束后，若你为此牌目标之一，你弃置一张随机手牌，获得之，若之为红桃牌则其摸一张牌。",
	["$sheshi"] = "",
}

--------------------------------------------------
--辉金
--------------------------------------------------

local blonde_character = {"ywwuyi", "hanazono_serena", "shengge_wuxiugewu", "leidi_cuilianzhiyuan", "youte_lianxinmonv", "shayin_linglongyemo", "ciyuanjiang_mengxinyindaoyuan", "miaotianmiye_miaomiaoshenguan", "sabimeng_bimengjushou", "shayue_fanqietianshi"}

huijin_distance = sgs.CreateDistanceSkill{
	name = "#huijin_distance",
	correct_func = function(self, from, to)
		if from:hasSkill("huijin") then
			return -from:getMark("&huijin!")
		end
	end
}
huijin = sgs.CreateTriggerSkill{
	name = "huijin",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardUsed, sgs.CardResponded},
	on_trigger = function(self, event, player, data, room)
		if (event == sgs.CardUsed or event == sgs.CardResponded) then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and not card:isKindOf("SkillCard") and (card:getNumber() == 11 or card:getNumber() == 12 or card:getNumber() == 13) then
				local X = 0
				for _, p in sgs.qlist(room:getAlivePlayers()) do
					if table.contains(blonde_character, p:getGeneralName()) then
						X = X + 1
					end
				end
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				player:drawCards(X, self:objectName())
				room:addPlayerMark(player, "&huijin!", 1)
			end
		end
	end
}
table.insert(turn_end_clear_mark, "&huijin!")	--回合结束清除标记

ywwuyi:addSkill(huijin)
ywwuyi:addSkill(huijin_distance)

sgs.LoadTranslationTable{
	["huijin"] = "辉金",
	["#huijin_distance"] = "辉金",
	[":huijin"] = "锁定技，你使用点数为J/Q/K的牌时，你摸X张牌，本回合你→其他角色 距离－1。（X为在场<u>金发美少女</u>角色数）<br/><br/><font color='#008B8B'>金发美少女：<s> 堕天使芙蓉 </s>爽哥、花園セレナ、笙歌、使魔蕾蒂、尤特、纱音、次元酱、喵田弥夜、萨比萌、沙月</font>",
	["$huijin"] = "",
}

--------------------------------------------------
--萌新引导员 次元酱
--设计者：萌龙少主
--------------------------------------------------

ciyuanjiang_mengxinyindaoyuan = sgs.General(extension,"ciyuanjiang_mengxinyindaoyuan","chaociyuan","4",false)

sgs.LoadTranslationTable{
	["ciyuanjiang_mengxinyindaoyuan"] = "次元酱",
	["&ciyuanjiang_mengxinyindaoyuan"] = "次元酱",
	["#ciyuanjiang_mengxinyindaoyuan"] = "萌新引导员",
	["$ciyuanjiang_mengxinyindaoyuan"] = "萌新",
	["designer:ciyuanjiang_mengxinyindaoyuan"] = "萌龙少主",
	["cv:ciyuanjiang_mengxinyindaoyuan"] = "",
	["illustrator:ciyuanjiang_mengxinyindaoyuan"] = "",
	["~ciyuanjiang_mengxinyindaoyuan"] = "",
}

--------------------------------------------------
--次元共振
--------------------------------------------------

ciyuangongzhen = sgs.CreateTriggerSkill{
	name = "ciyuangongzhen" ,
	events = {sgs.EventPhaseStart} ,
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() == sgs.Player_Finish and player:getHandcardNum() < player:getHp() then
			local choice = room:askForChoice(player, self:objectName().."+ciyuangongzhen_choice_log", "ciyuangongzhen_drawcard+ciyuangongzhen_discard+cancel")	--如果选项列表有多个选项，那么执行askForChoice
			if choice ~= "cancel" and choice ~= "" then
				local log = sgs.LogMessage()
				log.type = "#ciyuangongzhen"
				log.from = player
				log.arg = self:objectName()
				log.arg2 = choice
				for _,p in sgs.qlist(room:getAllPlayers()) do
					if (p:objectName() == player:objectName() or p:isAdjacentTo(player)) and player:canEffect(p, self:objectName()) then
						room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						log.to:append(p)
						room:setPlayerMark(p, "ciyuangongzhen", 1)		--用标记可以防止上下家是同一人被重复计算
					end
				end
				room:sortByActionOrder(log.to)
				room:sendLog(log)	--发送信息框消息
				room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
				if SkillNullify(player, self:objectName()) then		--发动被无效，清理标记后中断
					for _,p in sgs.qlist(room:getAllPlayers()) do
						room:setPlayerMark(p, "ciyuangongzhen", 0)
					end
					return false
				end
				if choice == "ciyuangongzhen_discard" then
					player:getRoom():broadcastSkillInvoke(self:objectName(), 2) --播放配音
					for _,p in sgs.qlist(room:getAllPlayers()) do
						if p:getMark("ciyuangongzhen") > 0 then
							room:setPlayerMark(p, "ciyuangongzhen", 0)
							--if p:objectName() ~= player:objectName() then
								if not p:isNude() and player:canDiscard(p, "he") then
									local card_id = room:askForCardChosen(player, p, "he", self:objectName(), false, sgs.Card_MethodDiscard)
									room:throwCard(card_id, p, player)
								end
							--end
						end
					end
				else
					player:getRoom():broadcastSkillInvoke(self:objectName(), 1) --播放配音
					for _,p in sgs.qlist(room:getAllPlayers()) do
						if p:getMark("ciyuangongzhen") > 0 then
							room:setPlayerMark(p, "ciyuangongzhen", 0)
							p:drawCards(1, self:objectName())
						end
					end
				end
				
				room:getThread():delay(500) --延迟
			end
		end
	end
}

ciyuanjiang_mengxinyindaoyuan:addSkill(ciyuangongzhen)

sgs.LoadTranslationTable{
	["ciyuangongzhen"] = "次元共振",
	[":ciyuangongzhen"] = "结束阶段，若你的手牌数小于体力值，你可以<font color='#A9A9A9'>发动此技能</font>，令你和与你"..WordState("相邻", word_near_str).."的角色各摸一张牌或各被你破坏一张牌。",
	--["@ciyuangongzhen"] = "请选择令你和上下家摸牌或弃牌<br />操作提示：<br />①选择你弃置的牌→确定<br />②直接点击 取消 摸牌",
	["#ciyuangongzhen"] = "%from 对 %to 发动 “%arg” ，选择了： %arg2",
	["ciyuangongzhen_drawcard"] = "摸一张牌",
	[":ciyuangongzhen_drawcard"] = "你与相邻的角色各摸一张牌",
	["ciyuangongzhen_discard"] = "破坏一张牌",
	[":ciyuangongzhen_discard"] = "破坏你和相邻角色的各一张牌",
	["ciyuangongzhen_choice_log"] = "你可以选择一项，\n你和相邻的角色依次执行",
	["$ciyuangongzhen1"] = "",
	["$ciyuangongzhen2"] = "",
}

--------------------------------------------------
--贤鸭蛋 诗小雅
--设计者：NSX
--------------------------------------------------

shixiaoya_xianyadan = sgs.General(extension,"shixiaoya_xianyadan","chaociyuan","3",false)

sgs.LoadTranslationTable{
	["shixiaoya_xianyadan"] = "诗小雅",
	["&shixiaoya_xianyadan"] = "诗小雅",
	["#shixiaoya_xianyadan"] = "贤鸭蛋",
	["$shixiaoya_xianyadan"] = "进阶",
	["designer:shixiaoya_xianyadan"] = "NSX",
	["cv:shixiaoya_xianyadan"] = "",
	["illustrator:shixiaoya_xianyadan"] = "",
	["~shixiaoya_xianyadan"] = "",
}

--------------------------------------------------
--浅唱
--------------------------------------------------

local not_damage_cards = {"amazing_grace", "collateral", "dismantlement", "ex_nihilo", "fudichouxin", "god_salvation", "iron_chain", "snatch"}

qianchang_card = sgs.CreateSkillCard{
	name = "qianchang",
	target_fixed = true,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	on_use = function(self, room, source, targets)
		local choices = {}
		for _,name in ipairs(not_damage_cards) do
			local dummy_card = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, 0)
			for _,card in sgs.qlist(source:getHandcards()) do
				dummy_card:addSubcard(card)
			end
			
			for _, p in sgs.qlist(room:getAlivePlayers()) do
				if dummy_card:isAvailable(source) and not room:isProhibited(source, p, dummy_card) and dummy_card:targetFilter(sgs.PlayerList(), p, source) then
					table.insert(choices, name)
					break
				end
			end
			dummy_card:deleteLater()
		end
		
		if #choices > 0 then
			local choice = room:askForChoice(source, self:objectName(), table.concat(choices, "+"))
			ChoiceLog(source, choice)
			room:setPlayerMark(source, "qianchangcard_"..choice, 1)
			room:askForUseCard(source, "@@qianchang!", "@qianchang_useCard:"..choice)
			room:setPlayerMark(source, "qianchangcard_"..choice, 0)
		else
			local log = sgs.LogMessage()
			log.from = player
			log.type = "#qianchang_error"
			log.arg = "qianchang"
			room:sendLog(log)	--显示技能发动提示信息
		end
	end
}
qianchang_vs = sgs.CreateZeroCardViewAsSkill{
	name = "qianchang",
	response_pattern = "@@qianchang!",
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@qianchang!" then
			local name = ""
			for _, mark in sgs.list(sgs.Self:getMarkNames()) do
				if string.find(mark, "qianchangcard_") and sgs.Self:getMark(mark) > 0 then	--截取"qianchangcard_"后面的部分作为牌名
					name = string.sub(mark, 15, -1)
					break
				end
			end
			if name and name ~= "" then
				local ncard = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, 0)
				for _,card in sgs.qlist(sgs.Self:getHandcards()) do
					ncard:addSubcard(card:getId())
				end
				ncard:setSkillName("_"..self:objectName())
				return ncard
			end
		else
			return qianchang_card:clone()
		end
	end,
	enabled_at_play = function(self, player)
		if player:usedTimes("#qianchang") < 1 and player:getMark("qianchang_used") == 0 and not player:isKongcheng() then
			for _,name in ipairs(not_damage_cards) do
				local dummy_card = sgs.Sanguosha:cloneCard(name, sgs.Card_NoSuit, 0)
				for _,card in sgs.qlist(player:getHandcards()) do
					dummy_card:addSubcard(card)
				end
				if dummy_card:isAvailable(player) then
					dummy_card:deleteLater()
					return true
				end
				dummy_card:deleteLater()
			end
		end
		return false
	end
}
qianchang = sgs.CreateTriggerSkill{
	name = "qianchang",
	view_as_skill = qianchang_vs,
	global = true,
	events = {sgs.Damaged, sgs.PreCardUsed, sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		--[[if event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.card and damage.card:getSkillName() == "qianchang" and not damage.card:isKindOf("SkillCard") and damage.to and damage.to:isAlive() then
				room:setPlayerMark(damage.to, "qianchang_damage", 1)
				room:setCardFlag(damage.card, "qianchang_damaged")
			end
		else]]if event == sgs.PreCardUsed then
			local card = data:toCardUse().card
			if card then
				if card:getSkillName() == "qianchang" and not card:isKindOf("SkillCard") then
					room:setPlayerMark(player, "qianchang_used", 1)
					--if player:getPhase() == sgs.Player_Play then
					--	room:setPlayerFlag(player, "Global_PlayPhaseTerminated")
					--end
				end
			end
		--[[elseif event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and use.card:getSkillName() == "qianchang" and not use.card:isKindOf("SkillCard") then
				--local drawed = false
				for _, p in sgs.qlist(room:getAllPlayers()) do
					if p:getMark("qianchang_damage") > 0 then
						room:setPlayerMark(p, "qianchang_damage", 0)
						p:drawCards(1, self:objectName())
						drawed = true
					end
				end
				if not use.card:hasFlag("qianchang_damaged") and use.from then
					use.from:drawCards(1, self:objectName())
				end
			end]]
		end
	end
}
--清除标记确保不会有标记残留
table.insert(play_end_clear_mark_prefix, "qianchangcard_")	--出牌结束清除指定前缀的标记
--table.insert(play_end_clear_mark, "qianchang_damage")	--出牌结束清除标记
table.insert(play_end_clear_mark, "qianchang_used")	--出牌结束清除标记

shixiaoya_xianyadan:addSkill(qianchang)

sgs.LoadTranslationTable{
	["qianchang"] = "浅唱",
	[":qianchang"] = "出牌阶段限一次，你可以将所有手牌当一张非伤害类普通锦囊牌使用。",
	["$qianchang1"] = "",
	["$qianchang2"] = "",
	["@qianchang_useCard"] = "请将所有手牌当 %src 使用",
	["~qianchang"] = "选择目标→点击“确定”",
	["#qianchang_error"] = "%from 不能通过“%arg”视为使用任何牌",
}

--------------------------------------------------
--明贤
--------------------------------------------------

mingxian = sgs.CreateTriggerSkill{
	name = "mingxian",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.TargetConfirmed},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetConfirmed then
			local use = data:toCardUse()
			if use.card and use.card:isKindOf("Slash") and (use.card:isRed() or use.card:isKindOf("ThunderSlash")) and use.from and use.from:isAlive() and use.to and use.to:contains(player) and use.from:objectName() ~= player:objectName() and player:canEffect(use.from, self:objectName()) then
				room:broadcastSkillInvoke(self:objectName())	--播放配音
				room:doAnimate(1, player:objectName(), use.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				local _data = sgs.QVariant()
				_data:setValue(player)
				local card = room:askForCard(use.from, "Slash|.|.|hand", "@mingxian_give:"..player:objectName(), _data, sgs.Card_MethodNone, use.from, false, self:objectName())
				if card then
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, use.from:objectName(), player:objectName(), self:objectName(), "")
					room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, true)
				else
					local nullified_list = use.nullified_list	--无效目标列表
					table.insert(nullified_list, player:objectName())
					use.nullified_list = nullified_list
					data:setValue(use)
				end
			end
		end
	end
}

shixiaoya_xianyadan:addSkill(mingxian)

sgs.LoadTranslationTable{
	["mingxian"] = "明贤",
	[":mingxian"] = "锁定技，你成为其他角色使用红色【杀】或雷【杀】的目标后，该角色须交给你一张【杀】，否则此牌对你无效。",
	["@mingxian_give"] = "请交给 %src 一张杀，否则此【杀】对其无效",
	["$mingxian"] = "",
}

--------------------------------------------------
--狮心鸽音 绮良Kira
--设计者：--
--------------------------------------------------

qiliang_shixingeyin = sgs.General(extension,"qiliang_shixingeyin","chaociyuan","4",false)

sgs.LoadTranslationTable{
	["qiliang_shixingeyin"] = "绮良Kira",
	["&qiliang_shixingeyin"] = "绮良",
	["#qiliang_shixingeyin"] = "狮心鸽音",
	["$qiliang_shixingeyin"] = "萌新",
	["designer:qiliang_shixingeyin"] = "空月之羽",
	["cv:qiliang_shixingeyin"] = "",
	["illustrator:qiliang_shixingeyin"] = "",
	["~qiliang_shixingeyin"] = "",
}

--------------------------------------------------
--鸣光
--------------------------------------------------

mingguangvs = sgs.CreateViewAsSkill{
	name = "mingguang",
	n = 2,
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return (#selected < 2)
	end,
	view_as = function(self, cards)
		if #cards ~= 2 then return nil end
		local new_card
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_PLAY then
			new_card = sgs.Sanguosha:cloneCard("Slash", sgs.Card_SuitToBeDecided, 0)
		elseif sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE or sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE then
			local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
			if pattern == "jink" then
				new_card = sgs.Sanguosha:cloneCard("jink", sgs.Card_SuitToBeDecided, 0)
			elseif pattern == "slash" then
				new_card = sgs.Sanguosha:cloneCard("slash", sgs.Card_SuitToBeDecided, 0)
			end
		end
		new_card:setSkillName(self:objectName())
		new_card:addSubcard(cards[1])
		new_card:addSubcard(cards[2])
		return new_card
	end,
	enabled_at_play = function(self, player)
		return (player:getCardCount(true) >= 2) and sgs.Slash_IsAvailable(player)
	end,
	enabled_at_response = function(self, player, pattern)
		return (player:getCardCount(true) >= 2) and (pattern == "slash" or pattern == "jink")
	end
}
mingguang = sgs.CreateTriggerSkill{
	name = "mingguang",
	events = {sgs.Damage, sgs.CardFinished, sgs.CardResponded},
	view_as_skill = mingguangvs,
	on_trigger = function(self, event, player, data)
		local room = player:getRoom()
		if event == sgs.Damage then
			local damage = data:toDamage()
			if damage.card and damage.card:isKindOf("Slash") and damage.card:getSkillName() == "mingguang" and damage.damage > 0 then
				room:setCardFlag(damage.card, "mingguang_damaged")
			end
		elseif event == sgs.CardFinished or event == sgs.CardResponded then
			local card
			local others = sgs.SPlayerList()
			if event == sgs.CardFinished and not data:toCardUse().card:isKindOf("Jink") then	--杀的使用
				card = data:toCardUse().card
				for _,p in sgs.qlist(data:toCardUse().to) do
					others:append(p)
				end
			elseif event == sgs.CardResponded --[[and not data:toCardResponse().m_isUse]] then	--杀的打出，闪的使用打出
				card = data:toCardResponse().m_card
				others:append(data:toCardResponse().m_who)
			end
			if card and (card:isKindOf("Slash") or card:isKindOf("Jink")) and card:getSkillName() == "mingguang" then
				if card:hasFlag("mingguang_damaged") then
					room:setCardFlag(card, "-mingguang_damaged")
					room:addPlayerHistory(player, card:getClassName(), -1)
				elseif not others:isEmpty() then
					--player:drawCards(1, self:objectName())
					room:sortByActionOrder(others)
					for _,p in sgs.qlist(others) do
						if p:isAlive() and player:canDiscard(p, "he") and player:canEffect(p, self:objectName()) then
							room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
							local card_id = room:askForCardChosen(player, p, "he", self:objectName(), false, sgs.Card_MethodDiscard)
							room:throwCard(card_id, p, player)
						end
					end
				end
			end
		end
		return false
	end
}

qiliang_shixingeyin:addSkill(mingguang)

sgs.LoadTranslationTable{
	["mingguang"] = "鸣光",
	[":mingguang"] = "你可以将两张牌当【杀】或【闪】使用或打出，然后若之未造成伤害则你破坏对方一张牌，否则此牌不计入出牌阶段的使用次数。",
	["$mingguang"] = "",
}

--------------------------------------------------
--角色特性：小狮子应援队
--------------------------------------------------

characteristic_xiaoshiziyingyuandui = sgs.CreateTriggerSkill{
	name = "#characteristic_xiaoshiziyingyuandui",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			for id = 0,500,1 do
				if sgs.Sanguosha:getCard(id) then
					local card = sgs.Sanguosha:getCard(id)
					if card and card:isKindOf("SilverLion") and card:objectName() == "silver_lion" and room:getCardPlace(id) == sgs.Player_PlaceTable and card:getSuit() == sgs.Card_Club and table.contains({2,3,4}, card:getNumber()) then
						room:moveCardsInToDrawpile(player, card, "", -1, true)
					end
				end
			end
		end
	end,
}
characteristic_xiaoshiziyingyuandui_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_xiaoshiziyingyuandui_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_xiaoshiziyingyuandui_state)
qiliang_shixingeyin:addSkill(characteristic_xiaoshiziyingyuandui)
qiliang_shixingeyin:addRelateSkill("characteristic_xiaoshiziyingyuandui_state")

sgs.LoadTranslationTable{
	["characteristic_xiaoshiziyingyuandui"] = "小狮子应援队",
	["#characteristic_xiaoshiziyingyuandui"] = "小狮子应援队",
	["characteristic_xiaoshiziyingyuandui_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_xiaoshiziyingyuandui_state"] = "<font color='#DAA520'><b>小狮子应援队</b><br/>游戏开始时，将3张【白银狮子】加入牌堆。</font>",
	["$characteristic_xiaoshiziyingyuandui_state"] = "",
}

--------------------------------------------------
--地平线上的记录者 木糖纯
--设计者：月音风源
--------------------------------------------------

mutangchun_recorder = sgs.General(extension,"mutangchun_recorder","chaociyuan","3",false)

sgs.LoadTranslationTable{
	["mutangchun_recorder"] = "木糖纯",
	["&mutangchun_recorder"] = "木糖纯",
	["#mutangchun_recorder"] = "地平线上的记录者",
	["$mutangchun_recorder"] = "进阶",
	["designer:mutangchun_recorder"] = "月音风源",
	["cv:mutangchun_recorder"] = "",
	["illustrator:mutangchun_recorder"] = "",
	["~mutangchun_recorder"] = "",
}

--------------------------------------------------
--纪实
--------------------------------------------------

jishi_M = sgs.CreateTriggerSkill{
	name = "jishi_M",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardUsed, sgs.CardResponded, sgs.EventPhaseEnd, sgs.CardFinished, sgs.PreCardUsed, sgs.PreCardResponded},
	global = true,
	on_trigger = function(self, event, player, data, room)
		local current = room:getCurrent()
		if (event == sgs.CardUsed or event == sgs.CardResponded) and current:getPhase() == sgs.Player_Play --[[and current:objectName() ~= player:objectName()]] then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			else
				card = data:toCardResponse().m_card
			end
			if card and not card:isKindOf("SkillCard") then
				local jishi_M_card_ids = {}
				if current:getTag("jishi_M_tag") then
					jishi_M_card_ids = current:getTag("jishi_M_tag"):toString():split("+")
				end
				if card:getId() ~= -1 then
					table.insert(jishi_M_card_ids, card:getId())
				elseif card:subcardsLength() > 0 then
					for _,cid in sgs.qlist(card:getSubcards()) do
						table.insert(jishi_M_card_ids, cid)
					end
				end
				current:setTag("jishi_M_tag", sgs.QVariant(table.concat(jishi_M_card_ids,"+")))
			end
		elseif event == sgs.EventPhaseEnd and player and player:isAlive() and player:getPhase() == sgs.Player_Play and player:getTag("jishi_M_tag") then
			local jishi_M_card_ids = player:getTag("jishi_M_tag"):toString():split("+")
			player:removeTag("jishi_M_tag")
			if player:hasSkill(self:objectName()) and jishi_M_card_ids and #jishi_M_card_ids > 0 then
				local can_get_ids = sgs.IntList()
				for _,cid in ipairs(jishi_M_card_ids) do
					if room:getCardPlace(cid) == sgs.Player_DiscardPile then
						can_get_ids:append(cid)
					end
				end
				if can_get_ids:isEmpty() then return false end
				room:fillAG(can_get_ids, player)
				local id = room:askForAG(player, can_get_ids, true, self:objectName())
				room:clearAG(player)
				local card = sgs.Sanguosha:getCard(id)
				if card then
					local logg = sgs.LogMessage()
					logg.from = player
					logg.type = "#InvokeSkill"
					logg.arg = "jishi_M"
					room:sendLog(logg)	--显示技能发动提示信息
					room:notifySkillInvoked(player, "jishi_M")	--在武将牌上显示技能名
					if SkillNullify(player, self:objectName()) then		--询问技能无效化
						return false
					end
					room:setCardFlag(card, "&jishi_M")	--可见手牌下标
					player:obtainCard(card, true)
					room:setPlayerMark(player, "jishi_M_return_id_"..card:getEffectiveId(), 1)	--标记的清除耦合入标记清理者（离开手牌后清除）
					if not player:isNude() then
						room:askForDiscard(player, self:objectName(), 1, 1, false, true)
					end
				end
			end
		elseif event == sgs.PreCardUsed or event == sgs.PreCardResponded then
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			elseif event == sgs.PreCardResponded then
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and not card:isVirtualCard() and player:getMark("jishi_M_return_id_"..card:getEffectiveId()) > 0 and not card:isKindOf("SkillCard") then
				room:setPlayerMark(player, "jishi_M_using_id"..card:getEffectiveId(), 1)	--确保正常使用时标记不会被离手清除
			end
		elseif event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and not use.card:isVirtualCard() and player:getMark("jishi_M_return_id_"..use.card:getEffectiveId()) > 0 and room:getCardPlace(use.card:getEffectiveId()) ~= sgs.Player_DrawPile then
				room:setPlayerMark(player, "jishi_M_return_id_"..use.card:getEffectiveId(), 0)
				room:setPlayerMark(player, "jishi_M_using_id_"..use.card:getEffectiveId(), 0)
				
				--player:setFlags("Fake_Move")
				--local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_RECYCLE, player:objectName(), nil, "hide_log_skill", nil)	--源码修正：reason技能为hide_log_skill的移动不会发送提示信息
				--room:moveCardTo(use.card, player, sgs.Player_PlaceHand, reason, false, false)	--最后一个参数为真意味着多张牌会给观星框让玩家自行决定顺序
				--player:setFlags("-Fake_Move")
				
				local log = sgs.LogMessage()
				log.from = player
				log.type = "#jishi_M_log"
				log.arg = self:objectName()
				log.card_str = use.card:toString()
				room:sendLog(log)	--显示技能发动提示信息
				
				room:moveCardsInToDrawpile(player, use.card, "jishi_M", -1, true)
			end
		end
	end
}
table.insert(leave_hand_clear_flag, "&jishi_M")	--离手清除cardflag

mutangchun_recorder:addSkill(jishi_M)

sgs.LoadTranslationTable{
	["jishi_M"] = "纪实",
	[":jishi_M"] = "出牌阶段结束时，你可以<font color='#A9A9A9'>发动此技能</font>，从弃牌堆中获得一张本阶段内被使用或打出过的牌，弃置一张牌。<br/>以此法获得的牌被你以非转化方式使用后返回牌堆。",
	["$jishi_M"] = "",
	["#jishi_M_log"] = "%from 使用的 %card 因“%arg”被返回牌堆",
	["&jishi_M"] = "纪实",
	["^AG_jishi_M"] = "<b>纪实</b><br/>发动“纪实”：双击以选择一张牌获得之<br/>不发动“纪实”：直接点击确定",
}

--------------------------------------------------
--同我
--------------------------------------------------

tongwo = sgs.CreateTriggerSkill{
	name = "tongwo",
	frequency = sgs.Skill_Limited,
	limit_mark = "@tongwo",
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_NotActive and player:getMark("@tongwo") > 0 and player:isWounded() and player:getMark("@extra_turn") == 0 then
			if player:askForSkillInvoke(self:objectName(), data) then
				player:loseMark("@tongwo")
				room:doAnimate(2, "skill=EyeAnim:mutangchun.png", "")
				room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				room:getThread():delay(2500)
				player:gainAnExtraTurn()
			end
		end
		return false
	end
}

--mutangchun_recorder:addSkill(tongwo)

sgs.LoadTranslationTable{
	["tongwo"] = "同我",
	["@tongwo"] = "同我",
	[":tongwo"] = "限定技，你的回合结束后，若你已受伤，你可以执行一个额外回合。",
	["$tongwo1"] = "",
	["$tongwo2"] = "",
}

--------------------------------------------------
--同我（新）
--------------------------------------------------

function refresh_newtongwo_mark(player, set_num)
	local suits = {}
	if player:getMark("newtongwo_suit_heart") > 0 then
		table.insert(suits, "heart_char")
	end
	if player:getMark("newtongwo_suit_diamond") > 0 then
		table.insert(suits, "diamond_char")
	end
	if player:getMark("newtongwo_suit_spade") > 0 then
		table.insert(suits, "spade_char")
	end
	if player:getMark("newtongwo_suit_club") > 0 then
		table.insert(suits, "club_char")
	end
	player:getRoom():setPlayerMark(player, "&newtongwo+"..table.concat(suits, "+"), set_num)
end
newtongwo = sgs.CreateTriggerSkill{
	name = "newtongwo",
	events = {sgs.EventPhaseStart, sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			if player:getPhase() ~= sgs.Player_NotActive and move.to_place == sgs.Player_DiscardPile and move.card_ids:length() >= 1 then
				for _,id in sgs.qlist(move.card_ids) do
					local suit_str = sgs.Sanguosha:getCard(id):getSuitString()
					if suit_str and suit_str ~= "" and player:getMark("newtongwo_suit_"..suit_str) == 0 then
						refresh_newtongwo_mark(player, 0)
						room:setPlayerMark(player, "newtongwo_suit_"..suit_str, 1)
						refresh_newtongwo_mark(player, 1)
					end
				end
			end
		elseif event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Finish and player:getMark("newtongwo_suit_heart") > 0 and player:getMark("newtongwo_suit_diamond") > 0 and player:getMark("newtongwo_suit_spade") > 0 and player:getMark("newtongwo_suit_club") > 0 then
				if player:getMark("@extra_turn") == 0 and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					room:doAnimate(2, "skill=EyeAnim:mutangchun.png", "")
					room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
					room:getThread():delay(2500)
					player:gainAnExtraTurn()
					--room:setPlayerMark(player, "newtongwo_invoke", 1)
				end
			--elseif player:getPhase() == sgs.Player_NotActive and player:getMark("newtongwo_invoke") > 0 then
			--	room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			--	room:setPlayerMark(player, "newtongwo_invoke", 0)
			--	room:doAnimate(2, "skill=EyeAnim:mutangchun.png", "")
			--	room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
			--	room:getThread():delay(2500)
			--	player:gainAnExtraTurn()
			end
			return false
		end
	end
}
table.insert(turn_end_clear_mark_prefix, "&newtongwo")	--回合结束清除指定前缀的标记
table.insert(turn_end_clear_mark_prefix, "newtongwo_suit_")	--回合结束清除指定前缀的标记

mutangchun_recorder:addSkill(newtongwo)

sgs.LoadTranslationTable{
	["newtongwo"] = "同我",
	[":newtongwo"] = "结束阶段，若本回合进入弃牌堆的牌花色满四种，你可以<font color='#A9A9A9'>发动此技能</font>，执行一个额外回合。",
	["$newtongwo"] = "",
}

--------------------------------------------------
--览闻辩见 慕芸
--设计者：月音风源
--------------------------------------------------

muyun_lanwenbianjian = sgs.General(extension,"muyun_lanwenbianjian","chaociyuan","3",false)

sgs.LoadTranslationTable{
	["muyun_lanwenbianjian"] = "慕芸",
	["&muyun_lanwenbianjian"] = "慕芸",
	["#muyun_lanwenbianjian"] = "览闻辩见",
	["designer:muyun_lanwenbianjian"] = "月音风源",
	["cv:muyun_lanwenbianjian"] = "",
	["illustrator:muyun_lanwenbianjian"] = "",
	["~muyun_lanwenbianjian"] = "",
}

--------------------------------------------------
--情容
--------------------------------------------------

qingrong = sgs.CreateTriggerSkill{
	name = "qingrong",
	events = {sgs.EventPhaseStart, sgs.DamageCaused, sgs.DamageInflicted},
	frequency = sgs.Skill_NotFrequent,
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and (player and player:isAlive() and player:hasSkill(self:objectName())) and player:getPhase() == sgs.Player_Play then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getAlivePlayers()) do
				if not p:isKongcheng() and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			if not targets:isEmpty() then
				local target = room:askForPlayerChosen(player, targets, self:objectName(), "@qingrong_ask", true, true)
				if target and not SkillNullify(player, self:objectName()) then
					room:setPlayerMark(player, "qingrong_target_"..target:objectName(), 1)
					
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					for _, card in sgs.qlist(target:getHandcards()) do
						dummy:addSubcard(card)
					end
					if dummy:subcardsLength() > 0 then
						BanishCards_Subcards(player, target, dummy, "qingrong", true)
					end
					dummy:deleteLater()
				end
			end
		elseif event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage and damage.damage > 0 and damage.to and damage.to:isAlive() then
				if damage.nature == sgs.DamageStruct_Light then return false end
				if player:getMark("qingrong_target_"..damage.to:objectName()) > 0 then	--情容
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					local logg = sgs.LogMessage()
					logg.from = player
					logg.arg = self:objectName()
					logg.arg2 = damage.damage
					logg.type = "#qingrong_damage"
					logg.to:append(damage.to)
					room:sendLog(logg)	--显示技能发动提示信息
					room:setEmotion(damage.to, "skill_nullify")
					return true
				elseif player:getMark("liyuan_ling_target_"..damage.to:objectName()) > 0 then	--离缘
					room:sendCompulsoryTriggerLog(player, "liyuan_ling")	--显示锁定技发动
					local logg = sgs.LogMessage()
					logg.from = player
					logg.arg = "liyuan_ling"
					logg.arg2 = damage.damage
					logg.type = "#qingrong_damage"
					logg.to:append(damage.to)
					room:sendLog(logg)	--显示技能发动提示信息
					room:setEmotion(damage.to, "skill_nullify")
					return true
				elseif player:getMark("&motiao_using") > 0 then	--抹挑自肃（发动的回合只能造成1点伤害）
					local X = math.min(damage.damage, 1 - player:getMark("caused_damage_in_turn"))
					if X < damage.damage then
						room:sendCompulsoryTriggerLog(player, "motiao")	--显示锁定技发动
						if X > 0 then
							damage.damage = 1
							data:setValue(damage)
							return false
						else
							local logg = sgs.LogMessage()
							logg.from = player
							logg.arg = "motiao"
							logg.arg2 = damage.damage
							logg.type = "#qingrong_damage"
							logg.to:append(damage.to)
							room:sendLog(logg)	--显示技能发动提示信息
							room:setEmotion(damage.to, "skill_nullify")
							return true
						end
					end
				end
			end
		elseif event == sgs.DamageInflicted then	--借出去的部分（为了防止无来源伤害）
			local damage = data:toDamage()
			if damage and damage.damage > 0 and damage.to and damage.to:isAlive() then
				if damage.nature == sgs.DamageStruct_Light then return false end
				if damage.to:getMark("&shisu_protect") > 0 then		--时溯免伤
					room:sendCompulsoryTriggerLog(damage.to, "shisu")	--显示锁定技发动
					local logg = sgs.LogMessage()
					logg.from = damage.to
					logg.arg = "shisu"
					logg.arg2 = damage.damage
					if damage.from then
						logg.type = "#xuanwujia"
						logg.to:append(damage.from)
					else
						logg.type = "#xuanwujia_no_source"
					end
					room:sendLog(logg)	--显示技能发动提示信息
					room:setEmotion(damage.to, "skill_nullify")
					return true
				end
			end
		end
	end
}
table.insert(turn_end_banish_pile, "qingrong")	--除外直到回合结束
table.insert(turn_end_clear_mark_prefix, "qingrong_target_")	--回合结束清除指定前缀的标记

muyun_lanwenbianjian:addSkill(qingrong)

sgs.LoadTranslationTable{
	["qingrong"] = "情容",
	[":qingrong"] = "出牌阶段开始时，你可以指定一名有手牌的角色，<font color='#A9A9A9'>发动此技能</font>，将其手牌除外直到回合结束，本回合防止你对其造成的伤害。",
	["$qingrong"] = "",
	["@qingrong_ask"] = "你可以发动“情容”，指定一名角色，将其手牌除外一回合，本回合无法对其造成伤害",
	["qingrong_target"] = "情容",
	["#qingrong_damage"] = "由于“%arg”的效果，防止了 %from 对 %to 造成的 %arg2 点伤害",
}

--------------------------------------------------
--品生
--------------------------------------------------

pinsheng = sgs.CreateTriggerSkill{
	name = "pinsheng",
	events = {sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime and not room:getTag("FirstRound"):toBool() then
			local move = data:toMoveOneTime()
			if move.to and move.to:objectName() ~= player:objectName() and move.to_place == sgs.Player_PlaceHand and move.card_ids:length() >= 3 and player:canEffect(move.to, self:objectName()) then
				--local _data = sgs.QVariant()
				--_data:setValue(move.to)
				
				--Player類型轉至ServerPlayer
				local move_from
				local move_to
				for _,p in sgs.qlist(room:getAlivePlayers()) do
					if move.from and p:objectName() == move.from:objectName() then
						move_from = p
					end
					if move.to and p:objectName() == move.to:objectName() then
						move_to = p
					end
				end
				
				move_to:setFlags("pinsheng_AI")	--AI用
				if player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. move.to:objectName() .. ":" .. move.card_ids:length())) and not SkillNullify(player, self:objectName()) then
					
					room:doAnimate(1, player:objectName(), move_to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					
					local card_ids = sgs.IntList()
					local foot_notes = {}
					for _, id in sgs.qlist(move.card_ids) do
						if room:getCardOwner(id) and room:getCardOwner(id):objectName() == move_to:objectName() and room:getCardPlace(id) == sgs.Player_PlaceHand then
							card_ids:append(id)
							table.insert(foot_notes, move_to:getGeneralName().."+hand_area")
						end
					end
					
					--if not can_choose_ids:isEmpty() then
						room:fillAG(card_ids, player, sgs.IntList(), false, table.concat(foot_notes, "|"), true)
						local id1 = room:askForAG(player, card_ids, true, self:objectName())
						if id1 and id1 ~= -1 then
							player:obtainCard(sgs.Sanguosha:getCard(id1), false)
						end
					--end
					room:clearAG(player)
					
					if not player:isKongcheng() then
						local card = room:askForCard(player, ".|.|.|hand!", "#pinsheng_put", data, sgs.Card_MethodNone)
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
						room:moveCardTo(card, player, nil, sgs.Player_DrawPile, reason, false)
					end
				end
				move_to:setFlags("-pinsheng_AI")	--AI用
			end
		end
	end
}

muyun_lanwenbianjian:addSkill(pinsheng)

sgs.LoadTranslationTable{
	["pinsheng"] = "品生",
	[":pinsheng"] = "当一名其他角色获得<font color='#9400D3'>至少3张手牌</font>后，你可以<font color='#A9A9A9'>发动此技能</font>，观看并获得<font color='#9400D3'>其中</font>一张，然后将一张手牌置于牌堆顶。",
	["$pinsheng"] = "",
	["#pinsheng_put"] = "请将一张手牌置于牌堆顶",
	["pinsheng:choice"] = "%src 获得了 %dest 张手牌，你可以发动“品生”，获得这些牌中的一张，然后将一张手牌置于牌堆顶",
}

--------------------------------------------------
--翔鸾促弦 弦羽
--设计者：
--------------------------------------------------

xianyu_xiangluancuxian = sgs.General(extension,"xianyu_xiangluancuxian","chaociyuan","3",false)

sgs.LoadTranslationTable{
	["xianyu_xiangluancuxian"] = "弦羽",
	["&xianyu_xiangluancuxian"] = "弦羽",
	["#xianyu_xiangluancuxian"] = "翔鸾促弦",
	["$xianyu_xiangluancuxian"] = "萌新",
	["designer:xianyu_xiangluancuxian"] = "SunFlower、NSX",
	["cv:xianyu_xiangluancuxian"] = "",
	["illustrator:xianyu_xiangluancuxian"] = "",
	["~xianyu_xiangluancuxian"] = "",
}

--------------------------------------------------
--抹挑
--------------------------------------------------

motiao = sgs.CreateTriggerSkill{
	name = "motiao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecified, sgs.EventPhaseStart},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getPhase() == sgs.Player_Start then
			if room:askForSkillInvoke(player, self:objectName(), sgs.QVariant("choice:")) and not SkillNullify(player, self:objectName()) then
				room:setPlayerMark(player, "&motiao_using", 1)	--抹挑自肃处理部分耦合入情容
			end
		elseif event == sgs.TargetSpecified and player:getMark("&motiao_using") > 0 then
			local use = data:toCardUse()
			if use.card and not use.card:isKindOf("SkillCard") and use.to:contains(player) then
				--if player:askForSkillInvoke(self:objectName(), data) then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					room:broadcastSkillInvoke(self:objectName(), math.random(1,10))	--播放配音
					player:drawCards(1, self:objectName())
				--end
			end
		end
	end
}
table.insert(turn_end_clear_mark, "&motiao_using")

xianyu_xiangluancuxian:addSkill(motiao)

sgs.LoadTranslationTable{
	["motiao"] = "抹挑",
	["motiao_using"] = "抹挑",
	--[":motiao"] = "你于出牌阶段内使用牌指定自己为目标之一后，你可以摸一张牌。<br/><font color='#B22222'>使用此技能的回合，你只能造成1点伤害。</font>",
	[":motiao"] = "准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，本回合内你只能造成1点伤害，你使用牌指定自己为目标之一后，摸一张牌。",
	["motiao:choice"] = "你可以发动“抹挑”，本回合使用牌指定自己后摸一张牌，但只能造成1点伤害",
	["$motiao1"] = "徵",
	["$motiao2"] = "羽",
	["$motiao3"] = "宫",
	["$motiao4"] = "商",
	["$motiao5"] = "角",
	["$motiao6"] = "徵",
	["$motiao7"] = "羽",
	["$motiao8"] = "宫",
	["$motiao9"] = "宫（滚奏）",
	["$motiao10"] = "徵（滚奏）",
}

--------------------------------------------------
--连奏
--------------------------------------------------

lianzou = sgs.CreateTriggerSkill{
	name = "lianzou",
	frequency = sgs.Skill_Limited,
	limit_mark = "@lianzou",
	events = {sgs.EventPhaseEnd, sgs.CardUsed, sgs.CardResponded},
	on_trigger = function(self, event, player, data, room)
		if (event == sgs.CardUsed or event == sgs.CardResponded) and player:getPhase() == sgs.Player_Play then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			elseif event == sgs.CardResponded then
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and card:getTypeId() ~= sgs.Card_TypeSkill and card:getNumber() > 0 and card:getNumber() <= 13 and card:getId() ~= -1 then	--神杀的多张牌转化，点数为和。这里只接受非转化的情况（有id）。
				room:addPlayerMark(player, "&lianzou!", card:getNumber())
			end
		elseif event == sgs.EventPhaseEnd and player:getPhase() == sgs.Player_Play and player:getMark("@lianzou") > 0 and player:getMark("&lianzou!") >= 50 then
			if room:askForSkillInvoke(player, self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				player:loseMark("@lianzou", 1)
				room:doAnimate(2, "skill=EyeAnim:xianyu.png", "")
				room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				room:getThread():delay(2500)
				room:broadcastSkillInvoke(self:objectName(), math.random(1,2))	--播放配音
				local count = 0
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				while count < 50 do
					local judge = sgs.JudgeStruct()
					judge.pattern = ".|.|1~"..(50-count)
					judge.good = true
					judge.reason = self:objectName()
					judge.who = player
					judge.time_consuming = true	--为真耗时更少
					room:judge(judge)
					
					count = count + judge.result_number
					if judge:isGood() then
						dummy:addSubcard(judge.card)
					end
				end
				player:obtainCard(dummy, true)
				dummy:deleteLater()
			end
		end
		return false
	end
}
table.insert(play_end_clear_mark, "&lianzou!")

xianyu_xiangluancuxian:addSkill(lianzou)

sgs.LoadTranslationTable{
	["lianzou"] = "连奏",
	["@lianzou"] = "琵琶",
	[":lianzou"] = "限定技，出牌阶段结束时，若你本阶段内使用的牌点数和≥50，你可以<font color='#A9A9A9'>发动此技能</font>，<font color='#9400D3'>连续判定</font>直到判定牌点数和≥50，你获得<font color='#9400D3'>这些判定牌</font>。",
	["$lianzou1"] = "琶音",
	["$lianzou2"] = "琶音",
}

--------------------------------------------------
--化形之猫 信使AKANE
--设计者：NSX
--------------------------------------------------

xinshiakane_huaxingzhimao = sgs.General(extension,"xinshiakane_huaxingzhimao$","yuejianchicha","4",false)

sgs.LoadTranslationTable{
	["xinshiakane_huaxingzhimao"] = "信使AKANE",
	["&xinshiakane_huaxingzhimao"] = "信使茜",
	["#xinshiakane_huaxingzhimao"] = "化形之猫",
	["$xinshiakane_huaxingzhimao"] = "一般",
	["designer:xinshiakane_huaxingzhimao"] = "NSX",
	["cv:xinshiakane_huaxingzhimao"] = "",
	["illustrator:xinshiakane_huaxingzhimao"] = "",
	["~xinshiakane_huaxingzhimao"] = "",
}

--------------------------------------------------
--离诀
--------------------------------------------------

lijue_akane = sgs.CreateTriggerSkill{
	name = "lijue_akane",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageInflicted},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if event == sgs.DamageInflicted and damage.damage > 1 then
			if damage.nature == sgs.DamageStruct_Light then return false end
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			damage.damage = 1
			data:setValue(damage)
		end
		return false
	end
}

xinshiakane_huaxingzhimao:addSkill(lijue_akane)

sgs.LoadTranslationTable{
	["lijue_akane"] = "离诀",
	[":lijue_akane"] = "锁定技，你受到>1点的伤害时，将伤害减少至1点。",
	["$lijue_akane"] = "",
}

--------------------------------------------------
--月见
--------------------------------------------------

yuejian_akane_card = sgs.CreateSkillCard{
	name = "yuejian_akane",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "yuejian_akane")
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:setCardFlag(card, "&mail")	--可见手牌下标
		local target = targets[1]
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), target:objectName(), self:objectName(), "")
		source:setFlags("Not_clear_card_flag")	--避免flag被立即清除
		room:moveCardTo(card, target, sgs.Player_PlaceHand, reason, false)
		source:setFlags("-Not_clear_card_flag")
	end
}
yuejian_akane_vs = sgs.CreateViewAsSkill{
	name = "yuejian_akane",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return to_select:isKindOf("TrickCard")
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = yuejian_akane_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#yuejian_akane") < 2
	end
}
yuejian_akane = sgs.CreateTriggerSkill{
	name = "yuejian_akane",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = yuejian_akane_vs,
	global = true,
	events = {sgs.BeforeCardsMove, --[[sgs.CardsMoveOneTime,]] sgs.EventPhaseChanging},	--CardUsed之类的时机无法获取到flag
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging and data:toPhaseChange().from ~= sgs.Player_NotActive and data:toPhaseChange().to == sgs.Player_NotActive then
			for _,p in sgs.qlist(room:getAllPlayers()) do
				if p:isAlive() and p:getMark("yuejian_akane_draw") > 0 then
					room:setPlayerMark(p, "yuejian_akane_draw", 0)
					room:sendCompulsoryTriggerLog(p, self:objectName()) --显示锁定技发动
					p:drawCards(1, self:objectName())
				end
			end
		elseif player and player:isAlive() and player:hasSkill(self:objectName()) then
			local move = data:toMoveOneTime()
			if move and bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_USE and move.card_ids:length() > 0 then
				for _, id in sgs.qlist(move.card_ids) do
					if player:getMark("yuejian_akane_draw") > 0 then
						return false
					end
					
					local card = sgs.Sanguosha:getCard(id)
					if not card then continue end
					
					if event == sgs.BeforeCardsMove and card:hasFlag("&mail") then
						room:setPlayerMark(player, "yuejian_akane_draw", 1)
						--[[room:setCardFlag(card, "yuejian_akane_trigger")
					elseif event == sgs.CardsMoveOneTime and card:hasFlag("yuejian_akane_trigger") then
						room:setCardFlag(card, "-yuejian_akane_trigger")
						room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
						room:setPlayerMark(player, "yuejian_akane_draw", 1)
						player:drawCards(1, "yuejian_akane")]]
					end
				end
			end
		end
	end
}
table.insert(leave_hand_clear_flag, "&mail")	--离手清除cardflag
--table.insert(turn_end_clear_mark, "yuejian_akane_draw")	--回合结束清除标记

xinshiakane_huaxingzhimao:addSkill(yuejian_akane)

sgs.LoadTranslationTable{
	["yuejian_akane"] = "月见",
	[":yuejian_akane"] = "<font color='green'><b>出牌阶段限2次，</b></font>你可以将一张锦囊牌标记为“信”交给一名其他角色。<br/>一名角色的回合结束时，若本回合内有“信”被使用过，你摸一张牌。",
	["$yuejian_akane"] = "",
	["&mail"] = "信",
}

--------------------------------------------------
--寻绊
--------------------------------------------------

xunbanvs = sgs.CreateViewAsSkill{
    name = "xunban",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
    view_as = function(self, cards)
		if #cards ~= 0 then return nil end
	    local pattern = sgs.Self:property("xunban_view_to_use"):toString()
		local acard = sgs.Sanguosha:cloneCard(pattern, sgs.Card_NoSuit, -1)
		acard:setSkillName("_"..self:objectName())
		return acard
    end,
    enabled_at_play = function(self,player)
        return false
    end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@xunban"
	end
}
xunban = sgs.CreateTriggerSkill{
	name = "xunban$",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = xunbanvs,
	events = {sgs.CardsMoveOneTime, sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime and player:hasSkill(self:objectName()) and player:hasLordSkill(self:objectName()) and player:getRole() == "lord" then
			local move = data:toMoveOneTime()
			if move.from and (move.from:objectName() == player:objectName()) and move.to and move.to:isAlive()
					and (move.from:objectName() ~= move.to:objectName())
					and (move.card_ids:length() >= 1)
					and (move.from_places:contains(sgs.Player_PlaceHand) or move.from_places:contains(sgs.Player_PlaceEquip))
					and (move.to_place == sgs.Player_PlaceHand or move.to_place == sgs.Player_PlaceEquip) then
				
				room:addPlayerMark(player, "&xunban!", move.card_ids:length())
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			local Set = function(list)
				local set = {}
				for _, l in ipairs(list) do set[l] = true end
				return set
			end
			
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:getMark("&xunban!") >= 2 and myself:hasSkill(self:objectName()) and myself:hasLordSkill(self:objectName()) and myself:getRole() == "lord" then
					local basic = {"slash", "peach", "analeptic", "cancel"}
					--if not (Set(sgs.Sanguosha:getBanPackages()))["maneuvering"] then
						table.insert(basic, 2, "ice_slash")
						table.insert(basic, 2, "thunder_slash")
						table.insert(basic, 2, "fire_slash")
					--end
					for _, patt in ipairs(basic) do
						local virtual_card = sgs.Sanguosha:cloneCard(patt, sgs.Card_NoSuit, -1)
						if virtual_card and (not virtual_card:isAvailable(myself)) or (patt == "peach" and not myself:isWounded()) then
							table.removeOne(basic, patt)
							if patt == "slash" then
								table.removeOne(basic, "fire_slash")
								table.removeOne(basic, "thunder_slash")
								table.removeOne(basic, "ice_slash")
							end
						end
						if virtual_card then
							virtual_card:deleteLater()
						end
					end
					local choice = room:askForChoice(myself, self:objectName(), table.concat(basic, "+"))
					if choice ~= "cancel" then
						room:setPlayerProperty(myself, "xunban_view_to_use", sgs.QVariant(choice))	--泛转化用
						if not room:askForUseCard(myself, "@@xunban", "@xunban:" .. choice, -1, sgs.Card_MethodUse) then
							room:broadcastSkillInvoke(self:objectName(), 1)	--播放配音
						end
						room:setPlayerProperty(myself, "xunban_view_to_use", sgs.QVariant())
					end
					return false
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target and target:isAlive()
	end
}
table.insert(turn_end_clear_mark, "&xunban!")		--回合结束清除标记

xinshiakane_huaxingzhimao:addSkill(xunban)

sgs.LoadTranslationTable{
	["xunban"] = "寻绊",
	[":xunban"] = "主公技，一名角色的结束阶段，若本回合其他角色获得过你的至少两张牌，你可以视为使用一张基本牌。",
	["$xunban"] = "",
	["@xunban"] = "你可以视为使用 %src",
	["~xunban"] = "选择目标角色→点击确定",
}

--------------------------------------------------
--月见爱抖鹿 栗川楓
--设计者：萌龙少主
--------------------------------------------------

lichuanfeng_yuejianaidoulu = sgs.General(extension,"lichuanfeng_yuejianaidoulu","yuejianchicha","3",false)

sgs.LoadTranslationTable{
	["lichuanfeng_yuejianaidoulu"] = "栗川楓",
	["&lichuanfeng_yuejianaidoulu"] = "栗川楓",
	["#lichuanfeng_yuejianaidoulu"] = "月见爱抖鹿",
	--["$lichuanfeng_yuejianaidoulu"] = "简单",
	["designer:lichuanfeng_yuejianaidoulu"] = "萌龙少主",
	["cv:lichuanfeng_yuejianaidoulu"] = "",
	["illustrator:lichuanfeng_yuejianaidoulu"] = "",
	["~lichuanfeng_yuejianaidoulu"] = "",
}

--------------------------------------------------
--枫锦
--------------------------------------------------

fengjin_vs = sgs.CreateViewAsSkill{
	name = "fengjin",
	n = 1,
	--expand_pile = "wooden_ox",
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return to_select:isKindOf("TrickCard")
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local first = cards[1]
			local ncard = sgs.Sanguosha:cloneCard("nullification", first:getSuit(), first:getNumber())
			ncard:addSubcard(first)
			ncard:setSkillName(self:objectName())
			return ncard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		if player:getMark("fengjin_used") == 0 then
			return pattern == "nullification"
		end
	end,
	enabled_at_nullification = function(self, player)
		if player:getMark("fengjin_used") == 0 then
			for _, card in sgs.qlist(player:getCards("he")) do
				if card:isKindOf("TrickCard") then return true end
			end
		end
		return false
	end
}
fengjin = sgs.CreateTriggerSkill{
	name = "fengjin",
	view_as_skill = fengjin_vs,
	events = {sgs.PreCardUsed, sgs.CardUsed},
	on_trigger = function(self, event, player, data, room)
		local card = data:toCardUse().card
		if card and card:getSkillName() == self:objectName() then
			if event == sgs.PreCardUsed then
				room:setPlayerMark(player, "fengjin_used", 1)
			elseif event == sgs.CardUsed and card:isRed() then
				--player:drawCards(1, self:objectName())
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
			end
		end
	end
}
table.insert(turn_end_clear_mark, "fengjin_used")

lichuanfeng_yuejianaidoulu:addSkill(fengjin)

sgs.LoadTranslationTable{
	["fengjin"] = "枫锦",
	[":fengjin"] = "每回合限一次，你可以将一张锦囊牌当【无懈可击】使用，若此牌为红色则你回复1点体力。",
	["$fengjin"] = "",
}

--------------------------------------------------
--寻忆
--------------------------------------------------

xunyicard = sgs.CreateSkillCard{
	name = "xunyi",
	will_throw = false,
	target_fixed = true,
	handling_method = sgs.Card_MethodNone,
	on_use = function(self, room, source, targets)
		local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		for _, card in sgs.qlist(source:getHandcards()) do
			local is_chosen = false
			for _, chosen_card_id in sgs.qlist(self:getSubcards()) do
				if card:getId() == chosen_card_id then
					is_chosen = true
					break
				end
			end
			if not is_chosen then
				dummy:addSubcard(card)
			end
		end
		if dummy:subcardsLength() > 0 then
			room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, source:objectName(), self:objectName(), nil), source)
		end
		dummy:deleteLater()
	end
}
xunyi_vs = sgs.CreateViewAsSkill{
	name = "xunyi",
	n = 999,
	view_filter = function(self, selected, to_select)
		for _,card in ipairs(selected) do
			if to_select:getSuit() == card:getSuit() then
				return false
			end
		end
		return not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		local card = xunyicard:clone()
		if #cards ~= 0 then
			for _, c in ipairs(cards) do
				card:addSubcard(c)
			end
		end
		return card
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@xunyi!"
	end
}
xunyi = sgs.CreateTriggerSkill{
	name = "xunyi",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = xunyi_vs,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.damage == 0 then
				return false
			end
			for i=1,damage.damage,1 do
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					local X = player:getLostHp() + 2
					player:drawCards(X, self:objectName())
					local need_discard = false
					local hand_suit = {}
					for _, hcard in sgs.qlist(player:getHandcards()) do
						if table.contains(hand_suit, hcard:getSuit()) then
							need_discard = true
							break
						else
							table.insert(hand_suit, hcard:getSuit())
						end
					end
					if need_discard and player:isAlive() then
						room:askForUseCard(player, "@@xunyi!", "@xunyi")
					end
				end
			end
		end
	end,
}

lichuanfeng_yuejianaidoulu:addSkill(xunyi)

sgs.LoadTranslationTable{
	["xunyi"] = "寻忆",
	[":xunyi"] = "你受到1点伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，摸X+2张牌，保留任意张花色各不相同的手牌，弃置其余的手牌。（X为你已损失的体力值）",
	["$xunyi"] = "",
	["@xunyi"] = "请选择要保留的手牌，其余牌将被弃置",
	["~xunyi"] = "选择花色各不相同的若干牌→确定",
}

--------------------------------------------------
--若月龙女 月兮
--设计者：NSX
--------------------------------------------------

yuexi_ruoyuelongnv = sgs.General(extension,"yuexi_ruoyuelongnv","TheVirkyrie","3",false)

sgs.LoadTranslationTable{
	["yuexi_ruoyuelongnv"] = "月兮",
	["&yuexi_ruoyuelongnv"] = "月兮",
	["#yuexi_ruoyuelongnv"] = "若月龙女",
	["$yuexi_ruoyuelongnv"] = "进阶",
	["designer:yuexi_ruoyuelongnv"] = "NSX",
	["cv:yuexi_ruoyuelongnv"] = "",
	["illustrator:yuexi_ruoyuelongnv"] = "",
	["~yuexi_ruoyuelongnv"] = "",
}

--------------------------------------------------
--婉龙
--------------------------------------------------

wanlong = sgs.CreateTriggerSkill{
	name = "wanlong",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DrawNCards},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards then
			if player:getPhase() == sgs.Player_Draw and data:toInt() > 0 and player:getMark("&wanlong!") < 8 then
				if room:askForSkillInvoke(player, self:objectName(), sgs.QVariant("choice:" .. 8-player:getMark("&wanlong!"))) then 
					local count = data:toInt() - 1
					data:setValue(count)
					if not SkillNullify(player, self:objectName()) then
						room:addPlayerMark(player, "&wanlong!", 1)
						
						local X = 9 - player:getMark("&wanlong!")
						local can_get_ids = sgs.IntList()
						for _, id in sgs.qlist(room:getDrawPile()) do
							local card = sgs.Sanguosha:getCard(id)
							if card:getNumber() == X then
								can_get_ids:append(id)
							end
						end
						if not can_get_ids:isEmpty() then
							room:fillAG(can_get_ids, player)
							local get_id = room:askForAG(player, can_get_ids, false, self:objectName())
							room:clearAG(player)
							local card = sgs.Sanguosha:getCard(get_id)
							if card then
								player:obtainCard(card, true)
								room:getThread():delay(500)
							end
						else
							local log = sgs.LogMessage()
							log.type = "#wanlong_find_fail"
							log.arg = X
							room:sendLog(log)	--发送信息框消息
						end
					end
				end
			end
			return false
		end
	end,
}

yuexi_ruoyuelongnv:addSkill(wanlong)

sgs.LoadTranslationTable{
	["wanlong"] = "婉龙",
	[":wanlong"] = "摸牌阶段，你可令本阶段摸牌数－1<font color='#A9A9A9'>发动此技能</font>，你从牌堆中获得一张点数为9－X的牌。每局游戏限8次。（X为你发动此技能的次数）",
	["$wanlong"] = "",
	["wanlong:choice"] = "你可以发动“婉龙”，少摸一张牌，从牌堆选择一张点数为 %src 的牌获得",
	["#wanlong_find_fail"] = "牌堆中没有点数为 %arg 的牌",
	["^AG_wanlong"] = "<b>婉龙</b><br/>双击以选择一张牌获得之",
}

--------------------------------------------------
--月潮
--------------------------------------------------

yuechaoUseCard = sgs.CreateSkillCard{
	name = "yuechaoUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		return card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
	end, 
	feasible = function(self, targets)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		return card and card:targetsFeasible(targets_list, sgs.Self)
	end,
	about_to_use = function(self, room, use)
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:setCardFlag(card, "-yuechao")
		for _,cd in sgs.qlist(use.from:getHandcards()) do		--及时清除所有flag，避免此牌结算中获得牌产生的错误情况
			room:setCardFlag(cd, "-yuechao")
		end
		local card_for_use = sgs.Sanguosha:getCard(self:getSubcards():first())
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
yuechaovs = sgs.CreateViewAsSkill{
	n = 1,
	name = "yuechao",
	response_pattern = "@@yuechao!",
	view_filter = function(self, selected, to_select)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@yuechao!" and #selected == 0 then
			return to_select:hasFlag(self:objectName())
		end
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@yuechao!" and #cards == 1 then
			local skillcard = yuechaoUseCard:clone()
			skillcard:addSubcard(cards[1])
			return skillcard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end
}
yuechao = sgs.CreateTriggerSkill{
	name = "yuechao",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = yuechaovs,
	events = {sgs.BeforeCardsMove, sgs.CardsMoveOneTime, sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() == sgs.Player_NotActive and player:getMark("yuechao_used") == 0 then
			local can_trigger = false
			if event == sgs.Damaged then
				local damage = data:toDamage()
				if player:isAlive() and damage.damage > 0 then
					can_trigger = true
				end
			else
				local move = data:toMoveOneTime()
				if move.from and (move.from:objectName() == player:objectName()) and move.from_places:contains(sgs.Player_PlaceHand) then
					if event == sgs.BeforeCardsMove then
						if player:isKongcheng() then return false end
						for _, id in sgs.qlist(player:handCards()) do
							if not move.card_ids:contains(id) then return false end
						end
						player:addMark(self:objectName())
					else
						if player:getMark(self:objectName()) == 0 then return false end
						player:removeMark(self:objectName())
						
						can_trigger = true
					end
				end
			end
			
			if can_trigger then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAlivePlayers()) do
					if not p:getCards("ej"):isEmpty() and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				local to
				if not targets:isEmpty() then
					to = room:askForPlayerChosen(player, targets, self:objectName(), "@yuechao-invoke", true, true)
				end
				if to and not SkillNullify(player, self:objectName()) then
					room:setPlayerMark(player, "yuechao_used", 1)
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					
					local id = room:askForCardChosen(player, to, "ej", self:objectName(), false, sgs.Card_MethodNone)
					local card = sgs.Sanguosha:getCard(id)
					player:obtainCard(card, true)
					
					if card:getSuit() == sgs.Card_Club and to:objectName() ~= player:objectName() then
						room:addPlayerMark(player, "yuexi_unlock_count", 1)
						if player:getMark("yuexi_unlock_count") == 2 then
							RecordUnlockGenerals(player, "yuexi_cuozaoqiuyouti")	--为玩家记录可解锁角色
						end
					end
					
					local can_use = false
					if room:getCardOwner(id):objectName() and room:getCardOwner(id):objectName() == player:objectName() and room:getCardPlace(id) == sgs.Player_PlaceHand then
						for _, p in sgs.qlist(room:getAlivePlayers()) do
							if card:isAvailable(player) and not room:isProhibited(player, p, card) and card:targetFilter(sgs.PlayerList(), p, player) then
								room:setCardFlag(card, self:objectName())
								can_use = true
							end
						end
					end
					
					if can_use then
						local choiceList = {}
						table.insert(choiceList, "yuechao_use")
						table.insert(choiceList, "cancel")
						if #choiceList > 1 then
							local choice = room:askForChoice(player, self:objectName(), table.concat(choiceList, "+"))
							if choice == "yuechao_use" then
								ChoiceLog(player, choice)
								room:askForUseCard(player, "@@yuechao!", "@yuechao_useCard")
							end
						end
						room:setCardFlag(card, "-"..self:objectName())
					end
				end
			end
		end
	end
}
table.insert(turn_end_clear_mark, "yuechao_used")

yuexi_ruoyuelongnv:addSkill(yuechao)

sgs.LoadTranslationTable{
	["yuechao"] = "月潮",
	[":yuechao"] = "每回合限一次，你于回合外 <font color='#9400D3'>受到伤害后</font>/<font color='#9400D3'>失去最后的手牌后</font>，你可以<font color='#A9A9A9'>发动此技能</font>，获得场上的一张牌，然后你可以使用之。",
	["$yuechao"] = "",
	["@yuechao-invoke"] = "你可以发动“月潮”，获得场上的一张牌<br/>操作提示：选择一名角色→确定",
	["yuechao_use"] = "使用获得的牌",
	["@yuechao_useCard"] = "请使用此牌",
	["~yuechao"] = "选择此牌→选择目标→确定",
}

--------------------------------------------------
--搓澡球幼体 幼月兮
--设计者：
--------------------------------------------------

yuexi_cuozaoqiuyouti = sgs.General(extension,"yuexi_cuozaoqiuyouti","TheVirkyrie","4",false,true,true)

sgs.LoadTranslationTable{
	["yuexi_cuozaoqiuyouti"] = "幼月兮",
	["&yuexi_cuozaoqiuyouti"] = "月兮",
	["#yuexi_cuozaoqiuyouti"] = "搓澡球幼体",
	["$yuexi_cuozaoqiuyouti"] = "简单",
	["designer:yuexi_cuozaoqiuyouti"] = "",
	["cv:yuexi_cuozaoqiuyouti"] = "",
	["illustrator:yuexi_cuozaoqiuyouti"] = "",
	["unlock:yuexi_cuozaoqiuyouti"] = "使用月兮的“月潮”获得两次其他角色的♣装备牌",
	["~yuexi_cuozaoqiuyouti"] = "",
}

yuexi_cuozaoqiuyouti:setBonus(true)	--设为奖励角色

--------------------------------------------------
--净挲
--------------------------------------------------

jingsuo_vs = sgs.CreateViewAsSkill{
	name = "jingsuo",
	n = 1,
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return to_select:getSuit() == sgs.Card_Club
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local first = cards[1]
			local ncard = sgs.Sanguosha:cloneCard("drowning", first:getSuit(), first:getNumber())
			ncard:addSubcard(first)
			ncard:setSkillName(self:objectName())
			return ncard
		end
	end,
	enabled_at_play = function(self, player)
		return player:getMark("jingsuo_used") == 0
	end
}
jingsuo = sgs.CreateTriggerSkill{
	name = "jingsuo",
	view_as_skill = jingsuo_vs,
	events = {sgs.PreCardUsed, sgs.CardFinished},
	frequency = sgs.Skill_NotFrequent,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PreCardUsed then
			local card = data:toCardUse().card
			if card and card:getSkillName() == "jingsuo" then 
				room:setPlayerMark(player, "jingsuo_used", 1)
			end
		elseif event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and use.card:getSkillName() == "jingsuo" and use.card:isKindOf("Drowning") and use.to and not use.to:isEmpty() then
				for _, p in sgs.qlist(use.to) do
					p:drawCards(1, self:objectName())
				end
			end
		end
	end
}
table.insert(play_end_clear_mark, "jingsuo_used")

yuexi_cuozaoqiuyouti:addSkill(jingsuo)

sgs.LoadTranslationTable{
	["jingsuo"] = "净挲",
	[":jingsuo"] = "出牌阶段限一次，你可以将一张梅花牌当【水淹七军】使用，然后目标角色摸一张牌。",
	["$jingsuo"] = "",
}

--------------------------------------------------
--除垢
--------------------------------------------------

chugou = sgs.CreateTriggerSkill{
	name = "chugou",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseEnd},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseEnd and player:getPhase() == sgs.Player_Discard then
			local X = player:getMark("discard_counter")
			if X > 0 then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getOtherPlayers(player)) do
					if p:canDiscard(p, "he") and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				local target
				if not targets:isEmpty() then
					target = room:askForPlayerChosen(player, targets, self:objectName(), "@chugou_ask:"..X, true, true)
				end
				if target and not SkillNullify(player, self:objectName()) then
					room:askForDiscard(target, self:objectName(), X, X, false, true)
				end
			end
		end
		return false
	end
}

yuexi_cuozaoqiuyouti:addSkill(chugou)

sgs.LoadTranslationTable{
	["chugou"] = "除垢",
	[":chugou"] = "弃牌阶段结束时，若你本阶段弃置了牌，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其弃置等量张牌。",
	["$chugou"] = "",
	["@chugou_ask"] = "你可以发动“除垢”，指定一名角色，令其弃置 %src 张牌",
}

--------------------------------------------------
--稀世珍宝 水树兔免
--设计者：--
--------------------------------------------------

shuishutumian_xishizhenbao = sgs.General(extension,"shuishutumian_xishizhenbao","TheVirkyrie","3",false)

sgs.LoadTranslationTable{
	["shuishutumian_xishizhenbao"] = "水树兔免",
	["&shuishutumian_xishizhenbao"] = "水树兔免",
	["#shuishutumian_xishizhenbao"] = "稀世珍宝",
	["$shuishutumian_xishizhenbao"] = "一般",
	["designer:shuishutumian_xishizhenbao"] = "月音风源、萌龙少主",
	["cv:shuishutumian_xishizhenbao"] = "",
	["illustrator:shuishutumian_xishizhenbao"] = "",
	["~shuishutumian_xishizhenbao"] = "",
}

shuishutumian_xishizhenbao:setGender(sgs.General_Sexless)

--------------------------------------------------
--奉声
--------------------------------------------------

fengsheng_vs = sgs.CreateOneCardViewAsSkill{
	name = "fengsheng",
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, card)
    	return not card:isEquipped()
	end,
	view_as = function(self, originalCard)
		local obj_name
		for _, mark in sgs.list(sgs.Self:getMarkNames()) do
			if string.startsWith(mark, "&fengsheng+") and sgs.Self:getMark(mark) > 0 then
				obj_name = string.sub(mark, 12, -1)
				break
			end
		end
		
		local new_card = sgs.Sanguosha:cloneCard(obj_name, originalCard:getSuit(), originalCard:getNumber())
		new_card:addSubcard(originalCard:getId())
		new_card:setSkillName(self:objectName())
		return new_card
	end,
	enabled_at_play = function(self, player)
		if player:getMark("fengsheng_used") == 0 and player:getPhase() == sgs.Player_Play then
			local obj_name
			for _, mark in sgs.list(player:getMarkNames()) do
				if string.startsWith(mark, "&fengsheng+") and player:getMark(mark) > 0 then
					obj_name = string.sub(mark, 12, -1)
					break
				end
			end
			return obj_name
		end
		return false
	end
}
fengsheng = sgs.CreateTriggerSkill{
	name = "fengsheng",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.PreCardUsed, sgs.PreCardResponded, sgs.BeforeCardsMove},
	view_as_skill = fengsheng_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Play and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. Ternary(player:getMark("@shenyuan") == 13 and player:hasSkill("yuanlin"), "fengsheng_fengshen", self:objectName()))) and not SkillNullify(player, self:objectName()) then
				room:setEmotion(player, "shenyuan")
				player:gainMark("@shenyuan", 1)
				
				local card_ids = sgs.IntList()
				local X = 14 - player:getMark("@shenyuan")
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if not card:isKindOf("EquipCard") and card:getNumber() == X then
						card_ids:append(id)
					end
				end
				for _,id in sgs.qlist(room:getDiscardPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if not card:isKindOf("EquipCard") and card:getNumber() == X then
						card_ids:append(id)
					end
				end
				if not card_ids:isEmpty() then
					room:fillAG(card_ids, player)
					local id = room:askForAG(player, card_ids, false, self:objectName())
					room:clearAG(player)
					if id and id ~= -1 then
						local card = sgs.Sanguosha:getCard(id)
						
						local log = sgs.LogMessage()
						log.type = "#fengsheng_log"
						log.from = player
						log.arg = self:objectName()
						log.card_str = card:toString()
						room:sendLog(log)	--发送信息框消息
						
						room:setPlayerMark(player, "&fengsheng+"..card:objectName(), 1)	--增加新的记录
					end
				end
			end
		elseif event == sgs.PreCardUsed or event == sgs.PreCardResponded then
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				--if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				--end
			end
			if card then
				if card:getSkillName() == "fengsheng" then
					room:setPlayerMark(player, "fengsheng_used", 1)
				end
			end
		elseif event == sgs.BeforeCardsMove then	--重铸记次数
			local move = data:toMoveOneTime()
			if player and player:isAlive() and move.from and move.from:isAlive() and player:objectName() == move.from:objectName() and move.reason.m_reason == sgs.CardMoveReason_S_REASON_RECAST and move.reason.m_skillName == "fengsheng" then
				room:addPlayerMark(player, "fengsheng_used", 1)
			end
		end
		return false
	end
}
table.insert(play_end_clear_mark_prefix, "&fengsheng+")	--出牌结束清除指定前缀的标记
table.insert(play_end_clear_mark, "fengsheng_used")		--出牌结束清除标记

--shuishutumian_xishizhenbao:addSkill(fengsheng)

sgs.LoadTranslationTable{
	["fengsheng"] = "奉声",
	[":fengsheng"] = "出牌阶段开始时，你可以<font color='#A9A9A9'>发动此技能</font>，获得1枚“深渊”标记，选择牌堆、弃牌堆中的一张点数为14－X的非装备牌，<font color='green'><b>本阶段限一次，</b></font>你可以将一张手牌当此牌使用或重铸。（X为“深渊”标记数）",
	["$fengsheng"] = "",
	["fengsheng_fengshen"] = "奉身",
	["fengsheng:choice"] = "你想发动技能“%src”吗？",
	["#fengsheng_log"] = "%from 选择了 %card 作为“%arg”的目标牌",
	["^AG_fengsheng"] = "<b>奉声</b><br/>双击以选择一张牌，本阶段你可以将一张牌当所选的牌使用或重铸",
}

--------------------------------------------------
--奉声（新）
--------------------------------------------------

function refresh_fengsheng_mark(player)
	local room = player:getRoom()
	room:setPlayerMark(player, "&newfengsheng+basic_short+_lun", 0)
	room:setPlayerMark(player, "&newfengsheng+trick_short+_lun", 0)
	room:setPlayerMark(player, "&newfengsheng+basic_short+trick_short+_lun", 0)
	if player:getMark("newfengsheng_basic_lun") > 0 then
		if player:getMark("newfengsheng_trick_lun") > 0 then
			room:setPlayerMark(player, "&newfengsheng+basic_short+trick_short+_lun", 1)
		else
			room:setPlayerMark(player, "&newfengsheng+basic_short+_lun", 1)
		end
	else
		if player:getMark("newfengsheng_trick_lun") > 0 then
			room:setPlayerMark(player, "&newfengsheng+trick_short+_lun", 1)
		end
	end
end
newfengsheng = sgs.CreateTriggerSkill{
	name = "newfengsheng",
	frequency = sgs.Skill_Frequent,
	events = {sgs.CardUsed, sgs.CardResponded},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardUsed or event == sgs.CardResponded then
			local use_card
			local from = player
			if event == sgs.CardUsed then
				use_card = data:toCardUse().card
			else
				local response = data:toCardResponse()
				if response.m_isUse then
					use_card = response.m_card
				end
			end
			if use_card and (use_card:isKindOf("BasicCard") or use_card:isNDTrick()) and not use_card:isKindOf("SkillCard") and not use_card:isVirtualCard() then
				local myselves = room:findPlayersBySkillName(self:objectName())
				for _,myself in sgs.qlist(myselves) do
					if (room:getCardPlace(use_card:getEffectiveId()) == sgs.Player_PlaceTable or room:getCardPlace(use_card:getEffectiveId()) == sgs.Player_DiscardPile) and myself:getMark("newfengsheng_"..getTypeString(use_card).."_lun") < 1 and from and from:objectName() ~= myself:objectName() and not myself:isNude() then
						local can_use = false
						for _,card in sgs.qlist(myself:getCards("he")) do
							if card:getTypeId() ~= use_card:getTypeId() and myself:canDiscard(myself, card:getId()) then
								can_use = true
								break
							end
						end
						if can_use and myself:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:"..use_card:objectName()), false) then
							local type_pattern = ""
							if use_card:isKindOf("BasicCard") then
								type_pattern = "^BasicCard"
							elseif use_card:isNDTrick() then
								type_pattern = "^TrickCard"
							end
							if type_pattern == "" then continue end
							if event == sgs.CardUsed then
								myself:setFlags("newfengsheng_use")
							elseif event == sgs.CardResponded then
								myself:setFlags("newfengsheng_response")
							end
							local card = room:askForCard(myself, type_pattern.."|.|.|.", "@newfengsheng:"..use_card:objectName(), data, sgs.Card_MethodDiscard, myself, false, self:objectName())
							myself:setFlags("-newfengsheng_use")
							myself:setFlags("-newfengsheng_response")
							if card then
								--room:notifySkillInvoked(myself, self:objectName())	--在武将牌上显示技能名
								room:broadcastSkillInvoke(self:objectName()) --播放配音
								myself:obtainCard(use_card, true)
								room:addPlayerMark(myself, "newfengsheng_"..getTypeString(use_card).."_lun", 1)
								refresh_fengsheng_mark(myself)
							end
						end
					end
				end
			end
			return false
		end
	end,
    can_trigger = function(self, target)
        return target
    end
}

newfengsheng:setWarmupSkill(true)	--设置为征询技

shuishutumian_xishizhenbao:addSkill(newfengsheng)

sgs.LoadTranslationTable{
	["newfengsheng"] = "奉声",
	[":newfengsheng"] = "征询技，<font color='#9400D3'>每种类别</font>每轮限一次，其他角色使用非转化的<font color='#9400D3'>基本牌、普通锦囊牌</font>时，你可以弃置一张与之类别不同的牌，获得之。",
	["newfengsheng:choice"] = "你可以使用“奉声”，弃置一张与 %src 类别不同的牌，获得此牌",
	["@newfengsheng"] = "你可以弃置一张与 %src 类别不同的牌（包括装备区的牌）",
	["$newfengsheng"] = "",
}

--------------------------------------------------
--渊临
--------------------------------------------------

yuanlin = sgs.CreateTriggerSkill{
	name = "yuanlin",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart, sgs.DamageInflicted},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				local judge = sgs.JudgeStruct()
				judge.pattern = ".|spade|2~9"
				judge.good = false
				judge.negative = true
				judge.reason = "lightning"
				judge.who = player
				judge.time_consuming = true	--为真耗时更少
				room:judge(judge)
				if judge:isBad() then
					room:damage(sgs.DamageStruct("lightning", nil, player, 3, sgs.DamageStruct_Thunder))
				end
			end
		elseif event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.nature ~= sgs.DamageStruct_Normal then
				if damage.nature == sgs.DamageStruct_Light then return false end
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				player:drawCards(1, self:objectName())
				room:setEmotion(player, "shenyuan")
				--player:gainMark("@shenyuan", damage.damage)
				player:gainMark("@shenyuan", 1)
				room:setEmotion(player, "skill_nullify")
				if player:getMark("@shenyuan") > 5 then
					local log = sgs.LogMessage()
					log.type = "#yuanlin_log"
					log.from = player
					room:sendLog(log)	--发送信息框消息
					room:getThread():delay(300)
					room:killPlayer(player)
				end
				return true
			end
		--elseif event == sgs.MarkChanged and data:toMark().name == "@shenyuan" then
		--	local mark = data:toMark()
		--	if mark.gain > 0 then
		--		room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
		--		if player:getMark("@shenyuan") > 13 then
		--			local log = sgs.LogMessage()
		--			log.type = "#yuanlin_log"
		--			log.from = player
		--			room:sendLog(log)	--发送信息框消息
		--			room:getThread():delay(300)
		--			room:killPlayer(player)
		--		end
		--	end
		end
	end
}

--shuishutumian_xishizhenbao:addSkill(yuanlin)

sgs.LoadTranslationTable{
	["yuanlin"] = "渊临",
	[":yuanlin"] = "锁定技，准备阶段，你进行一次【闪电】判定。<br/>你受到属性伤害时，摸一张牌，获得1枚“深渊”标记，防止之，若标记数>5，你离场。",
	["$yuanlin"] = "",
	["@shenyuan"] = "深渊",
	["#yuanlin_log"] = "%from 被深渊吞噬了……",
}

--------------------------------------------------
--渊临（新）
--------------------------------------------------

newyuanlin = sgs.CreateTriggerSkill{
	name = "newyuanlin",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Dying},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Dying and data:toDying().who:objectName() == player:objectName() then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			local judge = sgs.JudgeStruct()
			judge.pattern = ".|.|"..room:getTag("TurnLengthCount"):toInt().."~13|."
			judge.good = true
			judge.reason = self:objectName()
			judge.who = player
			--judge.time_consuming = true	--为真耗时更少
			room:judge(judge)
			if judge:isGood() then
				room:setEmotion(player, "shenyuan")
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
				
				room:broadcastSkillInvoke("audio_effect", 30)	--播放配音
				room:addRound(1)	--增加游戏轮数，默认值为1
				local log = sgs.LogMessage()
				log.type = "#zijin_addround"
				log.arg = self:objectName()
				log.arg2 = room:getTag("TurnLengthCount"):toInt()
				room:sendLog(log)	--发送信息框消息
			end
		end
		return false
	end,
}

shuishutumian_xishizhenbao:addSkill(newyuanlin)

sgs.LoadTranslationTable{
	["newyuanlin"] = "渊临",
	[":newyuanlin"] = "锁定技，你进入濒危状态时，进行一次判定，若判定结果点数≥当前轮数，你回复1点体力，游戏轮数＋1。",
	["$newyuanlin"] = "",
}

--------------------------------------------------
--沧浪之心 诺拉
--设计者：NSX
--------------------------------------------------

nuola_canglangzhixin = sgs.General(extension,"nuola_canglangzhixin","RainbowPro","3",false)

sgs.LoadTranslationTable{
	["nuola_canglangzhixin"] = "诺拉",
	["&nuola_canglangzhixin"] = "诺拉",
	["#nuola_canglangzhixin"] = "沧浪之心",
	["$nuola_canglangzhixin"] = "一般",
	["designer:nuola_canglangzhixin"] = "NSX",
	["cv:nuola_canglangzhixin"] = "",
	["illustrator:nuola_canglangzhixin"] = "",
	["~nuola_canglangzhixin"] = "",
}

--------------------------------------------------
--贵胄
--------------------------------------------------

guizhouCard = sgs.CreateSkillCard{
	name = "guizhouCard",
	filter = function(self, targets, to_select)
		if #targets > 0 then return false end
		if to_select:hasFlag("guizhouSlashSource") or (to_select:objectName() == sgs.Self:objectName()) then return false end
		return to_select:hasFlag("guizhouValidTarget") and sgs.Self:canEffect(to_select, "guizhou")
	end,
	on_effect = function(self, effect)
		effect.to:setFlags("guizhouTarget")
	end
}
guizhouVS = sgs.CreateViewAsSkill{
	name = "guizhou",
	n = 1,
	view_filter = function(self, selected, to_select)
		if #selected > 0 then return false end
		return not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local liuli_card = guizhouCard:clone()
			liuli_card:addSubcard(cards[1])
			return liuli_card
		end
	end,
	enabled_at_play = function()
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@guizhou"
	end
}
guizhou = sgs.CreateTriggerSkill{
	name = "guizhou",
	events = {sgs.TargetConfirming},
	view_as_skill = guizhouVS,
	on_trigger = function(self, event, player, data)
		local room = player:getRoom()
		local use = data:toCardUse()
		if use.card and (use.card:isKindOf("Slash") or use.card:isKindOf("Duel"))
				and use.to:contains(player) and player:canDiscard(player,"he") and (room:alivePlayerCount() > 2) then
			local players = room:getOtherPlayers(player)
			players:removeOne(use.from)
			local valid_targets = {}
			local new_card = sgs.Sanguosha:cloneCard(use.card:objectName(), sgs.Card_NoSuit, 0)	--仅用于无视距离限制，注意排除装备牌
			new_card:addSubcard(use.card)
			new_card:setSkillName("zhilei")	--借用执儡无视距离限制
			for _, p in sgs.qlist(players) do
				if use.from:canUse(new_card, p, true) and p:inMyAttackRange(player) then
					table.insert(valid_targets, p)
				end
			end
			new_card:deleteLater()
			if #valid_targets > 0 then
				for _, p in ipairs(valid_targets) do
					room:setPlayerFlag(p, "guizhouValidTarget")
				end
				local prompt = "@guizhou:" .. use.from:objectName() .. ":" .. use.card:objectName()
				room:setPlayerFlag(use.from, "guizhouSlashSource")
				room:setPlayerProperty(player, "guizhou", sgs.QVariant(use.card:toString()))
				local _data = sgs.QVariant()
				_data:setValue(use.card)
				player:setTag("guizhou-card", _data)	--AI用
				if room:askForUseCard(player, "@@guizhou", prompt, -1, sgs.Card_MethodDiscard) and not SkillNullify(player, self:objectName()) then
					room:setPlayerProperty(player, "guizhou", sgs.QVariant())
					player:removeTag("guizhou-card")	--AI用
					room:setPlayerFlag(use.from, "-guizhouSlashSource")
					for _, p in ipairs(valid_targets) do
						room:setPlayerFlag(p, "-guizhouValidTarget")
					end
					for _, p in sgs.qlist(players) do
						if p:hasFlag("guizhouTarget") then
							p:setFlags("-guizhouTarget")
							use.to:removeAll(player)
							use.to:append(p)
							room:sortByActionOrder(use.to)
							data:setValue(use)
							
							local log = sgs.LogMessage()
							log.type = "#guizhou_log"
							log.arg = self:objectName()
							log.card_str = use.card:toString()
							log.from = use.from
							log.to = use.to
							room:sendLog(log)	--发送信息框消息
							
							room:getThread():trigger(sgs.TargetConfirming, room, p, data)
							return false
						end
					end
				else
					room:setPlayerProperty(player, "guizhou", sgs.QVariant())
					player:removeTag("guizhou-card")	--AI用
					room:setPlayerFlag(use.from, "-guizhouSlashSource")
					for _, p in ipairs(valid_targets) do
						room:setPlayerFlag(p, "-guizhouValidTarget")
						room:setPlayerFlag(p, "-guizhouTarget")
					end
				end
			end
		end
		return false
	end
}

nuola_canglangzhixin:addSkill(guizhou)

sgs.LoadTranslationTable{
	["guizhou"] = "贵胄",
	[":guizhou"] = "你成为【杀】或【决斗】的目标时，你可以弃置一张牌<font color='#A9A9A9'>发动此技能</font>，将此牌转移给一名攻击范围内有你的其他角色。",
	["$guizhou"] = "",
    ["~guizhou"] = "选择一张牌→选择一名其他角色→点击确定",
    ["@guizhou"] = "%src 对你使用 %dest，你可以弃置一张牌发动“贵胄”，将此牌转移给其他角色",
	["#guizhou_log"] = "由于“%arg”的效果，%from 使用的 %card 目标改为 %to",
}

--------------------------------------------------
--苦情
--------------------------------------------------

kuqing = sgs.CreateTriggerSkill{
	name = "kuqing",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.to and damage.to:isAlive() then
			damage.to:setFlags("kuqing_target_AI")	--AI用
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				if not damage.to:isNude() and myself:inMyAttackRange(damage.to) and room:askForDiscard(myself, self:objectName(), 1, 1, true, false, "@kuqing:"..damage.to:objectName(), ".", self:objectName()) then
					room:doAnimate(1, myself:objectName(), damage.to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					
					if not SkillNullify(myself, self:objectName()) and myself:canEffect(damage.to, self:objectName()) then
						local id = room:askForCardChosen(myself, damage.to, "he", self:objectName(), false, sgs.Card_MethodNone)
						local card = sgs.Sanguosha:getCard(id)
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_EXTRACTION, myself:objectName(), damage.to:objectName(), self:objectName(), "")
						room:moveCardTo(card, myself, sgs.Player_PlaceHand, reason, false)
					end
				end
			end
			damage.to:setFlags("-kuqing_target_AI")	--AI用
			return false
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

nuola_canglangzhixin:addSkill(kuqing)

sgs.LoadTranslationTable{
	["kuqing"] = "苦情",
	[":kuqing"] = "你攻击范围内的角色受到伤害后，你可以弃置一张手牌<font color='#A9A9A9'>发动此技能</font>，获得其一张牌。",
	["$kuqing"] = "",
	["@kuqing"] = "你可以弃置一张手牌，对 %src 发动“苦情”",
}

--------------------------------------------------
--天才探险家 路普
--设计者：萌龙少主
--------------------------------------------------

lupu_tiancaitanxianjia = sgs.General(extension,"lupu_tiancaitanxianjia","RainbowPro","4",true)

sgs.LoadTranslationTable{
	["lupu_tiancaitanxianjia"] = "路普",
	["&lupu_tiancaitanxianjia"] = "路普",
	["#lupu_tiancaitanxianjia"] = "天才探险家",
	["$lupu_tiancaitanxianjia"] = "进阶",
	["designer:lupu_tiancaitanxianjia"] = "萌龙少主",
	["cv:lupu_tiancaitanxianjia"] = "",
	["illustrator:lupu_tiancaitanxianjia"] = "",
	["~lupu_tiancaitanxianjia"] = "",
}

--------------------------------------------------
--探宝
--------------------------------------------------

tanbao_card = sgs.CreateSkillCard{
	name = "tanbao",
	target_fixed = true,
	will_throw = true,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		--if not SkillNullify(source, self:objectName()) then
			local equips = sgs.CardList()
			for _,id in sgs.qlist(room:getDrawPile()) do
				local card = sgs.Sanguosha:getCard(id)
				if card:isKindOf("Treasure") then
					equips:append(card)
				end
			end
			for _,id in sgs.qlist(room:getDiscardPile()) do
				local card = sgs.Sanguosha:getCard(id)
				if card:isKindOf("Treasure") then
					equips:append(card)
				end
			end
			if not equips:isEmpty() then
				local card = equips:at(math.random(0, equips:length() - 1))
				source:obtainCard(card, true)
			else
				local log = sgs.LogMessage()
				log.type = "#tanbao_find_fail"
				log.arg = "tanbao"
				room:sendLog(log)	--发送信息框消息
			end
		--end
	end
}
tanbao = sgs.CreateViewAsSkill{
	name = "tanbao",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return to_select:isKindOf("EquipCard") and not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = tanbao_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#tanbao") < 1
	end
}

lupu_tiancaitanxianjia:addSkill(tanbao)

sgs.LoadTranslationTable{
	["tanbao"] = "探宝",
	[":tanbao"] = "出牌阶段限一次，你可以弃置一张装备牌，随机获得牌堆、弃牌堆中的一张宝物牌。",
	["$tanbao"] = "",
	["#tanbao_find_fail"] = "没有可通过“%arg”获得的宝物牌",
}

--------------------------------------------------
--考徵
--------------------------------------------------

kaozhi_vs = sgs.CreateOneCardViewAsSkill{
	name = "kaozhi",
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, card)
    	return card:getSuit() == sgs.Card_Spade
	end,
	view_as = function(self, originalCard)
		local obj_name
		for _, mark in sgs.list(sgs.Self:getMarkNames()) do
			if string.startsWith(mark, "&kaozhi+") and sgs.Self:getMark(mark) > 0 then
				obj_name = string.sub(mark, 9, -6)		--截取到倒数第5位，避开"+_lun"后缀
				break
			end
		end
		
		local new_card = sgs.Sanguosha:cloneCard(obj_name, originalCard:getSuit(), originalCard:getNumber())
		new_card:addSubcard(originalCard:getId())
		new_card:setSkillName(self:objectName())
		return new_card
	end,
	enabled_at_play = function(self, player)
		if player:getMark("kaozhi_used") < 1 then
			local obj_name
			for _, mark in sgs.list(player:getMarkNames()) do
				if string.startsWith(mark, "&kaozhi+") and player:getMark(mark) > 0 then
					obj_name = string.sub(mark, 9, -6)
					break
				end
			end
			if obj_name then
				for _,card in sgs.qlist(player:getHandcards()) do
					if card:getSuit() == sgs.Card_Spade then
						return true
					end
				end
				for _,card in sgs.qlist(player:getEquips()) do
					if card:getSuit() == sgs.Card_Spade then
						return true
					end
				end
			end
		end
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		if player:getMark("kaozhi_used") < 1 then
			local obj_name
			for _, mark in sgs.list(player:getMarkNames()) do
				if string.startsWith(mark, "&kaozhi+") and player:getMark(mark) > 0 then
					obj_name = string.sub(mark, 9, -6)
					break
				end
			end
			
			if pattern == "peach" and player:getMark("Global_PreventPeach") > 0 then return false end
			if obj_name and string.find(pattern, obj_name) then
				for _,card in sgs.qlist(player:getHandcards()) do
					if card:getSuit() == sgs.Card_Spade then
						return true
					end
				end
				for _,card in sgs.qlist(player:getEquips()) do
					if card:getSuit() == sgs.Card_Spade then
						return true
					end
				end
			end
		end
		return false
	end,
	enabled_at_nullification = function(self, player)
		if player:getMark("kaozhi_used") < 1 then
			local obj_name
			for _, mark in sgs.list(player:getMarkNames()) do
				if string.startsWith(mark, "&kaozhi+") and player:getMark(mark) > 0 then
					obj_name = string.sub(mark, 9, -6)
					break
				end
			end
			if obj_name == "nullification" then
				for _,card in sgs.qlist(player:getHandcards()) do
					if card:getSuit() == sgs.Card_Spade then
						return true
					end
				end
				for _,card in sgs.qlist(player:getEquips()) do
					if card:getSuit() == sgs.Card_Spade then
						return true
					end
				end
			end
		end
		return false
	end
}
kaozhi = sgs.CreateTriggerSkill{
	name = "kaozhi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.RoundStart, sgs.PreCardUsed, sgs.PreCardResponded, sgs.BeforeCardsMove},
	view_as_skill = kaozhi_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.RoundStart then
			local cards = sgs.CardList()
			for _,id in sgs.qlist(room:getDiscardPile()) do
				local card = sgs.Sanguosha:getCard(id)
				cards:append(card)
			end
			if not cards:isEmpty() then
				local card_ids, can_choose_ids, cannot_choose_ids = sgs.IntList(), sgs.IntList(), sgs.IntList()
				for i=1,math.min(cards:length(), 3),1 do
					local random_one = cards:at(math.random(0, cards:length() - 1))
					cards:removeOne(random_one)
					card_ids:append(random_one:getId())
					if random_one:isKindOf("EquipCard") then
						cannot_choose_ids:append(random_one:getId())
					else
						can_choose_ids:append(random_one:getId())
					end
				end
				--if not can_choose_ids:isEmpty() then
					room:fillAG(card_ids, player, cannot_choose_ids)
					local id = room:askForAG(player, can_choose_ids, true, self:objectName())
					room:clearAG(player)
					local card = sgs.Sanguosha:getCard(id)
					if card then
						local logg = sgs.LogMessage()
						logg.from = player
						logg.type = "#InvokeSkill"
						logg.arg = self:objectName()
						room:sendLog(logg)	--显示技能发动提示信息
						room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
						if SkillNullify(player, self:objectName()) then		--询问技能无效化
							return false
						end
						local log = sgs.LogMessage()
						log.from = player
						log.type = "#kaozhi_log"
						log.arg = self:objectName()
						log.card_str = card:toString()
						room:sendLog(log)	--显示技能发动提示信息
						--player:setFlags("Fake_Move")
						--local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_RECYCLE, player:objectName(), nil, "hide_log_skill", nil)	--源码修正：reason技能为hide_log_skill的移动不会发送提示信息
						--room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, false, false)	--最后一个参数为真意味着多张牌会给观星框让玩家自行决定顺序
						--player:setFlags("-Fake_Move")
						room:moveCardsInToDrawpile(player, card, self:objectName(), -1, true)
						room:setPlayerMark(player, "&kaozhi+"..card:objectName().."+_lun", 1)
					end
				--end
			end
		elseif event == sgs.PreCardUsed or event == sgs.PreCardResponded then	--使用/打出记次数
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				--if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				--end
			end
			if card then
				if card:getSkillName() == "kaozhi" then
					room:addPlayerMark(player, "kaozhi_used", 1)
				end
			end
		elseif event == sgs.BeforeCardsMove then	--重铸记次数
			local move = data:toMoveOneTime()
			if player and player:isAlive() and move.from and move.from:isAlive() and player:objectName() == move.from:objectName() and move.reason.m_reason == sgs.CardMoveReason_S_REASON_RECAST and move.reason.m_skillName == "kaozhi" then
				room:addPlayerMark(player, "kaozhi_used", 1)
			end
		end
	end
}
table.insert(turn_end_clear_mark, "kaozhi_used")		--回合结束清除标记

lupu_tiancaitanxianjia:addSkill(kaozhi)

sgs.LoadTranslationTable{
	["kaozhi"] = "考徵",
	[":kaozhi"] = "轮次开始时，你可以<font color='#A9A9A9'>发动此技能</font>，从弃牌堆中的随机3张牌中选择一张非装备牌返回牌堆。<br/>每回合限一次，你可以将一张黑桃牌当本轮以此法返回牌堆的牌使用、打出或重铸。",
	["$kaozhi"] = "",
	["^AG_kaozhi"] = "<b>考徵</b><br/>发动“考徵”：双击选择一张牌<br/>不发动“考徵”：直接点击确定",
	["#kaozhi_log"] = "%from 选择的“%arg”目标牌为 %card",
}

--------------------------------------------------
--小狼崽 芬里尔
--设计者：萌龙少主
--------------------------------------------------

fenlier_xiaolangzai = sgs.General(extension,"fenlier_xiaolangzai","blondel","5",true)

sgs.LoadTranslationTable{
	["fenlier_xiaolangzai"] = "芬里尔",
	["&fenlier_xiaolangzai"] = "芬里尔",
	["#fenlier_xiaolangzai"] = "小狼崽",
	["$fenlier_xiaolangzai"] = "萌新",
	["designer:fenlier_xiaolangzai"] = "萌龙少主",
	["cv:fenlier_xiaolangzai"] = "",
	["illustrator:fenlier_xiaolangzai"] = "",
	["~fenlier_xiaolangzai"] = "",
}

--------------------------------------------------
--邀击
--------------------------------------------------

yaoji = sgs.CreateTriggerSkill{
	name = "yaoji",
	events = {sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		local use = data:toCardUse()
		if use.card and use.card:isKindOf("Slash") and not use.card:isKindOf("SkillCard") and use.card:getId() ~= -1 and room:getCardPlace(use.card:getId()) ~= sgs.Player_PlaceHand then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(use.to) do
				if p:isAlive() and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			local target = nil
			if not targets:isEmpty() then
				player:setTag("yaoji", data)	--AI用
				target = room:askForPlayerChosen(player, targets, self:objectName(), "yaoji-invoke:"..use.card:objectName(), true, true)
				player:removeTag("yaoji")	--AI用
			end
			if target and not SkillNullify(player, self:objectName()) then
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), target:objectName(), self:objectName(), "")
				room:moveCardTo(use.card, target, sgs.Player_PlaceHand, reason, false)
				player:drawCards(1, self:objectName())
			end
		end
		return false
	end
}

fenlier_xiaolangzai:addSkill(yaoji)

sgs.LoadTranslationTable{
	["yaoji"] = "邀击",
	[":yaoji"] = "你使用非转化的【杀】结算结束后，你可以<font color='#A9A9A9'>发动此技能</font>，将此牌交给此牌的一名目标角色，摸一张牌。",
	["yaoji-invoke"] = "你可以发动“邀击”，将 %src 交给一名目标角色，然后摸一张牌<br/> <b>操作提示</b>: 选择一名角色→点击确定<br/>",
	["$yaoji"] = "",
}

--------------------------------------------------
--小狼崽 叶神奈
--设计者：萌龙少主
--------------------------------------------------

yeshennai_xiaolangzai = sgs.General(extension,"yeshennai_xiaolangzai","blondel","4",true)

sgs.LoadTranslationTable{
	["yeshennai_xiaolangzai"] = "叶神奈",
	["&yeshennai_xiaolangzai"] = "叶神奈",
	["#yeshennai_xiaolangzai"] = "小狼崽",
	["$yeshennai_xiaolangzai"] = "萌新",
	["designer:yeshennai_xiaolangzai"] = "萌龙少主",
	["cv:yeshennai_xiaolangzai"] = "",
	["illustrator:yeshennai_xiaolangzai"] = "",
	["~yeshennai_xiaolangzai"] = "",
}

--------------------------------------------------
--奋音
--------------------------------------------------

luafenyinbuff = sgs.CreateTargetModSkill{
	name = "#luafenyinbuff",
	pattern = ".",
	residue_func = function(self, from, card, to)
		if from:hasSkill("luafenyin") and from:getPhase() == sgs.Player_Play and from:getMark("&luafenyin!") >= 2 and card:isKindOf("Slash") then
			return 1
		end
	end
}
luafenyin = sgs.CreateTriggerSkill{
	name = "luafenyin",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart, sgs.DrawNCards, sgs.TargetConfirmed},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start then
				if player:getLostHp() >= 1 then
					room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					room:setPlayerMark(player, "&luafenyin!", player:getLostHp())
					local log = sgs.LogMessage()
					log.type = "#luafenyin_log"
					log.arg = player:getLostHp()
					log.from = player
					room:sendLog(log)	--发送信息框消息
					--room:getThread():delay(300)
					--player:drawCards(1, self:objectName())
				end
			end
		elseif event == sgs.DrawNCards and player:getMark("&luafenyin!") > 0 then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			local count = data:toInt() + 1
			data:setValue(count)
		elseif event == sgs.TargetConfirmed then
			local use = data:toCardUse()
			if (use.from and player:objectName() ~= use.from:objectName()) or (player:getMark("&luafenyin!") < 3) or (not use.card:isKindOf("Slash")) or (use.to:length() == 0) then return false end
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			room:broadcastSkillInvoke(self:objectName())	--播放配音
			local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
			for i = 0, use.to:length() - 1, 1 do
				if jink_table[i+1] > 0 then
					jink_table[i+1] = jink_table[i+1] + 1
				end
			end
			local jink_data = sgs.QVariant()
			jink_data:setValue(Table2IntList(jink_table))
			player:setTag("Jink_" .. use.card:toString(), jink_data)
		end
	end
}
table.insert(turn_end_clear_mark, "&luafenyin!")	--回合结束清除标记

yeshennai_xiaolangzai:addSkill(luafenyin)
yeshennai_xiaolangzai:addSkill(luafenyinbuff)

sgs.LoadTranslationTable{
	["luafenyin"] = "奋音",
	["#luafenyinbuff"] = "奋音",
	[":luafenyin"] = "锁定技，准备阶段，若你已损失的体力值：<br/><font color='#9400D3'>≥1</font> 本回合你的通常摸牌数＋1；<br/><font color='#9400D3'>≥2</font> 本回合你使用【杀】的次数上限＋1；<br/><font color='#9400D3'>≥3</font> 本回合你使用的【杀】抵消所需【闪】的张数＋1。",
	["$luafenyin"] = "",
	["#luafenyin_log"] = "%from 已损失 %arg 点体力值",
}

--------------------------------------------------
--常备不懈 季毅
--设计者：月音风源
--------------------------------------------------

jiyi_changbeibuxie = sgs.General(extension,"jiyi_changbeibuxie","vector","4",false)

sgs.LoadTranslationTable{
	["jiyi_changbeibuxie"] = "季毅",
	["&jiyi_changbeibuxie"] = "季毅",
	["#jiyi_changbeibuxie"] = "常备不懈",
	["$jiyi_changbeibuxie"] = "一般",
	["designer:jiyi_changbeibuxie"] = "月音风源",
	["cv:jiyi_changbeibuxie"] = "",
	["illustrator:jiyi_changbeibuxie"] = "",
	["~jiyi_changbeibuxie"] = "",
}

--------------------------------------------------
--反理
--------------------------------------------------

fanli_vs = sgs.CreateOneCardViewAsSkill{
	name = "fanli",
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, card)
    	return true
	end,
	view_as = function(self, originalCard)
		local obj_name
		for _, mark in sgs.list(sgs.Self:getMarkNames()) do
			if string.startsWith(mark, "&fanli+") and sgs.Self:getMark(mark) > 0 then
				obj_name = string.sub(mark, 8, -1)
				break
			end
		end
		
		local new_card = sgs.Sanguosha:cloneCard(obj_name, originalCard:getSuit(), originalCard:getNumber())
		new_card:addSubcard(originalCard:getId())
		new_card:setSkillName(self:objectName())
		return new_card
	end,
	enabled_at_play = function(self, player)
		if player:getMark("fanli_used") == 0 and player:getPhase() == sgs.Player_Play then
			local obj_name
			for _, mark in sgs.list(player:getMarkNames()) do
				if string.startsWith(mark, "&fanli+") and player:getMark(mark) > 0 then
					obj_name = string.sub(mark, 8, -1)
					break
				end
			end
			return obj_name
		end
		return false
	end
}
fanli = sgs.CreateTriggerSkill{
	name = "fanli",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged, sgs.PreCardUsed, sgs.PreCardResponded},
	view_as_skill = fanli_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.card and not damage.card:isKindOf("EquipCard") and not damage.card:isKindOf("SkillCard") then
				local obj_name = damage.card:objectName()
				if obj_name ~= "" and player:getMark("&fanli+"..obj_name) == 0 then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					
					for _, mark in sgs.list(player:getMarkNames()) do	--清除旧的记录
						if string.startsWith(mark, "&fanli+") and player:getMark(mark) > 0 then
							room:setPlayerMark(player, mark, 0)
							break
						end
					end
					
					room:setPlayerMark(player, "&fanli+"..obj_name, 1)	--增加新的记录
				end
			end
		else
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				--if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				--end
			end
			if card then
				if card:getSkillName() == "fanli" then
					room:setPlayerMark(player, "fanli_used", 1)
				end
			end
		end
	end
}
table.insert(play_end_clear_mark, "fanli_used")		--出牌结束清除标记

jiyi_changbeibuxie:addSkill(fanli)

sgs.LoadTranslationTable{
	["fanli"] = "反理",
	[":fanli"] = "出牌阶段限一次，你可以将一张牌当上次对你造成伤害的牌使用。",
	["$fanli"] = "",
}

--------------------------------------------------
--势惜
--------------------------------------------------

shixi_buff = sgs.CreateMaxCardsSkill{
	name = "#shixi_buff",
	extra_func = function(self, target)
		if target:hasSkill("shixi") and target:getMark("&shixi") > 0 then
			return target:getLostHp() - target:getHp()
		end
	end
}
shixi = sgs.CreateTriggerSkill{
	name = "shixi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Discard then
				local kingdoms = {}
				for _,p in sgs.qlist(room:getAlivePlayers()) do
					if p:isWounded() and not table.contains(kingdoms, p:getKingdom()) then
						table.insert(kingdoms, p:getKingdom())
					end
				end
				local X = #kingdoms
				if X > 1 then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					player:drawCards(X, self:objectName())
					room:setPlayerMark(player, "&shixi", 1)
				end
			end
		end
		return false
	end
}
table.insert(discard_end_clear_mark, "&shixi")		--弃牌结束清除标记

jiyi_changbeibuxie:addSkill(shixi)
jiyi_changbeibuxie:addSkill(shixi_buff)

sgs.LoadTranslationTable{
	["shixi"] = "势惜",
	["#shixi_buff"] = "势惜",
	[":shixi"] = "锁定技，弃牌阶段开始时，若X＞1，你摸X张牌，然后本阶段你的手牌上限为你已损失的体力值。（X为场上已受伤角色的势力数）",
	["$shixi"] = "",
	[":mark:&shixi"] = "你的手牌上限为已损失的体力值",
}

--------------------------------------------------
--夺舍灵兔 夕兔
--设计者：NSX、夜玥紫英
--------------------------------------------------

xitu_duoshelingtu = sgs.General(extension,"xitu_duoshelingtu","keasofer","3",false)

sgs.LoadTranslationTable{
	["xitu_duoshelingtu"] = "夕兔",
	["&xitu_duoshelingtu"] = "夕兔",
	["#xitu_duoshelingtu"] = "夺舍灵兔",
	["$xitu_duoshelingtu"] = "进阶",
	["designer:xitu_duoshelingtu"] = "NSX、夜玥紫英",
	["cv:xitu_duoshelingtu"] = "",
	["illustrator:xitu_duoshelingtu"] = "",
	["~xitu_duoshelingtu"] = "",
}

--------------------------------------------------
--应激
--------------------------------------------------

yingjibuff = sgs.CreateTargetModSkill{
	name = "#yingjibuff",
	pattern = ".",
	residue_func = function(self, from, card, to)
		if from:getMark("&yingji") > 0 then
			return 1000
		end
	end,
	distance_limit_func = function(self, from, card)
		if from:getMark("&yingji") > 0 then
			return 1000
		end
	end
}
yingji = sgs.CreateTriggerSkill{
	name = "yingji",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.from and damage.from:isAlive() then
			damage.from:setFlags("yingji_AI")
			if player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. damage.from:objectName())) then
				damage.from:setFlags("-yingji_AI")	--及时清除
				room:doAnimate(1, player:objectName(), damage.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				if SkillNullify(player, self:objectName()) or not player:canEffect(damage.from, self:objectName()) then
					return false
				end
				damage.from:turnOver()
				damage.from:drawCards(1, self:objectName())
				room:setPlayerMark(damage.from, "&yingji", 1)
			end
			damage.from:setFlags("-yingji_AI")
		end
	end
}
table.insert(turn_end_clear_mark, "&yingji")		--回合结束清除标记

xitu_duoshelingtu:addSkill(yingji)
xitu_duoshelingtu:addSkill(yingjibuff)

sgs.LoadTranslationTable{
	["yingji"] = "应激",
	["#yingjibuff"] = "应激",
	[":yingji"] = "你受到伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，令伤害来源翻面并摸一张牌，然后本回合其使用牌无距离和次数限制。",
	["$yingji"] = "",
	["yingji:choice"] = "你可以对 %src 发动“应激”，令其翻面、摸一张牌、本回合使用牌无距离和次数限制",
	[":mark:&yingji"] = "本回合使用牌无距离和次数限制",
}

--------------------------------------------------
--附身
--------------------------------------------------

local function swap_player(room, source, target)
	source:setFlags("Fake_Move")
	if source:isAlive() and target:isAlive() then	--交换手牌
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, source:objectName())
		local moveA = sgs.CardsMoveStruct()
		moveA.card_ids = source:handCards()
		moveA.from_place = sgs.Player_PlaceHand
		moveA.to_place = sgs.Player_PlaceHand
		moveA.from = source
		moveA.to = target
		moveA.reason = reason
		local moveB = sgs.CardsMoveStruct()
		moveB.card_ids = target:handCards()
		moveB.from_place = sgs.Player_PlaceHand
		moveB.to_place = sgs.Player_PlaceHand
		moveB.from = target
		moveB.to = source
		moveB.reason = reason
		local moves = sgs.CardsMoveList()
		if not moveA.card_ids:isEmpty() then
			moves:append(moveA)
		end
		if not moveB.card_ids:isEmpty() then
			moves:append(moveB)
		end
		if not moves:isEmpty() then
			room:moveCardsAtomic(moves, false)
		end
	end
	if source:isAlive() and target:isAlive() then	--交换装备
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, source:objectName())
		local moveA = sgs.CardsMoveStruct()
		local equips = source:getEquips()
		for _,equip in sgs.qlist(equips) do
			local id = equip:getEffectiveId()
			moveA.card_ids:append(id)
		end
		moveA.from_place = sgs.Player_PlaceEquip
		moveA.to_place = sgs.Player_PlaceEquip
		moveA.from = source
		moveA.to = target
		moveA.reason = reason
		local moveB = sgs.CardsMoveStruct()
		equips = target:getEquips()
		for _,equip in sgs.qlist(equips) do
			local id = equip:getEffectiveId()
			moveB.card_ids:append(id)
		end
		moveB.from_place = sgs.Player_PlaceEquip
		moveB.to_place = sgs.Player_PlaceEquip
		moveB.from = target
		moveB.to = source
		moveB.reason = reason
		local moves = sgs.CardsMoveList()
		if not moveA.card_ids:isEmpty() then
			moves:append(moveA)
		end
		if not moveB.card_ids:isEmpty() then
			moves:append(moveB)
		end
		if not moves:isEmpty() then
			room:moveCardsAtomic(moves, false)
		end
	end
	if source:isAlive() and target:isAlive() then	--交换判定
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, source:objectName())
		local moveA = sgs.CardsMoveStruct()
		local judge_cards = source:getJudgingArea()
		for _,judge_card in sgs.qlist(judge_cards) do
			local id = judge_card:getEffectiveId()
			moveA.card_ids:append(id)
		end
		moveA.from_place = sgs.Player_PlaceDelayedTrick
		moveA.to_place = sgs.Player_PlaceDelayedTrick
		moveA.from = source
		moveA.to = target
		moveA.reason = reason
		local moveB = sgs.CardsMoveStruct()
		judge_cards = target:getJudgingArea()
		for _,judge_card in sgs.qlist(judge_cards) do
			local id = judge_card:getEffectiveId()
			moveB.card_ids:append(id)
		end
		moveB.from_place = sgs.Player_PlaceDelayedTrick
		moveB.to_place = sgs.Player_PlaceDelayedTrick
		moveB.from = target
		moveB.to = source
		moveB.reason = reason
		local moves = sgs.CardsMoveList()
		if not moveA.card_ids:isEmpty() then
			moves:append(moveA)
		end
		if not moveB.card_ids:isEmpty() then
			moves:append(moveB)
		end
		if not moves:isEmpty() then
			room:moveCardsAtomic(moves, false)
		end
	end
	if source:isAlive() and target:isAlive() then	--交换座次
		room:swapSeat(source, target)
	end
	source:setFlags("-Fake_Move")
end

fushen = sgs.CreateTriggerSkill{
	name = "fushen",
	frequency = sgs.Skill_Limited,
	limit_mark = "@fushen",
	events = {sgs.EventPhaseStart, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_NotActive and player:getMark("fushen_invoke") > 0 and player:getMark("@extra_turn") == 0 then
			room:setPlayerMark(player, "fushen_invoke", 0)
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getOtherPlayers(player)) do
				if player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			local to
			if not targets:isEmpty() then
				to = room:askForPlayerChosen(player, targets, self:objectName(), "#fushen_target_choose", false, false)
			end
			if to then
				local log = sgs.LogMessage()
				log.type = "#fushen_log"
				log.arg = self:objectName()
				log.from = player
				log.to:append(to)
				room:sendLog(log)	--发送信息框消息
				room:doAnimate(1, player:objectName(), to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				room:doAnimate(2, "skill=EyeAnim:xitu.png", "")
				room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				room:getThread():delay(2500)
				swap_player(room, player, to)
				room:setPlayerMark(to, "&fushen_target", 1)	--附身技能无效标记，无效效果已耦合入源码倾城
				room:setPlayerMark(player, "&fushen+"..to:getGeneralName(), 1)
				for _, skill in sgs.qlist(to:getSkillList(false, true)) do	--获得其可见技能直到本回合结束
					if skill:getFrequency() ~= sgs.Skill_Limited and skill:getFrequency() ~= sgs.Skill_Wake then	--排除限定技、觉醒技
						room:acquireOneTurnSkills(player, self:objectName(), skill:objectName())
					end
				end
				player:gainAnExtraTurn()
				local log = sgs.LogMessage()
				log.type = "#fushen_end_log"
				log.arg = self:objectName()
				log.from = player
				log.to:append(to)
				room:sendLog(log)	--发送信息框消息
				if to:isAlive() and player:isAlive() then
					swap_player(room, player, to)
				else
					room:swapSeat(player, to)
				end
			end
		elseif event == sgs.EventPhaseChanging and player:getMark("@fushen") > 0 and data:toPhaseChange().to == sgs.Player_Play and not player:isSkipped(sgs.Player_Play) then
			if player:askForSkillInvoke(self:objectName(), data) then
				player:loseMark("@fushen")
				room:setPlayerMark(player, "fushen_invoke", 1)
				player:skip(sgs.Player_Play)
				return false
			end
		end
	end
}
table.insert(turn_end_clear_mark_prefix, "&fushen")		--回合结束清除指定前缀的标记

xitu_duoshelingtu:addSkill(fushen)

sgs.LoadTranslationTable{
	["fushen"] = "附身",
	[":fushen"] = "限定技，你可以跳过出牌阶段，若如此做，本回合结束后，你可以<font color='#008080'><u><strong>附身</strong></u></font>一名其他角色执行一个额外回合。<br/><br/><font color='#008080'><u>附身</u>：你与其交换座次、区域内的牌，你获得其技能（觉醒技、限定技除外）直到回合结束，且附身期间其所有技能无效。附身结束后，你与其交换座次，若双方均在场则交换区域内的牌。</font>",
	["$fushen"] = "",
	["@fushen"] = "灵能",
	["fushen_target"] = "被附身",
	["fushen_using"] = "附身中",
	["#fushen_target_choose"] = "请选择你要附身的角色",
	["#fushen_log"] = "%from 执行了“%arg”的效果，附身目标为 %to",
	["#fushen_end_log"] = "%from 对 %to 的附身回合结束",
}

--------------------------------------------------
--孤生似羽 竹菇笙
--设计者：
--------------------------------------------------

zhugusheng_gushengsiyu = sgs.General(extension,"zhugusheng_gushengsiyu$","VirtualDove","3",false)

sgs.LoadTranslationTable{
	["zhugusheng_gushengsiyu"] = "竹菇笙",
	["&zhugusheng_gushengsiyu"] = "竹菇笙",
	["#zhugusheng_gushengsiyu"] = "孤生似羽",
	["$zhugusheng_gushengsiyu"] = "简单",
	["designer:zhugusheng_gushengsiyu"] = "空月之羽、NSX",
	["cv:zhugusheng_gushengsiyu"] = "",
	["illustrator:zhugusheng_gushengsiyu"] = "",
	["~zhugusheng_gushengsiyu"] = "",
}

zhugusheng_gushengsiyu:setGender(sgs.General_Sexless)

--------------------------------------------------
--竹生
--------------------------------------------------

zhusheng_card = sgs.CreateSkillCard{
	name = "zhusheng",
	target_fixed = false,
	will_throw = true,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canDiscard(to_select, "he") and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local cost_card = sgs.Sanguosha:getCard(self:getSubcards():first())
		local is_spade = cost_card:getSuit() == sgs.Card_Spade
		if not SkillNullify(source, self:objectName()) then
			local target = targets[1]
			local do_overt = false
			
			local not_overt_cards = {}
			for _,cd in sgs.qlist(target:getHandcards()) do
				if not cd:isOvert() then
					room:setCardFlag(cd, "zhusheng_flag")
					table.insert(not_overt_cards, cd)
				end
			end
			if #not_overt_cards >= 2 then
				local dummy
				if is_spade then
					dummy = room:askForExchange(target, self:objectName(), 2, 2, false, "@zhusheng_overt_force", false, ".|.|.|hand|zhusheng_flag")
				else
					dummy = room:askForExchange(target, self:objectName(), 2, 2, false, "@zhusheng_overt:"..source:objectName(), true, ".|.|.|hand|zhusheng_flag")
				end
				if dummy and dummy:subcardsLength() > 0 then
					room:setOvertCards(target, dummy:getSubcards(), true)
					do_overt = true
				end
				if dummy then
					dummy:deleteLater()
				end
			end
			for _,cd in ipairs(not_overt_cards) do
				room:setCardFlag(cd, "-zhusheng_flag")
			end
			
			if (not do_overt or is_spade) and source:canDiscard(target, "he") then
				local card_id = room:askForCardChosen(source, target, "he", self:objectName(), false, sgs.Card_MethodDiscard)
				room:throwCard(card_id, target, source)
				local card = sgs.Sanguosha:getCard(card_id)
				if card:isKindOf("Indulgence") or card:isKindOf("Cangbaotu") then
					RecordUnlockGenerals(source, "leyuandeluotuowu")	--为玩家记录可解锁角色
				end
			end
		end
	end
}
zhusheng = sgs.CreateViewAsSkill{
	name = "zhusheng",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = zhusheng_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#zhusheng") < 1
	end
}

zhugusheng_gushengsiyu:addSkill(zhusheng)

sgs.LoadTranslationTable{
	["zhusheng"] = "竹生",
	[":zhusheng"] = "出牌阶段限一次，你可以弃置一张 <font color='#9400D3'>黑桃/非黑桃</font> 牌并指定一名角色，<font color='#A9A9A9'>发动此技能</font>，令其 <font color='#9400D3'>依次执行/选择一项</font>：1.明置两张牌 2.被你破坏一张牌。",
	["$zhusheng"] = "",
	["^zhusheng"] = "操作提示：<br/>选择一张牌→选择一名角色→确定",
	["@zhusheng_overt"] = "请明置两张手牌，否则被 %src 破坏一张牌<br/>操作提示：<br/>①明置手牌：选择两张手牌→确定<br/>②被破坏牌：取消",
	["@zhusheng_overt_force"] = "请明置两张手牌<br/>操作提示：选择两张手牌→确定",
}

--------------------------------------------------
--隐林
--------------------------------------------------

yinlin_buff = sgs.CreateProhibitSkill{
	name = "#yinlin_buff",
	frequency = sgs.Skill_Compulsory,
	is_prohibited = function(self, from, to, card)
		return from and to and card and not card:isKindOf("SkillCard") and to:hasSkill("yinlin") and from:getMark("yinlin_count") == 1 and from:objectName() ~= to:objectName()
	end
}
yinlin = sgs.CreateTriggerSkill{
	name = "yinlin",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardUsed, sgs.CardResponded},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if (event == sgs.CardUsed or event == sgs.CardResponded) and player and player:isAlive() and player:getPhase() == sgs.Player_Play then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and not card:isKindOf("SkillCard") then
				room:addPlayerMark(player, "yinlin_count", 1)
			end
		end
	end
}
table.insert(play_end_clear_mark, "yinlin_count")	--出牌结束清除标记

zhugusheng_gushengsiyu:addSkill(yinlin)
zhugusheng_gushengsiyu:addSkill(yinlin_buff)

sgs.LoadTranslationTable{
	["yinlin"] = "隐林",
	["#yinlin_buff"] = "隐林",
	[":yinlin"] = "锁定技，其他角色于其出牌阶段内使用的第二张牌不能指定你为目标。",
	["$yinlin"] = "",
}

--------------------------------------------------
--鸽魂
--未造成过伤害继续借用儒琴（儒琴真好用）
--------------------------------------------------
--[[
gehun = sgs.CreateTriggerSkill{
	name = "gehun$",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			if not player:hasFlag("damage_caused_ruqin") and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. 3)) and not SkillNullify(player, self:objectName()) then
				--if player:getMark("&gehun!") < 3 then
				--	room:addPlayerMark(player, "&gehun!", 1)
				--end
				--room:addPlayerMark(player, "gehun_skip", 1)		--跳过下个摸牌阶段耦合入冰火冰糖的“旧魇”
				--player:drawCards(2+player:getMark("&gehun!"), self:objectName())
				player:drawCards(3, self:objectName())
			--else
				--room:setPlayerMark(player, "&gehun!", 0)
			end
		end
	end,
	can_trigger = function(self, target)
		return target and target:isAlive() and target:hasSkill(self:objectName()) and target:hasLordSkill(self:objectName()) and target:getRole() == "lord"
	end
}

zhugusheng_gushengsiyu:addSkill(gehun)

sgs.LoadTranslationTable{
	["gehun"] = "鸽魂",
	[":gehun"] = "主公技，结束阶段，若你本回合未造成过伤害，你可以<font color='#A9A9A9'>发动此技能</font>，摸3张牌，跳过下个摸牌阶段。",
	["$gehun"] = "",
	["gehun:choice"] = "你可以发动“鸽魂”，摸 %src 张牌，跳过下个摸牌阶段",
}]]

--------------------------------------------------
--鸽魂二版
--------------------------------------------------

gehun = sgs.CreateTriggerSkill{
	name = "gehun$",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart, sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart and player and player:isAlive() and player:hasSkill(self:objectName()) and player:hasLordSkill(self:objectName()) and player:getRole() == "lord" then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			local X = 0
			for _,p in sgs.qlist(room:getAlivePlayers()) do
				X = X + 1
				if p:getKingdom() == "VirtualDove" then
					X = X + 1
				end
			end
			room:setPlayerMark(player, "&gehun!", X+1)
			room:gainMaxHp(player, X)
			local recover = sgs.RecoverStruct()
			recover.who = player
			recover.recover = X
			room:recover(player, recover)
		elseif event == sgs.EventPhaseChanging and player:getMark("&gehun!") > 0 then
			local change = data:toPhaseChange()
			if change.from ~= sgs.Player_NotActive and change.to == sgs.Player_NotActive then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				room:removePlayerMark(player, "&gehun!", 1)
				room:loseMaxHp(player, 1)
			end
		end
	end
}

zhugusheng_gushengsiyu:addSkill(gehun)

sgs.LoadTranslationTable{
	["gehun"] = "鸽魂",
	[":gehun"] = "主公技，锁定技，游戏开始时，你增加X点体力上限、回复X点体力，下X＋1个回合结束时，你失去1点体力上限。（X为在场角色数＋鸽舍角色数）",
	["$gehun"] = "",
}

--------------------------------------------------
--乐园的 骆驼巫
--设计者：
--------------------------------------------------

leyuandeluotuowu = sgs.General(extension,"leyuandeluotuowu","VirtualDove","3",false,true,true)

sgs.LoadTranslationTable{
	["leyuandeluotuowu"] = "骆驼巫",
	["&leyuandeluotuowu"] = "骆驼巫",
	["#leyuandeluotuowu"] = "乐园的",
	["$leyuandeluotuowu"] = "一般",
	["designer:leyuandeluotuowu"] = "",
	["cv:leyuandeluotuowu"] = "",
	["illustrator:leyuandeluotuowu"] = "",
	["unlock:leyuandeluotuowu"] = "使用竹菇笙的“竹生”破坏一张【乐不思蜀】或【藏宝图】",
	["~leyuandeluotuowu"] = "",
}

leyuandeluotuowu:setBonus(true)	--设为奖励角色

--------------------------------------------------
--钢板驼峰
--------------------------------------------------

gangbantuofeng = sgs.CreateTriggerSkill{
	name = "gangbantuofeng",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.BeforeCardsMove},
	on_trigger = function(self, event, player, data, room)
		local move = data:toMoveOneTime()
		local triggered = false
		local trigger_type = 0
		local new_card_ids = sgs.IntList()
		local remove_card_ids = sgs.IntList()
		local dummy_throw = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		if move.from and move.from:objectName() == player:objectName() and move.from_places:contains(sgs.Player_PlaceEquip) then	--失去装备
			for i = 0, move.card_ids:length() - 1, 1 do
				local id = move.card_ids:at(i)
				local card = sgs.Sanguosha:getCard(id)
				if move.from_places:at(i) ~= sgs.Player_PlaceEquip or move.reason.m_skillName == card:objectName() then	--允许因装备自身效果离场（防止宇航兔两轮车无限发效）
					new_card_ids:append(id)
				else
					triggered = true
					trigger_type = 1
					remove_card_ids:append(id)
				end
			end
			if triggered then
				move.from_places:removeAll(sgs.Player_PlaceEquip)
			end
		elseif move.to and move.to:objectName() == player:objectName() and move.to_place == sgs.Player_PlaceEquip then	--获得重复装备
			for _, id in sgs.qlist(move.card_ids) do
				local card = sgs.Sanguosha:getCard(id)
				if card and card:isKindOf("EquipCard") then
					local equip_index = card:getRealCard():toEquipCard():location()
					if player:hasEquipArea(equip_index) and player:getEquip(equip_index) ~= nil then
						triggered = true
						trigger_type = 2
						dummy_throw:addSubcard(id)
						remove_card_ids:append(id)
						continue
					end
				end
				new_card_ids:append(id)
			end
		end
		if triggered then
			local logg = sgs.LogMessage()
			logg.from = player
			logg.type = "$gangbantuofeng_invoke"..trigger_type
			logg.arg = self:objectName()
			room:sendLogWithIds(logg, remove_card_ids)	--显示技能发动提示信息
			room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
			
			if dummy_throw:subcardsLength() > 0 then
				room:moveCardTo(dummy_throw, nil, nil, sgs.Player_DiscardPile, move.reason)
			end
			
			move.card_ids = new_card_ids
			data:setValue(move)
		end
		dummy_throw:deleteLater()
		return false
	end
}

leyuandeluotuowu:addSkill(gangbantuofeng)

sgs.LoadTranslationTable{
	["gangbantuofeng"] = "钢板驼峰",
	[":gangbantuofeng"] = "锁定技，"..WordState("锁定", word_lock_equip).."你装备区内的装备牌。",
	["$gangbantuofeng"] = "",
	["$gangbantuofeng_invoke1"] = "%from 的“%arg”被触发，%from 的 %card 不能离开装备区",
	["$gangbantuofeng_invoke2"] = "%from 的“%arg”被触发，%from 不能将 %card 置入装备区",
}

--------------------------------------------------
--乐园之诗
--------------------------------------------------

leyuanzhishiUseCard = sgs.CreateSkillCard{
	name = "leyuanzhishiUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(sgs.Self:getMark("leyuanzhishi_id")-1)
		return card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
	end,
	feasible = function(self, targets)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(sgs.Self:getMark("leyuanzhishi_id")-1)
		return card and card:targetsFeasible(targets_list, sgs.Self)
	end,
	about_to_use = function(self, room, use)
		local card_for_use = sgs.Sanguosha:getCard(use.from:getMark("leyuanzhishi_id")-1)
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
leyuanzhishi_card = sgs.CreateSkillCard{
	name = "leyuanzhishi",
	target_fixed = true,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		local return_ids = sgs.IntList()
		for _,card in sgs.qlist(source:getHandcards()) do
			return_ids:append(card:getId())
		end
		local N = return_ids:length()
		if N > 0 then
			room:shuffleIntoDrawPile(source, return_ids, self:objectName(), false)
		end
		
		while true do
			local card_id = room:drawCard()
			local card = sgs.Sanguosha:getCard(card_id)
			
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_TURNOVER, source:objectName(), nil, self:objectName(), nil)
			room:moveCardTo(card, source, nil, sgs.Player_PlaceTable, reason, true)
			source:setFlags("Fake_Move")
			source:obtainCard(card, true)
			source:setFlags("-Fake_Move")
			
			local used = false
			if source:canUse(card, room:getAlivePlayers(), false, true) then	--新增第四个参数，在出牌阶段内询问使用的杀也受次数限制
				room:setPlayerMark(source, "leyuanzhishi_id", card_id+1)	--记录拼点牌，id+1避免id为0的牌的情况
				used = room:askForUseCard(source, "@@leyuanzhishi", "@leyuanzhishi")
				room:setPlayerMark(source, "leyuanzhishi_id", 0)	--清理记录
			end
			
			if used then
				room:addPlayerHistory(source, getCardClassName(card), 1)
			else
				source:setFlags("Fake_Move")
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, source:objectName(), nil, self:objectName(), nil)
				room:moveCardTo(card, source, nil, sgs.Player_DiscardPile, reason, true)
				source:setFlags("-Fake_Move")
				break
			end
		end
	end
}
leyuanzhishi = sgs.CreateViewAsSkill{
	name = "leyuanzhishi",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@leyuanzhishi" and #cards == 0 and sgs.Self:getMark("leyuanzhishi_id") > 0 then
			local NewSkillCard = leyuanzhishiUseCard:clone()
			return NewSkillCard
		else
			local NewSkillCard = leyuanzhishi_card:clone()
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#leyuanzhishi") < 1 and not player:isKongcheng()
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@leyuanzhishi"
	end
}

leyuandeluotuowu:addSkill(leyuanzhishi)

sgs.LoadTranslationTable{
	["leyuanzhishi"] = "乐园之诗",
	[":leyuanzhishi"] = "出牌阶段限一次，你可以将所有手牌返回牌堆，亮出牌堆顶的牌，然后你可以使用之并重复此流程。",
	["$leyuanzhishi"] = "",
	["@leyuanzhishi"] = "你可以使用牌堆顶的牌，然后重复此流程",
	["~leyuanzhishi"] = "使用：选择目标（若需要）→确定<br/>不使用：取消",
}

--------------------------------------------------
--幽海鸢行 七海幽娴
--设计者：
--------------------------------------------------

qihaiyouxian_zhuangzhilingyun = sgs.General(extension,"qihaiyouxian_zhuangzhilingyun","VirtualDove","3",false,false,false,4)

sgs.LoadTranslationTable{
	["qihaiyouxian_zhuangzhilingyun"] = "七海幽娴",
	["&qihaiyouxian_zhuangzhilingyun"] = "七海幽娴",
	["#qihaiyouxian_zhuangzhilingyun"] = "幽海鸢行",
	["$qihaiyouxian_zhuangzhilingyun"] = "萌新",
	["designer:qihaiyouxian_zhuangzhilingyun"] = "NSX",
	["cv:qihaiyouxian_zhuangzhilingyun"] = "",
	["illustrator:qihaiyouxian_zhuangzhilingyun"] = "",
	["~qihaiyouxian_zhuangzhilingyun"] = "",
}

qihaiyouxian_zhuangzhilingyun:setGender(sgs.General_Sexless)

--------------------------------------------------
--幽蓝
--------------------------------------------------

youlan = sgs.CreateTriggerSkill{
	name = "youlan",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageInflicted, sgs.DamageCaused},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.nature == sgs.DamageStruct_Light then return false end
			if damage.damage > 0 and damage.card and damage.card:isKindOf("TrickCard") then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:doPicAnimate(player:objectName(), "skill/qihaiyouxian_2")	--doPicAnimate:令指定玩家短暂显示一张图片
				--room:setPlayerMark(player, "&youlan->"..damage.card:objectName(), 1)
				--return true
				damage.damage = damage.damage - 1
				if damage.damage <= 0 then
					room:setEmotion(player, "skill_nullify")
					return true
				end
				data:setValue(damage)
			end
		elseif event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage.nature == sgs.DamageStruct_Light then return false end
			if damage.damage > 0 and damage.card and damage.card:isKindOf("TrickCard") --[[and player:getMark("&youlan->"..damage.card:objectName()) == 0]] then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:doPicAnimate(player:objectName(), "skill/qihaiyouxian_1")	--doPicAnimate:令指定玩家短暂显示一张图片
				damage.damage = damage.damage + 1
				data:setValue(damage)
			end
		end
	end
}

qihaiyouxian_zhuangzhilingyun:addSkill(youlan)

sgs.LoadTranslationTable{
	["youlan"] = "幽蓝",
	[":youlan"] = "锁定技，你受到锦囊牌造成的伤害－1；你使用锦囊牌造成的伤害＋1。",
	["$youlan"] = "",
}

--------------------------------------------------
--角色特性：箭雨（七海幽娴）
--------------------------------------------------

characteristic_jianyu_qihaiyouxian = sgs.CreateTriggerSkill{
	name = "#characteristic_jianyu_qihaiyouxian",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			for id = 0,500,1 do
				if sgs.Sanguosha:getCard(id) then
					local card = sgs.Sanguosha:getCard(id)
					if card and (card:isKindOf("ArcheryAttack") and card:getSuit() == sgs.Card_Heart and card:getNumber() == 7) and room:getCardPlace(id) == sgs.Player_PlaceTable then
						room:moveCardsInToDrawpile(player, card, "", -1, true)
					end
				end
			end
		end
	end,
}
characteristic_jianyu_qihaiyouxian_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_jianyu_qihaiyouxian_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_jianyu_qihaiyouxian_state)
qihaiyouxian_zhuangzhilingyun:addSkill(characteristic_jianyu_qihaiyouxian)
qihaiyouxian_zhuangzhilingyun:addRelateSkill("characteristic_jianyu_qihaiyouxian_state")

sgs.LoadTranslationTable{
	["characteristic_jianyu_qihaiyouxian"] = "箭雨",
	["#characteristic_jianyu_qihaiyouxian"] = "箭雨",
	["characteristic_jianyu_qihaiyouxian_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_jianyu_qihaiyouxian_state"] = "<font color='#DAA520'><b>箭雨</b><br/>游戏开始时，将一张【万箭齐发】加入牌堆。</font>",
	["$characteristic_jianyu_qihaiyouxian_state"] = "",
}

--------------------------------------------------
--夜尽回音 星和
--设计者：
--------------------------------------------------

xinghe_yejinhuiyin = sgs.General(extension,"xinghe_yejinhuiyin","ciyuanjingxiang","3",false)

sgs.LoadTranslationTable{
	["xinghe_yejinhuiyin"] = "星和",
	["&xinghe_yejinhuiyin"] = "星和",
	["#xinghe_yejinhuiyin"] = "夜尽回音",
	["$xinghe_yejinhuiyin"] = "简单",
	["designer:xinghe_yejinhuiyin"] = "夜玥紫英、SunFlower、月音风源",
	["cv:xinghe_yejinhuiyin"] = "",
	["illustrator:xinghe_yejinhuiyin"] = "",
	["~xinghe_yejinhuiyin"] = "",
}

--------------------------------------------------
--恒心
--------------------------------------------------

hengxin = sgs.CreateTriggerSkill{
	name = "hengxin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local damage = data:toDamage()
			if damage.damage > 0 and not player:isNude() and damage.from and damage.from:isAlive() and not damage.from:isNude() then
				local card = room:askForCard(player, ".|.|.|hand,equipped", "@hengxin_put:"..damage.from:objectName(), data, sgs.Card_MethodNone)
				if card then
					local logg = sgs.LogMessage()
					logg.from = player
					logg.type = "#ChoosePlayerWithSkill"
					logg.arg = self:objectName()
					logg.to:append(damage.from)
					room:sendLog(logg)	--显示技能发动提示信息
					room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
					room:doAnimate(1, player:objectName(), damage.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					if not SkillNullify(player, self:objectName()) then
						player:addToPile("hengxin_pile", card, false)
						
						if damage.from:isAlive() and not damage.from:isNude() then
							local card = room:askForCard(damage.from, ".|.|.|hand,equipped!", "@hengxin_put_force", data, sgs.Card_MethodNone)
							if card then
								player:addToPile("hengxin_pile", card, false)
							end
						end
					end
				end
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:isKongcheng() then
					room:sendCompulsoryTriggerLog(myself, self:objectName())	--显示锁定技发动
					myself:drawCards(1, self:objectName())
					--if not myself:isNude() then
					--	local card = room:askForCard(myself, ".|.|.|hand,equipped!", "@hengxin_put_force", data, sgs.Card_MethodNone)
					--	if card then
					--		myself:addToPile("hengxin_pile", card, false)
					--	end
					--end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target and target:isAlive()
	end
}

xinghe_yejinhuiyin:addSkill(hengxin)

sgs.LoadTranslationTable{
	["hengxin"] = "恒心",
	[":hengxin"] = "一名角色的结束阶段，若你没有手牌，你摸一张牌。<br/>你受到伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，令你与伤害来源各将一张牌作为<font color='#804040'>“质子”</font>置于你的除外区。",
	["$hengxin"] = "",
	["hengxin_pile"] = "质子",
	["@hengxin_put"] = "你可以发动“恒心”将一张牌作为“质子”除外，令 %src 将一张牌作为“质子”除外",
	["@hengxin_put_force"] = "请将一张牌作为“质子”除外",
}

--------------------------------------------------
--星迹
--------------------------------------------------

function doXingji(player)
	local room = player:getRoom()
	room:revivePlayer(player)
	local general_name = player:getGeneralName()
	doChangeHeroAnimate(room, general_name, "xinghe_core")
	room:changeHero(player, "xinghe_core", true, true, false, true)
	RecordOriginGeneral(player, general_name)	--记录原角色，避免胜率记录混乱
end

xingji = sgs.CreateTriggerSkill{
	name = "xingji",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Death},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Death then
			local death = data:toDeath()
			if death.damage and death.damage.reason and death.damage.reason == "xingji" then
				room:setPlayerMark(player, "xingji-Keep", 1)
			end
			if player and player:hasSkill(self:objectName()) and death.who:objectName() == player:objectName() then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:doAnimate(2, "skill=EyeAnim:xinghe.png", "")
				room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				room:getThread():delay(2500)
				for _, to in sgs.qlist(room:getOtherPlayers(player)) do
					if player:canEffect(to, self:objectName()) then
						room:doAnimate(1, player:objectName(), to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						local do_damage = sgs.DamageStruct(self:objectName(), player, to)
						do_damage.nature = sgs.DamageStruct_Light
						room:damage(do_damage)
					end
				end
				doXingji(player)
				for _,p in sgs.qlist(room:getAllPlayers(true)) do
					if p:isDead() and p:getMark("xingji-Keep") > 0 then
						room:setPlayerMark(p, "xingji-Keep", 0)
						doXingji(p)
					end
				end
				if not player:getPile("hengxin_pile"):isEmpty() then
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					for _,id in sgs.qlist(player:getPile("hengxin_pile")) do
						dummy:addSubcard(id)
					end
					player:obtainCard(dummy, false)
					dummy:deleteLater()
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

xinghe_yejinhuiyin:addSkill(xingji)

sgs.LoadTranslationTable{
	["xingji"] = "星迹",
	[":xingji"] = "锁定技，你离场时，对其他角色各造成1点光芒伤害，然后你和因此伤害离场的角色复活并变化为星核，你获得所有<font color='#804040'>“质子”</font>。",
	["$xingji"] = "",
}

--------------------------------------------------
--星核
--设计者：
--------------------------------------------------

xinghe_core = sgs.General(extension,"xinghe_core","ciyuanjingxiang","2",false,true)

sgs.LoadTranslationTable{
	["xinghe_core"] = "星核",
	["&xinghe_core"] = "星核",
	["#xinghe_core"] = "",
	["$xinghe_core"] = "萌新",
	--["parent:xinghe_core"] = "xinghe_yejinhuiyin",	--本体角色名
	["designer:xinghe_core"] = "SunFlower",
	["cv:xinghe_core"] = "",
	["illustrator:xinghe_core"] = "",
	["~xinghe_core"] = "",
}

xinghe_core:setGender(sgs.General_Sexless)

--------------------------------------------------
--红移
--------------------------------------------------

hongyi_xinghe = sgs.CreateDistanceSkill{
	name = "hongyi_xinghe",
	correct_func = function(self, from, to)
		local count = 0
		if from:objectName() ~= to:objectName() and from:hasSkill("hongyi_xinghe") then
			count = count + 1
		end
		if from:objectName() ~= to:objectName() and to:hasSkill("hongyi_xinghe") then
			count = count + 1
		end
		return count
	end
}

--xinghe_core:addSkill(hongyi_xinghe)

sgs.LoadTranslationTable{
	["hongyi_xinghe"] = "红移",
	[":hongyi_xinghe"] = "锁定技，你↔其他角色 距离＋1。",
	["$hongyi_xinghe"] = "",
}

--------------------------------------------------
--游子所梦为何 戦
--设计者：萌龙少主
--------------------------------------------------

zhangege_v2 = sgs.General(extension,"zhangege_v2","individual","3",true)

sgs.LoadTranslationTable{
	["zhangege_v2"] = "戦",
	["&zhangege_v2"] = "戦",
	["#zhangege_v2"] = "游子所梦为何",
	["$zhangege_v2"] = "进阶",
	["designer:zhangege_v2"] = "戦、萌龙少主",
	["cv:zhangege_v2"] = "",
	["illustrator:zhangege_v2"] = "",
	["~zhangege_v2"] = "",
}

zhangege_v2_2 = sgs.General(extension,"zhangege_v2_2","individual","3",true,true,true)

sgs.LoadTranslationTable{
	["zhangege_v2_2"] = "戦",
	["&zhangege_v2_2"] = "戦",
	["#zhangege_v2_2"] = "游子所梦为何",
	["$zhangege_v2_2"] = "进阶",
	["parent:zhangege_v2_2"] = "zhangege_v2",	--本体角色名
	["designer:zhangege_v2_2"] = "戦、萌龙少主",
	["cv:zhangege_v2_2"] = "",
	["illustrator:zhangege_v2_2"] = "",
	["~zhangege_v2_2"] = "",
}

--------------------------------------------------
--梦见
--------------------------------------------------

mengjian = sgs.CreateTriggerSkill{
	name = "mengjian",
	frequency = sgs.Skill_Frequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start then
			if room:askForSkillInvoke(player, self:objectName(), data) then
				local change_back = false
				if player:getGeneralName() == "zhangege_v2" then
					change_back = true
					room:setPlayerProperty(player, "general", sgs.QVariant("zhangege_v2_2"))	--更换武将卡面
				end
				
				local cards = room:getNCards(5)
				room:askForGuanxing(player, cards, sgs.Room_GuanxingBothSides, true, player:aliveCount())
				
				if player:getGeneralName() == "zhangege_v2_2" and change_back then
					room:setPlayerProperty(player, "general", sgs.QVariant("zhangege_v2"))	--更换武将卡面
				end
			end
		end
		return false
	end,
}

zhangege_v2:addSkill(mengjian)
zhangege_v2_2:addSkill(mengjian)

sgs.LoadTranslationTable{
	["mengjian"] = "梦见",
	[":mengjian"] = "准备阶段，你可以观看牌堆顶的5张牌，将至多X张牌置于牌堆顶、其余牌置于牌堆底。（X为在场角色数）",
	["$mengjian"] = "",
}

--------------------------------------------------
--漂泊
--------------------------------------------------

piaobo = sgs.CreateTriggerSkill{
	name = "piaobo",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetConfirming},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetConfirming then
			local use = data:toCardUse()
			if use.to and use.to:contains(player) then
				if use.from and use.from:objectName() ~= player:objectName() and not use.card:isKindOf("SkillCard") and use.card:isKindOf("TrickCard") then
					if use.from then
						use.from:setFlags("piaobo_usefrom_AI")	--AI用
					end
					if player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. use.card:objectName())) and not SkillNullify(player, self:objectName()) then
						local judge = sgs.JudgeStruct()
						judge.pattern = ".|black"
						judge.good = true
						judge.reason = self:objectName()
						judge.who = player
						judge.play_animation = true
						judge.time_consuming = false
						room:judge(judge)
						if judge:isGood() then
							local log = sgs.LogMessage()
							log.type = "$piaobo_nullify"
							log.from = use.from
							log.arg = self:objectName()
							log.arg2 = use.card:objectName()
							log.to:append(player)
							room:sendLog(log)
							
							use.to:removeAll(player)
							room:sortByActionOrder(use.to)
							data:setValue(use)
						end
					end
					if use.from then
						use.from:setFlags("-piaobo_usefrom_AI")	--AI用
					end
				end
			end
		end
	end
}

zhangege_v2:addSkill(piaobo)
zhangege_v2_2:addSkill(piaobo)

sgs.LoadTranslationTable{
	["piaobo"] = "漂泊",
	[":piaobo"] = "你成为其他角色使用锦囊牌的目标时，你可以<font color='#A9A9A9'>发动此技能</font>，进行一次判定，若结果为黑色，你不再为此牌的目标。",
	["$piaobo_nullify"] = "由于“%arg”的效果，%from 使用的 %arg2 失去目标 %to",
	["$piaobo"] = "",
	["piaobo:choice"] = "你可以发动“漂泊”，进行判定，若结果为黑色则你不再是 %src 的目标",
}

--------------------------------------------------
--角色特性：箭雨（戦）
--------------------------------------------------

characteristic_jianyu_zhan = sgs.CreateTriggerSkill{
	name = "#characteristic_jianyu_zhan",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			for id = 0,500,1 do
				if sgs.Sanguosha:getCard(id) then
					local card = sgs.Sanguosha:getCard(id)
					if card and (card:isKindOf("ArcheryAttack") and card:getSuit() == sgs.Card_Spade and card:getNumber() == 5) and room:getCardPlace(id) == sgs.Player_PlaceTable then
						room:moveCardsInToDrawpile(player, card, "", -1, true)
					end
				end
			end
		end
	end,
}
characteristic_jianyu_zhan_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_jianyu_zhan_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_jianyu_zhan_state)
zhangege_v2:addSkill(characteristic_jianyu_zhan)
zhangege_v2:addRelateSkill("characteristic_jianyu_zhan_state")
zhangege_v2_2:addSkill(characteristic_jianyu_zhan)
zhangege_v2_2:addRelateSkill("characteristic_jianyu_zhan_state")

sgs.LoadTranslationTable{
	["characteristic_jianyu_zhan"] = "箭雨",
	["#characteristic_jianyu_zhan"] = "箭雨",
	["characteristic_jianyu_zhan_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_jianyu_zhan_state"] = "<font color='#DAA520'><b>箭雨</b><br/>游戏开始时，将一张【万箭齐发】加入牌堆。</font>",
	["$characteristic_jianyu_zhan_state"] = "",
}

--------------------------------------------------
--天眷的游子 ★戦
--设计者：萌龙少主
--------------------------------------------------

zhangege = sgs.General(extension,"zhangege","individual","4",true,true)

sgs.LoadTranslationTable{
	["zhangege"] = "★戦",
	["&zhangege"] = "戦",
	["#zhangege"] = "天眷的游子",
	["$zhangege"] = "单推人",
	["designer:zhangege"] = "萌龙少主",
	["cv:zhangege"] = "",
	["illustrator:zhangege"] = "",
	["~zhangege"] = "",
}

table.insert(robot_change_general, "zhangege")	--对电脑禁用

--------------------------------------------------
--（斗寿）幸运的子弹
--------------------------------------------------

doushou_card = sgs.CreateSkillCard{
	name = "doushou",
	will_throw = false,
	filter = function(self, targets, to_select)
		return to_select:objectName() ~= sgs.Self:objectName() and not ((#targets ~= 0) or (not sgs.Self:canDiscard(to_select, "h"))) and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
	end ,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		local all_cards = sgs.CardList()
		for _,cd in sgs.qlist(effect.from:getHandcards()) do
			all_cards:append(cd)
		end
		for _,cd in sgs.qlist(effect.to:getHandcards()) do
			all_cards:append(cd)
		end
		
		if not all_cards:isEmpty() then
			local card = all_cards:at(math.random(0, all_cards:length() - 1))
			local owner = room:getCardOwner(card:getId())
			
			room:doAnimate(2, "skill=DouShouAnim:"..card:objectName().."+"..card:getSuitString().."+"..card:getNumber(), "")	--斗寿（幸运的子弹）专属动画
			room:getThread():delay(1500)
			
			room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, effect.from:objectName(), owner:objectName(), self:objectName(), ""), owner)
			room:setPlayerMark(owner, "doushou_discard", 1)
			
			local count = 0
			for _,p in sgs.qlist(room:getAllPlayers()) do
				if p:getMark("doushou_discard") > 0 then
					count = count + 1
					if count >= 2 then
						break
					end
				end
			end
			if count >= 2 then
				room:setPlayerFlag(effect.from, "Global_PlayPhaseTerminated")
			end
		end
	end
}
doushou = sgs.CreateViewAsSkill{
	name = "doushou" ,
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end ,
	view_as = function(self, cards)
		if #cards == 0 then
			local new_card = doushou_card:clone()
			new_card:setSkillName("doushou")
			return new_card
		else
			return nil
		end
	end,
	enabled_at_play = function(self, player)
		return not player:isKongcheng()
	end
}
table.insert(play_end_clear_mark, "doushou_discard")	--出牌结束清除标记

zhangege:addSkill(doushou)

sgs.LoadTranslationTable{
	["doushou"] = "幸运的子弹",
	[":doushou"] = "出牌阶段，若你有手牌，你可以指定一名有手牌的其他角色，你随机破坏你与其所有手牌中的一张。若你本阶段以此法破坏的牌不属于同一名角色，结束出牌阶段。",
	["$doushou"] = "",
}

--------------------------------------------------
--角色特性：强运
--------------------------------------------------

characteristic_qiangyun = sgs.CreateTriggerSkill{
	name = "#characteristic_qiangyun",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.BeforeCardsMove},
	on_trigger = function(self, event, player, data, room)
		local move = data:toMoveOneTime()
		if not room:getTag("FirstRound"):toBool() and move.to and move.to:objectName() == player:objectName() and not player:hasFlag("characteristic_qiangyun_triggering") and move.reason.m_reason == sgs.CardMoveReason_S_REASON_DRAW and player:getPhase() == sgs.Player_Draw then
			local trigger_probability = 40 + (math.max(0,4-player:getHp())*15)	--基础触发概率40，体力值每从4计算减少1点，概率上升15
			if math.random(1,100) <= trigger_probability then
				--room:sendCompulsoryTriggerLog(player, self:objectName())
				
				local n = move.card_ids:length()
				room:returnToTopDrawPile(move.card_ids)
				move.card_ids = sgs.IntList()
				data:setValue(move)
				
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				if n > 1 then
					local cards = room:getNCards(n - 1)	--先把n-1张牌堆顶的牌取走
					for _, id in sgs.qlist(cards) do
						dummy:addSubcard(id)
					end
				end
				
				local valued_cards = sgs.CardList()
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:isKindOf("ExNihilo") or card:isKindOf("Indulgence") then
						valued_cards:append(card)
					elseif (card:isKindOf("Peach") or card:isKindOf("Jink")) and player:isWounded() then
						local hasJink = false
						for _,cd in sgs.qlist(player:getHandcards()) do
							if cd:isKindOf("Jink") then
								hasJink = true
								break
							end
						end
						if not hasJink and card:isKindOf("Jink") then
							valued_cards:append(card)
						elseif hasJink and card:isKindOf("Peach") then
							valued_cards:append(card)
						end
					elseif card:isKindOf("Analeptic") then
						if player:getHp() == 1 then
							valued_cards:append(card)
						else
							local recorded = false
							for _,cd in sgs.qlist(valued_cards) do
								if cd:isKindOf("Analeptic") then
									recorded = true
									break
								end
							end
							if not recorded then
								valued_cards:append(card)
							end
						end
					elseif card:isKindOf("Armor") or card:isKindOf("Treasure") or card:isKindOf("Monkey") or (card:isKindOf("Weapon") and not player:isWounded()) then
						local equip_index = card:getRealCard():toEquipCard():location()
						if player:hasEquipArea(equip_index) and player:getEquip(equip_index) == nil then	--检测对应装备区是否可用
							valued_cards:append(card)
						end
					elseif card:isKindOf("Snatch") or card:isKindOf("Dismantlement") or card:isKindOf("Duel") then
						if player:getHp() > 2 then
							valued_cards:append(card)
						elseif not card:isKindOf("Duel") then
							local recorded = false
							for _,cd in sgs.qlist(valued_cards) do
								if cd:objectName() == card:objectName() then
									recorded = true
									break
								end
							end
							if not recorded then
								valued_cards:append(card)
							end
						end
					end
				end
				
				if valued_cards:isEmpty() then
					local cards = room:getNCards(1)	--正常摸牌
					for _, id in sgs.qlist(cards) do
						dummy:addSubcard(id)
					end
				else
					dummy:addSubcard(valued_cards:at(math.random(0, valued_cards:length() - 1)):getId())
				end
				
				player:setFlags("characteristic_qiangyun_triggering")
				room:moveCardTo(dummy, player, sgs.Player_PlaceHand, move.reason)
				player:setFlags("-characteristic_qiangyun_triggering")
				dummy:deleteLater()
			end
		end
	end,
	priority = -2,
}

zhangege:addSkill(characteristic_qiangyun)


characteristic_qiangyun_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_qiangyun_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_qiangyun_state)
zhangege:addRelateSkill("characteristic_qiangyun_state")

sgs.LoadTranslationTable{
	["#characteristic_qiangyun"] = "Destiny Draw!",
	["characteristic_qiangyun_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_qiangyun_state"] = "<font color='#DAA520'><b>Destiny Draw!</b><br/>摸牌阶段有更高概率摸到一张高质量牌，你的体力值越低概率越高。</font>",
	["$characteristic_qiangyun_state"] = "",
}

--------------------------------------------------
--无相的捕梦人 戦
--设计者：NSX
--------------------------------------------------

newzhan = sgs.General(extension,"newzhan","individual","4",true,true,true)

sgs.LoadTranslationTable{
	["newzhan"] = "戦",
	["&newzhan"] = "戦",
	["#newzhan"] = "无相的捕梦人",
	["$newzhan"] = "单推人",
	["designer:newzhan"] = "NSX",
	["cv:newzhan"] = "",
	["illustrator:newzhan"] = "",
	["unlock:newzhan"] = "完成以下任意一项：<br/>1.使用内奸身份获得一次胜利<br/>2.在一局游戏中使用白神遥的“抽卡”结束摸牌阶段至少3次",
	["~newzhan"] = "",
}

newzhan:setBonus(true)	--设为奖励角色

newzhan_small = sgs.General(extension,"newzhan_small","individual","4",true,true,true)

sgs.LoadTranslationTable{
	["newzhan_small"] = "戦",
	["&newzhan_small"] = "戦",
	["#newzhan_small"] = "答案只有一个了",
	["$newzhan_small"] = "单推人",
	["parent:newzhan_small"] = "newzhan",	--本体角色名
	["designer:newzhan_small"] = "NSX",
	["cv:newzhan_small"] = "",
	["illustrator:newzhan_small"] = "",
	--["unlock:newzhan_small"] = "",
	["~newzhan_small"] = "",
}

--newzhan_small:setBonus(true)	--设为奖励角色

--------------------------------------------------
--捕梦
--------------------------------------------------

bumeng = sgs.CreateTriggerSkill{
	name = "bumeng",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EffectResponded, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EffectResponded then
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				room:sendCompulsoryTriggerLog(myself, self:objectName())	--显示锁定技发动
				myself:drawCards(1, self:objectName())
			end
		elseif event == sgs.EventPhaseChanging and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Draw and not player:isSkipped(sgs.Player_Draw) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				player:skip(change.to)
				if player:getGeneralName() == "newzhan" and player:aliveCount() == 2 then
					room:setPlayerProperty(player, "general", sgs.QVariant("newzhan_small"))	--更换武将卡面
				end
			end
		end
		return false
	end,
    can_trigger = function(self, target)
        return target
    end
}

newzhan:addSkill(bumeng)
newzhan_small:addSkill(bumeng)

sgs.LoadTranslationTable{
	["bumeng"] = "捕梦",
	[":bumeng"] = "锁定技，你跳过摸牌阶段。有牌被响应后，你摸一张牌。",
	["$bumeng"] = "",
}

--------------------------------------------------
--吟游
--------------------------------------------------

yinyou_newzhancard = sgs.CreateSkillCard{
	name = "yinyou_newzhan",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			--if to_select:objectName() ~= sgs.Self:objectName() then
				return SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
			--end
		end
		return false
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		if not SkillNullify(effect.from, self:objectName()) then
			local choices = {"yinyou_draw", "yinyou_discard", "yinyou_recover", "yinyou_damage"}
			while #choices > 0 and effect.to:isAlive() do
				local choice = room:askForChoice(effect.from, self:objectName().."+yinyou_newzhan_choice_log1+"..effect.to:objectName().."+yinyou_newzhan_choice_log2", table.concat(choices, "+"))
				ChoiceLog(effect.from, choice)
				table.removeOne(choices, choice)
				if choice == "yinyou_draw" then
					effect.to:drawCards(1, self:objectName())
				elseif choice == "yinyou_discard" and not effect.to:isKongcheng() then
					room:askForDiscard(effect.to, self:objectName(), 1, 1, false, false)
				elseif choice == "yinyou_recover" then
					local recover = sgs.RecoverStruct()
					recover.who = effect.from
					recover.recover = 1
					room:recover(effect.to, recover)
				elseif choice == "yinyou_damage" then
					room:damage(sgs.DamageStruct(self:objectName(), effect.from, effect.to))
				end
			end
		end
	end
}
yinyou_newzhan = sgs.CreateViewAsSkill{
	name = "yinyou_newzhan",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		if #cards == 0 then
			local NewSkillCard = yinyou_newzhancard:clone()
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return not player:hasUsed("#yinyou_newzhan")
	end,
}

newzhan:addSkill(yinyou_newzhan)
newzhan_small:addSkill(yinyou_newzhan)

sgs.LoadTranslationTable{
	["yinyou_newzhan"] = "吟游",
	[":yinyou_newzhan"] = "出牌阶段限一次，你可以指定一名角色，<font color='#A9A9A9'>发动此技能</font>，令其以你所选的顺序依次执行以下四项：<br/>①摸一张牌<br/>②弃置一张手牌<br/>③回复1点体力<br/>④受到来自你的1点伤害。",
	["$yinyou_newzhan"] = "",
	["^yinyou_newzhan"] = "操作提示：选择一名角色→确定",
	["yinyou_newzhan_choice_log1"] = "请选择一项令 ",
	["yinyou_newzhan_choice_log2"] = " 执行：",
	["yinyou_draw"] = "摸一张牌",
	["yinyou_discard"] = "弃置一张手牌",
	["yinyou_recover"] = "回复1点体力",
	["yinyou_damage"] = "受到1点伤害",
}

--------------------------------------------------
--无双戦神
--设计者：
--------------------------------------------------

newzhan_boss = sgs.General(extension,"newzhan_boss","individual","8",true,true,true)

sgs.LoadTranslationTable{
	["newzhan_boss"] = "无双戦神",
	["&newzhan_boss"] = "无双戦神",
	["#newzhan_boss"] = "无双戦神",
	["$newzhan_boss"] = "单推人",
	["designer:newzhan_boss"] = "",
	["cv:newzhan_boss"] = "",
	["illustrator:newzhan_boss"] = "",
	["~newzhan_boss"] = "",
}

--------------------------------------------------
--驱动
--------------------------------------------------

qudong = sgs.CreateTriggerSkill{
	name = "qudong",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DrawNCards},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards then
			local count = data:toInt() + 1
			data:setValue(count)
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

newzhan_boss:addSkill(qudong)

sgs.LoadTranslationTable{
	["qudong"] = "驱动",
	[":qudong"] = "锁定技，所有角色的通常摸牌数＋1。",
	["$qudong"] = "",
}

--------------------------------------------------
--捕梦
--------------------------------------------------

bumeng_boss = sgs.CreateTriggerSkill{
	name = "bumeng_boss",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EffectResponded},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EffectResponded then
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				room:sendCompulsoryTriggerLog(myself, self:objectName())	--显示锁定技发动
				myself:drawCards(1, self:objectName())
			end
		end
		return false
	end,
    can_trigger = function(self, target)
        return target
    end
}

newzhan_boss:addSkill(bumeng_boss)

sgs.LoadTranslationTable{
	["bumeng_boss"] = "捕梦",
	[":bumeng_boss"] = "锁定技，有牌被响应后，你摸一张牌。",
	["$bumeng_boss"] = "",
}

--------------------------------------------------
--乱击
--------------------------------------------------

newzhan_boss:addSkill("mobileluanji")

--------------------------------------------------
--失忆仙 头发
--设计者：萌龙少主
--------------------------------------------------

toufa_shiyixian = sgs.General(extension,"toufa_shiyixian","individual","3",false)

sgs.LoadTranslationTable{
	["toufa_shiyixian"] = "头发",
	["&toufa_shiyixian"] = "头发",
	["#toufa_shiyixian"] = "失忆仙",
	["$toufa_shiyixian"] = "进阶",
	["designer:toufa_shiyixian"] = "萌龙少主",
	["cv:toufa_shiyixian"] = "",
	["illustrator:toufa_shiyixian"] = "",
	["~toufa_shiyixian"] = "",
}

--------------------------------------------------
--流易
--------------------------------------------------

liuyi = sgs.CreateTriggerSkill{
	name = "liuyi" ,
	events = {sgs.AskForRetrial},
	on_trigger = function(self, event, player, data, room)
		local judge = data:toJudge()
		--[[local prompt_list = {
			"@liuyi_log" ,
			judge.who:objectName() ,
			self:objectName() ,
			judge.reason ,
			string.format("%d", judge.card:getEffectiveId())
		}
		local prompt = table.concat(prompt_list, ":")]]
		player:setTag("liuyi", data)	--AI用
		if player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. "")) then
			room:doAnimate(1, player:objectName(), judge.who:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
			local room = player:getRoom()
			local card_id = room:drawCard()
			local card = sgs.Sanguosha:getCard(card_id)
			local judge_card = judge.card
			room:getThread():delay()
			room:retrial(card, player, judge, self:objectName())
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
			room:moveCardTo(judge_card, nil, nil, sgs.Player_DrawPile, reason, true)
			local log = sgs.LogMessage()
			log.type = "#liuyi_put"
			log.from = player
			log.arg = self:objectName()
			log.card_str = judge_card:toString()
			room:sendLog(log)	--发送信息框消息
		end
		player:removeTag("liuyi")	--AI用
		return false
	end
}

toufa_shiyixian:addSkill(liuyi)

sgs.LoadTranslationTable{
	["liuyi"] = "流易",
	[":liuyi"] = "当一名角色的判定牌生效前，你可以用牌堆顶的牌替换此牌。",
	--["@liuyi_log"] = "将 %dest 的“%arg”判定",
	["liuyi:choice"] = "你可以发动“流易”，用牌堆顶的牌替换判定牌",
	["#liuyi_put"] = "%card 被 %from 置于牌堆顶",
	["$liuyi"] = "",
}

--------------------------------------------------
--诲谕
--------------------------------------------------

huiyu = sgs.CreateTriggerSkill{
	name = "huiyu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardsMoveOneTime, sgs.StartJudge},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime then
			if not (player and player:isAlive() and player:hasSkill(self:objectName())) then return false end
			local move = data:toMoveOneTime()
			if move.from and move.from:isAlive()
					and (move.from_places:contains(sgs.Player_PlaceHand) or move.from_places:contains(sgs.Player_PlaceEquip))
					and (bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD)
					and move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_DISMANTLE then
				local dummy_card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _, id in sgs.qlist(move.card_ids) do
					if room:getCardPlace(id) == sgs.Player_DiscardPile then
						dummy_card:addSubcard(sgs.Sanguosha:getCard(id))
					end
				end
				local from = nil	--无法直接使用move.from
				for _,p in sgs.qlist(room:getAllPlayers()) do
					if p:objectName() == move.from:objectName() then
						from = p
						break
					end
				end
				local data2 = sgs.QVariant()	--askForSkillInvoke会变为“你想对 player 发动...”
				data2:setValue(from)
				if dummy_card:getSubcards():length() > 0 and player:getMark("&huiyu+used") == 0 and player:askForSkillInvoke(self:objectName(), data2) and not SkillNullify(player, self:objectName()) and player:canEffect(from, self:objectName()) then
					room:doAnimate(1, player:objectName(), from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					room:setPlayerMark(player, "&huiyu+used", 1)
					local id
					if dummy_card:getSubcards():length() == 1 then
						id = dummy_card:getSubcards():first()
					else
						room:fillAG(dummy_card:getSubcards(), player)
						id = room:askForAG(player, dummy_card:getSubcards(), false, self:objectName())
						room:clearAG(player)
					end
					if id ~= -1 then
						player:setTag("huiyu_judge_card_id", sgs.QVariant(id))
						local judge = sgs.JudgeStruct()
						judge.pattern = ".|black"
						judge.good = true
						judge.reason = self:objectName()
						judge.who = from
						room:judge(judge)
						player:removeTag("huiyu_judge_card_id")
						if judge:isGood() then
							--if room:getDrawPile():isEmpty() then
							--	room:swapPile()
							--end
							--local card = sgs.Sanguosha:getCard(room:getDrawPile():last())
							--local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DRAW, player:objectName(), self:objectName(), "")
							--room:moveCardTo(card, from, sgs.Player_PlaceHand, reason, false)
							from:drawCards(1, self:objectName(), false, false)	--参数3为false则从牌堆底摸，参数4为是否正面向上摸
						end
					end
				end
				dummy_card:deleteLater()
			end
		elseif event == sgs.StartJudge then		--强制以选定的牌作为判定牌
			local judge = data:toJudge()
			if judge.reason == self:objectName() then
				local myselves = room:findPlayersBySkillName(self:objectName())
				for _,myself in sgs.qlist(myselves) do
					local card_id = -1
					card_id = myself:getTag("huiyu_judge_card_id"):toInt()
					if card_id and card_id ~= -1 then
						judge.card = sgs.Sanguosha:getCard(card_id)
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, myself:objectName(), nil, self:objectName(), nil)
						room:moveCardTo(judge.card, judge.who, nil, sgs.Player_DrawPile, reason, true)
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_JUDGE, judge.who:objectName(), self:objectName(), "", judge.reason)
						room:moveCardTo(judge.card, nil, judge.who, sgs.Player_PlaceJudge, reason, true)
						judge:updateResult()
						local log = sgs.LogMessage()
						log.type = "#huiyu_judge_log"
						log.from = myself
						log.to:append(judge.who)
						log.arg = judge.reason
						log.card_str = judge.card:toString()
						room:sendLog(log)	--发送信息框消息
						room:setTag("SkipGameRule",sgs.QVariant(true))
						break
					end
				end
			end
		end
		return false
	end,
    can_trigger = function(self, target)
        return target
    end
}
table.insert(turn_end_clear_mark, "&huiyu+used")	--回合结束清除标记

toufa_shiyixian:addSkill(huiyu)

sgs.LoadTranslationTable{
	["huiyu"] = "诲谕",
	[":huiyu"] = "每回合限一次，有角色因弃置而失去牌后，你可以<font color='#A9A9A9'>发动此技能</font>选择其中一张牌，令其以此牌为判定牌进行判定：若判定结果为黑色，其从牌堆底摸一张牌。",
	["#huiyu_judge_log"] = "%from 将 %card 作为 %to 的判定牌",
	["$huiyu"] = "",
	["used"] = "已使用",
	["^AG_huiyu"] = "<b>诲谕</b><br/>双击以选择一张牌，以此牌作为判定牌进行判定",
}

--------------------------------------------------
--森罗之蓝兔 碧居结衣
--设计者：萌龙少主
--------------------------------------------------

bijujieyi_senluozhilantu = sgs.General(extension,"bijujieyi_senluozhilantu","individual","3",false)

sgs.LoadTranslationTable{
	["bijujieyi_senluozhilantu"] = "碧居结衣",
	["&bijujieyi_senluozhilantu"] = "碧居结衣",
	["#bijujieyi_senluozhilantu"] = "森罗之蓝兔",
	["designer:bijujieyi_senluozhilantu"] = "萌龙少主",
	["cv:bijujieyi_senluozhilantu"] = "",
	["illustrator:bijujieyi_senluozhilantu"] = "",
	["~bijujieyi_senluozhilantu"] = "",
}

bijujieyi_senluozhilantu2 = sgs.General(extension,"bijujieyi_senluozhilantu2","individual","3",true,true,true)	--复苏形态

sgs.LoadTranslationTable{
	["bijujieyi_senluozhilantu2"] = "碧居结衣",
	["&bijujieyi_senluozhilantu2"] = "碧居结衣",
	["#bijujieyi_senluozhilantu2"] = "复苏之蓝兔",
	["parent:bijujieyi_senluozhilantu2"] = "bijujieyi_senluozhilantu",	--本体角色名
	["designer:bijujieyi_senluozhilantu2"] = "",
	["cv:bijujieyi_senluozhilantu2"] = "",
	["illustrator:bijujieyi_senluozhilantu2"] = "",
	["~bijujieyi_senluozhilantu2"] = "",
}

--------------------------------------------------
--病娇
--------------------------------------------------

bingjiao = sgs.CreateTriggerSkill{
	name = "bingjiao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Play then
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				if player:objectName() ~= myself:objectName() and player:inMyAttackRange(myself) and myself:canEffect(player, self:objectName()) then
					local card = room:askForCard(myself, ".|heart|.|hand,equipped", "@bingjiao_give:"..player:objectName(), data, sgs.Card_MethodNone)
					if card then
						local logg = sgs.LogMessage()
						logg.from = myself
						logg.type = "#InvokeSkill"
						logg.arg = "bingjiao"
						room:sendLog(logg)	--显示技能发动提示信息
						room:notifySkillInvoked(myself, "bingjiao")	--在武将牌上显示技能名
						room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, myself:objectName(), player:objectName(), self:objectName(), "")
						room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, true)
						
						local choices_str = "bingjiao_skip"
						if room:getCardOwner(card:getId()) and room:getCardOwner(card:getId()):objectName() == player:objectName() and (room:getCardPlace(card:getId()) == sgs.Player_PlaceHand or room:getCardPlace(card:getId()) == sgs.Player_PlaceEquip) and player:canDiscard(player, card:getId()) then
							choices_str = "bingjiao_skip+bingjiao_damage"
						end
						local choice = room:askForChoice(player, self:objectName(), choices_str)
						ChoiceLog(player, choice)
						if choice == "bingjiao_damage" then
							if room:getCardOwner(card:getId()) and room:getCardOwner(card:getId()):objectName() == player:objectName() then
								room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), self:objectName(), nil), player)
							end
							room:damage(sgs.DamageStruct(self:objectName(), myself, player))
						elseif choice == "bingjiao_skip" then
							return true
						end
					end
				end
			end
		end
		return false
	end,
	can_trigger = function(self, target)
		return target
	end
}

bijujieyi_senluozhilantu:addSkill(bingjiao)
bijujieyi_senluozhilantu2:addSkill(bingjiao)

sgs.LoadTranslationTable{
	["bingjiao"] = "病娇",
	[":bingjiao"] = "其他角色的出牌阶段开始时，若你在其攻击范围内，你可以交给其一张红桃牌，令其选择：1.结束出牌阶段 2.弃置此牌、受到来自你的1点伤害。",
	["$bingjiao"] = "",
	["@bingjiao_give"] = "你可以发动<s>“病娇”</s>，交给 %src 一张红桃牌",
	["bingjiao_skip"] = "结束出牌阶段",
	["bingjiao_damage"] = "弃置此牌、受到1点伤害",
}

--------------------------------------------------
--奇迹
--------------------------------------------------

qiji = sgs.CreateTriggerSkill{
	name = "qiji",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Death, sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Death and player and player:hasSkill(self:objectName()) then
			if data:toDeath().who:objectName() == player:objectName() and player:getMark(self:objectName().."-Keep") < 2 then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:addPlayerMark(player, self:objectName().."-Keep", 1)
				for _, p in sgs.qlist(room:getAllPlayers()) do
					if player:canEffect(p, self:objectName()) then
						p:drawCards(1, self:objectName())
					end
				end
				room:setTag("qiji_revive_"..player:objectName(), sgs.QVariant(true))	--记录最后的濒危情况
				
				local skills = player:getSkillList(false, false)
				local skill_names = {}
				for _, skill in sgs.qlist(skills) do
					table.insert(skill_names, skill:objectName())
				end
				room:setTag("qiji_revive_skill_"..player:objectName(), sgs.QVariant(table.concat(skill_names, "+")))	--记录最后持有的技能
			end
		elseif event == sgs.EventPhaseChanging and data:toPhaseChange().from ~= sgs.Player_NotActive and data:toPhaseChange().to == sgs.Player_NotActive then
			for _, p in sgs.qlist(room:getAllPlayers(true)) do
				if p:isDead() and room:getTag("qiji_revive_"..p:objectName()) and room:getTag("qiji_revive_"..p:objectName()):toBool() then
					for _, to in sgs.qlist(room:getOtherPlayers(p)) do
						to:speak("bubble:安可！")
						room:getThread():delay(500)
					end
					room:revivePlayer(p)
					
					playConversation(room, p:getGeneralName(), "#qiji_speak"..p:getMark(self:objectName().."-Keep"))
					
					if p:getGeneralName() == "bijujieyi_senluozhilantu" then
						room:setPlayerProperty(p, "general", sgs.QVariant("bijujieyi_senluozhilantu2"))	--更换武将卡面
					end
					
					room:setPlayerProperty(p, "hp", sgs.QVariant(math.min(p:getMaxHp())))	--设置血量（不然会以0血复活）
					
					room:removeTag("qiji_revive_"..p:objectName())
					
					if room:getTag("qiji_revive_skill_"..p:objectName()) then
						local skill_names = room:getTag("qiji_revive_skill_"..p:objectName()):toString():split("+")
						for _, skill_name in ipairs(skill_names) do
							if not p:hasSkill(skill_name) then
								room:acquireSkill(p, skill_name, true, false, false)
							end
						end
						room:removeTag("qiji_revive_skill_"..p:objectName())
					end
					
					room:sendCompulsoryTriggerLog(p, self:objectName())	--显示锁定技发动
					room:getThread():delay(1000)
					room:loseMaxHp(p, 1)
					for _, to in sgs.qlist(room:getAllPlayers()) do
						if player:canEffect(to, self:objectName()) then
							to:drawCards(1, self:objectName())
						end
					end
				end
			end
		end
	end,
}

bijujieyi_senluozhilantu:addSkill(qiji)
bijujieyi_senluozhilantu2:addSkill(qiji)

sgs.LoadTranslationTable{
	["qiji"] = "奇迹",
	[":qiji"] = "锁定技，<font color='#4B0082'><b>变身技，</b></font>你离场时，所有角色摸一张牌，本回合结束时，你复活并失去1点体力上限，所有角色摸一张牌。每局游戏限2次。",
	["$qiji"] = "",
	["#qiji_speak1"] = "碧居结衣+结衣回来了哟~",
	["#qiji_speak2"] = "碧居结衣+……哥哥在吗？",
}

--------------------------------------------------
--自在随心 雪狐桑
--设计者：月音风源
--------------------------------------------------

xuehusang_zizaisuixin = sgs.General(extension,"xuehusang_zizaisuixin","individual","3",false)

sgs.LoadTranslationTable{
	["xuehusang_zizaisuixin"] = "雪狐桑",
	["&xuehusang_zizaisuixin"] = "雪狐桑",
	["#xuehusang_zizaisuixin"] = "自在随心",
	["designer:xuehusang_zizaisuixin"] = "月音风源",
	["cv:xuehusang_zizaisuixin"] = "",
	["illustrator:xuehusang_zizaisuixin"] = "",
	["~xuehusang_zizaisuixin"] = "",
}

--------------------------------------------------
--狐言
--------------------------------------------------

huyan_card = sgs.CreateSkillCard{
	name = "huyan",
	target_fixed = false,
	will_throw = true,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and not to_select:isKongcheng() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		if not SkillNullify(source, self:objectName()) then
			local target = targets[1]
			local name = getCardObjName(sgs.Sanguosha:getCard(self:getSubcards():first()))
			local cards = sgs.CardList()
			for _,cd in sgs.qlist(target:getHandcards()) do
				if getCardObjName(cd) == name then
					cards:append(cd)
				end
			end
			if not cards:isEmpty() then
				local card = cards:at(math.random(0, cards:length() - 1))
				source:obtainCard(card, true)
			end
		end
	end
}
huyan = sgs.CreateViewAsSkill{
	name = "huyan",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped() and not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = huyan_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#huyan") < 1
	end
}

--xuehusang_zizaisuixin:addSkill(huyan)

sgs.LoadTranslationTable{
	["huyan"] = "狐言",
	[":huyan"] = "出牌阶段限一次，你可以弃置一张手牌，指定一名有手牌的其他角色<font color='#A9A9A9'>发动此技能</font>，你获得其一张相同牌名的手牌。",
	["$huyan1"] = "",
	["$huyan2"] = "",
}

--------------------------------------------------
--心动
--------------------------------------------------

xindongcard = sgs.CreateSkillCard{
	name = "xindong",
	filter = function(self, targets, to_select)
		return #targets < 4 and to_select:objectName() ~= sgs.Self:objectName() and to_select:isFemale() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_use = function(self, room, source, targets)
		if not SkillNullify(source, self:objectName()) then
			local N = #targets
			if throwCoin(source, "xindong", N) == N then
				for _, target in ipairs(targets) do
					room:damage(sgs.DamageStruct(self:objectName(), source, target))
				end
			end
		end
	end
}
xindongvs = sgs.CreateZeroCardViewAsSkill{
	name = "xindong",
	response_pattern = "@@xindong",
	view_as = function()
		return xindongcard:clone()
	end
}
xindong = sgs.CreateTriggerSkill{
	name = "xindong",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = xindongvs,
	global = true,
	events = {sgs.EventPhaseStart, sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if event == sgs.CardsMoveOneTime then
			--if not (player and player:isAlive() and player:hasSkill(self:objectName())) then return false end
			local move = data:toMoveOneTime()
			if move.from and move.from:isAlive() and move.from:objectName() == player:objectName()
					and (move.from_places:contains(sgs.Player_PlaceHand) or move.from_places:contains(sgs.Player_PlaceEquip))
					and (bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD)
					and move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_DISMANTLE then
				room:addPlayerMark(player, "xindong_count", move.card_ids:length())
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				if myself:hasSkill(self:objectName()) and myself:getMark("xindong_count") >= 2 then
					room:askForUseCard(myself, "@@xindong", "@xindong")
				end
			end
		end
	end
}
table.insert(turn_end_clear_mark, "xindong_count")

--xuehusang_zizaisuixin:addSkill(xindong)

sgs.LoadTranslationTable{
	["xindong"] = "心动",
	[":xindong"] = "一名角色的结束阶段，若你于本回合内弃置了至少2张牌，你可以<font color='#A9A9A9'>发动此技能</font>，指定至多4名其他女性角色，掷等量枚硬币，若结果均为正面，你对这些角色各造成1点伤害。",
	["@xindong"] = "你可以使用“心动”，指定至多4名女性角色",
	["~xindong"] = "选择若干名角色→确定",
	["$xindong1"] = "",
	["$xindong2"] = "",
}

--------------------------------------------------
--撷芳
--------------------------------------------------

xuehusang_zizaisuixin:addSkill("xiefang")

sgs.LoadTranslationTable{
	["xiefang"] = "撷芳",
	[":xiefang"] = "锁定技，你→其他角色 距离－X。（X为在场女性角色数）",
	["$xiefang"] = "",
}

--------------------------------------------------
--心动（新）
--------------------------------------------------

newxindong = sgs.CreateTriggerSkill{
	name = "newxindong",
	frequency = sgs.Skill_NotFrequent,
	change_skill = true,
	events = {sgs.Damage, sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage == 0 or player:isDead() then return false end
		local to
		if event == sgs.Damage and damage.to and damage.to:isAlive() then
			to = damage.to
		elseif event == sgs.Damaged and damage.from and damage.from:isAlive() then
			to = damage.from
		end
		--[[local type_str = "not_give"
		local to_str = ""
		if to and to:isAlive() then
			type_str = "need_give"
			to_str = to:objectName()
		end
		if player:getChangeSkillState(self:objectName()) <= 1 and player:askForSkillInvoke(self:objectName(), sgs.QVariant(type_str..":"..to_str..":".."2"..":".."1")) and not SkillNullify(player, self:objectName()) then
			room:setChangeSkillState(player, self:objectName(), 2)
			player:drawCards(2, self:objectName())
			if to and to:isAlive() and player:getHandcardNum() >= 1 then
				room:doAnimate(1, player:objectName(), to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				local dummy = room:askForExchange(player, self:objectName(), 1, 1, false, "#newxindong_give:1:" .. to:objectName(), false)
				if dummy and dummy:subcardsLength() > 0 then
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), to:objectName(), self:objectName(), "")
					room:moveCardTo(dummy, to, sgs.Player_PlaceHand, reason, false)
				end
				dummy:deleteLater()
			end
		elseif player:getChangeSkillState(self:objectName()) == 2 and player:askForSkillInvoke(self:objectName(), sgs.QVariant(type_str..":"..to_str..":".."1"..":".."2")) and not SkillNullify(player, self:objectName()) then
			room:setChangeSkillState(player, self:objectName(), 1)
			player:drawCards(1, self:objectName())
			if to and to:isAlive() and player:getHandcardNum() >= 2 then
				room:doAnimate(1, player:objectName(), to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				local dummy = room:askForExchange(player, self:objectName(), 2, 2, false, "#newxindong_give:2:" .. to:objectName(), false)
				if dummy and dummy:subcardsLength() > 0 then
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), to:objectName(), self:objectName(), "")
					room:moveCardTo(dummy, to, sgs.Player_PlaceHand, reason, false)
				end
				dummy:deleteLater()
			end
		end]]
		if not to or to:isDead() or to:objectName() == player:objectName() or not player:canEffect(to, self:objectName()) then
			return false
		end
		local type_str = "change1"
		if player:getChangeSkillState(self:objectName()) == 2 then
			type_str = "change2"
		end
		if player:askForSkillInvoke(self:objectName(), sgs.QVariant(type_str..":"..to:objectName())) and not SkillNullify(player, self:objectName()) then
			room:doAnimate(1, player:objectName(), to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
			local giver = player
			local receiver = to
			
			if player:getChangeSkillState(self:objectName()) <= 1 then
				room:setChangeSkillState(player, self:objectName(), 2)
			elseif player:getChangeSkillState(self:objectName()) == 2 then
				room:setChangeSkillState(player, self:objectName(), 1)
				giver = to
				receiver = player
			end
			
			giver:drawCards(2, self:objectName())
			if receiver and receiver:isAlive() and giver:getHandcardNum() >= 1 then
				receiver:setFlags("newxindong_receiver_AI")		--AI用
				local dummy = room:askForExchange(giver, self:objectName(), 1, 1, false, "#newxindong_give:1:" .. receiver:objectName(), false)
				receiver:setFlags("-newxindong_receiver_AI")	--AI用
				if dummy and dummy:subcardsLength() > 0 then
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, giver:objectName(), receiver:objectName(), self:objectName(), "")
					room:moveCardTo(dummy, receiver, sgs.Player_PlaceHand, reason, false)
				end
				dummy:deleteLater()
			end
		end
	end,
}
table.insert(turn_end_clear_mark, "newxindong_used")	--回合结束清除标记

xuehusang_zizaisuixin:addSkill(newxindong)

sgs.LoadTranslationTable{
	["newxindong"] = "心动",
	[":newxindong"] = "转换技，你 <font color='#9400D3'>造成/受到</font> 伤害后，若 <font color='#9400D3'>受伤者/伤害来源</font> 不为你且在场，你可以<font color='#A9A9A9'>发动此技能</font>：<font color='#CB5063'><br/>①你摸2张牌，然后交给其1张手牌<br/>②其摸2张牌，然后交给你1张手牌</font>。",
	[":newxindong1"] = "转换技，你 <font color='#9400D3'>造成/受到</font> 伤害后，若 <font color='#9400D3'>受伤者/伤害来源</font> 不为你且在场，你可以<font color='#A9A9A9'>发动此技能</font>：<br/>①你摸2张牌，然后交给其1张手牌<br/><font color=\"#01A5AF\"><s>②其摸2张牌，然后交给你1张手牌</s></font>。",
	[":newxindong2"] = "转换技，你 <font color='#9400D3'>造成/受到</font> 伤害后，若 <font color='#9400D3'>受伤者/伤害来源</font> 不为你且在场，你可以<font color='#A9A9A9'>发动此技能</font>：<br/><font color=\"#01A5AF\"><s>①你摸2张牌，然后交给其1张手牌</s></font><br/>②其摸2张牌，然后交给你1张手牌。",
	["$newxindong"] = "",
	--["newxindong:not_give"] = "你可以发动“心动”，摸 %dest 张牌",
	--["newxindong:need_give"] = "你可以发动“心动”，摸 %dest 张牌，然后将 %arg 张手牌交给 %src",
	["newxindong:change1"] = "你可以发动“心动”，摸2张牌，然后将1张手牌交给 %src",
	["newxindong:change2"] = "你可以发动“心动”，令 %src 摸2张牌，然后将1张手牌交给你",
	["#newxindong_give"] = "请将 %src 张手牌交给 %dest",
}

--------------------------------------------------
--选妃
--------------------------------------------------

xuanfei = sgs.CreateTriggerSkill{	--只是一个空壳技能，效果被耦合进源码CP协战模式中
	name = "xuanfei",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end
}

vup_anjiang:addSkill(xuanfei)

sgs.LoadTranslationTable{
	["xuanfei"] = "选妃",
	[":xuanfei"] = "锁定技，你或其他女性角色成为单身角色时，你选择一名与你均为单身角色的其他女性角色，与其成为CP。",
	["$xuanfei"] = "",
	["#xuanfei"] = "请选择一名角色，与之成为CP",
}

--------------------------------------------------
--血·猎 辻蓝佳音瑠
--设计者：Vup杀制作组
--------------------------------------------------

laila_xuelie = sgs.General(extension,"laila_xuelie","individual","3",false)

sgs.LoadTranslationTable{
	["laila_xuelie"] = "辻蓝佳音瑠",
	["&laila_xuelie"] = "莱拉",
	["#laila_xuelie"] = "血·猎",
	["designer:laila_xuelie"] = "Vup杀制作组",
	["cv:laila_xuelie"] = "",
	["illustrator:laila_xuelie"] = "",
	["~laila_xuelie"] = "",
}

--------------------------------------------------
--嗜血
--------------------------------------------------

shixue = sgs.CreateTriggerSkill{
	name = "shixue",
	frequency = sgs.Skill_Frequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start then
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					local result = throwCoin(player, self:objectName(), math.min(player:getHp(), 4))
					if result >= 3 then
						room:doAnimate(2, "skill=EyeAnim:laila.png", "")
						room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
						room:getThread():delay(2500)
						--room:gameOver(player:getRole())
					end
					if result >= 1 then
						player:drawCards(result, self:objectName())
						room:getThread():delay(500)
					end
				end
			end
		end
		return false
	end
}

--laila_xuelie:addSkill(shixue)

sgs.LoadTranslationTable{
	["shixue"] = "嗜血",
	[":shixue"] = "准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，掷X枚硬币，每掷出一枚正面你摸一张牌。（X为你当前体力值且不大于4）",
	["$shixue1"] = "",
	["$shixue2"] = "",
}

--------------------------------------------------
--忆狩
--------------------------------------------------

yishouslash = sgs.CreateTargetModSkill{
	name = "#yishouslash",
	pattern = ".",
	residue_func = function(self, from, card, to)
		if from:getMark("yishou_active") > 0 and card:isKindOf("Slash") then
			return from:getMark("yishou_active")
		else
			return 0
		end
	end
}
yishou = sgs.CreateTriggerSkill{
	name = "yishou",
	global = true,
	events ={sgs.Damaged, sgs.DrawNCards, sgs.EventPhaseChanging, sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if (event == sgs.Damaged or (event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish)) and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local damage = data:toDamage()
			local X = damage.damage or 1
			for i = 1,X,1 do
				if event == sgs.Damaged and room:askForDiscard(player, self:objectName(), 1, 1, true, true, "@yishou", ".", self:objectName()) then
					if not SkillNullify(player, self:objectName()) then
						room:addPlayerMark(player, "&yishou_count", 1)
					end
				elseif event == sgs.EventPhaseStart and player:getHp() >= 1 and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:")) then
					room:loseHp(player)
					if not SkillNullify(player, self:objectName()) then
						room:addPlayerMark(player, "&yishou_count", 1)
					end
				else
					break
				end
			end
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.from == sgs.Player_NotActive and change.to ~= sgs.Player_NotActive then
				local X = player:getMark("&yishou_count")
				if player:getMark("&yishou_count") > 0 then
					room:broadcastSkillInvoke(self:objectName(), 1)	--播放配音
					local log = sgs.LogMessage()
					log.type = "#yishou_log"
					log.from = player
					log.arg = 2*X
					log.arg2 = X
					room:sendLog(log)
					room:setPlayerMark(player, "yishou_active", X)
					room:setPlayerMark(player, "&yishou_count", 0)
				end
			end
		elseif event == sgs.DrawNCards then
			if player:getMark("yishou_active") > 0 then
				local count = data:toInt() + 2*player:getMark("yishou_active")
				data:setValue(count)
			end
		end
	end
}
table.insert(turn_end_clear_mark, "yishou_active")

laila_xuelie:addSkill(yishou)
laila_xuelie:addSkill(yishouslash)

sgs.LoadTranslationTable{
	["yishou"] = "忆狩",
	["#yishouslash"] = "忆狩",
	["yishou_count"] = "忆狩",
	[":yishou"] = "<font color='#9400D3'>结束阶段/当你受到1点伤害后</font>，你可以 <font color='#9400D3'>失去1点体力/弃置一张牌</font> <font color='#A9A9A9'>发动此技能</font>，你下回合的通常摸牌数＋2、使用【杀】的次数上限＋1。",
	["@yishou"] = "你可以弃置一张牌发动“忆狩”，下回合你多摸2张牌、可以多使用1张杀",
	["yishou:choice"] = "你可以失去1点体力发动“忆狩”，下回合你多摸2张牌、可以多使用1张杀",
	["#yishou_log"] = "由于“<b><font color='yellow'>忆狩</font></b>”的效果，%from 本回合通常摸牌数+%arg，使用杀的次数上限+%arg2",
	["$yishou1"] = "",
	["$yishou2"] = "",
}

--------------------------------------------------
--祭血
--------------------------------------------------

jixuecard = sgs.CreateSkillCard{
	name = "jixue",
	target_fixed = true,
	will_throw = false,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		source:loseMark("@jixue")
		
		local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		for _,card in sgs.qlist(source:getCards("he")) do
			if card:isRed() and not source:isJilei(card) then
				dummy:addSubcard(card)
			end
		end
		local X = dummy:subcardsLength()
		if X > 0 then
			room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, source:objectName(), self:objectName(), nil), source)
			
			if X >= 9 then
				RecordUnlockGenerals(source, "laila_anliejinghun")	--为玩家记录可解锁角色
			end
			
			room:getThread():delay(500)
			room:doAnimate(2, "skill=JixueAnim:", "")
			room:getThread():delay(12000)
			
			for i=1,X,1 do
				local choices = {"jixue_draw"}
				--if source:isWounded() then
					table.insert(choices, 1, "jixue_recover")
				--end
				local choice = room:askForChoice(source, self:objectName(), table.concat(choices, "+"))
				if choice == "jixue_recover" then
					local recover = sgs.RecoverStruct()
					recover.who = source
					recover.recover = 1
					room:recover(source, recover)
				else
					source:drawCards(1, self:objectName())
				end
				room:getThread():delay(100)
			end
		end
		dummy:deleteLater()
	end
}
jixuevs = sgs.CreateZeroCardViewAsSkill{
	name = "jixue",
	view_as = function()
		return jixuecard:clone()
	end,
	enabled_at_play = function(self, player)
		if player:getMark("@jixue") > 0 and player:canDiscard(player, "he") then
			for _,card in sgs.qlist(player:getHandcards()) do		--此处不能使用getCards，因此分开写
				if card:isRed() and not player:isJilei(card) then
					return true
				end
			end
			for _,card in sgs.qlist(player:getEquips()) do
				if card:isRed() and not player:isJilei(card) then
					return true
				end
			end
		end
		return false
	end
}
jixue = sgs.CreateTriggerSkill{
	name = "jixue",
	frequency = sgs.Skill_Limited,
	view_as_skill = jixuevs,
	limit_mark = "@jixue",
	on_trigger = function()
	end
}

laila_xuelie:addSkill(jixue)

sgs.LoadTranslationTable{
	["jixue"] = "祭血",
	[":jixue"] = "限定技，出牌阶段，你可以弃置你的所有红色牌，每以此法弃置一张牌，你回复1点体力或摸一张牌。",
	["$jixue1"] = "",
	["$jixue2"] = "",
	["@jixue"] = "祭血",
	["jixue_recover"] = "回复1点体力",
	["jixue_draw"] = "摸一张牌",
}

--------------------------------------------------
--暗猎惊魂 辻蓝佳音瑠
--设计者：月音风源、萌龙少主
--------------------------------------------------

laila_anliejinghun = sgs.General(extension,"laila_anliejinghun","individual","4",false,true,true)

sgs.LoadTranslationTable{
	["laila_anliejinghun"] = "辻蓝佳音瑠",
	["&laila_anliejinghun"] = "猎人莱拉",
	["#laila_anliejinghun"] = "暗猎惊魂",
	["designer:laila_anliejinghun"] = "月音风源、萌龙少主",
	["cv:laila_anliejinghun"] = "",
	["illustrator:laila_anliejinghun"] = "",
	["~laila_anliejinghun"] = "",
	["unlock:laila_anliejinghun"] = "使用辻蓝佳音瑠的“祭血”，一次性献祭掉至少9张红色牌",
}

laila_anliejinghun:setBonus(true)	--设为奖励角色

table.insert(robot_change_general, "laila_anliejinghun")	--对电脑禁用

--------------------------------------------------
--圣枪
--------------------------------------------------

shengqiangcard = sgs.CreateSkillCard{
	name = "shengqiang",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, self:objectName()) then
				return sgs.Self:canDiscard(to_select, "h")
			end
		end
		return false
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		if effect.from:canDiscard(effect.to, "h") then
			local id = room:askForCardChosen(effect.from, effect.to, "h", self:objectName(), false, sgs.Card_MethodDiscard)
			--room:showCard(effect.to, id)
			local card = sgs.Sanguosha:getCard(id)
			local suit_str = card:getSuitString()
			room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, effect.from:objectName(), effect.to:objectName(), self:objectName(), ""), effect.to)
			local _data = sgs.QVariant()
			_data:setValue(effect.to)
			local give_card = room:askForCard(effect.from, ".|"..suit_str.."|.|hand", "@shengqiang_throw:"..suit_str, _data, sgs.Card_MethodNone)
			if give_card then
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, effect.from:objectName(), effect.to:objectName(), self:objectName(), "")
				room:moveCardTo(give_card, effect.to, sgs.Player_PlaceHand, reason, true)
				room:damage(sgs.DamageStruct(self:objectName(), effect.from, effect.to))	--耦合入源码的部分：此伤害的音效为步枪射击音效
			else
				room:loseHp(effect.from, 1, nil, self:objectName())
			end
		end
	end
}
shengqiang = sgs.CreateViewAsSkill{
	name = "shengqiang",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		if #cards == 0 then
			local NewSkillCard = shengqiangcard:clone()
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return not player:hasUsed("#shengqiang")
	end,
}

laila_anliejinghun:addSkill(shengqiang)

sgs.LoadTranslationTable{
	["shengqiang"] = "圣枪",
	[":shengqiang"] = "出牌阶段限一次，你可以破坏一名其他角色的一张手牌，然后选择一项：1.交给其一张与之同花色的手牌，对其造成1点伤害 2.失去1点体力。",
	["$shengqiang"] = "",
	["^shengqiang"] = "操作提示：选择一名角色→确定",
	["@shengqiang_throw"] = "你可以交出一张 %src 手牌并对其造成一点伤害，否则你失去1点体力",
}

--------------------------------------------------
--猎获
--------------------------------------------------

liehuo = sgs.CreateTriggerSkill{
	name = "liehuo",
	frequency = sgs.Skill_Frequent,
	events = {sgs.Death},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Death then
			local death = data:toDeath()
			local damage = death.damage
			if damage and damage.from and damage.from:objectName() == player:objectName() and death.who:objectName() ~= player:objectName() and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) and player:canEffect(death.who, self:objectName()) then
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _,card in sgs.qlist(death.who:getCards("hej")) do
					dummy:addSubcard(card)
				end
				if dummy:subcardsLength() > 0 then
					player:obtainCard(dummy)
				end
				dummy:deleteLater()
				room:getThread():delay(500)
				
				if damage.card then
					if damage.card:subcardsLength() > 0 then
						local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
						for _,id in sgs.qlist(damage.card:getSubcards()) do
							if room:getCardPlace(id) == sgs.Player_PlaceTable or room:getCardPlace(id) == sgs.Player_DiscardPile then
								dummy:addSubcard(id)
							end
						end
						if dummy:subcardsLength() > 0 then
							player:obtainCard(dummy, true)
						end
						dummy:deleteLater()
					elseif damage.card:getId() ~= -1 and (room:getCardPlace(damage.card:getId()) == sgs.Player_PlaceTable or room:getCardPlace(damage.card:getId()) == sgs.Player_DiscardPile) then
						player:obtainCard(damage.card, true)
					end
					room:getThread():delay(500)
				end
			end
		end
		return false
	end
}

laila_anliejinghun:addSkill(liehuo)

sgs.LoadTranslationTable{
	["liehuo"] = "猎获",
	[":liehuo"] = "你击败一名角色后，你可以<font color='#A9A9A9'>发动此技能</font>，获得其区域内的所有牌，然后收回伤害来源牌。",
	["$liehuo"] = "",
}

--------------------------------------------------
--泣血哀歌 幽子
--设计者：夜玥紫英
--------------------------------------------------

youzi_yuko = sgs.General(extension,"youzi_yuko","individual","4",false)

sgs.LoadTranslationTable{
	["youzi_yuko"] = "幽子",
	["&youzi_yuko"] = "幽子",
	["#youzi_yuko"] = "泣血哀歌",
	["designer:youzi_yuko"] = "夜玥紫英",
	["cv:youzi_yuko"] = "",
	["illustrator:youzi_yuko"] = "",
	["~youzi_yuko"] = "",
}

--------------------------------------------------
--渊回
--------------------------------------------------
--[[
yuanhui = sgs.CreateTriggerSkill{
	name = "yuanhui",
	frequency = sgs.Skill_NotFrequent,
	global = true,
	events = {sgs.CardsMoveOneTime, sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime and player:getMark("yuanhui_red") + player:getMark("yuanhui_black") < 2 then
			local move = data:toMoveOneTime()
			if (move.from and (move.from:objectName() == player:objectName()) and (move.from_places:contains(sgs.Player_PlaceHand) or move.from_places:contains(sgs.Player_PlaceEquip))) and not (move.to and (move.to:objectName() == player:objectName() and (move.to_place == sgs.Player_PlaceHand or move.to_place == sgs.Player_PlaceEquip))) then
				for _, card_id in sgs.qlist(move.card_ids) do
					local card = sgs.Sanguosha:getCard(card_id)
					if card:isRed() then
						room:setPlayerMark(player, "yuanhui_red", 1)
					elseif card:isBlack() then
						room:setPlayerMark(player, "yuanhui_black", 1)
					end
					if player:getMark("yuanhui_red") == 1 and player:getMark("yuanhui_black") == 1 then	--优化算法，更节省
						room:setPlayerMark(player, "&yuanhui+red", 0)
						room:setPlayerMark(player, "&yuanhui+black", 0)
						return false
					end
				end
				if not room:findPlayersBySkillName(self:objectName()):isEmpty() then
					if player:getMark("yuanhui_red") == 1 then
						room:setPlayerMark(player, "&yuanhui+red", 1)
					elseif player:getMark("yuanhui_black") == 1 then
						room:setPlayerMark(player, "&yuanhui+black", 1)
					end
				end
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				if myself:getMark("yuanhui_red") + myself:getMark("yuanhui_black") == 1 then
					local targets = sgs.SPlayerList()
					for _, p in sgs.qlist(room:getOtherPlayers(myself)) do
						if p:getMark("yuanhui_red") + p:getMark("yuanhui_black") == 1 and myself:getMark("yuanhui_red") + p:getMark("yuanhui_red") == 1 and myself:getMark("yuanhui_black") + p:getMark("yuanhui_black") == 1 then
							targets:append(p)
						end
					end
					local to
					if not targets:isEmpty() then
						to = room:askForPlayerChosen(myself, targets, self:objectName(), "@yuanhui-invoke", true, true)
					end
					if to then
						room:damage(sgs.DamageStruct(self:objectName(), myself, to))
					end
				end
			end
		end
	end
}
table.insert(turn_end_clear_mark, "yuanhui_black")
table.insert(turn_end_clear_mark, "yuanhui_red")
table.insert(turn_end_clear_mark, "&yuanhui+black")
table.insert(turn_end_clear_mark, "&yuanhui+red")

youzi_yuko:addSkill(yuanhui)

sgs.LoadTranslationTable{
	["yuanhui"] = "渊回",
	[":yuanhui"] = "一名角色的结束阶段，若你于本回合内仅失去了 <font color='#9400D3'>红色/黑色</font> 牌，你可以<font color='#A9A9A9'>发动此技能</font>，对一名本回合内仅失去了 <font color='#9400D3'>黑色/红色</font> 牌的角色造成1点伤害。",
	["$yuanhui1"] = "",
	["$yuanhui2"] = "",
	["@yuanhui-invoke"] = "你可以发动“渊回”，对一名角色造成伤害",
}]]

--------------------------------------------------
--终语
--------------------------------------------------
--[[
zhongyubuff = sgs.CreateTargetModSkill{
	name = "#zhongyubuff",
	pattern = ".",
	distance_limit_func = function(self, from, card, to)
		local n = 0
		if card and card:isKindOf("SupplyShortage") and card:getSkillName() == "zhongyu" then
			n = n + 1000
		end
		return n
	end
}
zhongyuvs = sgs.CreateViewAsSkill{
	name = "zhongyu",
	n = 1,
	expand_pile = "wooden_ox",
	view_filter = function(self, selected, to_select)
		if #selected < 1 then
			return not to_select:isEquipped() and sgs.Self:getMark("&zhongyu+"..getColorString(to_select)) == 0
		else
			return false
		end
	end,
	view_as = function(self, cards)
		if #cards >= 1 then
			local scard
			if #cards == 1 then
				scard = sgs.Sanguosha:cloneCard("supply_shortage", sgs.Card_SuitToBeDecided, 0)
			end
			scard:setSkillName(self:objectName())
			for _, c in ipairs(cards) do
				scard:addSubcard(c)
			end
			return scard
		else
			return nil
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@zhongyu"
	end
}
zhongyu = sgs.CreateTriggerSkill{
	name = "zhongyu",
	frequency = sgs.Skill_NotFrequent,
	global = true,
	view_as_skill = zhongyuvs,
	events = {sgs.CardUsed, sgs.CardResponded, sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardUsed or event == sgs.CardResponded then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			elseif event == sgs.CardResponded then
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if not card or card:getTypeId() == sgs.Card_TypeSkill then return false end
			if card:isRed() then
				room:setPlayerMark(player, "zhongyu_red", 1)
			elseif card:isBlack() then
				room:setPlayerMark(player, "zhongyu_black", 1)
			else
				room:setPlayerMark(player, "zhongyu_red", 1)
				room:setPlayerMark(player, "zhongyu_black", 1)
			end
			if player:hasSkill(self:objectName()) then
				if player:getMark("zhongyu_red") + player:getMark("zhongyu_black") == 1 then
					if player:getMark("zhongyu_red") == 1 then
						room:setPlayerMark(player, "&zhongyu+red", 1)
					elseif player:getMark("zhongyu_black") == 1 then
						room:setPlayerMark(player, "&zhongyu+black", 1)
					end
				else
					room:setPlayerMark(player, "&zhongyu+red", 0)
					room:setPlayerMark(player, "&zhongyu+black", 0)
				end
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				if myself:getMark("zhongyu_red") + myself:getMark("zhongyu_black") == 1 then
					room:askForUseCard(myself, "@@zhongyu", "@zhongyu:"..Ternary(myself:getMark("zhongyu_black") == 1, "red", "black"))
				end
			end
		end
	end
}
table.insert(turn_end_clear_mark, "zhongyu_black")
table.insert(turn_end_clear_mark, "zhongyu_red")
table.insert(turn_end_clear_mark, "&zhongyu+black")
table.insert(turn_end_clear_mark, "&zhongyu+red")

youzi_yuko:addSkill(zhongyu)
youzi_yuko:addSkill(zhongyubuff)

sgs.LoadTranslationTable{
	["zhongyu"] = "终语",
	["#zhongyubuff"] = "终语",
	[":zhongyu"] = "一名角色的结束阶段，若你于本回合内仅使用了 <font color='#9400D3'>红色/黑色</font> 牌，你可以将一张 <font color='#9400D3'>黑色/红色</font> 手牌当无距离限制的【兵粮寸断】使用。",
	["$zhongyu"] = "",
	["@zhongyu"] = "你可以将一张 %src 手牌当【兵粮寸断】使用（无距离限制）",
	["~zhongyu"] = "选择一张牌→选择目标→确定",
}
]]

--------------------------------------------------
--终语
--------------------------------------------------

zhongyucard = sgs.CreateSkillCard{
	name = "zhongyu",
	filter = function(self, targets, to_select)
		return #targets < sgs.Self:getMark("zhongyu_X") and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_use = function(self, room, source, targets)
		if #targets > 0 and not SkillNullify(source, "zhongyu") then
			for _, target in ipairs(targets) do
				room:cardEffect(self, source, target)
			end
		end
	end,
	on_effect = function(self, effect)
		--effect.to:drawCards(1, self:objectName())
		effect.from:getRoom():loseHp(effect.to, 1, effect.from, "zhongyu")
	end
}
zhongyuvs = sgs.CreateZeroCardViewAsSkill{
	name = "zhongyu",
	response_pattern = "@@zhongyu",
	view_as = function()
		return zhongyucard:clone()
	end
}
zhongyu = sgs.CreateTriggerSkill{
	name = "zhongyu",
	view_as_skill = zhongyuvs,
	events = {sgs.EventPhaseStart, sgs.Damage, sgs.Damaged, sgs.Death},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if (player and player:hasSkill(self:objectName())) and ((event == sgs.EventPhaseStart and player:isAlive() and player:getPhase() == sgs.Player_Finish) or (event == sgs.Death and data:toDeath().who:objectName() == player:objectName())) then
			local counter = 0
			if player:getHp() == 1 then
				counter = counter + 1
			end
			if room:getTag("TurnLengthCount"):toInt() >= 6 then
				counter = counter + 1
			end
			if event == sgs.Death and data:toDeath().damage and data:toDeath().damage.damage > 0 then	--补充：因伤害而离场则记录这次伤害
				room:addPlayerMark(player, "zhongyu_damage_counter", 1)
				if player:hasSkill(self:objectName()) then
					room:setPlayerMark(player, "&zhongyu!", player:getMark("zhongyu_damage_counter"))
				elseif player:getMark("&zhongyu!") > 0 then
					room:setPlayerMark(player, "&zhongyu!", 0)
				end
			end
			if player:getMark("zhongyu_damage_counter") >= 6 then
				counter = counter + 1
			end
			room:setPlayerMark(player, "zhongyu_X", counter)
			if player:getMark("zhongyu_X") > 0 then
				room:askForUseCard(player, "@@zhongyu", "@zhongyu:"..player:getMark("zhongyu_X"))
			end
			room:setPlayerMark(player, "zhongyu_X", 0)
			return false
		--elseif event == sgs.EventPhaseEnd and player:getMark("discard_counter") == 2 then	--discard_counter只会在弃牌阶段保留，因此弃牌阶段结束时记录弃牌情况
		--	room:setPlayerMark(player, "zhongyu_discard", 1)
		elseif event == sgs.Damage or event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.damage > 0 and player:getMark("zhongyu_damage_counter") < 6 then
				room:addPlayerMark(player, "zhongyu_damage_counter", 1)
				if player:hasSkill(self:objectName()) then
					room:setPlayerMark(player, "&zhongyu!", player:getMark("zhongyu_damage_counter"))
				elseif player:getMark("&zhongyu!") > 0 then
					room:setPlayerMark(player, "&zhongyu!", 0)
				end
			end
		end
	end
}
table.insert(turn_end_clear_mark, "zhongyu_discard")	--回合结束清除标记

youzi_yuko:addSkill(zhongyu)

sgs.LoadTranslationTable{
	["zhongyu"] = "终语",
	[":zhongyu"] = "结束阶段 或 你离场时，你可以指定至多X名角色，<font color='#A9A9A9'>发动此技能</font>，令目标角色各失去1点体力，X为以下条件中你满足的项数：<br/>1.体力值为1<br/>2.游戏轮数≥6<br/>3.造成、受到过至少6次伤害。",
	["$zhongyu"] = "",
	["@zhongyu"] = "你可以发动“终语”，令至多 %src 名角色各失去1点体力",
	["~zhongyu"] = "选择若干名角色→确定",
}

--------------------------------------------------
--柔骨魅生 紗耶
--设计者：萌龙少主
--------------------------------------------------

shaye_rougumeisheng = sgs.General(extension,"shaye_rougumeisheng","individual","4",false)

sgs.LoadTranslationTable{
	["shaye_rougumeisheng"] = "紗耶",
	["&shaye_rougumeisheng"] = "紗耶",
	["#shaye_rougumeisheng"] = "柔骨魅生",
	["$shaye_rougumeisheng"] = "简单",
	["designer:shaye_rougumeisheng"] = "萌龙少主",
	["cv:shaye_rougumeisheng"] = "",
	["illustrator:shaye_rougumeisheng"] = "",
	["~shaye_rougumeisheng"] = "",
}

--------------------------------------------------
--焚心
--------------------------------------------------

fenxin_Svs = sgs.CreateOneCardViewAsSkill{
	name = "fenxin_S",
	--expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, card)
		if not card:isRed() or card:isEquipped() then return false end
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_PLAY then
    		local slash = sgs.Sanguosha:cloneCard("fire_slash", sgs.Card_SuitToBeDecided, -1)
        	slash:addSubcard(card:getEffectiveId())
        	slash:deleteLater()
        	return slash:isAvailable(sgs.Self)
    	end
    	return true
	end,
	view_as = function(self, originalCard)
		local slash = sgs.Sanguosha:cloneCard("fire_slash", originalCard:getSuit(), originalCard:getNumber())
		slash:addSubcard(originalCard:getId())
		slash:setSkillName(self:objectName())
		return slash
	end,
	enabled_at_play = function(self, player)
		return sgs.Slash_IsAvailable(player)
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "slash"
	end
}
fenxin_S = sgs.CreateTriggerSkill{
	name = "fenxin_S",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = fenxin_Svs,
	global = true,
	events = {sgs.PreCardUsed, sgs.PreCardResponded, sgs.CardFinished, sgs.Damage},
	on_trigger = function(self, event, player, data, room)
		if (event == sgs.PreCardUsed or event == sgs.PreCardResponded) and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local card
			local isResponse = false
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				if not data:toCardResponse().m_isUse then
					isResponse = true
				end
				card = data:toCardResponse().m_card
			end
			if card then
				if card:getSkillName() == "fenxin_S" and card:isKindOf("FireSlash") then
					local scard = sgs.Sanguosha:getCard(card:getSubcards():first())
					if scard then
						local method = Ternary(isResponse, sgs.CardMoveReason_S_REASON_RESPONSE, sgs.CardMoveReason_S_REASON_USE)
						local reason = sgs.CardMoveReason(method, player:objectName(), nil, self:objectName(), nil)
						
						local move = sgs.CardsMoveOneTimeStruct()
						move.from = player
						move.from_places:append(room:getCardPlace(scard:getId()))	--不能直接填入sgs.Player_PlaceHand
						move.to = nil
						move.to_place = sgs.Player_PlaceTable
						move.card_ids:append(scard:getId())
						move.reason = reason
						local _data = sgs.QVariant()
						_data:setValue(move)
						
						for _,p in sgs.qlist(room:getAllPlayers()) do
							room:getThread():trigger(sgs.BeforeCardsMove, room, p, _data)	--播放时机
						end
						
						player:setFlags("Fake_Move")
						room:moveCardTo(scard, player, nil, sgs.Player_DrawPile, reason, false)		--把子卡背面向上放在牌堆顶
						local length = room:getDrawPile():length()		--尝试从牌堆中把目标子卡不可见地取走
						for i=0,length-1,1 do
							if room:getDrawPile():at(i) == scard:getId() then	--如果下标i为目标子卡（第i+1张）
								local ids = room:getNCards(i, false)	--从牌堆拿走前i-1张卡
								room:drawCard()							--从牌堆拿走这张卡
								room:returnToTopDrawPile(ids)			--把前i-1张卡返回牌堆顶
								break
							end
						end
						
						if isResponse then	--如果是打出的话，就直接扔弃牌堆
							local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
							room:moveCardTo(scard, player, nil, sgs.Player_DiscardPile, reason, true)
						end
						player:setFlags("-Fake_Move")
						
						for _,p in sgs.qlist(room:getAllPlayers()) do
							room:getThread():trigger(sgs.CardsMoveOneTime, room, p, _data)	--播放时机
						end
					end
					if event == sgs.PreCardUsed then
						local use = data:toCardUse()
						use.card:clearSubcards()	--拔掉子卡
						use.card:setSuit(sgs.Card_NoSuitRed)	--重新设置花色（无花色的红色）
						use.card:setNumber(0)	--重新设置点数（无点数）
						use.card:setFlags("backup_fenxin_S")
						use.card:setFlags("backup_fenxin_S_"..scard:getId())
						data:setValue(use)
					else
						local response = data:toCardResponse()
						response.m_card:clearSubcards()
						response.m_card:setSuit(sgs.Card_NoSuitRed)
						response.m_card:setNumber(0)
						if not isResponse then
							response.m_card:setFlags("backup_fenxin_S")
							response.m_card:setFlags("backup_fenxin_S_"..scard:getId())
						end
						data:setValue(response)
					end
				end
			end
		elseif event == sgs.Damage then
			local damage = data:toDamage()
			if damage.card and damage.card:hasFlag("backup_fenxin_S") and not damage.card:hasFlag("fenxin_S_damaged") and damage.damage > 0 then
				damage.card:setFlags("fenxin_S_damaged")
			end
		elseif event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and use.card:hasFlag("backup_fenxin_S") then
				for i=0,1000,1 do	--遍历id
					if use.card:hasFlag("backup_fenxin_S_"..i) then
						local card = sgs.Sanguosha:getCard(i)
						player:setFlags("Fake_Move")
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
						room:moveCardTo(card, player, nil, sgs.Player_DiscardPile, reason, true)		--把子卡背面向上放在牌堆顶
						player:setFlags("-Fake_Move")
						if card:getSuit() == sgs.Card_Heart and not use.card:hasFlag("fenxin_S_damaged") and use.to:length() > 0 then
							local new_card = sgs.Sanguosha:cloneCard("indulgence", card:getSuit(), card:getNumber())
							new_card:addSubcard(i)
							new_card:setSkillName("_"..self:objectName())
							local targets = sgs.SPlayerList()
							for _, p in sgs.qlist(use.to) do
								if new_card:isAvailable(player) and not room:isProhibited(player, p, new_card) and new_card:targetFilter(sgs.PlayerList(), p, player) then
									targets:append(p)
								end
							end
							local target
							if not targets:isEmpty() then
								target = room:askForPlayerChosen(player, targets, self:objectName(), "fenxin_S_use_indulgence", false, false)
							end
							if target then
								room:useCard(sgs.CardUseStruct(new_card, player, target))
							end
						end
						break
					end
				end
			end
		end
	end
}

shaye_rougumeisheng:addSkill(fenxin_S)

sgs.LoadTranslationTable{
	["fenxin_S"] = "焚心",
	[":fenxin_S"] = "你可以将一张红色手牌背面向上当火【杀】使用或打出，然后亮出此牌，若此牌为红桃牌且未造成过伤害，你将此牌当【乐不思蜀】对一名目标角色使用。",
	["$fenxin_S1"] = "",
	["$fenxin_S2"] = "",
	["fenxin_S_use_indulgence"] = "请将“焚心”牌当乐不思蜀对一名角色使用",
}

--------------------------------------------------
--角色特性：耐久
--------------------------------------------------

characteristic_naijiu = sgs.CreateTriggerSkill{	--空壳技能，用于判定
	name = "#characteristic_naijiu",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
characteristic_naijiu_stateA = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_naijiu_stateA",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
characteristic_naijiu_stateB = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_naijiu_stateB",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_naijiu_stateA)
vup_anjiang:addSkill(characteristic_naijiu_stateB)
qiulinzi_wangyinwunv:addSkill(characteristic_naijiu)
qiulinzi_wangyinwunv:addRelateSkill("characteristic_naijiu_stateA")
shaye_rougumeisheng:addSkill(characteristic_naijiu)
shaye_rougumeisheng:addRelateSkill("characteristic_naijiu_stateB")
hanazono_serena:addSkill(characteristic_naijiu)
hanazono_serena:addRelateSkill("characteristic_naijiu_stateB")

sgs.LoadTranslationTable{
	["#characteristic_naijiu"] = "耐久",
	["characteristic_naijiu_stateA"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_naijiu_stateA"] = "<font color='#DAA520'><b>爱好是睡觉</b><br/>不会因疲劳回合而失去体力值。</font>",
	["$characteristic_naijiu_stateA"] = "",
	["characteristic_naijiu_stateB"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_naijiu_stateB"] = "<font color='#DAA520'><b>修仙猫</b><br/>不会因疲劳回合而失去体力值。</font>",
	["$characteristic_naijiu_stateB"] = "",
}

--------------------------------------------------
--来日可期 小毛
--设计者：NSX
--------------------------------------------------

xiaomao_lairikeqi = sgs.General(extension,"xiaomao_lairikeqi","individual","4",false)

sgs.LoadTranslationTable{
	["xiaomao_lairikeqi"] = "小毛",
	["&xiaomao_lairikeqi"] = "小毛",
	["#xiaomao_lairikeqi"] = "来日可期",
	["$xiaomao_lairikeqi"] = "简单",
	["designer:xiaomao_lairikeqi"] = "NSX",
	["cv:xiaomao_lairikeqi"] = "",
	["illustrator:xiaomao_lairikeqi"] = "",
	["~xiaomao_lairikeqi"] = "",
}

--------------------------------------------------
--辨识
--------------------------------------------------

bianshicard = sgs.CreateSkillCard{
	name = "bianshicard",
	target_fixed = true,
	will_throw = true,
	on_use = function(self, room, source, targets)
		--local X = source:getHandcardNum()
		--if X < 4 + source:getEquips():length() then
		--	local log = sgs.LogMessage()
		--	log.type = "#bianshi"
		--	log.from = source
		--	log.arg = "bianshi"
		--	log.arg2 = 4 + source:getEquips():length()
		--	room:sendLog(log)	--发送信息框消息
		--	
		--	source:drawCards(4 + source:getEquips():length() - X, "bianshi")
		--end
		--if source:getHandcardNum() > X then
		--	room:askForDiscard(source, "bianshi", source:getHandcardNum() - X, source:getHandcardNum() - X)
		--elseif source:getHandcardNum() < X then
		--	source:drawCards(X - source:getHandcardNum(), "bianshi")
		--end
		local X = 4 + source:getEquips():length()
		local draw_num = X - source:getHandcardNum()
		if draw_num > 0 then
			local log = sgs.LogMessage()
			log.type = "#bianshi"
			log.from = source
			log.arg = "bianshi"
			log.arg2 = X
			room:sendLog(log)	--发送信息框消息
			
			source:drawCards(draw_num, "bianshi")
			room:askForDiscard(source, "bianshi", draw_num, draw_num, false, true)
		end
	end
}
bianshi = sgs.CreateZeroCardViewAsSkill{
	name = "bianshi", 
	view_as = function()
		return bianshicard:clone()
	end, 
	enabled_at_play = function(self, player)
		return not player:hasUsed("#bianshicard") and player:getHandcardNum() < 4 + player:getEquips():length() --and not player:isKongcheng()
	end
}

xiaomao_lairikeqi:addSkill(bianshi)

sgs.LoadTranslationTable{
	["bianshi"] = "辨识",
	[":bianshi"] = "出牌阶段限一次，若你手牌数小于X张，你可以将手牌数<font color='#9400D3'>补至X</font>张，然后弃置<font color='#9400D3'>等量</font>张牌。(X为你装备区内的牌数+4)",
	["$bianshi"] = "",
	["#bianshi"] = "由于“%arg”的效果，%from 将手牌数调整为 %arg2 张",
}

--------------------------------------------------
--成长
--------------------------------------------------

chengzhang = sgs.CreateTriggerSkill{
	name = "chengzhang",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.HpRecover},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.HpRecover then
			local recover = data:toRecover()
			if recover.who and recover.who:hasSkill(self:objectName()) and player:getHp() == 1 then
				if recover.who:askForSkillInvoke(self:objectName(), data) and not SkillNullify(recover.who, self:objectName()) then
					local equips = sgs.CardList()
					for _,id in sgs.qlist(room:getDrawPile()) do
						local card = sgs.Sanguosha:getCard(id)
						if card:isKindOf("EquipCard") and card:isAvailable(recover.who) then
							local equip_index = card:getRealCard():toEquipCard():location()
							if recover.who:hasEquipArea(equip_index) then	--检测对应装备区是否可用
								equips:append(card)
							end
						end
					end
					for _,id in sgs.qlist(room:getDiscardPile()) do
						local card = sgs.Sanguosha:getCard(id)
						if card:isKindOf("EquipCard") and card:isAvailable(recover.who) then
							local equip_index = card:getRealCard():toEquipCard():location()
							if recover.who:hasEquipArea(equip_index) then	--检测对应装备区是否可用
								equips:append(card)
							end
						end
					end
					if not equips:isEmpty() then
						local card = equips:at(math.random(0, equips:length() - 1))
						room:useCard(sgs.CardUseStruct(card, recover.who, recover.who))
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

xiaomao_lairikeqi:addSkill(chengzhang)

sgs.LoadTranslationTable{
	["chengzhang"] = "成长",
	[":chengzhang"] = "你令一名角色回复体力后，若其体力值为1，你可以<font color='#A9A9A9'>发动此技能</font>，随机使用牌堆、弃牌堆中的一张装备牌。",
	["$chengzhang"] = "",
}

--------------------------------------------------
--异界神使 星野小鸟
--设计者：萌龙少主
--------------------------------------------------

xingyexiaoniao_yijieshenshi = sgs.General(extension,"xingyexiaoniao_yijieshenshi","individual","4",false)

sgs.LoadTranslationTable{
	["xingyexiaoniao_yijieshenshi"] = "星野小鸟",
	["&xingyexiaoniao_yijieshenshi"] = "星野小鸟",
	["#xingyexiaoniao_yijieshenshi"] = "异界神使",
	["designer:xingyexiaoniao_yijieshenshi"] = "萌龙少主",
	["cv:xingyexiaoniao_yijieshenshi"] = "",
	["illustrator:xingyexiaoniao_yijieshenshi"] = "",
	["~xingyexiaoniao_yijieshenshi"] = "",
}

xingyexiaoniao_yijieshenshi:setGender(sgs.General_Neuter)

--------------------------------------------------
--降世
--------------------------------------------------

jiangshi_X = sgs.CreateTriggerSkill{
	name = "jiangshi_X",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			for id = 0,500,1 do
				local card = sgs.Sanguosha:getCard(id)
				if card and (card:isKindOf("Angelsword") or card:isKindOf("Xingyenaixu")) and card:isAvailable(player) then
					local equip_index = card:getRealCard():toEquipCard():location()
					if player:hasEquipArea(equip_index) then	--检测对应装备区是否可用
						room:useCard(sgs.CardUseStruct(card, player, player))
					end
				end
			end
		end
		return false
	end
}

xingyexiaoniao_yijieshenshi:addSkill(jiangshi_X)

sgs.LoadTranslationTable{
	["jiangshi_X"] = "降世",
	[":jiangshi_X"] = "锁定技，游戏开始时，你使用一张【炽天使之剑】和一张【星野奈绪】。",
	["$jiangshi_X"] = "",
}

--------------------------------------------------
--狂战
--------------------------------------------------

kuangzhanbuff = sgs.CreateTargetModSkill{
	name = "#kuangzhanbuff",
	pattern = ".",
	extra_target_func = function(self, from, card)
		if from:hasSkill("kuangzhan") and (card:isKindOf("Slash") or (card:isBlack() and card:isNDTrick())) then
			return from:getMark("&kuangzhan!")
		end
		return 0
	end
}
kuangzhan = sgs.CreateTriggerSkill{
	name = "kuangzhan",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EffectResponded, sgs.TargetSpecified},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EffectResponded then
			room:addPlayerMark(player, "&kuangzhan!", 1)
		elseif event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if use.card and (use.card:isKindOf("Slash") or (use.card:isBlack() and use.card:isNDTrick())) and use.to:length() < player:getMark("&kuangzhan!") then
				if player:getMark("&kuangzhan!") >= 4 then
					RecordUnlockGenerals(player, "minuo_quannvpu")	--为玩家记录可解锁角色
				end
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				room:setPlayerMark(player, "&kuangzhan!", 0)
			end
		end
		return false
	end
}

xingyexiaoniao_yijieshenshi:addSkill(kuangzhan)
xingyexiaoniao_yijieshenshi:addSkill(kuangzhanbuff)

sgs.LoadTranslationTable{
	["kuangzhan"] = "狂战",
	["#kuangzhanbuff"] = "狂战",
	[":kuangzhan"] = "锁定技，你使用<font color='#9400D3'>杀或黑色普通锦囊牌</font>可指定目标数＋X。若你使用<font color='#9400D3'>这些牌</font>指定了少于X个目标，重置此技能。（X为你使用的牌被响应的次数）",
	["$kuangzhan"] = "",
}

--------------------------------------------------
--犬女仆 米诺
--设计者：--
--------------------------------------------------

minuo_quannvpu = sgs.General(extension,"minuo_quannvpu","individual","3",false,true,true)

sgs.LoadTranslationTable{
	["minuo_quannvpu"] = "米诺",
	["&minuo_quannvpu"] = "米诺",
	["#minuo_quannvpu"] = "犬女仆",
	["$minuo_quannvpu"] = "进阶",
	["designer:minuo_quannvpu"] = "萌龙少主",
	["cv:minuo_quannvpu"] = "",
	["illustrator:minuo_quannvpu"] = "",
	["unlock:minuo_quannvpu"] = "使用星野小鸟的“狂战”，将X≥4的“狂战”重置",
	["~minuo_quannvpu"] = "",
}

minuo_quannvpu:setGender(sgs.General_Neuter)

minuo_quannvpu:setBonus(true)	--设为奖励角色

--------------------------------------------------
--分生
--------------------------------------------------

fensheng_buff = sgs.CreateMaxCardsSkill{
	name = "#fensheng_buff",
	extra_func = function(self, target)
		if target:hasSkill("fensheng") and target:getMark("@fensheng_black") == target:getMark("@fensheng_white") then
			return 2
		end
	end
}
fensheng = sgs.CreateTriggerSkill{
	name = "fensheng",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			for i = 1,4,1 do
				player:gainMark(room:askForChoice(player, self:objectName(), "@fensheng_black+@fensheng_white"), 1)
			end
		end
		return false
	end,
}

minuo_quannvpu:addSkill(fensheng)
minuo_quannvpu:addSkill(fensheng_buff)

sgs.LoadTranslationTable{
	["fensheng"] = "分生",
	["#fensheng_buff"] = "分生",
	[":fensheng"] = "锁定技，游戏开始时，你以任意比例获得“黑”和“白”标记总共4枚。<br/>你的“黑”与“白”枚数相等时，你的手牌上限＋2。",
	["$fensheng"] = "",
	["@fensheng_black"] = "黑",
	["@fensheng_white"] = "白",
}

--------------------------------------------------
--爱染
--------------------------------------------------

airan_vs = sgs.CreateViewAsSkill{
	name = "airan",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		local scard
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_PLAY then
			scard = sgs.Sanguosha:cloneCard("slash", sgs.Card_SuitToBeDecided, 0)
		elseif sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE or sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE then
			local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
			if pattern == "jink" then
				scard = sgs.Sanguosha:cloneCard("jink", sgs.Card_SuitToBeDecided, 0)
			elseif pattern == "slash" then
				scard = sgs.Sanguosha:cloneCard("slash", sgs.Card_SuitToBeDecided, 0)
			elseif sgs.Self:getPhase() == sgs.Player_NotActive and string.find(pattern, "peach") then
				scard = sgs.Sanguosha:cloneCard("peach", sgs.Card_SuitToBeDecided, 0)
			end
		end
		if scard then
			scard:setSkillName(self:objectName())
			return scard
		end
	end,
	enabled_at_play = function(self, player)
		return player:getMark("@fensheng_white") > 0 and sgs.Slash_IsAvailable(player)
	end,
	enabled_at_response = function(self, player, pattern)
		if string.find(pattern, "slash") or string.find(pattern, "jink") or (player:getPhase() == sgs.Player_NotActive and string.find(pattern, "peach")) then
			return player:getMark("@fensheng_white") > 0
		end
	end
}
airan = sgs.CreateTriggerSkill{
	name = "airan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.PreCardUsed, sgs.PreCardResponded},
	view_as_skill = airan_vs,
	on_trigger = function(self, event, player, data, room)
		local card
		if event == sgs.PreCardUsed then
			card = data:toCardUse().card
		else
			--if data:toCardResponse().m_isUse then
				card = data:toCardResponse().m_card
			--end
		end
		if card then
			if card:getSkillName() == "airan" and player:getMark("@fensheng_white") > 0 then
				player:loseMark("@fensheng_white", 1)
				if not card:isKindOf("Peach") then
					player:gainMark("@fensheng_black", 1)
				end
			end
		end
		return false
	end
}

minuo_quannvpu:addSkill(airan)

sgs.LoadTranslationTable{
	["airan"] = "爱染",
	[":airan"] = "你可以将一枚“白”转化为“黑”，视为使用或打出一张【杀】或【闪】。<br/>你可以消耗一枚“白”，于回合外视为使用一张【桃】。",
	["$airan"] = "",
}

--------------------------------------------------
--澄涤
--------------------------------------------------

chengdi = sgs.CreateTriggerSkill{
	name = "chengdi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged, sgs.Damage},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and player:getMark("@fensheng_black") > 0 then
			if event == sgs.Damaged and player:askForSkillInvoke(self:objectName(), sgs.QVariant("damaged:"..player:getMark("@fensheng_black")-1)) then
				if player:getMark("@fensheng_black") > 0 then
					player:loseMark("@fensheng_black", 1)
					player:gainMark("@fensheng_white", 1)
					player:drawCards(player:getMark("@fensheng_black"), self:objectName())
				end
			elseif event == sgs.Damage and damage.to and damage.to:isAlive() and player:askForSkillInvoke(self:objectName(), sgs.QVariant("damage:"..damage.to:objectName()..":"..player:getMark("@fensheng_black"))) and player:canEffect(damage.to, self:objectName()) then
				if player:getMark("@fensheng_black") > 0 then
					player:loseMark("@fensheng_black", 1)
					
					room:doAnimate(1, player:objectName(), damage.to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					local X = player:getMark("@fensheng_black") + 1
					local from = damage.to
					local to = player
					local dummy = room:askForExchange(from, self:objectName(), X, X, true, "#chengdi_give:"..X..":" .. to:objectName(), false)
					if dummy and dummy:subcardsLength() > 0 then
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, from:objectName(), to:objectName(), self:objectName(), "")
						room:moveCardTo(dummy, to, sgs.Player_PlaceHand, reason, false)
					end
					dummy:deleteLater()
				end
			end
		end
		return false
	end
}

minuo_quannvpu:addSkill(chengdi)

sgs.LoadTranslationTable{
	["chengdi"] = "澄涤",
	[":chengdi"] = "你受到伤害后，可以将一枚“黑”转化为“白”，摸X张牌。<br/>你造成伤害后，可以消耗一枚“黑”，令受伤者交给你X＋1张牌。<br/>（X为“黑”枚数）",
	["$chengdi"] = "",
	["chengdi:damage"] = "你可以消耗一枚“黑”，令 %src 交给你 %dest 张牌",
	["chengdi:damaged"] = "你可以将一枚“黑”转化为“白”，然后摸 %src 张牌",
	["#chengdi_give"] = "请将 %src 张牌交给 %dest",
}

--------------------------------------------------
--书剑风华 雪月桑
--设计者：萌龙少主
--------------------------------------------------

xueyuesang_shujianfenghua = sgs.General(extension,"xueyuesang_shujianfenghua","individual","3",true)

sgs.LoadTranslationTable{
	["xueyuesang_shujianfenghua"] = "雪月桑",
	["&xueyuesang_shujianfenghua"] = "雪月桑",
	["#xueyuesang_shujianfenghua"] = "书剑风华",
	["$xueyuesang_shujianfenghua"] = "硬核",
	["designer:xueyuesang_shujianfenghua"] = "萌龙少主",
	["cv:xueyuesang_shujianfenghua"] = "",
	["illustrator:xueyuesang_shujianfenghua"] = "",
	["~xueyuesang_shujianfenghua"] = "",
}

table.insert(robot_change_general, "xueyuesang_shujianfenghua")	--对电脑禁用

--------------------------------------------------
--御剑
--------------------------------------------------

yujian_card = sgs.CreateSkillCard{
	name = "yujian",
	target_fixed = true,
	will_throw = true,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		if not SkillNullify(source, self:objectName()) then
			local can_get_ids = sgs.IntList()
			for _, id in sgs.qlist(room:getDrawPile()) do
				local card = sgs.Sanguosha:getCard(id)
				if card:isKindOf("EquipCard") and string.find(sgs.Sanguosha:translate(card:objectName()), "剑") and card:isAvailable(source) and source:hasEquipArea(card:getRealCard():toEquipCard():location()) then
					can_get_ids:append(id)
				end
			end
			if not can_get_ids:isEmpty() then
				room:fillAG(can_get_ids, source)
				local get_id = room:askForAG(source, can_get_ids, false, self:objectName())
				room:clearAG(source)
				if get_id and get_id >= 0 then
					local card = sgs.Sanguosha:getCard(get_id)
					room:useCard(sgs.CardUseStruct(card, source, source))
				end
			else
				local log = sgs.LogMessage()
				log.type = "#yujian_find_fail"
				log.from = source
				log.arg = "yujian"
				room:sendLog(log)	--发送信息框消息
			end
		end
	end
}
yujian_vs = sgs.CreateViewAsSkill{
	name = "yujian",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = yujian_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#yujian") < 1
	end
}
yujian = sgs.CreateTriggerSkill{
	name = "yujian",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = yujian_vs,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			for id = 0,500,1 do
				if sgs.Sanguosha:getCard(id) then
					local card = sgs.Sanguosha:getCard(id)
					if card and card:isKindOf("EquipCard") and string.find(sgs.Sanguosha:translate(card:objectName()), "灵剑") and room:getCardPlace(id) == sgs.Player_PlaceTable then
						room:moveCardsInToDrawpile(player, card, self:objectName(), -1, true)
						local log = sgs.LogMessage()
						log.type = "#yujian_start_log"
						log.arg = self:objectName()
						log.card_str = card:toString()
						room:sendLog(log)	--显示技能发动提示信息
					end
				end
			end
		end
		return false
	end,
}

xueyuesang_shujianfenghua:addSkill(yujian)

sgs.LoadTranslationTable{
	["yujian"] = "御剑",
	[":yujian"] = "游戏开始时，将所有<i>「灵剑」</i>装备牌加入牌堆。出牌阶段限一次，你可以弃置一张牌<font color='#A9A9A9'>发动此技能</font>，使用牌堆中的一张<i>「剑」</i>装备牌。",
	["$yujian"] = "",
	["#yujian_find_fail"] = "牌堆中没有 %from 可通过“%arg”使用的装备牌",
	["#yujian_start_log"] = "%card 因“%arg”被洗入牌堆",
	["^AG_yujian"] = "<b>御剑</b><br/>双击以选择一张「剑」牌使用之",
}

--------------------------------------------------
--明道
--------------------------------------------------

mingdao = sgs.CreateTriggerSkill{
	name = "mingdao",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start then
				local can_return_ids = sgs.IntList()
				for _, id in sgs.qlist(room:getDiscardPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:isKindOf("EquipCard") and string.find(sgs.Sanguosha:translate(card:objectName()), "灵剑") then
						can_return_ids:append(id)
					end
				end
				room:fillAG(can_return_ids, player)
				if can_return_ids:length() >= 3 and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:")) and not SkillNullify(player, self:objectName()) then
					local return_ids = sgs.IntList()
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					for i=1,3,1 do
						local return_id = room:askForAG(player, can_return_ids, false, self:objectName())
						if return_id and return_id >= 0 then
							local notify_players = sgs.SPlayerList()
							notify_players:append(player)
							room:takeAG(player, return_id, false, notify_players)	--注意fillAG是私人的则这里也要仅通知自己，否则会卡掉其他玩家的客户端
							return_ids:append(return_id)
						else
							room:clearAG(player)
							dummy:deleteLater()
							return false
						end
					end
					room:clearAG(player)
					dummy:addSubcards(return_ids)
					player:setFlags("Fake_Move")
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, "hide_move_skill", nil)	--源码修正：reason技能为hide_move_skill的移动不会被显示
					room:moveCardTo(dummy, player, nil, sgs.Player_DrawPile, reason, false, false)	--最后一个参数为真意味着多张牌会给观星框让玩家自行决定顺序
					local new_return_ids = room:getNCards(3)
					player:setFlags("-Fake_Move")
					room:askForGuanxing(player, new_return_ids, sgs.Room_GuanxingBothSides)
					dummy:deleteLater()
				else
					room:clearAG(player)
				end
			end
		end
		return false
	end
}

xueyuesang_shujianfenghua:addSkill(mingdao)

sgs.LoadTranslationTable{
	["mingdao"] = "明道",
	[":mingdao"] = "准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，将弃牌堆中的三张<i>「灵剑」</i>装备牌以任意顺序置于牌堆顶/牌堆底。",
	["$mingdao"] = "",
	["mingdao:choice"] = "你可以发动“明道”，选择三张灵剑装备牌，然后将之以任意顺序置于牌堆顶或牌堆底",
	["^AG_mingdao"] = "<b>明道</b><br/>双击以选择三张「灵剑」装备牌",
}

--------------------------------------------------
--北极星的守望者 熊崽
--设计者：NSX
--------------------------------------------------

xiongzai_beijixingdeshouwangzhe = sgs.General(extension,"xiongzai_beijixingdeshouwangzhe","individual","4",false)

sgs.LoadTranslationTable{
	["xiongzai_beijixingdeshouwangzhe"] = "熊崽",
	["&xiongzai_beijixingdeshouwangzhe"] = "熊崽",
	["#xiongzai_beijixingdeshouwangzhe"] = "北极星的守望者",
	["$xiongzai_beijixingdeshouwangzhe"] = "简单",
	["designer:xiongzai_beijixingdeshouwangzhe"] = "NSX",
	["cv:xiongzai_beijixingdeshouwangzhe"] = "",
	["illustrator:xiongzai_beijixingdeshouwangzhe"] = "",
	["~xiongzai_beijixingdeshouwangzhe"] = "",
}

--------------------------------------------------
--星熊
--------------------------------------------------

xingxiong = sgs.CreateTargetModSkill{
	name = "xingxiong",
	pattern = ".",
	residue_func = function(self, from, card, to)
		if from:hasSkill("xingxiong") and card and card:isKindOf("BasicCard") then
			return 1000
		end
	end
}

xiongzai_beijixingdeshouwangzhe:addSkill(xingxiong)

sgs.LoadTranslationTable{
	["xingxiong"] = "星熊",
	[":xingxiong"] = "锁定技，你使用基本牌无次数限制。",
	["$xingxiong"] = "",
}

--------------------------------------------------
--望乡
--------------------------------------------------

wangxiang = sgs.CreateTriggerSkill{
	name = "wangxiang",
	events = {sgs.EventPhaseStart, sgs.EventPhaseChanging},
	frequency = sgs.Skill_Limited,
	limit_mark = "@constellation",
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getPhase() == sgs.Player_Start then
			if player:getMark("@constellation") > 0 and player:getMark("wangxiang_hp") > 0 and player:getHp() < player:getMark("wangxiang_hp") and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				player:loseMark("@constellation")
				room:setPlayerMark(player, "&wangxiang!", 0)
				--room:doAnimate(2, "skill=EyeAnim:xiongzai.png", "")
				--room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				--room:getThread():delay(2500)
				room:doAnimate(2, "skill=WangxiangAnim:", "")
				room:broadcastSkillInvoke("wangxiang")	--播放配音
				room:broadcastSkillInvoke("audio_effect", 18)	--播放配音
				room:getThread():delay(6000)
				
				local X = player:getMark("wangxiang_hp") - player:getHp()
				if X > 0 then
					room:loseMaxHp(player, X)
					
					local recover = sgs.RecoverStruct()
					recover.who = player
					recover.recover = X
					room:recover(player, recover, false, 999)
					
					player:drawCards(X, self:objectName())
				end
			end
		elseif event == sgs.EventPhaseChanging and data:toPhaseChange().from ~= sgs.Player_NotActive and data:toPhaseChange().to == sgs.Player_NotActive then
			room:setPlayerMark(player, "wangxiang_hp", math.max(player:getHp(), 0))
			if player:hasSkill(self:objectName()) and player:getMark("@constellation") > 0 then
				room:setPlayerMark(player, "&wangxiang!", math.max(player:getHp(), 0))
			else
				room:setPlayerMark(player, "&wangxiang!", 0)
			end
		end
	end
}

xiongzai_beijixingdeshouwangzhe:addSkill(wangxiang)

sgs.LoadTranslationTable{
	["wangxiang"] = "望乡",
	[":wangxiang"] = "限定技，准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，失去X点体力上限，然后你"..WordState("滋养", word_ziyang_str).."X点体力，摸X张牌。<br/>（X为你上个回合结束时的体力值－当前体力值）",
	["$wangxiang"] = "（音效）",
	["@constellation"] = "星图",
}

--------------------------------------------------
--D.D.决斗者 游崎牧也
--设计者：萌龙少主
--------------------------------------------------

youqimuye_ddjuedouzhe = sgs.General(extension,"youqimuye_ddjuedouzhe","individual","4",true)

sgs.LoadTranslationTable{
	["youqimuye_ddjuedouzhe"] = "游崎牧也",
	["&youqimuye_ddjuedouzhe"] = "游崎牧也",
	["#youqimuye_ddjuedouzhe"] = "D.D.决斗者",
	["$youqimuye_ddjuedouzhe"] = "一般",
	["designer:youqimuye_ddjuedouzhe"] = "萌龙少主",
	["cv:youqimuye_ddjuedouzhe"] = "",
	["illustrator:youqimuye_ddjuedouzhe"] = "",
	["~youqimuye_ddjuedouzhe"] = "",
}

--------------------------------------------------
--疾驰
--------------------------------------------------

jichibuff = sgs.CreateTargetModSkill{
	name = "#jichibuff",
	pattern = ".",
	distance_limit_func = function(self, from, card, to)
		local n = 0
		if card and card:isKindOf("Slash") and card:getSkillName() == "jichi" then
			n = n + 1000
		end
		return n
	end
}
jichi_vs = sgs.CreateOneCardViewAsSkill{
	name = "jichi",
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, card)
		if not card:isKindOf("EquipCard") then return false end
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_PLAY then
    		local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_SuitToBeDecided, -1)
        	slash:addSubcard(card:getEffectiveId())
        	slash:deleteLater()
        	return slash:isAvailable(sgs.Self)
    	end
    	return true
	end,
	view_as = function(self, originalCard)
		local slash = sgs.Sanguosha:cloneCard("slash", originalCard:getSuit(), originalCard:getNumber())
		slash:addSubcard(originalCard:getId())
		slash:setSkillName(self:objectName())
		return slash
	end,
	enabled_at_play = function(self, player)
		return sgs.Slash_IsAvailable(player)
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "slash"
	end
}
jichi = sgs.CreateTriggerSkill{
	name = "jichi",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = jichi_vs,
	events = {sgs.CardUsed, sgs.CardResponded},
	on_trigger = function(self, event, player, data, room)
		local card
		if event == sgs.CardUsed then
			card = data:toCardUse().card
		else
			--if data:toCardResponse().m_isUse then
				card = data:toCardResponse().m_card
			--end
		end
		if card then
			if card:getSkillName() == "jichi" then
				player:drawCards(1, "jichi")
			end
		end
	end
}

youqimuye_ddjuedouzhe:addSkill(jichi)
youqimuye_ddjuedouzhe:addSkill(jichibuff)

sgs.LoadTranslationTable{
	["jichi"] = "疾驰",
	["#jichibuff"] = "疾驰",
	[":jichi"] = "你可以将一张装备牌当无距离限制的【杀】使用或打出并摸一张牌。",
	["$jichi"] = "",
}

--------------------------------------------------
--升华
--------------------------------------------------

shenghua = sgs.CreateTriggerSkill{
	name = "shenghua",
	frequency = sgs.Skill_Wake,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start and player:getMark(self:objectName()) == 0 and player:getHp() <= 1 then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			room:setPlayerMark(player, self:objectName(), 1)
			--room:loseMaxHp(player, 1)
			if room:askForChoice(player, self:objectName().."+shenghua_log", "shenghua1+shenghua2") == "shenghua1" then
				player:speak("bubble:聚集的祈愿，将指引命运前往新的方向。")
				room:getThread():delay(1000)
				room:doAnimate(2, "skill=ShenghuaT1Anim:", "")
				room:getThread():delay(6563)
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
				room:acquireSkill(player, "qiyuanjuji")
				player:speak("bubble:当你与卡片有足够深的羁绊时，卡片就会回应你。")
			else
				player:speak("bubble:与赤色的灵魂在彼端相交之时，新的力量将迸发而出。")
				room:getThread():delay(1000)
				room:doAnimate(2, "skill=ShenghuaT2Anim:", "")
				room:getThread():delay(6563)
				--player:drawCards(2, self:objectName())
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				local objname = room:askForChooseCardName(player, "m+b", false, self:objectName())
				if objname ~= "" then
					local cards = sgs.CardList()
					for _,id in sgs.qlist(room:getDrawPile()) do
						local card = sgs.Sanguosha:getCard(id)
						if card:objectName() == objname then
							cards:append(card)
						end
					end
					if not cards:isEmpty() then
						local card = cards:at(math.random(0, cards:length() - 1))
						dummy:addSubcard(card)
					end
				end
				local objname = room:askForChooseCardName(player, "m+td", false, self:objectName())
				if objname ~= "" then
					local cards = sgs.CardList()
					for _,id in sgs.qlist(room:getDrawPile()) do
						local card = sgs.Sanguosha:getCard(id)
						if card:objectName() == objname then
							cards:append(card)
						end
					end
					if not cards:isEmpty() then
						local card = cards:at(math.random(0, cards:length() - 1))
						dummy:addSubcard(card)
					end
				end
				player:obtainCard(dummy, true)
				dummy:deleteLater()
				room:getThread():delay(500)
				room:acquireSkill(player, "guicai")
				player:speak("bubble:真正的决斗者一切都是必然，就连判定本身亦由决斗者创造！")
			end
		end
	end,
}

youqimuye_ddjuedouzhe:addSkill(shenghua)

sgs.LoadTranslationTable{
	["shenghua"] = "升华",
	[":shenghua"] = "觉醒技，准备阶段若你的体力值≤1，选择一项：1.回复1点体力，获得“祈愿聚集”；2.从牌堆获得指定牌名的基本牌、锦囊牌各一张，获得“命运创造”。",
	["$shenghua"] = "",
	["shenghua_log"] = "你的“升华”已触发，请选择一项：\n鼠标悬停可查看技能描述",
	["shenghua1"] = "回复1点体力，获得“祈愿聚集”",
	[":shenghua1"] = "摸牌阶段开始时，若你已受伤，你可以观看牌堆顶的4张牌，将至多X张牌置于牌堆顶，其余牌置于牌堆底。（X为你已损失的体力值）",
	["shenghua2"] = "检索基本牌、锦囊牌各一张，获得“命运创造”",
	[":shenghua2"] = "当判定牌生效前，你可以打出非转化的牌代替之。",
}

--------------------------------------------------
--祈愿聚集
--------------------------------------------------

qiyuanjuji = sgs.CreateTriggerSkill{
	name = "qiyuanjuji",
	frequency = sgs.Skill_Frequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Draw and player:isWounded() then
			if room:askForSkillInvoke(player, self:objectName(), data) then
				local cards = room:getNCards(4)
				room:askForGuanxing(player, cards, sgs.Room_GuanxingBothSides, true, player:getLostHp())
			end
		end
		return false
	end,
}

vup_anjiang:addSkill(qiyuanjuji)	--加给暗将
youqimuye_ddjuedouzhe:addRelateSkill("qiyuanjuji")

sgs.LoadTranslationTable{
	["qiyuanjuji"] = "祈愿聚集",
	[":qiyuanjuji"] = "摸牌阶段开始时，若你已受伤，你可以观看牌堆顶的4张牌，将至多X张牌置于牌堆顶、其余牌置于牌堆底。（X为你已损失的体力值）",
	["$qiyuanjuji"] = "",
}

--------------------------------------------------
--命运创造（鬼才）
--------------------------------------------------

youqimuye_ddjuedouzhe:addRelateSkill("guicai")

--------------------------------------------------
--避雷针 萌龙少主
--设计者：萌龙少主
--------------------------------------------------

menglongshaozhu_bileizhen = sgs.General(extension,"menglongshaozhu_bileizhen","individual","4",true)

sgs.LoadTranslationTable{
	["menglongshaozhu_bileizhen"] = "萌龙少主",
	["&menglongshaozhu_bileizhen"] = "萌龙少主",
	["#menglongshaozhu_bileizhen"] = "避雷针",
	["$menglongshaozhu_bileizhen"] = "避雷针",
	["designer:menglongshaozhu_bileizhen"] = "萌龙少主",
	["cv:menglongshaozhu_bileizhen"] = "",
	["illustrator:menglongshaozhu_bileizhen"] = "",
	["~menglongshaozhu_bileizhen"] = "",
}

menglongshaozhu_bileizhen2 = sgs.General(extension,"menglongshaozhu_bileizhen2","individual","4",true,true,true)

sgs.LoadTranslationTable{
	["menglongshaozhu_bileizhen2"] = "萌龙少主",
	["&menglongshaozhu_bileizhen2"] = "萌龙少主",
	["#menglongshaozhu_bileizhen2"] = "避雷针",
	["$menglongshaozhu_bileizhen2"] = "避雷针",
	["parent:menglongshaozhu_bileizhen2"] = "menglongshaozhu_bileizhen",	--本体角色名
	["designer:menglongshaozhu_bileizhen2"] = "萌龙少主",
	["cv:menglongshaozhu_bileizhen2"] = "",
	["illustrator:menglongshaozhu_bileizhen2"] = "",
	["~menglongshaozhu_bileizhen2"] = "",
}

--------------------------------------------------
--虚像
--------------------------------------------------

xuxiang_transform = sgs.CreateTriggerSkill{	--隐藏效果，根据是否在横置状态变身
	name = "#xuxiang_transform",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.ChainStateChanged},
	on_trigger = function(self, event, player, data, room)
		if player:getGeneralName() == "menglongshaozhu_bileizhen" and player:isChained() then
			room:setPlayerProperty(player, "general", sgs.QVariant("menglongshaozhu_bileizhen2"))	--更换武将卡面
		elseif player:getGeneralName() == "menglongshaozhu_bileizhen2" and not player:isChained() then
			room:setPlayerProperty(player, "general", sgs.QVariant("menglongshaozhu_bileizhen"))	--更换武将卡面
		end
	end,
}

xuxiang = sgs.CreateTriggerSkill{
	name = "xuxiang",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart, sgs.StartJudge},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart and not player:isChained() then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			--room:broadcastSkillInvoke(self:objectName()) --播放配音
			for id = 0,500,1 do
				local card = sgs.Sanguosha:getCard(id)
				if card and card:isKindOf("Toujing") and card:isAvailable(player) then
					local equip_index = card:getRealCard():toEquipCard():location()
					if player:hasEquipArea(equip_index) then	--检测对应装备区是否可用
						room:useCard(sgs.CardUseStruct(card, player, player))
					end
				end
			end
			player:setChained(true)
			room:broadcastProperty(player, "chained")
			room:setEmotion(player, "chain")
			room:getThread():trigger(sgs.ChainStateChanged, room, player)
			--player:drawCards(1, self:objectName())
		elseif event == sgs.StartJudge then
			local judge = data:toJudge()
			if player:objectName() == judge.who:objectName() and player:isChained() then
				local logg = sgs.LogMessage()
				logg.from = player
				logg.type = "#xuxiang_invoke"
				logg.arg = "xuxiang"
				room:sendLog(logg)	--显示技能发动提示信息
				room:notifySkillInvoked(player, "xuxiang")	--在武将牌上显示技能名
				--room:broadcastSkillInvoke(self:objectName()) --播放配音
				judge.good = not judge.good
				data:setValue(judge)
			end
		end
		return false
	end,
}

menglongshaozhu_bileizhen:addSkill(xuxiang)
menglongshaozhu_bileizhen2:addSkill(xuxiang)
menglongshaozhu_bileizhen:addSkill(xuxiang_transform)
menglongshaozhu_bileizhen2:addSkill(xuxiang_transform)

sgs.LoadTranslationTable{
	["xuxiang"] = "虚像",
	["#xuxiang_transform"] = "虚像",
	[":xuxiang"] = "锁定技，游戏开始时，你使用一张【透镜】并横置。你处于横置状态时，反转你的判定结果。",
	["$xuxiang"] = "",
	["#xuxiang_invoke"] = "%from 的“%arg”被触发，本次判定结果反转",
}

--------------------------------------------------
--遐制
--------------------------------------------------

xiazhiUseCard = sgs.CreateSkillCard{
	name = "xiazhiUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, -1)
		card:addSubcard(self:getSubcards():first())
		card:setSkillName("_xiazhi")
		local result = card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
		card:deleteLater()
		return result
	end, 
	feasible = function(self, targets)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, -1)
		card:addSubcard(self:getSubcards():first())
		card:setSkillName("_xiazhi")
		local result = card and card:targetsFeasible(targets_list, sgs.Self)
		card:deleteLater()
		return result
	end,
	about_to_use = function(self, room, use)
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:setCardFlag(card, "-xiazhi")
		for _,cd in sgs.qlist(use.from:getHandcards()) do		--及时清除所有flag，避免此牌结算中获得牌产生的错误情况
			room:setCardFlag(cd, "-xiazhi")
		end
		local card_for_use = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, -1)
		card_for_use:addSubcard(card)
		card_for_use:setSkillName("_xiazhi")
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
xiazhivs = sgs.CreateViewAsSkill{
	n = 1,
	name = "xiazhivs&",
	response_pattern = "@@xiazhi!",
	--response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@xiazhi!" then
			return to_select:hasFlag("xiazhi")
		end
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@xiazhi!" then
			if #cards ~= 1 then return nil end
			local skillcard = xiazhiUseCard:clone()
			skillcard:addSubcard(cards[1])
			return skillcard
		end
		return nil
	end,
	enabled_at_play = function(self, player)
		return false
	end
}
xiazhi = sgs.CreateTriggerSkill{
	name = "xiazhi",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = xiazhivs,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() == sgs.Player_Finish then
			local targets = sgs.SPlayerList()
			for _,p in sgs.qlist(room:getAlivePlayers()) do
				if not p:isChained() and not p:isKongcheng() and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			if not targets:isEmpty() then
				local target = room:askForPlayerChosen(player, targets, self:objectName(), "@xiazhi_target", true, true)
				if target and not SkillNullify(player, self:objectName()) then
					target:setChained(true)
					room:broadcastProperty(target, "chained")
					room:setEmotion(target, "chain")
					room:getThread():trigger(sgs.ChainStateChanged, room, target)
					
					if target:isKongcheng() then return false end
					
					local usable_ids = {}
					for _, hcard in sgs.qlist(target:getHandcards()) do
						local xiazhi_id = hcard:getId()
						if room:getCardOwner(xiazhi_id) and room:getCardOwner(xiazhi_id):objectName() == target:objectName() and room:getCardPlace(xiazhi_id) == sgs.Player_PlaceHand then
							local card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, -1)
							card:addSubcard(xiazhi_id)
							card:setSkillName("_xiazhi")
							for _, p in sgs.qlist(room:getAlivePlayers()) do
								if card:isAvailable(target) and not room:isProhibited(target, p, card) and card:targetFilter(sgs.PlayerList(), p, target) then
									room:setCardFlag(hcard, self:objectName())
									table.insert(usable_ids, xiazhi_id)
								end
							end
							card:deleteLater()
						end
					end
					
					if #usable_ids > 0 then
						room:attachSkillToPlayer(target, "xiazhivs")	--临时技能按钮
						room:askForUseCard(target, "@@xiazhi!", "@xiazhi")
						room:detachSkillFromPlayer(target, "xiazhivs", true, true)	--临时技能按钮
					end
					
					for _, id in ipairs(usable_ids) do
						local card = sgs.Sanguosha:getCard(id)
						room:setCardFlag(card, "-"..self:objectName())
					end
				end
			end
		end
		return false
	end
}

menglongshaozhu_bileizhen:addSkill(xiazhi)
menglongshaozhu_bileizhen2:addSkill(xiazhi)

sgs.LoadTranslationTable{
	["xiazhi"] = "遐制",
	["xiazhivs"] = "遐制",
	[":xiazhi"] = "结束阶段，你可以<font color='#A9A9A9'>发动此技能</font>，横置一名有手牌的角色，其须将一张手牌当【杀】使用。",
	["$xiazhi"] = "",
	["@xiazhi_target"] = "你可以发动“遐制”，横置一名角色并令其转化一张杀",
	["@xiazhi"] = "你须将一张手牌当杀使用",
	["~xiazhi"] = "选择一张牌→选择目标→确定",
}

--------------------------------------------------
--风雅凉友 扇宝
--设计者：NSX
--------------------------------------------------

shanbao_fengyaliangyou = sgs.General(extension,"shanbao_fengyaliangyou","individual","3",false)

sgs.LoadTranslationTable{
	["shanbao_fengyaliangyou"] = "扇宝",
	["&shanbao_fengyaliangyou"] = "扇宝",
	["#shanbao_fengyaliangyou"] = "风雅凉友",
	["$shanbao_fengyaliangyou"] = "进阶",
	["designer:shanbao_fengyaliangyou"] = "NSX",
	["cv:shanbao_fengyaliangyou"] = "",
	["illustrator:shanbao_fengyaliangyou"] = "Bison仓鼠",
	["~shanbao_fengyaliangyou"] = "",
}

--------------------------------------------------
--翩翩
--------------------------------------------------

pianpian = sgs.CreateTriggerSkill{
	name = "pianpian",
	frequency = sgs.Skill_Frequent,
	change_skill = true,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getMark("pianpian_used") == 0 and player:getHandcardNum() < player:getMaxHp() then
			if player:getPhase() == sgs.Player_Finish and player:getChangeSkillState(self:objectName()) <= 1 and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				player:drawCards(1, self:objectName())
				room:setPlayerMark(player, "pianpian_used", 1)
				room:setChangeSkillState(player, self:objectName(), 2)
			elseif player:getPhase() == sgs.Player_Start and player:getChangeSkillState(self:objectName()) == 2 and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				player:drawCards(1, self:objectName())
				room:setPlayerMark(player, "pianpian_used", 1)
				room:setChangeSkillState(player, self:objectName(), 1)
			end
		end
	end,
}
table.insert(turn_end_clear_mark, "pianpian_used")	--回合结束清除标记

shanbao_fengyaliangyou:addSkill(pianpian)

sgs.LoadTranslationTable{
	["pianpian"] = "翩翩",
	[":pianpian"] = "转换技，每回合限一次，<font color='#CB5063'>①结束阶段 ②准备阶段</font>，若你的手牌数小于体力上限，你可以<font color='#A9A9A9'>发动此技能</font>，摸一张牌。",
	[":pianpian1"] = "转换技，每回合限一次，①结束阶段 <font color=\"#01A5AF\"><s>②准备阶段</s></font>，若你的手牌数小于体力上限，你可以<font color='#A9A9A9'>发动此技能</font>，摸一张牌。",
	[":pianpian2"] = "转换技，每回合限一次，<font color=\"#01A5AF\"><s>①结束阶段</s></font> ②准备阶段，若你的手牌数小于体力上限，你可以<font color='#A9A9A9'>发动此技能</font>，摸一张牌。",
	["$pianpian"] = "",
}

--------------------------------------------------
--寄月
--------------------------------------------------

jiyue_card = sgs.CreateSkillCard{
	name = "jiyue",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if self:subcardsLength() == 4 and #targets == 0 then
			return sgs.Self:canEffect(to_select, "jiyue")
		end
		return false
	end,
	feasible = function(self, targets)
		if self:subcardsLength() == 4 then
			return #targets == 1
		else
			return #targets == 0
		end
	end,
	on_use = function(self, room, source, targets)
		local return_ids = sgs.IntList()
		for _,id in sgs.qlist(self:getSubcards()) do
			return_ids:append(id)
		end
		if not return_ids:isEmpty() then
			room:shuffleIntoDrawPile(source, return_ids, self:objectName(), true)
		end
		
		local X = self:subcardsLength()
		if X == 2 then
			local objname = room:askForChooseCardName(source, "m+b", false, self:objectName())
			if objname ~= "" then
				local cards = sgs.CardList()
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:objectName() == objname then
						cards:append(card)
					end
				end
				if not cards:isEmpty() then
					local card = cards:at(math.random(0, cards:length() - 1))
					source:obtainCard(card, true)
				end
			end
		elseif X == 3 then
			local objname = room:askForChooseCardName(source, "m+td", false, self:objectName())
			if objname ~= "" then
				local cards = sgs.CardList()
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:objectName() == objname then
						cards:append(card)
					end
				end
				if not cards:isEmpty() then
					local card = cards:at(math.random(0, cards:length() - 1))
					source:obtainCard(card, true)
				end
			end
		elseif X == 4 then
			source:turnOver()
			
			room:getThread():delay(500)
			room:doAnimate(2, "skill=JiyueAnim:", "")
			room:getThread():delay(7000)
			
			local target = targets[1]
			room:damage(sgs.DamageStruct(self:objectName(), source, target, 3, sgs.DamageStruct_Fire))
			--if target:isAlive() and target:hasEquipArea(1) then
			--	target:throwEquipArea(1)
			--end
		end
	end
}
jiyue = sgs.CreateViewAsSkill{
	name = "jiyue",
	n = 4,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		if #selected == 0 then
			return true
		else
			return getCardClassName(selected[1]) == getCardClassName(to_select)
		end
	end,
	view_as = function(self, cards)
		if #cards >= 2 then
			local NewSkillCard = jiyue_card:clone()
			for _, card in ipairs(cards) do
				NewSkillCard:addSubcard(card)
			end
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#jiyue") < 1
	end
}

shanbao_fengyaliangyou:addSkill(jiyue)

sgs.LoadTranslationTable{
	["jiyue"] = "寄月",
	[":jiyue"] = "出牌阶段限一次，你可以将2~4张牌名相同的牌返回牌堆，<font color='#EE82EE'>根据张数执行对应效果：</font><br/><font color='#9400D3'>2张</font> 从牌堆获得一张指定牌名的基本牌；<br/><font color='#9400D3'>3张</font> 从牌堆获得一张指定牌名的锦囊牌；<br/><font color='#9400D3'>4张</font> 翻面，对一名角色造成3点火焰伤害。",
	["$jiyue"] = "",
	["^jiyue"] = "操作提示：<br/>①2~3张：选择2~3张同牌名的牌→确定<br/>②4张：选择4张同牌名的牌→选择一名角色→确定",
}

--------------------------------------------------
--阴阳魅影 芳乃推
--设计者：夜玥紫英
--------------------------------------------------

fangnaitui_yinyangmeiying = sgs.General(extension,"fangnaitui_yinyangmeiying","individual","3",false)

sgs.LoadTranslationTable{
	["fangnaitui_yinyangmeiying"] = "芳乃推",
	["&fangnaitui_yinyangmeiying"] = "芳乃推",
	["#fangnaitui_yinyangmeiying"] = "阴阳魅影",
	["$fangnaitui_yinyangmeiying"] = "简单",
	["designer:fangnaitui_yinyangmeiying"] = "夜玥紫英",
	["cv:fangnaitui_yinyangmeiying"] = "",
	["illustrator:fangnaitui_yinyangmeiying"] = "",
	["~fangnaitui_yinyangmeiying"] = "",
}

fangnaitui_yinyangmeiying:setGender(sgs.General_Neuter)

--------------------------------------------------
--渴欲
--------------------------------------------------

keyu = sgs.CreateTriggerSkill{
	name = "keyu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.HpRecover, sgs.OverHealing},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.HpRecover then
			local recover = data:toRecover()
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				room:sendCompulsoryTriggerLog(myself, self:objectName())	--显示锁定技发动
				local card_id = room:drawCard()
				local card = sgs.Sanguosha:getCard(card_id)
				
				myself:addToPile("keyu_pile", card, false)
			end
			if player:hasSkill(self:objectName()) and recover.who and recover.who:isAlive() then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				recover.who:drawCards(1, self:objectName())
			end
		elseif event == sgs.OverHealing then
			local recover = data:toRecover()
			if player:hasSkill(self:objectName()) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				local card_id = room:drawCard()
				local card = sgs.Sanguosha:getCard(card_id)
				
				player:addToPile("keyu_pile", card, false)
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

--fangnaitui_yinyangmeiying:addSkill(keyu)

sgs.LoadTranslationTable{
	["keyu"] = "渴欲",
	[":keyu"] = "锁定技，一名角色回复体力后 或 你的体力回复溢出后，你从牌堆将一张牌作为“欲”除外。你回复体力后，回复来源摸一张牌。",
	["$keyu"] = "",
	["keyu_pile"] = "欲",
}

--------------------------------------------------
--冰心
--------------------------------------------------

bingxin = sgs.CreateTriggerSkill{
	name = "bingxin",
	frequency = sgs.Skill_Compulsory,
	global = true,
	events = {sgs.DamageCaused, sgs.Damage, sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damage and player:getPhase() ~= sgs.Player_NotActive then
			local damage = data:toDamage()
			if damage.damage > 0 and player:getMark("bingxin_damaged") == 0 then
				room:setPlayerMark(player, "bingxin_damaged", 1)
			end
		elseif player and player:isAlive() and player:hasSkill(self:objectName()) then
			if event == sgs.DamageCaused then
				local damage = data:toDamage()
				if damage.damage > 0 and damage.nature ~= sgs.DamageStruct_Ice then
					room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
					damage.nature = sgs.DamageStruct_Ice
					data:setValue(damage)
				end
			elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish and player:getMark("bingxin_damaged") == 0 and not player:getPile("keyu_pile"):isEmpty() then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _,id in sgs.qlist(player:getPile("keyu_pile")) do
					dummy:addSubcard(id)
				end
				player:obtainCard(dummy, false)
				dummy:deleteLater()
			end
			return false
		end
	end
}
table.insert(turn_end_clear_mark, "bingxin_damaged")	--回合结束清除标记

--fangnaitui_yinyangmeiying:addSkill(bingxin)

sgs.LoadTranslationTable{
	["bingxin"] = "冰心",
	[":bingxin"] = "锁定技，你造成的伤害视为冰霜伤害。结束阶段，若你本回合未造成过伤害，你获得所有“欲”。",
	["$bingxin"] = "",
}

--------------------------------------------------
--渴欲（新）
--------------------------------------------------

newkeyu = sgs.CreateTriggerSkill{
	name = "newkeyu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.HpRecover},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.HpRecover then
			local recover = data:toRecover()
			if recover.recover <= 0 then return false end
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				--if myself:canDiscard(player, "he") then
				if not player:isNude() then
					local _data = sgs.QVariant()
					_data:setValue(player)
					if myself:getMark("&newkeyu+used_lun") == 0 and myself:objectName() ~= player:objectName() and room:askForSkillInvoke(myself, self:objectName(), _data) and not SkillNullify(myself, self:objectName()) and myself:canEffect(player, self:objectName()) then
						room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						room:setPlayerMark(myself, "&newkeyu+used_lun", 1)
						if player:isNude() then continue end
						local id = room:askForCardChosen(myself, player, "he", self:objectName(), false, sgs.Card_MethodNone)
						local card = sgs.Sanguosha:getCard(id)
						--room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, myself:objectName(), player:objectName(), self:objectName(), ""), player)
						room:showCard(player, id)
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_EXTRACTION, myself:objectName(), player:objectName(), self:objectName(), "")
						room:moveCardTo(card, myself, sgs.Player_PlaceHand, reason, true)
						if card and card:isKindOf("Slash") then
							--player:setFlags("newkeyu_target_AI")	--AI用
							--local choice = room:askForChoice(myself, self:objectName().."+newkeyu_log1+"..player:objectName().."+newkeyu_log2", "keyu_draw+keyu_losehp")
							--player:setFlags("-newkeyu_target_AI")	--AI用
							--ChoiceLog(myself, choice, player)
							--if choice == "keyu_draw" then
							--	player:drawCards(1, self:objectName())
							--elseif choice == "keyu_losehp" then
								room:loseHp(player, 1, myself, self:objectName())
							--end
						end
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

fangnaitui_yinyangmeiying:addSkill(newkeyu)

sgs.LoadTranslationTable{
	["newkeyu"] = "渴欲",
	[":newkeyu"] = "每轮限一次，一名其他角色回复体力后，你可以<font color='#A9A9A9'>发动此技能</font>，展示并获得其一张牌，若之为【杀】则其失去1点体力。",
	["$newkeyu"] = "",
	["keyu_draw"] = "令其摸一张牌",
	["keyu_losehp"] = "令其失去1点体力",
	["newkeyu_log1"] = "你对 ",
	["newkeyu_log2"] = " 发动了“渴欲”\n请选择一项执行：",
	["used_lun"] = "已使用",
}

--------------------------------------------------
--纤柔
--------------------------------------------------

xianroubuff = sgs.CreateProhibitSkill{
	name = "#xianroubuff",
	is_prohibited = function(self, from, to, card)
		return to:hasSkill("xianrou") and from:objectName() ~= to:objectName() and card:getSuit() == sgs.Card_Spade and not card:isKindOf("SkillCard")
	end
}
xianrou = sgs.CreateTriggerSkill{
	name = "xianrou",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.from and damage.from:isAlive() and damage.from:objectName() ~= player:objectName() then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			room:doAnimate(1, player:objectName(), damage.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
			if not player:canEffect(damage.from, self:objectName()) then
				return false
			end
			
			local card = room:askForCard(damage.from, ".|spade|.|hand,equipped", "@xianrou_give:"..player:objectName(), data, sgs.Card_MethodNone)
			if card then
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, damage.from:objectName(), player:objectName(), self:objectName(), "")
				room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, true)
			else
				room:loseHp(damage.from, 1, player, self:objectName())
			end
		end
		return false
	end
}

fangnaitui_yinyangmeiying:addSkill(xianrou)
fangnaitui_yinyangmeiying:addSkill(xianroubuff)

sgs.LoadTranslationTable{
	["xianrou"] = "纤柔",
	["#xianroubuff"] = "纤柔",
	[":xianrou"] = "锁定技，你不是其他角色使用黑桃牌的合法目标。你受到来自其他角色的伤害后，其须交给你一张黑桃牌，否则失去1点体力。",
	["$xianrou"] = "",
	["@xianrou_give"] = "请将一张黑桃牌交给 %src ，否则你失去1点体力",
}

--------------------------------------------------
--节制
--------------------------------------------------

jiezhi = sgs.CreateTriggerSkill{
	name = "jiezhi",
	frequency = sgs.Skill_Frequent,
	events = {sgs.EventPhaseStart, sgs.CardUsed, sgs.CardResponded, sgs.Damage},
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() ~= sgs.Player_NotActive and (event == sgs.CardUsed or event == sgs.CardResponded) then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card then
				room:setPlayerMark(player, "jiezhi_used", 1)
			end
		elseif player:getPhase() ~= sgs.Player_NotActive and event == sgs.Damage then
			local damage = data:toDamage()
			if damage.damage > 0 and player:objectName() == damage.from:objectName() then
				room:setPlayerMark(player, "jiezhi_damaged", 1)
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish and player:getMark("jiezhi_used") > 0 and player:getMark("jiezhi_damaged") == 0 then
			if room:askForSkillInvoke(player, self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark, "jiezhi_used")	--回合结束清除标记
table.insert(turn_end_clear_mark, "jiezhi_damaged")	--回合结束清除标记

--fangnaitui_yinyangmeiying:addSkill(jiezhi)

sgs.LoadTranslationTable{
	["jiezhi"] = "节制",
	[":jiezhi"] = "结束阶段，若你本回合使用过牌且未造成过伤害，你可以<font color='#A9A9A9'>发动此技能</font>，回复1点体力。",
	["$jiezhi"] = "",
}

--------------------------------------------------
--异境领主 艾冰
--设计者：
--------------------------------------------------

aibing_yijinglingzhu = sgs.General(extension,"aibing_yijinglingzhu","individual","3",false)

sgs.LoadTranslationTable{
	["aibing_yijinglingzhu"] = "艾冰",
	["&aibing_yijinglingzhu"] = "艾冰",
	["#aibing_yijinglingzhu"] = "异境领主",
	["$aibing_yijinglingzhu"] = "进阶",
	["designer:aibing_yijinglingzhu"] = "萌龙少主",
	["cv:aibing_yijinglingzhu"] = "",
	["illustrator:aibing_yijinglingzhu"] = "",
	["~aibing_yijinglingzhu"] = "",
}

--------------------------------------------------
--血池
--------------------------------------------------

xuechi = sgs.CreateTriggerSkill{
	name = "xuechi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.HpRecover, sgs.Damage, sgs.EventPhaseEnd},
	on_trigger = function(self, event, player, data, room)
		if player:getPile("yaoling_pile"):length() < 13 and ((event == sgs.HpRecover and data:toRecover().recover > 0) or (event == sgs.Damage and data:toDamage().damage > 0)) then
			--if room:askForSkillInvoke(player, self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				local card_id = room:drawCard()
				local card = sgs.Sanguosha:getCard(card_id)
				
				player:addToPile("yaoling_pile", card)
			--end
		elseif event == sgs.EventPhaseEnd and player:getPhase() == sgs.Player_Draw and not player:isKongcheng() and not player:getPile("yaoling_pile"):isEmpty() then
			player:exchangeFreelyFromPrivatePile(self:objectName(), "yaoling_pile", 1000, false, true)	--第五个参数表示是否公开，请与此除外牌堆是否公开对应
		end
	end
}

aibing_yijinglingzhu:addSkill(xuechi)

sgs.LoadTranslationTable{
	["xuechi"] = "血池",
	[":xuechi"] = "你造成伤害或回复体力后，将牌堆顶的牌作为<font color='#804040'>“妖灵”</font>除外（<font color='#804040'>“妖灵”</font>至多13张）。摸牌阶段结束时，你可以用任意张<font color='#804040'>“妖灵”</font>替换等量手牌。",
	["$xuechi"] = "",
	["yaoling_pile"] = "妖灵",
	["^AG_xuechi"] = "<b>血池</b><br/>双击以选择任意张要与手牌交换的牌，不选择请点击“确定”",
}

--------------------------------------------------
--聚灵
--------------------------------------------------

juling = sgs.CreateTriggerSkill{
	name = "juling",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish and not player:getPile("yaoling_pile"):isEmpty() then
			local suits, numbers = {}, {}
			for _,id in sgs.qlist(player:getPile("yaoling_pile")) do
				local card = sgs.Sanguosha:getCard(id)
				if card then
					local suit_str = card:getSuitString()
					local number = card:getNumber()
					if not table.contains(suits, suit_str) then
						table.insert(suits, suit_str)
					end
					if not table.contains(numbers, number) then
						table.insert(numbers, number)
					end
				end
			end
			if #suits == 4 then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
			end
			if #numbers == 13 then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				RecordUnlockGenerals(player, "linde_yijingqingke")	--为玩家记录可解锁角色
				RecordUnlockGenerals(player, "jiexiaoyun_yijingsixing")	--为玩家记录可解锁角色
				room:doAnimate(2, "skill=EyeAnim:aibing.png", "")
				room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				room:getThread():delay(2500)
				room:setTag("rule_win", sgs.QVariant(true))		--标记为规则胜利，不触发击杀动画
				if room:getMode() == "04_tt" or room:getMode() == "04_2v2" then
					room:gameOver(player:getRole())
				elseif room:getMode() == "06_3v3" then
					if player:getRole() == "lord" or player:getRole() == "loyalist" then
						room:gameOver("lord+loyalist")
					elseif player:getRole() == "renegade" or player:getRole() == "rebel" then
						room:gameOver("renegade+rebel")
					end
				else
					if player:getRole() == "lord" or player:getRole() == "loyalist" then
						room:gameOver("lord+loyalist")
					elseif player:getRole() == "rebel" then
						room:gameOver("rebel")
					elseif player:getRole() == "renegade" then
						room:gameOver("renegade")
					end
				end
			end
		end
		return false
	end
}

aibing_yijinglingzhu:addSkill(juling)

sgs.LoadTranslationTable{
	["juling"] = "聚灵",
	[":juling"] = "锁定技，结束阶段，若<font color='#804040'>“妖灵”</font>包含：<br/><font color='#9400D3'>4种花色</font>，你回复1点体力；<br/><font color='#9400D3'>13种点数</font>，你所在的阵营获得游戏胜利。",
	["$juling"] = "",
}

--------------------------------------------------
--琳德
--设计者：--
--------------------------------------------------

linde_yijingqingke = sgs.General(extension,"linde_yijingqingke","individual","3",false,true,true)

sgs.LoadTranslationTable{
	["linde_yijingqingke"] = "琳德",
	["&linde_yijingqingke"] = "琳德",
	["#linde_yijingqingke"] = "异境清客",
	["$linde_yijingqingke"] = "简单",
	["designer:linde_yijingqingke"] = "萌龙少主",
	["cv:linde_yijingqingke"] = "",
	["illustrator:linde_yijingqingke"] = "",
	["unlock:linde_yijingqingke"] = "使用艾冰的“聚灵”获得一次特殊胜利",	--解锁条件
	["~linde_yijingqingke"] = "",
}

linde_yijingqingke:setGender(sgs.General_Neuter)

linde_yijingqingke:setBonus(true)	--设为奖励角色

--------------------------------------------------
--交萦
--------------------------------------------------

jiaoying_linde_card = sgs.CreateSkillCard{
	name = "jiaoying_linde",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if to_select:getPile("yaoling_pile"):length() + self:subcardsLength() <= 13 then
				return to_select:getHandcardNum() >= self:subcardsLength() and sgs.Self:canEffect(to_select, self:objectName())
			end
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		local X = self:subcardsLength()
		target:addToPile("yaoling_pile", self, true)
		if target and target:isAlive() and target:objectName() ~= source:objectName() and target:getHandcardNum() >= X then
			local dummy = room:askForExchange(target, self:objectName(), X, X, false, "#jiaoying_linde_give:" .. X .. ":" .. source:objectName(), false)
			if dummy and dummy:subcardsLength() > 0 then
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, target:objectName(), source:objectName(), self:objectName(), "")
				room:moveCardTo(dummy, source, sgs.Player_PlaceHand, reason, false)
			end
			dummy:deleteLater()
		end
	end
}
jiaoying_linde = sgs.CreateViewAsSkill{
	name = "jiaoying_linde",
	n = 3,
	view_filter = function(self, selected, to_select)
		if #selected < 3 and not to_select:isEquipped() then
			for _,card in ipairs(selected) do
				if to_select:getTypeId() == card:getTypeId() then
					return false
				end
			end
			return true
		end
		return false
	end,
	view_as = function(self, cards)
		if #cards > 0 then
			local jiaoying_linde_card = jiaoying_linde_card:clone()
			for _, card in ipairs(cards) do
				jiaoying_linde_card:addSubcard(card)
			end
			jiaoying_linde_card:setSkillName("jiaoying_linde")
			return jiaoying_linde_card
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#jiaoying_linde") < 1 and not player:isKongcheng()
	end,
}

linde_yijingqingke:addSkill(jiaoying_linde)

sgs.LoadTranslationTable{
	["jiaoying_linde"] = "交萦",
	[":jiaoying_linde"] = "出牌阶段限一次，你可以将任意张不同类别的手牌作为<font color='#804040'>“妖灵”</font>置于一名角色的除外区，然后其须交给你等量张手牌。（<font color='#804040'>“妖灵”</font>至多13张）",
	["$jiaoying_linde"] = "",
	["#jiaoying_linde_give"] = "请选择 %src 张手牌交给 %dest<br/>操作提示：选择两张手牌→确定",
}

--------------------------------------------------
--灵润
--------------------------------------------------

lingrunbuff = sgs.CreateTargetModSkill{
	name = "#lingrunbuff",
	pattern = ".",
	residue_func = function(self, from, card, to)
		if card and from:getMark("&lingrun+"..card:getSuitString().."_char") > 0 then
			return 1000
		end
	end,
	distance_limit_func = function(self, from, card)
		if card and from:getMark("&lingrun+"..card:getSuitString().."_char") > 0 then
			return 1000
		end
	end
}
lingrun = sgs.CreateTriggerSkill{
	name = "lingrun",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Play and not player:getPile("yaoling_pile"):isEmpty() then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if not player:getPile("yaoling_pile"):isEmpty() and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. myself:objectName())) then
					room:doAnimate(1, player:objectName(), myself:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					room:sendCompulsoryTriggerLog(myself, self:objectName()) --显示锁定技发动
					
					local card_ids = player:getPile("yaoling_pile")
					room:fillAG(card_ids, myself)
					local id = room:askForAG(myself, card_ids, false, self:objectName())
					room:clearAG(myself)
					local card = sgs.Sanguosha:getCard(id)
					if card then
						player:obtainCard(card, true)
						room:setPlayerMark(player, "&lingrun+"..card:getSuitString().."_char", 1)
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}
table.insert(play_end_clear_mark_prefix, "&lingrun+")	--出牌结束清除指定前缀的标记

linde_yijingqingke:addSkill(lingrun)
linde_yijingqingke:addSkill(lingrunbuff)

sgs.LoadTranslationTable{
	["lingrun"] = "灵润",
	["#lingrunbuff"] = "灵润",
	[":lingrun"] = "一名角色的出牌阶段开始时，其可以令你选择其一张<font color='#804040'>“妖灵”</font>，其获得之，本阶段其使用与之同花色的牌无距离、次数限制。",
	["$lingrun"] = "",
	["lingrun:choice"] = "你可以令 %src 选择一张“妖灵”，你获得之、本阶段使用此花色的牌无距离、次数限制",
	["^AG_lingrun"] = "<b>灵润</b><br/>请双击选择一张牌令当前回合角色获得",
}

--------------------------------------------------
--界小陨
--设计者：--
--------------------------------------------------

jiexiaoyun_yijingsixing = sgs.General(extension,"jiexiaoyun_yijingsixing","individual","3",false,true,true)

sgs.LoadTranslationTable{
	["jiexiaoyun_yijingsixing"] = "界小陨",
	["&jiexiaoyun_yijingsixing"] = "界小陨",
	["#jiexiaoyun_yijingsixing"] = "异境司星",
	["$jiexiaoyun_yijingsixing"] = "进阶",
	["designer:jiexiaoyun_yijingsixing"] = "萌龙少主",
	["cv:jiexiaoyun_yijingsixing"] = "",
	["illustrator:jiexiaoyun_yijingsixing"] = "",
	["unlock:jiexiaoyun_yijingsixing"] = "使用艾冰的“聚灵”获得一次特殊胜利",	--解锁条件
	["~jiexiaoyun_yijingsixing"] = "",
}

jiexiaoyun_yijingsixing:setBonus(true)	--设为奖励角色

--------------------------------------------------
--移星
--------------------------------------------------

yixing = sgs.CreateTriggerSkill{
	name = "yixing",
	frequency = sgs.Skill_Frequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data)
		if player:getPhase() == sgs.Player_Start then
			local room = player:getRoom()
			if room:askForSkillInvoke(player, self:objectName(), data) then
				local N = math.random(3, 6)
				local card_ids = room:getNCards(N)
				local top_ids = room:askForGuanxing(player, card_ids, sgs.Room_GuanxingBothSides)
				local bottom_ids = sgs.IntList()
				local count = 0
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _,id in sgs.qlist(card_ids) do
					if not top_ids:contains(id) then
						bottom_ids:append(id)
						count = count + sgs.Sanguosha:getCard(id):getNumber()
						if room:getCardPlace(id) == sgs.Player_DrawPile then
							dummy:addSubcard(id)
						end
					end
				end
				if count == 16 and dummy:subcardsLength() > 0 and dummy:subcardsLength() + player:getPile("yaoling_pile"):length() <= 13 then
					player:addToPile("yaoling_pile", dummy, true)
				end
				dummy:deleteLater()
			end
		end
	end
}

jiexiaoyun_yijingsixing:addSkill(yixing)

sgs.LoadTranslationTable{
	["yixing"] = "移星",
	[":yixing"] = "准备阶段，你可以观看牌堆顶的随机3~6张牌，将之以任意顺序置于牌堆顶/牌堆底，若置于牌堆底的牌点数和为16，你将这些牌作为<font color='#804040'>“妖灵”</font>除外（<font color='#804040'>“妖灵”</font>至多13张）。",
	["$yixing"] = "",
}

--------------------------------------------------
--揽月
--------------------------------------------------

lanyue = sgs.CreateViewAsSkill{
	name = "lanyue",
	n = 4,
	expand_pile = "yaoling_pile",
	view_filter = function(self, selected, to_select)
		if #selected < 4 then
			return not inHand(sgs.Self, to_select) and not to_select:isEquipped() and inPile(sgs.Self, to_select, "yaoling_pile")
		else
			return false
		end
	end,
	view_as = function(self, cards)
		local scard
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_PLAY then
			if #cards == 1 then
				scard = sgs.Sanguosha:cloneCard("slash", sgs.Card_SuitToBeDecided, 0)
			elseif #cards == 2 then
				scard = sgs.Sanguosha:cloneCard("dismantlement", sgs.Card_SuitToBeDecided, 0)
			elseif #cards == 4 then
				scard = sgs.Sanguosha:cloneCard("archery_attack", sgs.Card_SuitToBeDecided, 0)
			end
		elseif sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE or sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE then
			local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
			if #cards == 1 and pattern == "jink" then
				scard = sgs.Sanguosha:cloneCard("jink", sgs.Card_SuitToBeDecided, 0)
			elseif #cards == 1 and pattern == "slash" then
				scard = sgs.Sanguosha:cloneCard("slash", sgs.Card_SuitToBeDecided, 0)
			elseif #cards == 2 and pattern == "nullification" then
				scard = sgs.Sanguosha:cloneCard("nullification", sgs.Card_SuitToBeDecided, 0)
			end
		end
		if scard then
			scard:setSkillName(self:objectName())
			for _, c in ipairs(cards) do
				scard:addSubcard(c)
			end
			return scard
		end
	end,
	enabled_at_play = function(self, player)
		return player:getPile("yaoling_pile"):length() >= 1
	end,
	enabled_at_response = function(self, player, pattern)
		if pattern == "nullification" then
			return player:getPile("yaoling_pile"):length() >= 2
		elseif pattern == "jink" or pattern == "slash" then
			return player:getPile("yaoling_pile"):length() >= 1
		end
	end,
	enabled_at_nullification = function(self, player)
		return player:getPile("yaoling_pile"):length() >= 2
	end
}

jiexiaoyun_yijingsixing:addSkill(lanyue)

sgs.LoadTranslationTable{
	["lanyue"] = "揽月",
	[":lanyue"] = "你可以将任意张“妖灵”按下列规则使用或打出：<br/>一张，当【杀】或【闪】；<br/>两张，当【过河拆桥】或【无懈可击】；<br/>四张，当【万箭齐发】。",
	["$lanyue"] = "",
}

--------------------------------------------------
--极限之史莱姆女王 莉姆丝
--设计者：
--------------------------------------------------

limusi = sgs.General(extension,"limusi","individual","4",false,true,true)

sgs.LoadTranslationTable{
	["limusi"] = "莉姆丝",
	["&limusi"] = "莉姆丝",
	["#limusi"] = "极限之史莱姆女王",
	["$limusi"] = "简单",
	["designer:limusi"] = "萌龙少主",
	["cv:limusi"] = "",
	["illustrator:limusi"] = "",
	["unlock:limusi"] = "使用小希发动“精算”，消耗32枚字节令技能的发动无效",
	["~limusi"] = "",
}

limusi:setBonus(true)	--设为奖励角色

--------------------------------------------------
--拟态
--------------------------------------------------

nitai = sgs.CreateTriggerSkill{
	name = "nitai",
	frequency = sgs.Skill_Frequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage == 0 then return false end
		local choices = {}
		local card = damage.card
		if card then
			local id = card:getEffectiveId()
			if room:getCardPlace(id) == sgs.Player_PlaceTable then
				table.insert(choices, "nitai_card")
			end
			if card:getSkillName() ~= "" then
				local skill = sgs.Sanguosha:getSkill(card:getSkillName())
				if skill and not player:hasSkill(skill) then
					table.insert(choices, card:getSkillName())
				end
			end
		else
			if damage.reason ~= "" then
				local skill = sgs.Sanguosha:getSkill(damage.reason)
				if skill and not player:hasSkill(skill) then
					table.insert(choices, damage.reason)
				end
			end
		end
		--table.insert(choices, "cancel")
		if #choices > 0 and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
			local choice = room:askForChoice(player, "nitai+nitai_choice_log", table.concat(choices, "+"))
			if choice ~= "cancel" and choice ~= "" then
				ChoiceLog(player, choice)
				if choice == "nitai_card" then
					player:obtainCard(card, true)
				else
					if choice == "luashenhui_sub" then		--获得绘生的特殊处理
						if damage.from and damage.from:isAlive() then
							room:setPlayerMark(player, "luashenhui_event", damage.from:getMark("luashenhui_event"))
							room:setPlayerMark(player, "luashenhui_cost", damage.from:getMark("luashenhui_cost"))
							room:setPlayerMark(player, "luashenhui_effect", damage.from:getMark("luashenhui_effect"))
						else
							return false
						end
					end
					room:acquireTurnEndSkills(player, self:objectName(), choice)	--获得技能直到下回合结束
				end
			end
		end
	end
}

limusi:addSkill(nitai)

sgs.LoadTranslationTable{
	["nitai"] = "拟态",
	[":nitai"] = "你受到伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，选择一项：1.获得伤害来源牌 2.获得伤害来源技能直到下个回合结束时。",
	["$nitai"] = "",
	["nitai_choice_log"] = "请选择一项，选技能则获得之直到下个回合结束：\n鼠标悬停可查看技能描述",
	["nitai_card"] = "获得伤害来源牌",
}

--------------------------------------------------
--第二维度 莉姆丝
--设计者：
--------------------------------------------------

limusi_v2 = sgs.General(extension,"limusi_v2","individual","3",false,true,true)

sgs.LoadTranslationTable{
	["limusi_v2"] = "莉姆丝",
	["&limusi_v2"] = "莉姆丝",
	["#limusi_v2"] = "第二维度",
	["$limusi_v2"] = "进阶",
	["designer:limusi_v2"] = "萌龙少主",
	["cv:limusi_v2"] = "",
	["illustrator:limusi_v2"] = "",
	["unlock:limusi_v2"] = "在冰火歌会模式中令自己或队长获得一个转换技",
	["~limusi_v2"] = "",
}

limusi_v2:setBonus(true)	--设为奖励角色

--------------------------------------------------
--复维
--------------------------------------------------

function doFuwei(player, target)
	local room = player:getRoom()
	if player:getChangeSkillState("fuwei") == 1 then
		room:setChangeSkillState(player, "fuwei", 2)
		local recover = sgs.RecoverStruct()
		recover.who = player
		recover.recover = 1
		room:recover(target, recover)
	elseif player:getChangeSkillState("fuwei") == 2 then
		room:setChangeSkillState(player, "fuwei", 3)
		room:setPlayerMark(target, "&fuwei", 1)
	elseif player:getChangeSkillState("fuwei") == 3 then
		room:setChangeSkillState(player, "fuwei", 4)
		room:loseHp(target, 1, player, "fuwei")
	elseif player:getChangeSkillState("fuwei") == 4 then
		room:setChangeSkillState(player, "fuwei", 1)
		if target:getMark("@extra_turn") == 0 then
			target:gainAnExtraTurn()
		end
	end
end
fuwei = sgs.CreateTriggerSkill{
	name = "fuwei",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardsMoveOneTime},
	change_skill = true,
	on_trigger = function(self, event, player, data, room)
		local move = data:toMoveOneTime()
		if move.from == nil then return false end
		if player:hasFlag("fuwei_using") then return false end	--不允许嵌套询问
		if player:getMark("&fuwei+_lun!") >= 2 then return false end
		if (move.to_place == sgs.Player_DiscardPile)
				and (bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD)
				and move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_DISMANTLE then
			local can_trigger = false
			local i = 0
			for _, card_id in sgs.qlist(move.card_ids) do
				local card = sgs.Sanguosha:getCard(card_id)
				if ((player:getChangeSkillState(self:objectName()) == 1 and card:getSuit() == sgs.Card_Heart)
					or (player:getChangeSkillState(self:objectName()) == 2 and card:isKindOf("BasicCard"))
					or (player:getChangeSkillState(self:objectName()) == 3 and card:getSuit() == sgs.Card_Spade)
					or (player:getChangeSkillState(self:objectName()) == 4 and card:isKindOf("EquipCard")))
						and ((move.from_places:at(i) == sgs.Player_PlaceHand) or (move.from_places:at(i) == sgs.Player_PlaceEquip)) then
					can_trigger = true
					break
				end
				i = i + 1
			end
			if can_trigger then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAlivePlayers()) do
					if SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local last_target_objname = ""
					for _,p in sgs.qlist(room:getAlivePlayers()) do
						if p:getMark("fuwei_target") > 0 then
							last_target_objname = p:objectName()
							break
						end
					end
					local target = room:askForPlayerChosen(player, targets, self:objectName(), Ternary(last_target_objname ~= "", "@fuwei_ask2:".."fuwei_"..player:getChangeSkillState(self:objectName())..":"..last_target_objname..":fuwei_"..Ternary(player:getChangeSkillState(self:objectName()) == 4, 1, player:getChangeSkillState(self:objectName())+1), "@fuwei_ask1:".."fuwei_"..player:getChangeSkillState(self:objectName())), true, true)
					if target and not SkillNullify(player, self:objectName()) then
						room:addPlayerMark(player, "&fuwei+_lun!", 1)
						player:setFlags("fuwei_using")
						doFuwei(player, target)
						for _,p in sgs.qlist(room:getAllPlayers()) do
							if p:getMark("fuwei_target") > 0 and p:isAdjacentTo(target) then
								doFuwei(player, target)
							end
						end
						for _,p in sgs.qlist(room:getAllPlayers()) do
							room:setPlayerMark(p, "fuwei_target", 0)
						end
						room:setPlayerMark(target, "fuwei_target", 1)
						player:setFlags("-fuwei_using")
					end
				end
			end
		end
		return false
	end
}

limusi_v2:addSkill(fuwei)

sgs.LoadTranslationTable{
	["fuwei"] = "复维",
	[":fuwei"] = "转换技，每轮限2次，<font color='#CB5063'>①红桃牌 ②基本牌 ③黑桃牌 ④装备牌</font>被弃置后，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其<font color='#CB5063'>①回复1点体力 ②跳过下个出牌阶段 ③失去1点体力 ④执行一个额外回合</font>，若其与上次“复维”指定的目标相邻，此技能对其额外发动一次。<br/><font color='#B22222'>此技能不能嵌套发动</font>",
	[":fuwei1"] = "转换技，每轮限2次，①红桃牌 <font color=\"#01A5AF\"><s>②基本牌</s></font> <font color=\"#01A5AF\"><s>③黑桃牌</s></font> <font color=\"#01A5AF\"><s>④装备牌</s></font>被弃置后，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其①回复1点体力 <font color=\"#01A5AF\"><s>②跳过下个出牌阶段</s></font> <font color=\"#01A5AF\"><s>③失去1点体力</s></font> <font color=\"#01A5AF\"><s>④执行一个额外回合</s></font>，若其与上次“复维”指定的目标相邻，此技能对其额外发动一次。<br/><font color='#B22222'>此技能不能嵌套发动</font>",
	[":fuwei2"] = "转换技，每轮限2次，<font color=\"#01A5AF\"><s>①红桃牌</s></font> ②基本牌 <font color=\"#01A5AF\"><s>③黑桃牌</s></font> <font color=\"#01A5AF\"><s>④装备牌</s></font>被弃置后，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其<font color=\"#01A5AF\"><s>①回复1点体力</s></font> ②跳过下个出牌阶段 <font color=\"#01A5AF\"><s>③失去1点体力</s></font> <font color=\"#01A5AF\"><s>④执行一个额外回合</s></font>，若其与上次“复维”指定的目标相邻，此技能对其额外发动一次。<br/><font color='#B22222'>此技能不能嵌套发动</font>",
	[":fuwei3"] = "转换技，每轮限2次，<font color=\"#01A5AF\"><s>①红桃牌</s></font> <font color=\"#01A5AF\"><s>②基本牌</s></font> ③黑桃牌 <font color=\"#01A5AF\"><s>④装备牌</s></font>被弃置后，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其<font color=\"#01A5AF\"><s>①回复1点体力</s></font> <font color=\"#01A5AF\"><s>②跳过下个出牌阶段</s></font> ③失去1点体力 <font color=\"#01A5AF\"><s>④执行一个额外回合</s></font>，若其与上次“复维”指定的目标相邻，此技能对其额外发动一次。<br/><font color='#B22222'>此技能不能嵌套发动</font>",
	[":fuwei4"] = "转换技，每轮限2次，<font color=\"#01A5AF\"><s>①红桃牌</s></font> <font color=\"#01A5AF\"><s>②基本牌</s></font> <font color=\"#01A5AF\"><s>③黑桃牌</s></font> ④装备牌被弃置后，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其<font color=\"#01A5AF\"><s>①回复1点体力</s></font> <font color=\"#01A5AF\"><s>②跳过下个出牌阶段</s></font> <font color=\"#01A5AF\"><s>③失去1点体力</s></font> ④执行一个额外回合，若其与上次“复维”指定的目标相邻，此技能对其额外发动一次。<br/><font color='#B22222'>此技能不能嵌套发动</font>",
	["$fuwei"] = "",
	["@fuwei_ask1"] = "你可以发动“复维”指定一名角色，令其 %src",
	["@fuwei_ask2"] = "你可以发动“复维”指定一名角色，令其 %src，若其与 %dest 相邻，再令其 %arg",
	[":mark:&fuwei"] = "跳过下个出牌阶段",
	["fuwei_1"] = "回复1点体力",
	["fuwei_2"] = "跳过下个出牌阶段",
	["fuwei_3"] = "失去1点体力",
	["fuwei_4"] = "执行一个额外回合",
}

--------------------------------------------------
--慈母手中线 Bison仓鼠
--设计者：NSX
--------------------------------------------------

bison_cimushouzhongxian = sgs.General(extension,"bison_cimushouzhongxian$","bisonpro","3",false)

sgs.LoadTranslationTable{
	["bison_cimushouzhongxian"] = "Bison仓鼠",
	["&bison_cimushouzhongxian"] = "仓鼠",
	["#bison_cimushouzhongxian"] = "慈母手中线",
	["$bison_cimushouzhongxian"] = "进阶",
	["designer:bison_cimushouzhongxian"] = "NSX",
	["cv:bison_cimushouzhongxian"] = "",
	["illustrator:bison_cimushouzhongxian"] = "",
	["~bison_cimushouzhongxian"] = "",
}

bison_cpmode = sgs.General(extension,"bison_cpmode","bisonpro","3",false,true,true)	--CP协战限定角色

sgs.LoadTranslationTable{
	["bison_cpmode"] = "Bison仓鼠",
	["&bison_cpmode"] = "仓鼠",
	["#bison_cpmode"] = "慈母手中线",
	["$bison_cpmode"] = "进阶",
	["parent:bison_cpmode"] = "bison_cimushouzhongxian",	--本体角色名
	["designer:bison_cpmode"] = "NSX",
	["cv:bison_cpmode"] = "",
	["illustrator:bison_cpmode"] = "",
	["~bison_cpmode"] = "",
}

--------------------------------------------------
--鼠化
--------------------------------------------------

shuhuacard = sgs.CreateSkillCard{
	name = "shuhua",
	filter = function(self, targets, to_select)
		return #targets < sgs.Self:getMark("&shuhua!") and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		if effect.to:isAlive() then
			if effect.to:getKingdom() == "bisonpro" then
				effect.to:drawCards(1, self:objectName())
			else
				local old_kingdom = effect.to:getKingdom()
				room:setPlayerProperty(effect.to, "kingdom", sgs.QVariant("bisonpro"))
				local log = sgs.LogMessage()
				log.type = "#ChangeKingdom"
				log.arg = old_kingdom
				log.arg2 = "bisonpro"
				log.from = effect.from
				log.to:append(effect.to)
				room:sendLog(log)	--发送信息框消息
			end
		end
	end
}
shuhuavs = sgs.CreateZeroCardViewAsSkill{
	name = "shuhua",
	response_pattern = "@@shuhua",
	view_as = function()
		return shuhuacard:clone()
	end
}
shuhua = sgs.CreateTriggerSkill{
	name = "shuhua",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseEnd},
	view_as_skill = shuhuavs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseEnd and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getPhase() == sgs.Player_Discard then
			local X = player:getMark("discard_counter")
			if X > 0 then
				room:setPlayerMark(player, "&shuhua!", X)
				room:askForUseCard(player, "@@shuhua", "@shuhua:"..X)
				room:setPlayerMark(player, "&shuhua!", 0)
			end
		end
		return false
	end
}
table.insert(discard_end_clear_mark, "&shuhua!")	--弃牌结束清除标记

bison_cimushouzhongxian:addSkill(shuhua)

sgs.LoadTranslationTable{
	["shuhua"] = "鼠化",
	[":shuhua"] = "弃牌阶段结束时，你可以指定至多X名角色，其中势力为仓鼠国的角色各摸一张牌，其余角色将势力改为仓鼠国。（X为你本阶段弃置的牌数）",
	["$shuhua"] = "",
	["@shuhua"] = "你可以使用“鼠化”指定至多 %src 名角色，若其势力为仓鼠国则摸一张牌，否则将势力改为仓鼠国",
	["~shuhua"] = "选择若干名角色→确定",
}

--------------------------------------------------
--巧绘
--------------------------------------------------

--↓可被巧绘变化的角色对，加号之前为原角色，加号之后为变化后角色
local qiaohui_general_pairs = {"buding_qiaoxinmiyou+buding_kaolashusheng", "buding_lichilingya+buding_kaolashusheng", "yuexi_ruoyuelongnv+yuexi_langlibaitiao", "xuehusang_zizaisuixin+xuegugu_jingzhongguying", "zhenlijiang_mofashaonv+zhenlijiang_mofashaoshu"}

qiaohui = sgs.CreateTriggerSkill{
	name = "qiaohui",
	frequency = sgs.Skill_Wake,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish and player:getMark(self:objectName()) == 0 then
			local kingdoms = {}
			for _,p in sgs.qlist(room:getAlivePlayers()) do
				if not table.contains(kingdoms, p:getKingdom()) then
					table.insert(kingdoms, p:getKingdom())
				end
			end
			if #kingdoms <= 2 then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:setPlayerMark(player, self:objectName(), 1)
				room:setEmotion(player, "bison")
				room:gainMaxHp(player, 1)
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
				if player:hasSkill("shuhua") then
					room:detachSkillFromPlayer(player, "shuhua", false, false, true, false)	--新增最后一项代表会停止化身动画
				end
				
				for _,p in sgs.qlist(room:getAllPlayers()) do
					local name = p:getGeneralName()
					if p:isAlive() and p:getKingdom() == "bisonpro" then
						local name2 = ""
						for _, pair in ipairs(qiaohui_general_pairs) do
							if name == pair:split("+")[1] then
								name2 = pair:split("+")[2]
							end
						end
						if name2 and name2 ~= "" then
							doChangeHeroAnimate(room, name, name2)
							room:changeHero(p, name2, false, true, false, true)
							room:setPlayerMark(p, "qiaohui_born", 1)	--标记为因“巧绘”而出场
							RecordOriginGeneral(p, name)	--记录原角色，避免胜率记录混乱
							RecordUnlockGenerals(player, name2)	--为玩家记录可解锁角色
							RecordUnlockGenerals(p, name2)		--为玩家记录可解锁角色
						end
					end
				end
				
				room:acquireSkill(player, "miaoping")
				if player:hasSkill("miaoping") then
					--直接复制自妙评代码，注意把self:objectName()换成"miaoping"
					local targets = sgs.SPlayerList()
					for _, p in sgs.qlist(room:getAlivePlayers()) do
						if (p:getKingdom() == "bisonpro" or room:getMode() == "couple") and SkillCanTarget(p, player, "miaoping") and player:canEffect(p, "miaoping") then
							targets:append(p)
						end
					end
					if not targets:isEmpty() then
						local target
						player:setTag("miaoping_data", data)	--AI用
						local target = room:askForPlayerChosen(player, targets, "miaoping", "@miaoping_ask_"..Ternary(player:getChangeSkillState("miaoping") <= 1, "1", "2"), true, true)
						player:removeTag("miaoping_data")	--AI用
						if target and not SkillNullify(player, "miaoping") then
							if player:objectName() == target:objectName() then
								room:broadcastSkillInvoke("miaoping", 1)	--播放配音
							else
								room:broadcastSkillInvoke("miaoping", math.random(2,9))	--播放配音
							end
							if player:getChangeSkillState("miaoping") <= 1 then
								room:setPlayerMark(target, "@!miaoping_lun", 1)
								room:setChangeSkillState(player, "miaoping", 2)
							else
								room:setPlayerMark(target, "@!miaoping_lun", 2)
								room:setChangeSkillState(player, "miaoping", 1)
							end
						end
					end
					--复制结束
				end
			end
		end
	end,
}

bison_cimushouzhongxian:addSkill(qiaohui)

sgs.LoadTranslationTable{
	["qiaohui"] = "巧绘",
	[":qiaohui"] = "觉醒技，结束阶段，若场上势力数≤2，你增加1点体力上限，回复1点体力，失去“鼠化”，<font color='#008B8B'>令仓鼠国势力的以下角色变化为对应的新角色</font>，然后获得且可以发动“妙评”。<br/>\
<font color='#008B8B'>可变化角色：步玎、月兮、雪狐桑、真理酱</font>",
	["$qiaohui"] = "",
}

--------------------------------------------------
--妙评
--------------------------------------------------

miaoping_prohibit = sgs.CreateProhibitSkill{
	name = "#miaoping_prohibit",
	is_prohibited = function(self, from, to, card)
		return from:getMark("@!miaoping_lun") == 1 and not card:isKindOf("SkillCard") and card:isKindOf("Slash")
	end
}
miaoping_maxcard = sgs.CreateMaxCardsSkill{
	name = "#miaoping_maxcard",
	extra_func = function(self, target)
		if target:getMark("@!miaoping_lun") == 1 then
			return 2
		end
	end
}
miaoping = sgs.CreateTriggerSkill{
	name = "miaoping",
	frequency = sgs.Skill_NotFrequent,
	change_skill = true,
	events = {sgs.RoundStart, sgs.EventPhaseStart, sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.RoundStart and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getAlivePlayers()) do
				if (p:getKingdom() == "bisonpro" or room:getMode() == "couple") and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			if not targets:isEmpty() then
				local target
				player:setTag("miaoping_data", data)	--AI用
				local target = room:askForPlayerChosen(player, targets, self:objectName(), "@miaoping_ask_"..Ternary(player:getChangeSkillState(self:objectName()) <= 1, "1", "2"), true, true)
				player:removeTag("miaoping_data")	--AI用
				if target and not SkillNullify(player, self:objectName()) then
					if player:objectName() == target:objectName() then
						room:broadcastSkillInvoke(self:objectName(), 1)	--播放配音
					else
						room:broadcastSkillInvoke(self:objectName(), math.random(2,9))	--播放配音
					end
					if player:getChangeSkillState(self:objectName()) <= 1 then
						room:setPlayerMark(target, "@!miaoping_lun", 1)
						room:setChangeSkillState(player, self:objectName(), 2)
					else
						room:setPlayerMark(target, "@!miaoping_lun", 2)
						room:setChangeSkillState(player, self:objectName(), 1)
					end
				end
			end
		elseif event == sgs.EventPhaseChanging and player and player:isAlive() and player:getMark("@!miaoping_lun") == 2 then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Draw and not player:isSkipped(sgs.Player_Draw) then
				local log = sgs.LogMessage()
				log.type = "#miaoping_skip"
				log.arg = self:objectName()
				log.arg2 = "draw"
				log.to:append(player)
				room:sendLog(log)	--发送信息框消息
				player:skip(change.to)
			end
		elseif event == sgs.EventPhaseStart and player and player:isAlive() and player:getMark("@!miaoping_lun") == 2 and player:getPhase() == sgs.Player_Finish then
			local X = math.min(5, player:getMaxCards())
			if player:getHandcardNum() < X then
				local log = sgs.LogMessage()
				log.type = "#miaoping_draw"
				log.arg = self:objectName()
				log.arg2 = X
				log.to:append(player)
				room:sendLog(log)	--发送信息框消息
				player:drawCards(X - player:getHandcardNum(), self:objectName())
			end
		end
	end
}

vup_anjiang:addSkill(miaoping)
vup_anjiang:addSkill(miaoping_prohibit)
vup_anjiang:addSkill(miaoping_maxcard)
bison_cimushouzhongxian:addRelateSkill("miaoping")
bison_cpmode:addSkill(miaoping)

sgs.LoadTranslationTable{
	["miaoping"] = "妙评",
	[":miaoping"] = "转换技，轮次开始时，你可以指定一名仓鼠国角色，<font color='#A9A9A9'>发动此技能</font>，令其于本轮内：<br/><font color='#CB5063'>①不能使用【杀】，手牌上限＋2<br/>②跳过摸牌阶段，结束阶段将手牌数补至手牌上限（至多为5）</font>。",
	[":miaoping1"] = "转换技，轮次开始时，你可以指定一名仓鼠国角色，<font color='#A9A9A9'>发动此技能</font>，令其于本轮内：<br/>①不能使用【杀】，手牌上限＋2<br/><font color=\"#01A5AF\"><s>②跳过摸牌阶段，结束阶段将手牌数补至手牌上限（至多为5）</s></font>。",
	[":miaoping2"] = "转换技，轮次开始时，你可以指定一名仓鼠国角色，<font color='#A9A9A9'>发动此技能</font>，令其于本轮内：<br/><font color=\"#01A5AF\"><s>①不能使用【杀】，手牌上限＋2</s></font><br/>②跳过摸牌阶段，结束阶段将手牌数补至手牌上限（至多为5）。",
	["@!miaoping_lun"] = "妙评",
	["@miaoping_ask_1"] = "你可以发动“妙评”，令一名角色于其下个回合：<br/>不能使用杀、手牌上限+2",
	["@miaoping_ask_2"] = "你可以发动“妙评”，令一名角色于其下个回合：<br/>跳过摸牌，结束阶段将手牌数补至手牌上限",
	["#miaoping_skip"] = "由于“%arg”的效果，%to 将跳过 %arg2 阶段",
	["#miaoping_draw"] = "由于“%arg”的效果，%to 将手牌数调整为 %arg2",
	["$miaoping1"] = "你们喜欢VTB的呀，为什么要来看我呀，去看我那些女儿们啊~",
	["$miaoping2"] = "双月不可爱吗？",
	["$miaoping3"] = "阿秋不灵性吗？",
	["$miaoping4"] = "步玎嘴不大吗？",
	["$miaoping5"] = "豹她不傻吗？",
	["$miaoping6"] = "拉、拉布里不、不爱抖露吗？",
	["$miaoping7"] = "天使垣不聪明吗？",
	["$miaoping8"] = "羊她不香吗？",
	["$miaoping9"] = "扇宝不太清楚呀……",
}

--------------------------------------------------
--鼠糖
--------------------------------------------------

shutang = sgs.CreateTriggerSkill{
	name = "shutang$",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if player:hasLordSkill(self:objectName()) and player:objectName() == room:getLord():objectName() and damage.damage > 0 and damage.from and damage.from:getKingdom() ~= "bisonpro" then
			for i=1,damage.damage,1 do
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getAlivePlayers()) do
					if p:getKingdom() == "bisonpro" and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local target = room:askForPlayerChosen(player, targets, self:objectName(), "@shutang_ask", true, true)
					if target then
						target:drawCards(1, self:objectName())
					end
				end
			end
		end
		return false
	end
}

bison_cimushouzhongxian:addSkill(shutang)

sgs.LoadTranslationTable{
	["shutang"] = "鼠糖",
	[":shutang"] = "主公技，你受到非仓鼠国角色造成的1点伤害后，你可以令一名仓鼠国角色摸一张牌。",
	["$shutang"] = "",
	["@shutang_ask"] = "你可以使用“鼠糖”，令一名仓鼠国角色摸一张牌",
}

--------------------------------------------------
--螃蟹那由
--设计者：
--------------------------------------------------

pangxienayou_cishanjia = sgs.General(extension,"pangxienayou_cishanjia","bisonpro","3",false)

sgs.LoadTranslationTable{
	["pangxienayou_cishanjia"] = "螃蟹那由",
	["&pangxienayou_cishanjia"] = "螃蟹那由",
	["#pangxienayou_cishanjia"] = "慈善家",
	["$pangxienayou_cishanjia"] = "一般",
	["designer:pangxienayou_cishanjia"] = "萌龙少主",
	["cv:pangxienayou_cishanjia"] = "",
	["illustrator:pangxienayou_cishanjia"] = "",
	["~pangxienayou_cishanjia"] = "",
}

pangxienayou_cishanjia:setGender(sgs.General_Neuter)

--------------------------------------------------
--蟹行
--------------------------------------------------

xiexing = sgs.CreateTriggerSkill{	--转方向耦合入源码
	name = "xiexing",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			if not player:isChained() then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				player:setChained(true)
				room:broadcastProperty(player, "chained")
				room:setEmotion(player, "chain")
				room:getThread():trigger(sgs.ChainStateChanged, room, player)
				--player:drawCards(1, self:objectName())
				--if not player:isKongcheng() then
				--	local card = room:askForCard(player, ".|.|.|hand!", "@xiexing_card", data, sgs.Card_MethodNone)
				--	if card then
						local amazing_grace = sgs.Sanguosha:cloneCard("amazing_grace", sgs.Card_NoSuit, 0)
						amazing_grace:setSkillName(self:objectName())
				--		amazing_grace:addSubcard(card)
						room:useCard(sgs.CardUseStruct(amazing_grace, player, nil))
				--	end
				--end
			end
		end
	end
}

pangxienayou_cishanjia:addSkill(xiexing)

sgs.LoadTranslationTable{
	["xiexing"] = "蟹行",
	[":xiexing"] = "锁定技，结束阶段，你横置，然后视为使用一张【五谷丰登】。你须为你使用的牌指定结算方向。",
	--[":xiexing"] = "锁定技，结束阶段，你横置，然后将一张手牌当【五谷丰登】使用。你须为你使用的牌指定结算方向。",
	["$xiexing"] = "",
	["@xiexing_card"] = "你须将一张手牌当五谷丰登使用<br>操作提示：选择一张手牌→确定",
}

--------------------------------------------------
--筹赈
--------------------------------------------------

chouzhen = sgs.CreateTriggerSkill{
	name = "chouzhen",
	frequency = sgs.Skill_NotFrequent,
	change_skill = true,
	events = {sgs.DrawNCards, sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards and player:getChangeSkillState(self:objectName()) <= 1 then
			if player:askForSkillInvoke(self:objectName(), sgs.QVariant("draw:")) and not SkillNullify(player, self:objectName()) then
				room:setChangeSkillState(player, self:objectName(), 2)
				local count = data:toInt() + 2
				data:setValue(count)
			end
		elseif event == sgs.Damaged and player:getChangeSkillState(self:objectName()) == 2 and not player:isNude() then
			local damage = data:toDamage()
			if damage.from and damage.from:isAlive() and damage.from:objectName() ~= player:objectName() and damage.from:askForSkillInvoke(self:objectName(), sgs.QVariant("get:"..player:objectName())) then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				room:doAnimate(1, damage.from:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				room:setChangeSkillState(player, self:objectName(), 1)
				local X = math.min(2, player:getCardCount(true))
				local card_ids = askForChooseNCards(damage.from, player, X, "he", self:objectName())
				if #card_ids < X then	--虽然一般不会有这种情况，但有玩家反应AI会空效不选发动筹赈，这里加个保底
					card_ids = {}
					while #card_ids < X do
						local cards = sgs.CardList()
						for _,id in sgs.qlist(player:getCards("he")) do
							if not table.contains(card_ids, id) then
								local card = sgs.Sanguosha:getCard(id)
								cards:append(card)
							end
						end
						if not cards:isEmpty() then
							local card_id = cards:at(math.random(0, cards:length() - 1)):getId()
							table.insert(card_ids, card_id)
						else
							break
						end
					end
				end
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _, id in ipairs(card_ids) do
					dummy:addSubcard(id)
				end
				damage.from:obtainCard(dummy, false)
				dummy:deleteLater()
			end
		end
	end,
}

pangxienayou_cishanjia:addSkill(chouzhen)

sgs.LoadTranslationTable{
	["chouzhen"] = "筹赈",
	[":chouzhen"] = "转换技，<font color='#CB5063'>①摸牌阶段，你可以<font color='#A9A9A9'>发动此技能</font>，本阶段你的摸牌数＋2 ②你受到伤害后，若伤害来源不为你，其可以获得你的两张牌</font>。",
	[":chouzhen1"] = "转换技，①摸牌阶段，你可以<font color='#A9A9A9'>发动此技能</font>，本阶段你的摸牌数＋2 <font color=\"#01A5AF\"><s>②你受到伤害后，若伤害来源不为你，其可以获得你的两张牌</s></font>。",
	[":chouzhen2"] = "转换技，<font color=\"#01A5AF\"><s>①摸牌阶段，你可以<font color='#A9A9A9'>发动此技能</font>，本阶段你的摸牌数＋2</s></font> ②你受到伤害后，若伤害来源不为你，其可以获得你的两张牌。",
	["$chouzhen"] = "",
	["chouzhen:draw"] = "你可以发动“筹赈”，多摸2张牌",
	["chouzhen:get"] = "你可以获得 %src 的2张牌",
}

--------------------------------------------------
--角色特性：酒魂
--------------------------------------------------

characteristic_jiuhun = sgs.CreateTargetModSkill{
	name = "#characteristic_jiuhun",
	pattern = ".",
	residue_func = function(self, from, card, to)
		if from:hasSkill(self:objectName()) and card:isKindOf("Analeptic") then
			return 1
		end
	end
}
characteristic_jiuhun_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_jiuhun_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_jiuhun_state)
zihaiyouai_xiguamiao:addSkill(characteristic_jiuhun)
zihaiyouai_xiguamiao:addRelateSkill("characteristic_jiuhun_state")
pangxienayou_cishanjia:addSkill(characteristic_jiuhun)
pangxienayou_cishanjia:addRelateSkill("characteristic_jiuhun_state")

sgs.LoadTranslationTable{
	["characteristic_jiuhun"] = "酒魂",
	["#characteristic_jiuhun"] = "酒魂",
	["characteristic_jiuhun_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_jiuhun_state"] = "<font color='#DAA520'><b>酒魂</b><br/>你使用【酒】的次数上限＋1。</font>",
	["$characteristic_jiuhun_state"] = "",
}

--------------------------------------------------
--孟辞柯
--设计者：
--------------------------------------------------

mengcike_zuishengmengsi = sgs.General(extension,"mengcike_zuishengmengsi","bisonpro","3",false)

sgs.LoadTranslationTable{
	["mengcike_zuishengmengsi"] = "孟辞柯",
	["&mengcike_zuishengmengsi"] = "孟辞柯",
	["#mengcike_zuishengmengsi"] = "醉生梦死",
	["$mengcike_zuishengmengsi"] = "进阶",
	["designer:mengcike_zuishengmengsi"] = "聚氧乙烯O2、月音风源",
	["cv:mengcike_zuishengmengsi"] = "",
	["illustrator:mengcike_zuishengmengsi"] = "",
	["~mengcike_zuishengmengsi"] = "",
}

--------------------------------------------------
--消忧
--------------------------------------------------

xiaoyou = sgs.CreateTriggerSkill{
	name = "xiaoyou",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:isAlive() and player:getPhase() == sgs.Player_Start then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:objectName() ~= player:objectName() and not player:isNude() then
					local can_use_cards = {}
					for _,cd in sgs.qlist(player:getCards("he")) do
						if not cd:isKindOf("Analeptic") then
							local new_card = sgs.Sanguosha:cloneCard("analeptic", sgs.Card_NoSuit, 0)
							new_card:setSkillName("_"..self:objectName())
							new_card:addSubcard(cd)
							if player:canUse(new_card, player) then
								room:setCardFlag(cd, "xiaoyou_flag")
								table.insert(can_use_cards, cd)
							end
							new_card:deleteLater()
						end
					end
					if #can_use_cards > 0 and myself:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. player:objectName())) and not SkillNullify(myself, self:objectName()) and myself:canEffect(player, self:objectName()) then
						room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						room:doPicAnimate(myself:objectName(), "skill/mengcike"..math.random(1,2))	--doPicAnimate:令指定玩家短暂显示一张图片
						
						local card = room:askForCard(player, ".|.|.|hand,equipped|xiaoyou_flag!", "@xiaoyou_use:"..player:objectName(), data, sgs.Card_MethodNone)
						if card then
							local new_card = sgs.Sanguosha:cloneCard("analeptic", sgs.Card_NoSuit, 0)
							new_card:setSkillName("_"..self:objectName())
							new_card:addSubcard(card)
							room:useCard(sgs.CardUseStruct(new_card, player, player))
							room:getThread():delay(250)
						end
					end
					for _,cd in ipairs(can_use_cards) do
						room:setCardFlag(cd, "-xiaoyou_flag")
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

mengcike_zuishengmengsi:addSkill(xiaoyou)

sgs.LoadTranslationTable{
	["xiaoyou"] = "消忧",
	[":xiaoyou"] = "其他角色的准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，令其将一张不为【酒】的牌当【酒】"..WordState("通常使用", word_normaluse_str).."。",
	["$xiaoyou"] = "",
	["@xiaoyou_use"] = "请将一张牌当酒使用（包括装备区的牌）<br/>操作提示：<br/>选择一张牌→确定",
	["xiaoyou:choice"] = "你可以发动“消忧”，令 %src 将一张牌当【酒】使用",
}

--------------------------------------------------
--识心
--------------------------------------------------

shixin_mcard = sgs.CreateSkillCard{
	name = "shixin_m",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if to_select:objectName() ~= sgs.Self:objectName() and not to_select:isKongcheng() then
				return SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
			end
		end
		return false
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		if not SkillNullify(effect.from, self:objectName()) and not effect.to:isKongcheng() then
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			for _,cd in sgs.qlist(effect.to:getHandcards()) do
				dummy:addSubcard(cd)
			end
			local X = dummy:subcardsLength()
			if X > 0 then
				effect.from:obtainCard(dummy, false)
			end
			dummy:deleteLater()
			
			room:getThread():delay(500)
			
			local dummy2 = room:askForExchange(effect.from, self:objectName(), X, X, false, "#shixin_m_give:"..X..":" .. effect.to:objectName(), false)
			if dummy2 and dummy2:subcardsLength() > 0 then
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, effect.from:objectName(), effect.to:objectName(), self:objectName(), "")
				room:moveCardTo(dummy2, effect.to, sgs.Player_PlaceHand, reason, false)
			end
			dummy2:deleteLater()
			
			if effect.to:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. effect.from:objectName()), false) then
				room:doAnimate(1, effect.to:objectName(), effect.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				room:doPicAnimate(effect.from:objectName(), "skill/mengcike3")	--doPicAnimate:令指定玩家短暂显示一张图片
				room:loseHp(effect.from, 1, effect.to, self:objectName())
			end
		end
	end
}
shixin_m = sgs.CreateViewAsSkill{
	name = "shixin_m",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		if #cards == 0 then
			local NewSkillCard = shixin_mcard:clone()
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return not player:hasUsed("#shixin_m")
	end,
}

mengcike_zuishengmengsi:addSkill(shixin_m)

sgs.LoadTranslationTable{
	["shixin_m"] = "识心",
	[":shixin_m"] = "出牌阶段限一次，你可以指定一名其他角色<font color='#A9A9A9'>发动此技能</font>，获得其<font color='#9400D3'>所有手牌</font>，交给其<font color='#9400D3'>等量张</font>手牌，然后其可以令你失去一点体力。",
	["$shixin_m"] = "",
	["shixin_m:choice"] = "你可以令 %src 失去1点体力",
	["^shixin_m"] = "操作提示：<br/>选择一名角色→确定",
	["#shixin_m_give"] = "请将 %src 张手牌交给 %dest",
}

--------------------------------------------------
--考拉塾生 步玎
--设计者：
--------------------------------------------------

buding_kaolashusheng = sgs.General(extension,"buding_kaolashusheng","bisonpro","3",false,true,true)

sgs.LoadTranslationTable{
	["buding_kaolashusheng"] = "仓鼠步玎",
	["&buding_kaolashusheng"] = "步玎",
	["#buding_kaolashusheng"] = "考拉塾生",
	["$buding_kaolashusheng"] = "简单",
	["designer:buding_kaolashusheng"] = "NSX",
	["cv:buding_kaolashusheng"] = "",
	["illustrator:buding_kaolashusheng"] = "Bison仓鼠",
	["unlock:buding_kaolashusheng"] = "完成以下任意一项：<br/>1.使用Bison仓鼠的“巧绘”令步玎变化为本角色<br/>2.被Bison仓鼠的“巧绘”变化为本角色",
	["~buding_kaolashusheng"] = "",
}

buding_kaolashusheng:setBonus(true)	--设为奖励角色

--------------------------------------------------
--连结
--------------------------------------------------

lianjie = sgs.CreateTriggerSkill{
	name = "lianjie",
	events = {sgs.CardUsed, sgs.CardResponded},
	frequency = sgs.Skill_Frequent,
	on_trigger = function(self, event, player, data, room)
		local card
		if event == sgs.CardUsed then
			card = data:toCardUse().card
		elseif event == sgs.CardResponded then
			if data:toCardResponse().m_isUse then
				card = data:toCardResponse().m_card
			end
		end
		if not card or card:getTypeId() == sgs.Card_TypeSkill then return false end
		if player:getMark("&lianjie+"..getTypeString(card)) > 0 then
			if player:getMark("qiaohui_born") > 0 and player:getMark("lianjie_count") >= 2 then return false end	--因“巧绘”而出场则每回合限两次
			if player:askForSkillInvoke(self:objectName(), data) then
				room:addPlayerMark(player, "lianjie_count", 1)
				room:drawCards(player, 1, self:objectName())
			end
		else
			room:setPlayerMark(player, "&lianjie+basic", 0)
			room:setPlayerMark(player, "&lianjie+trick", 0)
			room:setPlayerMark(player, "&lianjie+equip", 0)
			room:setPlayerMark(player, "&lianjie+"..getTypeString(card), 1)
		end
	end
}
table.insert(turn_end_clear_mark, "lianjie_count")	--回合结束清除标记

buding_kaolashusheng:addSkill(lianjie)

sgs.LoadTranslationTable{
	["lianjie"] = "连结",
	[":lianjie"] = "你使用牌时，若此牌与你上次使用的牌类别相同，你可以摸一张牌。",
	["$lianjie"] = "",
}

--------------------------------------------------
--浪里白条 月兮
--设计者：
--------------------------------------------------

yuexi_langlibaitiao = sgs.General(extension,"yuexi_langlibaitiao","bisonpro","3",false,true,true)

sgs.LoadTranslationTable{
	["yuexi_langlibaitiao"] = "仓鼠月兮",
	["&yuexi_langlibaitiao"] = "月兮",
	["#yuexi_langlibaitiao"] = "浪里白条",
	["$yuexi_langlibaitiao"] = "简单",
	["designer:yuexi_langlibaitiao"] = "月音风源",
	["cv:yuexi_langlibaitiao"] = "",
	["illustrator:yuexi_langlibaitiao"] = "Bison仓鼠",
	["unlock:yuexi_langlibaitiao"] = "完成以下任意一项：<br/>1.使用Bison仓鼠的“巧绘”令月兮变化为本角色<br/>2.被Bison仓鼠的“巧绘”变化为本角色",
	["~yuexi_langlibaitiao"] = "",
}

yuexi_langlibaitiao:setBonus(true)	--设为奖励角色

--------------------------------------------------
--明韵
--------------------------------------------------

mingyun = sgs.CreateTriggerSkill{
	name = "mingyun",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Damage},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.to and damage.to:isAlive() and damage.nature ~= sgs.DamageStruct_Ice then
			room:getThread():delay(500)
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			if not player:canEffect(damage.to, self:objectName()) then return false end
			local do_damage = sgs.DamageStruct(self:objectName(), player, damage.to)
			do_damage.nature = sgs.DamageStruct_Ice
			room:damage(do_damage)
		end
	end
}
table.insert(turn_end_clear_mark, "mingyun_used")

yuexi_langlibaitiao:addSkill(mingyun)

sgs.LoadTranslationTable{
	["mingyun"] = "明韵",
	[":mingyun"] = "锁定技，你对一名角色造成伤害后，若之不为冰霜伤害，你对其造成1点冰霜伤害。",
	["$mingyun"] = "",
}

--------------------------------------------------
--镜中咕影 雪咕咕
--设计者：
--------------------------------------------------

xuegugu_jingzhongguying = sgs.General(extension,"xuegugu_jingzhongguying","bisonpro","6",false,true,true)

sgs.LoadTranslationTable{
	["xuegugu_jingzhongguying"] = "雪咕咕",
	["&xuegugu_jingzhongguying"] = "雪咕咕",
	["#xuegugu_jingzhongguying"] = "镜中咕影",
	["$xuegugu_jingzhongguying"] = "简单",
	["designer:xuegugu_jingzhongguying"] = "NSX",
	["cv:xuegugu_jingzhongguying"] = "",
	["illustrator:xuegugu_jingzhongguying"] = "Bison仓鼠",
	["unlock:xuegugu_jingzhongguying"] = "完成以下任意一项：<br/>1.使用Bison仓鼠的“巧绘”令雪狐桑变化为本角色<br/>2.被Bison仓鼠的“巧绘”变化为本角色",
	["~xuegugu_jingzhongguying"] = "",
}

xuegugu_jingzhongguying:setBonus(true)	--设为奖励角色

--------------------------------------------------
--乳鸽
--------------------------------------------------

rugecard = sgs.CreateSkillCard{
	name = "ruge",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return false
	end,
	feasible = function(self, targets)
		return #targets == 0
	end,
	on_use = function(self, room, source, targets)
		room:setPlayerMark(source, "ruge_used", 1)
		local throw_areas = {0, 0, 0, 0, 0}
		
		local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		if not source:getEquips():isEmpty() then	--将原装备区内的牌扔到处理区
			dummy:addSubcards(source:getEquips())
			local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, source:objectName(), nil, self:objectName(), nil)
			source:setFlags("Fake_Move")
			room:moveCardTo(dummy, source, nil, sgs.Player_PlaceTable, reason, true)
			source:setFlags("-Fake_Move")
		end
		
		for i=0,4,1 do		--先记录装备区废除状态，被废除为1，否则为0（默认值）
			if not source:hasEquipArea(i) then
				throw_areas[i+1] = 1
			else
				throw_areas[i+1] = 0
			end
		end
		for i=0,4,1 do		--依次将装备区调整为副装备区的状态，然后将之前记录的装备区状态作为标记储存
			if source:getMark("ruge_throw_area"..i) == 0 and not source:hasEquipArea(i) then
				source:obtainEquipArea(i)
			elseif source:getMark("ruge_throw_area"..i) == 1 and source:hasEquipArea(i) then
				source:throwEquipArea(i)
			end
			room:setPlayerMark(source, "ruge_throw_area"..i, throw_areas[i+1])
		end
		
		local equip_ids = sgs.IntList()
		if source:getPile("ruge") and source:getPile("ruge"):length() > 0 then	--将被除外的副装备区牌置入装备区
			source:setFlags("Fake_Move")
			for _,id in sgs.qlist(source:getPile("ruge")) do
				room:moveCardTo(sgs.Sanguosha:getCard(id), source, sgs.Player_PlaceEquip, true)
				if room:getCardPlace(id) == sgs.Player_PlaceEquip then	--记录成功装备的牌，最后发送log时用
					equip_ids:append(id)
				end
			end
			source:setFlags("-Fake_Move")
		end
		
		if not dummy:getSubcards():isEmpty() then	--将原装备区内的牌（此时在处理区）除外
			source:setFlags("Fake_Move")
			source:addToPile("ruge", dummy, true)
			source:setFlags("-Fake_Move")
		end
		dummy:deleteLater()
		
		if not equip_ids:isEmpty() then
			local log = sgs.LogMessage()
			log.type = "$ruge_equipped_log"		--注意：以$开头的log才能显示多张card
			log.from = source
			log.arg = "ruge"
			room:sendLogWithIds(log, equip_ids)	--新函数，更方便地将多张牌填入card_str并发送
		end
	end
}
ruge_vs = sgs.CreateZeroCardViewAsSkill{
	name = "ruge", 
	view_as = function()
		return rugecard:clone()
	end, 
	enabled_at_play = function(self, player)
		if player:getEquips():length() + player:getPile("ruge"):length() == 0 then return false end
		return player:getMark("ruge_used") == 0
	end,
	enabled_at_response = function(self, player, pattern)
		if player:getEquips():length() + player:getPile("ruge"):length() == 0 then return false end
		return pattern == "@@ruge" and player:getMark("ruge_used") == 0
	end
}
ruge = sgs.CreateTriggerSkill{
	name = "ruge",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.GameStart, sgs.TargetConfirmed},
	view_as_skill = ruge_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			if player:hasEquipArea(4) then
				player:throwEquipArea(4)
			end
			room:setPlayerMark(player, "ruge_throw_area4", 1)
		elseif event == sgs.TargetConfirmed then
			local use = data:toCardUse()
			if use.card and not use.card:isKindOf("SkillCard") and use.card:isKindOf("Slash") and use.to and use.to:contains(player) then
				room:askForUseCard(player, "@@ruge", "@ruge")
			end
		end
	end
}
table.insert(turn_end_clear_mark, "ruge_used")	--回合结束清除标记

xuegugu_jingzhongguying:addSkill(ruge)

sgs.LoadTranslationTable{
	["ruge"] = "乳鸽",
	[":ruge"] = "你拥有两个废除宝物栏的装备区。每回合限一次，出牌阶段 或 你成为【杀】的目标后，你可以切换装备区。",
	["$ruge"] = "",
	["$ruge_equipped_log"] = "%from 通过“%arg”装备了 %card",
	["^ruge"] = "你可以使用“乳鸽”，切换装备区<br/><br/>操作提示：点击“确定”或“取消”",
	["@ruge"] = "你可以使用“乳鸽”，切换装备区",
	["~ruge"] = "点击“确定”或“取消”",
}

--------------------------------------------------
--魔法少鼠 真理酱
--设计者：
--------------------------------------------------

zhenlijiang_mofashaoshu = sgs.General(extension,"zhenlijiang_mofashaoshu","bisonpro","3",false,true,true)

sgs.LoadTranslationTable{
	["zhenlijiang_mofashaoshu"] = "仓鼠真理酱",
	["&zhenlijiang_mofashaoshu"] = "真理酱",
	["#zhenlijiang_mofashaoshu"] = "魔法少鼠",
	["$zhenlijiang_mofashaoshu"] = "萌新",
	["designer:zhenlijiang_mofashaoshu"] = "NSX",
	["cv:zhenlijiang_mofashaoshu"] = "",
	["illustrator:zhenlijiang_mofashaoshu"] = "Bison仓鼠",
	["unlock:zhenlijiang_mofashaoshu"] = "完成以下任意一项：<br/>1.使用Bison仓鼠的“巧绘”令真理酱变化为本角色<br/>2.被Bison仓鼠的“巧绘”变化为本角色",
	["~zhenlijiang_mofashaoshu"] = "",
}

zhenlijiang_mofashaoshu:setBonus(true)	--设为奖励角色

--------------------------------------------------
--竭智
--------------------------------------------------

jiezhi_zls = sgs.CreateTriggerSkill{
	name = "jiezhi_zls",
	events = {sgs.CardUsed, sgs.CardResponded},
	frequency = sgs.Skill_Frequent,
	on_trigger = function(self, event, player, data, room)
		local card
		if event == sgs.CardUsed then
			card = data:toCardUse().card
		elseif event == sgs.CardResponded then
			if data:toCardResponse().m_isUse then
				card = data:toCardResponse().m_card
			end
		end
		if card:isKindOf("SkillCard") then return false end
		if player:getMark("qiaohui_born") > 0 and card:isKindOf("EquipCard") then return false end	--因“巧绘”而出场则装备牌不能触发
		local objname = getCardObjName(card)
		if player:getMark("&jiezhi_zls->"..objname) == 0 and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. objname)) and not SkillNullify(player, self:objectName()) then
			--room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			--local log = sgs.LogMessage()
			--log.type = "#jiezhi_zls_log"
			--log.arg = self:objectName()
			--log.card_str = card:toString()
			--log.from = player
			--room:sendLog(log)	--发送信息框消息
			room:setPlayerMark(player, "&jiezhi_zls->"..objname, 1)
			player:drawCards(1, self:objectName())
			--room:setPlayerMark(player, "jiezhi_zls_limit+use+"..getCardClassName(card).."|.|.|hand", 1)
			--room:setPlayerCardLimitation(player, "use", getCardClassName(card).."|.|.|hand", false)
		end
	end
}
table.insert(turn_end_limit_card_prefix, "jiezhi_zls_limit")	--封印直到回合结束

zhenlijiang_mofashaoshu:addSkill(jiezhi_zls)

sgs.LoadTranslationTable{
	["jiezhi_zls"] = "竭智",
	[":jiezhi_zls"] = "你使用牌时，若未记录此牌牌名，你可以<font color='#A9A9A9'>发动此技能</font>，记录之，摸一张牌。",
	["$jiezhi_zls"] = "",
	["jiezhi_zls:choice"] = "你可以发动“竭智”，记录 %src，摸一张牌",
	["#jiezhi_zls_log"] = "由于 %arg 的效果，%from 本回合不能使用与 %card 牌名相同的手牌",
}

--------------------------------------------------
--角色特性：巧绘衍生
--------------------------------------------------

characteristic_qiaohui_stateCP = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_qiaohui_stateCP",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_qiaohui_stateCP)

characteristic_qiaohui_stateA = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_qiaohui_stateA",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_qiaohui_stateA)

characteristic_qiaohui_stateB = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_qiaohui_stateB",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_qiaohui_stateB)

characteristic_qiaohui_stateC = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_qiaohui_stateC",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_qiaohui_stateC)

characteristic_qiaohui_stateD = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_qiaohui_stateD",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_qiaohui_stateD)

bison_cpmode:addRelateSkill("characteristic_qiaohui_stateCP")	--CP仓鼠
buding_kaolashusheng:addRelateSkill("characteristic_qiaohui_stateA")	--步玎
yuexi_langlibaitiao:addRelateSkill("characteristic_qiaohui_stateB")	--月兮
xuegugu_jingzhongguying:addRelateSkill("characteristic_qiaohui_stateC")	--雪咕咕
zhenlijiang_mofashaoshu:addRelateSkill("characteristic_qiaohui_stateD")	--真理酱

sgs.LoadTranslationTable{
	["characteristic_qiaohui_stateCP"] = "<font color='#DAA520'>角色特性</font>",	--CP仓鼠
	[":characteristic_qiaohui_stateCP"] = "<font color='#DAA520'><b>好耶！</b><br/>“妙评”可以指定非仓鼠国角色。</font>",
	["characteristic_qiaohui_stateA"] = "<font color='#DAA520'>角色特性</font>",	--步玎
	[":characteristic_qiaohui_stateA"] = "<font color='#DAA520'><b>步玎嘴不大吗？</b><br/>因“巧绘”而出场的本角色，“连结”每回合限2次。</font>",
	["characteristic_qiaohui_stateB"] = "<font color='#DAA520'>角色特性</font>",	--月兮
	[":characteristic_qiaohui_stateB"] = "<font color='#DAA520'><b>你不是搓澡球吗（</b><br/>因“巧绘”而出场的本角色，锁定触发冰霜伤害的效果（防止此伤害，依次破坏受伤角色的两张牌）。</font>",
	["characteristic_qiaohui_stateC"] = "<font color='#DAA520'>角色特性</font>",	--雪咕咕
	[":characteristic_qiaohui_stateC"] = "<font color='#DAA520'><b>雪咕咕算女儿吗？</b><br/>所以并没有特性~</font>",
	["characteristic_qiaohui_stateD"] = "<font color='#DAA520'>角色特性</font>",	--真理酱
	[":characteristic_qiaohui_stateD"] = "<font color='#DAA520'><b>出现在家里就算了</b><br/>因“巧绘”而出场的本角色，使用装备牌不触发“竭智”。</font>",
}

--------------------------------------------------
--大尾巴 无前
--设计者：NSX
--------------------------------------------------

wuqian_daweiba = sgs.General(extension,"wuqian_daweiba","individual","4",true)

sgs.LoadTranslationTable{
	["wuqian_daweiba"] = "无前Namae",
	["&wuqian_daweiba"] = "无前",
	["#wuqian_daweiba"] = "大尾巴",
	["$wuqian_daweiba"] = "简单",
	["designer:wuqian_daweiba"] = "NSX",
	["cv:wuqian_daweiba"] = "",
	["illustrator:wuqian_daweiba"] = "",
	["~wuqian_daweiba"] = "",
}

--------------------------------------------------
--奇虑
--------------------------------------------------

qilvbuff = sgs.CreateTargetModSkill{
	name = "#qilvbuff",
	pattern = "Slash",
	residue_func = function(self, from, card, to)
		if from:hasSkill("qilv") and card and card:isKindOf("Slash") then
			return -1
		end
	end
}
qilvcard = sgs.CreateSkillCard{
	name = "qilv",
	no_indicator = true,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
		slash:setSkillName("_"..self:objectName())
		slash:deleteLater()
		return slash:targetFilter(targets_list, to_select, sgs.Self)
	end,
	on_use = function(self, room, source, targets)
		local targets_list = sgs.SPlayerList()
		for _, target in ipairs(targets) do
			if source:canSlash(target, nil, false) then
				targets_list:append(target)
			end
		end
		if not targets_list:isEmpty() then
			local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			slash:setSkillName("_"..self:objectName())
			room:useCard(sgs.CardUseStruct(slash, source, targets_list))
		end
	end
}
qilv_vs = sgs.CreateZeroCardViewAsSkill{
	name = "qilv",
	view_as = function()
		return qilvcard:clone()
	end,
	enabled_at_play = function()
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@qilv"
	end
}
qilv = sgs.CreateTriggerSkill{
	name = "qilv",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = qilv_vs,
	events = {sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card:isKindOf("TrickCard") then
				room:askForUseCard(player, "@@qilv", "@qilv")
			end
			return false
		end
	end
}

wuqian_daweiba:addSkill(qilv)
wuqian_daweiba:addSkill(qilvbuff)

sgs.LoadTranslationTable{
	["qilv"] = "奇虑",
	["#qilvbuff"] = "奇虑",
	[":qilv"] = "你使用【杀】的次数上限－1。你使用锦囊牌结算结束后，你可以视为使用一张【杀】。",
	["$qilv"] = "",
	["@qilv"] = "你可以视为使用一张【杀】",
	["~qilv"] = "选择此【杀】的目标角色→确定",
}

--------------------------------------------------
--角色特性：甜你姥姥
--------------------------------------------------

characteristic_tiannilaolao = sgs.CreateTriggerSkill{
	name = "#characteristic_tiannilaolao",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if player:getKingdom() == "bisonpro" then return false end
		for _, p in sgs.qlist(room:getAllPlayers()) do
			if p:getGeneralName() == "bison_cimushouzhongxian" or sgs.Sanguosha:translate("parent:"..p:getGeneralName()) == "bison_cimushouzhongxian" then
				room:sendCompulsoryTriggerLog(player, "characteristic_tiannilaolao")	--显示锁定技发动
				local old_kingdom = player:getKingdom()
				room:setPlayerProperty(player, "kingdom", sgs.QVariant("bisonpro"))
				local log = sgs.LogMessage()
				log.type = "#ChangeKingdom"
				log.arg = old_kingdom
				log.arg2 = "bisonpro"
				log.from = player
				log.to:append(player)
				room:sendLog(log)	--发送信息框消息
				return false
			end
		end
	end,
}
characteristic_tiannilaolao_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_tiannilaolao_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_tiannilaolao_state)
wuqian_daweiba:addSkill(characteristic_tiannilaolao)
wuqian_daweiba:addRelateSkill("characteristic_tiannilaolao_state")

sgs.LoadTranslationTable{
	["characteristic_tiannilaolao"] = "甜你姥姥",
	["#characteristic_tiannilaolao"] = "甜你姥姥",
	["characteristic_tiannilaolao_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_tiannilaolao_state"] = "<font color='#DAA520'><b>甜你姥姥</b><br/>游戏开始时，若场上有Bison仓鼠，你将势力改为仓鼠国。</font>",
	["$characteristic_tiannilaolao_state"] = "",
}

--------------------------------------------------
--无鼠名 ★无前
--设计者：？？？
--------------------------------------------------

wuqian_wushuming = sgs.General(extension,"wuqian_wushuming","individual","4",true,true,true)

sgs.LoadTranslationTable{
	["wuqian_wushuming"] = "★无前",
	["&wuqian_wushuming"] = "★无前",
	["#wuqian_wushuming"] = "无鼠名",
	["designer:wuqian_wushuming"] = "？？？",
	["cv:wuqian_wushuming"] = "",
	["illustrator:wuqian_wushuming"] = "",
	["unlock:wuqian_wushuming"] = "使用无前Namae在手牌全部为【杀】的情况下获得游戏的胜利",
	["~wuqian_wushuming"] = "",
}

wuqian_wushuming:setBonus(true)	--设为奖励角色

--------------------------------------------------
--豹怒
--------------------------------------------------

baonu_buff = sgs.CreateMaxCardsSkill{
	name = "#baonu_buff",
	extra_func = function(self, target)
		if target:hasSkill("baonu") and target:getMark("&wrath!") > 0 then
			return target:getMark("&wrath!") - target:getHp()
		end
	end
}
baonu = sgs.CreateTriggerSkill{
	name = "baonu",
	events = {sgs.Damage, sgs.Damaged},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and player:getMark("&wrath!") < 5 then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			player:gainMark("&wrath!", 1)
		end
	end
}


wuqian_wushuming:addSkill(baonu)
wuqian_wushuming:addSkill(baonu_buff)

sgs.LoadTranslationTable{
	["baonu"] = "豹怒",
	["#baonu_buff"] = "豹怒",
	[":baonu"] = "锁定技，你造成或受到伤害后，获得1枚“暴怒”标记（至多5枚）。你有“暴怒”标记时，你的手牌上限等于标记数。",
	["$baonu"] = "",
	["wrath!"] = "暴怒",
}

--------------------------------------------------
--毕对
--------------------------------------------------

biduicard = sgs.CreateSkillCard{
	name = "bidui",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if sgs.Self:canPindian(to_select) and to_select:getHandcardNum() >= sgs.Self:getHandcardNum() then
				return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, self:objectName())
			end
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		--room:broadcastSkillInvoke("bidui")	--播放配音
		--room:getThread():delay(1000)
		source:pindian(targets[1], "bidui", self)
	end
}
biduivs = sgs.CreateViewAsSkill{
	name = "bidui",
	n = 1,
	view_filter = function(self, selected, to_select)
		if #selected == 0 then
			return not to_select:isEquipped()
		end
		return false
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = biduicard:clone()
			NewSkillCard:addSubcard(cards[1])
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#bidui") < 1 and not player:isKongcheng() --and sgs.Slash_IsAvailable(player)
	end,
}
bidui = sgs.CreateTriggerSkill{
	name = "bidui",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = biduivs,
	events = {sgs.Pindian},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Pindian then
			local pindian = data:toPindian()
			if pindian.reason == self:objectName() then
				local fromNumber = pindian.from_number
				local toNumber = pindian.to_number
				if fromNumber ~= toNumber then
					local winner
					local loser
					if fromNumber > toNumber then
						winner = pindian.from
						loser = pindian.to
					else
						winner = pindian.to
						loser = pindian.from
					end
					local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					slash:setSkillName("_"..self:objectName())
					if winner:canSlash(loser, slash, false) and slash:isAvailable(winner) then
						local card_use = sgs.CardUseStruct()
						card_use.from = winner
						card_use.to:append(loser)
						card_use.card = slash
						room:addPlayerHistory(winner, "Slash", 1)
						room:useCard(card_use, false)
					end
					slash:deleteLater()
				end
			end
			return false
		end
	end,
	can_trigger = function(self, target)
		return target
	end,
}

wuqian_wushuming:addSkill(bidui)

sgs.LoadTranslationTable{
	["bidui"] = "毕对",
	[":bidui"] = "出牌阶段限一次，你可以与一名手牌数不少于你的角色拼点：赢的角色视为对没赢的角色"..WordState("通常使用", word_normaluse_str).."一张【杀】。",
	["$bidui"] = "",
	["^bidui"] = "操作提示：<br/>选择一张用于拼点的手牌→选择一名角色→确定",
}

--------------------------------------------------
--无前
--------------------------------------------------

wuqian_wushuming:addSkill("wuqian")		--注：源码的无前改了一点，让无前兼容warth!标记（但其他神吕布的技能并未改动）

wuqian_wushuming:addRelateSkill("wushuang")

--------------------------------------------------
--缘本临渊 奈奈莉娅
--设计者：NSX
--------------------------------------------------

nainailiya_yuanbenlinyuan = sgs.General(extension,"nainailiya_yuanbenlinyuan","individual","4",false)

sgs.LoadTranslationTable{
	["nainailiya_yuanbenlinyuan"] = "奈奈莉娅",
	["&nainailiya_yuanbenlinyuan"] = "奈奈莉娅",
	["#nainailiya_yuanbenlinyuan"] = "缘本临渊",
	["designer:nainailiya_yuanbenlinyuan"] = "NSX",
	["cv:nainailiya_yuanbenlinyuan"] = "",
	["illustrator:nainailiya_yuanbenlinyuan"] = "",
	["~nainailiya_yuanbenlinyuan"] = "",
}

--------------------------------------------------
--血林
--------------------------------------------------

xuelin = sgs.CreateTriggerSkill{
	name = "xuelin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.from and damage.from:isAlive() and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) and player:canEffect(damage.from, self:objectName()) then
			room:doAnimate(1, player:objectName(), damage.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
			--[[local card_id = room:drawCard()
			local card = sgs.Sanguosha:getCard(card_id)
			damage.from:obtainCard(card, true)
			room:getThread():delay(250)
			if room:getCardOwner(card_id) == damage.from then
				room:showCard(damage.from, card_id)
				room:getThread():delay(250)
				if card:isRed() then
					room:damage(sgs.DamageStruct(self:objectName(), player, damage.from))
				elseif card:isBlack() and not damage.from:isNude() then
					room:askForDiscard(damage.from, self:objectName(), 2, 2, false, true)
				end
			end]]
			local judge = sgs.JudgeStruct()
			judge.pattern = "."
			judge.good = true
			judge.reason = self:objectName()
			judge.who = damage.from
			--judge.play_animation = false
			room:judge(judge)
			if SuitToColor(judge.result_suit) == "red" then
				room:damage(sgs.DamageStruct(self:objectName(), player, damage.from))
			elseif SuitToColor(judge.result_suit) == "black" then
				room:askForDiscard(damage.from, self:objectName(), 2, 2, false, true)
			end
		end
	end
}

nainailiya_yuanbenlinyuan:addSkill(xuelin)

sgs.LoadTranslationTable{
	["xuelin"] = "血林",
	[":xuelin"] = "你受到伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，令伤害来源进行一次判定，若结果为：红色，你对其造成1点伤害；黑色，其须弃置两张牌。",
	["$xuelin"] = "",
	--["xuelin:choice"] = "你可以对 %src 发动“血林”",
}

--------------------------------------------------
--寻腥
--------------------------------------------------

xunxing = sgs.CreateTriggerSkill{
	name = "xunxing",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DamageInflicted},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.from and damage.to then
			local myselves = room:findPlayersBySkillName(self:objectName())
			for _,myself in sgs.qlist(myselves) do
				if damage.from:inMyAttackRange(myself) and damage.to:objectName() ~= myself:objectName() and not myself:isNude() then
					local card = room:askForCard(myself, ".|.|.|hand,equipped", "@xunxing:"..damage.to:objectName(), data, sgs.Card_MethodNone)
					if card and not SkillNullify(myself, self:objectName()) then
						room:doAnimate(1, myself:objectName(), damage.to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						local logg = sgs.LogMessage()
						logg.from = myself
						logg.type = "#InvokeSkill"
						logg.arg = self:objectName()
						room:sendLog(logg)	--显示技能发动提示信息
						room:notifySkillInvoked(myself, self:objectName())	--在武将牌上显示技能名
						
						--myself:drawCards(1, self:objectName())
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, myself:objectName(), nil, self:objectName(), nil)
						room:moveCardTo(card, myself, nil, sgs.Player_DrawPile, reason, false)
						
						local new_damage = data:toDamage()
						new_damage.to = myself
						new_damage.transfer = true
						new_damage.transfer_reason = self:objectName()
						
						local _data = sgs.QVariant()
						_data:setValue(new_damage)
						damage.to:setTag("TransferDamage", _data)	--需给原受伤者增加tag来执行伤害转移
						
						return true
					end
				end
			end
			return false
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

nainailiya_yuanbenlinyuan:addSkill(xunxing)

sgs.LoadTranslationTable{
	["xunxing"] = "寻腥",
	[":xunxing"] = "一名其他角色受到伤害时，若你在伤害来源的攻击范围内，你可以<font color='#A9A9A9'>发动此技能</font>，将一张牌置于牌堆顶，然后将此伤害转移给你。",
	["$xunxing"] = "",
	--["xunxing:choice"] = "你可以发动“寻腥”，代替 %src 承受此伤害",
	["@xunxing"] = "你可以发动“寻腥”，将一张牌置于牌堆顶，代替 %src 承受此伤害",
}

--------------------------------------------------
--假传天意 黎歌
--设计者：NSX
--------------------------------------------------

lige_jiachuantianyi = sgs.General(extension,"lige_jiachuantianyi","individual","3",false)

sgs.LoadTranslationTable{
	["lige_jiachuantianyi"] = "旧忆黎歌",
	["&lige_jiachuantianyi"] = "黎歌",
	["#lige_jiachuantianyi"] = "假传天意",
	["$lige_jiachuantianyi"] = "进阶",
	["designer:lige_jiachuantianyi"] = "NSX",
	["cv:lige_jiachuantianyi"] = "",
	["illustrator:lige_jiachuantianyi"] = "",
	["~lige_jiachuantianyi"] = "",
}

--------------------------------------------------
--急讯
--------------------------------------------------

jixun = sgs.CreateTriggerSkill{
	name = "jixun",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardsMoveOneTime, sgs.Dying},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			
			if move.from and move.from:objectName() == player:objectName() and move.from:hasSkill(self:objectName())
			and not (move.to and (move.to:objectName() == player:objectName() and (move.to_place == sgs.Player_PlaceHand or move.to_place == sgs.Player_PlaceEquip))) and move.reason.m_reason == sgs.CardMoveReason_S_REASON_GIVE
			then
				--Player類型轉至ServerPlayer
				local move_from
				local move_to
				for _,p in sgs.qlist(room:getAlivePlayers()) do
					if p:objectName() == move.from:objectName() then
						move_from = p
					end
					if p:objectName() == move.to:objectName() then
						move_to = p
					end
				end
				
				--[[if player:getMark("jixun_used") == 0 then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					room:setPlayerMark(player, "jixun_used", 1)
					move_from:drawCards(1, self:objectName())
				end]]
				
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				local card_id = room:drawCard()
				local card = sgs.Sanguosha:getCard(card_id)
				
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_TURNOVER, player:objectName(), nil, self:objectName(), nil)
				room:moveCardTo(card, player, nil, sgs.Player_PlaceTable, reason, true)
				
				local suit_repeat = false
				for _,cd in sgs.qlist(player:getHandcards()) do
					if cd:getSuit() == card:getSuit() then
						suit_repeat = true
						break
					end
				end
				if suit_repeat then
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
					room:moveCardTo(card, player, nil, sgs.Player_DiscardPile, reason, true)
				else
					player:obtainCard(card, true)
				end
			end
		elseif event == sgs.Dying then
			local dying = data:toDying()
			if dying.who and dying.who:objectName() ~= player:objectName() then
				local card = room:askForCard(player, ".|.|.|hand,equipped", "@jixun_give:"..dying.who:objectName(), data, sgs.Card_MethodNone)
				if card then
					local logg = sgs.LogMessage()
					logg.from = player
					logg.type = "#InvokeSkill"
					logg.arg = self:objectName()
					room:sendLog(logg)	--显示技能发动提示信息
					room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
					room:doAnimate(1, player:objectName(), dying.who:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), dying.who:objectName(), self:objectName(), "")
					room:moveCardTo(card, dying.who, sgs.Player_PlaceHand, reason, false)
				end
			end
		end
	end,
}
--table.insert(turn_end_clear_mark, "jixun_used")		--回合结束清除标记

--tongguhesha_cpmode:addSkill(jixun)

sgs.LoadTranslationTable{
	["jixun"] = "急讯",
	[":jixun"] = "其他角色进入濒危状态时，你可以交给其一张牌。<br/>你交给其他角色牌后，亮出牌堆顶的牌，若你没有与之同花色的手牌则获得之，否则弃置之。",
	["$jixun"] = "",
	["@jixun_give"] = "你可以交给 %src 一张牌（包括装备区的牌）",
}

--------------------------------------------------
--假讯
--------------------------------------------------

jiaxun = sgs.CreateTriggerSkill{
	name = "jiaxun",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DamageForseen},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.from and damage.to then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if (damage.from:objectName() == myself:objectName() or damage.to:objectName() == myself:objectName()) and myself:getMark("&jiaxun+used") == 0 then
					local targets = sgs.SPlayerList()
					for _, p in sgs.qlist(room:getOtherPlayers(myself)) do
						if damage.from:objectName() ~= p:objectName() and SkillCanTarget(p, myself, self:objectName()) and myself:canEffect(p, self:objectName()) then
							targets:append(p)
						end
					end
					if not targets:isEmpty() then
						local target
						myself:setTag("jiaxun_data", data)	--AI用
						if damage.from:objectName() == myself:objectName() then
							target = room:askForPlayerChosen(myself, targets, self:objectName(), "@jiaxun_ask1:"..damage.to:objectName(), true, true)
						elseif damage.to:objectName() == myself:objectName() then
							target = room:askForPlayerChosen(myself, targets, self:objectName(), "@jiaxun_ask2:"..damage.from:objectName(), true, true)
						end
						myself:removeTag("jiaxun_data")	--AI用
						if target and not SkillNullify(myself, self:objectName()) then
							room:setPlayerMark(myself, "&jiaxun+used", 1)
							target:drawCards(1, self:objectName())
							damage.from = target
							damage.transfer = true
							data:setValue(damage)
						end
					end
					return false
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}
table.insert(turn_end_clear_mark, "&jiaxun+used")		--回合结束清除标记

lige_jiachuantianyi:addSkill(jiaxun)

sgs.LoadTranslationTable{
	["jiaxun"] = "假讯",
	[":jiaxun"] = "每回合限一次，你造成或受到伤害前，若有伤害来源，你可以指定一名伤害来源以外的其他角色，<font color='#A9A9A9'>发动此技能</font>，令其摸一张牌并成为此伤害的来源。",
	["$jiaxun"] = "",
	["@jiaxun_ask1"] = "你将对 %src 造成伤害<br/>你可以发动“假讯”，令一名角色摸一张牌、代替你成为伤害来源",
	["@jiaxun_ask2"] = "你将受到来自 %src 的伤害<br/>你可以发动“假讯”，令一名角色摸一张牌、代替 %src 成为伤害来源",
}

--------------------------------------------------
--争欲
--------------------------------------------------

zhengyu = sgs.CreateTriggerSkill{
	name = "zhengyu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.Pindian, sgs.PindianVerifying},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:canPindian(player) and myself:canEffect(player, self:objectName()) then
					local card = room:askForCard(myself, ".|.|.|hand", "@zhengyu_ask:"..player:objectName(), data, sgs.Card_MethodNone)
					if card then
						local logg = sgs.LogMessage()
						logg.from = myself
						logg.type = "#InvokeSkill"
						logg.arg = self:objectName()
						room:sendLog(logg)	--显示技能发动提示信息
						room:notifySkillInvoked(myself, self:objectName())	--在武将牌上显示技能名
						room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						if SkillNullify(myself, self:objectName()) then
							return false
						end
						myself:pindian(player, self:objectName(), card)
					end
				end
			end
		elseif event == sgs.Pindian and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local pindian = data:toPindian()
			if pindian.reason == self:objectName() then
				local fromNumber = pindian.from_number
				local toNumber = pindian.to_number
				if fromNumber ~= toNumber then
					local winner
					local loser
					if fromNumber > toNumber then
						winner = pindian.from
						loser = pindian.to
					else
						winner = pindian.to
						loser = pindian.from
					end
					local duel = sgs.Sanguosha:cloneCard("duel", sgs.Card_NoSuit, 0)
					duel:setSkillName("_"..self:objectName())
					if winner:canUse(duel, loser) then
						local card_use = sgs.CardUseStruct()
						card_use.from = winner
						card_use.to:append(loser)
						card_use.card = duel
						room:useCard(card_use, false)
					end
					--duel:deleteLater()
				end
			end
			return false
		elseif event == sgs.PindianVerifying then
			local pindian = data:toPindian()
			if pindian.from_card:getSuit() == pindian.to_card:getSuit() then
				if pindian.from and pindian.from:hasSkill(self:objectName()) and pindian.from_number ~= 13 then
					room:sendCompulsoryTriggerLog(pindian.from, self:objectName()) --显示锁定技发动
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					local log = sgs.LogMessage()
					log.type = "#zhengyu_up"
					log.arg = self:objectName()
					log.arg2 = "K"
					log.from = pindian.from
					room:sendLog(log)	--发送信息框消息
					pindian.from_number = 13
				end
				if pindian.to and pindian.to:hasSkill(self:objectName()) and pindian.to_number ~= 13 then
					room:sendCompulsoryTriggerLog(pindian.to, self:objectName()) --显示锁定技发动
					room:broadcastSkillInvoke(self:objectName())	--播放配音
					local log = sgs.LogMessage()
					log.type = "#zhengyu_up"
					log.arg = self:objectName()
					log.arg2 = "K"
					log.from = pindian.to
					room:sendLog(log)	--发送信息框消息
					pindian.to_number = 13
				end
				data:setValue(pindian)
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

lige_jiachuantianyi:addSkill(zhengyu)

sgs.LoadTranslationTable{
	["zhengyu"] = "争欲",
	[":zhengyu"] = "其他角色的结束阶段，你可以<font color='#A9A9A9'>发动此技能</font>，与其拼点，赢的角色视为对没赢的角色使用一张【决斗】。<br/>你的拼点牌亮出后，若双方拼点牌花色相同，此牌点数视为K。",
	["$zhengyu"] = "",
	["@zhengyu_ask"] = "你可以发动“争欲”，选择一张手牌与 %src 拼点<br/>操作提示：选择一张手牌→确定",
	["#zhengyu_up"] = "由于“%arg”的效果，%from 的拼点牌点数视为 %arg2",
}

--------------------------------------------------
--生死相依 绫濑光
--设计者：月音风源
--------------------------------------------------

linglaiguang_shengsixiangyi = sgs.General(extension,"linglaiguang_shengsixiangyi","individual","4",false)

sgs.LoadTranslationTable{
	["linglaiguang_shengsixiangyi"] = "绫濑光",
	["&linglaiguang_shengsixiangyi"] = "绫濑光",
	["#linglaiguang_shengsixiangyi"] = "生死相依",
	["$linglaiguang_shengsixiangyi"] = "一般",
	["designer:linglaiguang_shengsixiangyi"] = "月音风源",
	["cv:linglaiguang_shengsixiangyi"] = "",
	["illustrator:linglaiguang_shengsixiangyi"] = "",
	["~linglaiguang_shengsixiangyi"] = "",
}

linglaiguang_shengsixiangyi:setGender(sgs.General_Sexless)

--------------------------------------------------
--神伴
--------------------------------------------------

shenban_card = sgs.CreateSkillCard{
	name = "shenban",
	target_fixed = false,
	will_throw = true,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		if not SkillNullify(source, self:objectName()) then
			if source:getPhase() == sgs.Player_Play then
				room:setPlayerFlag(source, "Global_PlayPhaseTerminated")
			end
			
			local target = targets[1]
			room:addPlayerMark(target, "&shenban", 1)
		end
	end
}
shenban_vs = sgs.CreateViewAsSkill{
	name = "shenban",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return to_select:isRed() and not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = shenban_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		--return player:usedTimes("#shenban") < 1
		return true
	end
}
shenban = sgs.CreateTriggerSkill{
	name = "shenban",
	global = true,
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecifying},
	view_as_skill = shenban_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetSpecifying and player:getMark("&shenban") > 0 then
			local use = data:toCardUse()
			if (use.card:isKindOf("Slash") or use.card:isNDTrick()) and use.card:getId() ~= -1 then
				room:removePlayerMark(player, "&shenban", 1)
				room:doPicAnimate(player:objectName(), "skill/shenban")	--doPicAnimate:令指定玩家短暂显示一张图片
				local new_use_to = sgs.SPlayerList()
				for _, p in sgs.qlist(use.to) do
					new_use_to:append(p)
				end
				for _, p in sgs.qlist(use.to) do
					new_use_to:append(p)
				end
				use.to = new_use_to
				data:setValue(use)
				
				local log = sgs.LogMessage()
				log.type = "#shenban_log"
				log.arg = self:objectName()
				log.card_str = use.card:toString()
				log.from = use.from
				log.to = new_use_to
				room:sendLog(log)	--发送信息框消息
				return false
			end
		end
	end,
}

linglaiguang_shengsixiangyi:addSkill(shenban)

sgs.LoadTranslationTable{
	["shenban"] = "神伴",
	[":shenban"] = "出牌阶段，你可以弃置一张红色牌并指定一名角色，<font color='#A9A9A9'>发动此技能</font>，结束本阶段，令其下次使用的非转化的【杀】或普通锦囊牌额外指定目标一次。",
	["$shenban"] = "",
	["^shenban"] = "操作提示：<br/>选择一张红色牌→选择一名角色→确定",
	["#shenban_log"] = "由于“%arg”的效果，%from 使用的 %card 目标改为 %to",
	[":mark:&shenban"] = "你使用的下一张【杀】或普通锦囊牌将生效两次",
}

--------------------------------------------------
--逝随
--------------------------------------------------

shisui = sgs.CreateTriggerSkill{
	name = "shisui",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Dying},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Dying and player:getMaxHp() > 0 then
			local dying = data:toDying()
			local _data = sgs.QVariant()
			_data:setValue(dying.who)
			if dying.who and dying.who:objectName() ~= player:objectName() and dying.who:getHp() < 1 then
				if player:askForSkillInvoke(self:objectName(), _data) and not SkillNullify(player, self:objectName()) and player:canEffect(dying.who, self:objectName()) then
					room:doAnimate(1, player:objectName(), dying.who:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					
					room:loseMaxHp(player, 1)
					
					local recover = sgs.RecoverStruct()
					recover.who = player
					recover.recover = 1
					room:recover(dying.who, recover)
					
					if player:isDead() or dying.who:isDead() or dying.who:isAllNude() then
						return false
					end
					
					local card_ids = sgs.IntList()
					local foot_notes = {}
					for _, card in sgs.qlist(dying.who:getCards("h")) do
						local id = card:getId()
						card_ids:append(id)
						table.insert(foot_notes, dying.who:getGeneralName().."+hand_area")
					end
					for _, card in sgs.qlist(dying.who:getCards("e")) do
						local id = card:getId()
						card_ids:append(id)
						table.insert(foot_notes, dying.who:getGeneralName().."+equip_area")
					end
					for _, card in sgs.qlist(dying.who:getCards("j")) do
						local id = card:getId()
						card_ids:append(id)
						table.insert(foot_notes, dying.who:getGeneralName().."+judge_area")
					end
					
					local can_choose_ids, cannot_choose_ids = sgs.IntList(), sgs.IntList()
					for _, id in sgs.qlist(card_ids) do
						can_choose_ids:append(id)
					end
					
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					
					while not can_choose_ids:isEmpty() do
						room:fillAG(card_ids, player, cannot_choose_ids, false, table.concat(foot_notes, "|"), true)
						local id1 = room:askForAG(player, can_choose_ids, false, self:objectName())
						if id1 and id1 ~= -1 then
							room:clearAG(player)
							dummy:addSubcard(id1)
							
							for _, id in sgs.qlist(card_ids) do
								if room:getCardPlace(id) == room:getCardPlace(id1) then
									can_choose_ids:removeOne(id)
									cannot_choose_ids:append(id)
								end
							end
							local index = card_ids:indexOf(id1)
							if index ~= -1 then
								foot_notes[index+1] = "is_chosen"
							end
						end
					end
					room:clearAG(player)
					
					if dummy:subcardsLength() > 0 then
						player:obtainCard(dummy, false)
					end
					dummy:deleteLater()
				end
			end
		end
		return false
	end,
}

linglaiguang_shengsixiangyi:addSkill(shisui)

sgs.LoadTranslationTable{
	["shisui"] = "逝随",
	[":shisui"] = "一名其他角色进入濒危状态时，你可以<font color='#A9A9A9'>发动此技能</font>，失去1点体力上限，令其回复1点体力，然后你观看其手牌并获得其每个区域内的各一张牌。",
	["$shisui"] = "",
	["^AG_shixui"] = "<b>逝随</b><br/>依次双击选择每个区域内的各一张牌获得",
}

--------------------------------------------------
--生死相依 天野雪奈
--设计者：--
--------------------------------------------------

tianyexuenai_shengsixiangyi = sgs.General(extension,"tianyexuenai_shengsixiangyi","individual","3",false,true,true)

sgs.LoadTranslationTable{
	["tianyexuenai_shengsixiangyi"] = "天野雪奈",
	["&tianyexuenai_shengsixiangyi"] = "天野雪奈",
	["#tianyexuenai_shengsixiangyi"] = "生死相依",
	["$tianyexuenai_shengsixiangyi"] = "进阶",
	["designer:tianyexuenai_shengsixiangyi"] = "",
	["cv:tianyexuenai_shengsixiangyi"] = "",
	["illustrator:tianyexuenai_shengsixiangyi"] = "",
	["unlock:tianyexuenai_shengsixiangyi"] = "使用绫濑光在体力上限为1的情况下获得游戏胜利",
	["~tianyexuenai_shengsixiangyi"] = "",
}

tianyexuenai_shengsixiangyi:setBonus(true)	--设为奖励角色

--------------------------------------------------
--愤结
--------------------------------------------------

fenjie = sgs.CreateTriggerSkill{
	name = "fenjie",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then 
				if player:hasSkill("jiushu") then
					room:setLevelSkillState(player, "jiushu", math.max(1, player:getLevelSkillState("jiushu")-1))
				end
				
				room:damage(sgs.DamageStruct(self:objectName(), player, player))
				
				--local new_card = sgs.Sanguosha:cloneCard("analeptic", sgs.Card_NoSuit, 0)
				--new_card:setSkillName(self:objectName())
				--room:useCard(sgs.CardUseStruct(new_card, player, player))
				
				local cards = sgs.CardList()
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:isKindOf("Analeptic") or card:isKindOf("FireSlash") then
						cards:append(card)
					end
				end
				for _,id in sgs.qlist(room:getDiscardPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:isKindOf("Analeptic") or card:isKindOf("FireSlash") then
						cards:append(card)
					end
				end
				if not cards:isEmpty() then
					local card = cards:at(math.random(0, cards:length() - 1))
					player:obtainCard(card, true)
				else
					local log = sgs.LogMessage()
					log.type = "#fenjie_find_fail"
					log.arg = "fenjie"
					room:sendLog(log)	--发送信息框消息
				end
			end
		end
		return false
	end
}

tianyexuenai_shengsixiangyi:addSkill(fenjie)

sgs.LoadTranslationTable{
	["fenjie"] = "愤结",
	[":fenjie"] = "准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，<font color='#DC143C'>降级</font>“救赎”，对自己造成1点伤害，随机获得牌堆、弃牌堆中的一张【酒】或火【杀】。",
	["$fenjie"] = "",
	["#fenjie_find_fail"] = "没有可通过“%arg”获得的牌",
}

--------------------------------------------------
--救赎
--------------------------------------------------

jiushu = sgs.CreateTriggerSkill{
	name = "jiushu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 then
			for i = 1,damage.damage,1 do
				local target = room:askForPlayerChosen(player, room:getAlivePlayers(), self:objectName(), "@jiushu_ask", true, true)
				if target and not SkillNullify(player, self:objectName()) and player:canEffect(target, self:objectName()) then
					target:drawCards(1, self:objectName())
					if player:getLevelSkillState(self:objectName()) >= 2 and not target:isNude() then
						local id = room:askForCardChosen(player, target, "he", self:objectName(), false, sgs.Card_MethodNone)
						local card = sgs.Sanguosha:getCard(id)
						room:showCard(target, id)
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_EXTRACTION, player:objectName(), target:objectName(), self:objectName(), "")
						room:moveCardTo(card, player, sgs.Player_PlaceHand, reason, true)
						if player:getLevelSkillState(self:objectName()) >= 3 then
							if card:isRed() then
								if room:getCardOwner(id) and room:getCardOwner(id):objectName() == player:objectName() then
									room:throwCard(card, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), self:objectName(), nil), player)
									
									local recover = sgs.RecoverStruct()
									recover.who = player
									recover.recover = 1
									room:recover(player, recover)
								end
							elseif player:getLevelSkillState(self:objectName()) >= 4 then
								player:drawCards(1, self:objectName())
							end
						end
					end
				end
			end
		end
		return false
	end
}

jiushu:setLevelSkill(true)	--设置为升级技

tianyexuenai_shengsixiangyi:addSkill(jiushu)

sgs.LoadTranslationTable{
	["jiushu"] = "救赎",
	[":jiushu"] = "你受到1点伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，令一名角色摸一张牌，<font color='#DC143C'><u><b>2级</b> 你展示并获得其一张牌</u></font>，<font color='#DC143C'><u><b>3级</b> 若之为红色则你弃置之、回复1点体力</u></font>，<font color='#DC143C'><u><b>4级</b> 否则你摸一张牌</u></font>。",
	["$jiushu"] = "",
	["@jiushu_ask"] = "你可以发动“救赎”，令一名角色摸一张牌，并根据此技能等级执行后续效果",
}

--------------------------------------------------
--神召
--------------------------------------------------

shenzhao = sgs.CreateTriggerSkill{
	name = "shenzhao",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Dying},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Dying then
			local dying = data:toDying()
			if dying.who and dying.who:objectName() == player:objectName() and player:hasSkill("jiushu") then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:setLevelSkillState(player, "jiushu", 1+player:getLevelSkillState("jiushu"))
			end
		end
		return false
	end,
}

tianyexuenai_shengsixiangyi:addSkill(shenzhao)

sgs.LoadTranslationTable{
	["shenzhao"] = "神召",
	[":shenzhao"] = "锁定技，你进入濒危状态时，<font color='#DC143C'>升级</font>“救赎”。",
	["$shenzhao"] = "",
}

--------------------------------------------------
--梦鹿繁花 哈娜
--设计者：月音风源
--------------------------------------------------

hana_menglufanhua = sgs.General(extension,"hana_menglufanhua","individual","4",false)

sgs.LoadTranslationTable{
	["hana_menglufanhua"] = "哈娜",
	["&hana_menglufanhua"] = "哈娜",
	["#hana_menglufanhua"] = "梦鹿繁花",
	["$hana_menglufanhua"] = "简单",
	["designer:hana_menglufanhua"] = "月音风源",
	["cv:hana_menglufanhua"] = "",
	["illustrator:hana_menglufanhua"] = "",
	["~hana_menglufanhua"] = "",
}

--------------------------------------------------
--芸芸
--------------------------------------------------

yunyun = sgs.CreateTriggerSkill{
	name = "yunyun",
	events = {sgs.CardUsed, sgs.CardResponded},
	frequency = sgs.Skill_NotFrequent,
	on_trigger = function(self, event, player, data, room)
		local card
		if event == sgs.CardUsed then
			card = data:toCardUse().card
		elseif event == sgs.CardResponded then
			--if data:toCardResponse().m_isUse then
				card = data:toCardResponse().m_card
			--end
		end
		if not card or card:getTypeId() == sgs.Card_TypeSkill then return false end
		if player:getMark("yunyun_used") == 0 and player:getCardCount(true) > 0 then
			local card = room:askForCard(player, ".|.|.|hand,equipped", "@yunyun_recast", data, sgs.Card_MethodNone)
			if card then
				local logg = sgs.LogMessage()
				logg.from = player
				logg.type = "#InvokeSkill"
				logg.arg = self:objectName()
				room:sendLog(logg)	--显示技能发动提示信息
				room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
				room:setPlayerMark(player, "yunyun_used", 1)
				room:broadcastSkillInvoke("@recast")
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_RECAST, player:objectName(), nil, self:objectName(), nil)
				room:moveCardTo(card, player, nil, sgs.Player_DiscardPile, reason, true)
				
				local log = sgs.LogMessage()
				log.type = "#UseCard_Recast"
				log.from = player
				log.card_str = sgs.Sanguosha:getCard(card:getEffectiveId()):toString()
				room:sendLog(log)
				
				player:drawCards(1, "recast")
			end
		end
	end
}
table.insert(turn_end_clear_mark, "yunyun_used")	--回合结束清除标记

hana_menglufanhua:addSkill(yunyun)

sgs.LoadTranslationTable{
	["yunyun"] = "芸芸",
	[":yunyun"] = "每回合限一次，你使用或打出牌时，你可以重铸一张牌。",
	["$yunyun"] = "",
	["@yunyun_recast"] = "你可以使用“芸芸”，重铸一张牌",
}

--------------------------------------------------
--欣荣
--------------------------------------------------

xinrong = sgs.CreateTriggerSkill{
	name = "xinrong",
	events = {sgs.EventPhaseStart},
	frequency = sgs.Skill_Frequent,
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start then
				if player:getMark("xinrong_used") > 0 then
					room:setPlayerMark(player, "xinrong_used", 0)
					if player:getMark("&xinrong!") > 0 then
						room:loseHp(player, player:getMark("&xinrong!"))
						room:setPlayerMark(player, "&xinrong!", 0)
					end
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					for _, mark in sgs.list(player:getMarkNames()) do
						if string.sub(mark, 1, 13) == "xinrong_card_" and player:getMark(mark) > 0 then
							local id = tonumber(string.sub(mark, 14, -1))
							for _,card in sgs.qlist(player:getCards("he")) do
								if card:getId() == id then
									dummy:addSubcard(id)
								end
							end
							room:setPlayerMark(player, mark, 0)
						end
					end
					if dummy:subcardsLength() > 0 then
						room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, player:objectName(), player:objectName(), self:objectName(), ""), player)
					end
					dummy:deleteLater()
				end
			elseif player:getPhase() == sgs.Player_Finish then
				if player and player:isAlive() and player:hasSkill(self:objectName()) and player:getLostHp() > 0 then
					if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
						--room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
						room:setPlayerMark(player, "xinrong_used", 1)
						--local X = math.max(0, player:getMaxHp() - player:getHp())
						local X = math.ceil(player:getLostHp() / 2.0)
						if X > 0 then
							local recover = sgs.RecoverStruct()
							recover.who = player
							recover.recover = X
							room:recover(player, recover)
							room:setPlayerMark(player, "&xinrong!", X)
						end
						
						local card_ids = room:getNCards(X)
						local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
						for _,id in sgs.qlist(card_ids) do
							room:setPlayerMark(player, "xinrong_card_" .. id, 1)
							dummy:addSubcard(id)
							room:setCardFlag(sgs.Sanguosha:getCard(id), "&xinrong")	--可见手牌下标
						end
						player:obtainCard(dummy, false)
						dummy:deleteLater()
						room:getThread():delay(500)
					end
				end
			end
		end
	end
}
table.insert(discard_clear_flag, "&xinrong")			--进弃牌堆清除flag
table.insert(change_owner_clear_flag, "&xinrong")	--持有者变化清除flag

hana_menglufanhua:addSkill(xinrong)

sgs.LoadTranslationTable{
	["xinrong"] = "欣荣",
	[":xinrong"] = "结束阶段，你可以<font color='#A9A9A9'>发动此技能</font>，回复X点体力、摸X张牌，你的下个准备阶段，你失去X点体力，破坏以此法获得的牌。（X为你已损失体力值的一半，向上取整）",
	["$xinrong"] = "",
	["&xinrong"] = "欣荣",
}

--------------------------------------------------
--异世界的支配者 真理圆环
--设计者：萌龙少主
--------------------------------------------------

zhenliyuanhuan_yishijiedezhipeizhe = sgs.General(extension,"zhenliyuanhuan_yishijiedezhipeizhe","individual","4",false)

sgs.LoadTranslationTable{
	["zhenliyuanhuan_yishijiedezhipeizhe"] = "真理圆环",
	["&zhenliyuanhuan_yishijiedezhipeizhe"] = "真理圆环",
	["#zhenliyuanhuan_yishijiedezhipeizhe"] = "异世界的支配者",
	["$zhenliyuanhuan_yishijiedezhipeizhe"] = "萌新",
	["designer:zhenliyuanhuan_yishijiedezhipeizhe"] = "萌龙少主",
	["cv:zhenliyuanhuan_yishijiedezhipeizhe"] = "",
	["illustrator:zhenliyuanhuan_yishijiedezhipeizhe"] = "",
	["~zhenliyuanhuan_yishijiedezhipeizhe"] = "",
}

zhenliyuanhuan_yishijiedezhipeizhe:setGender(sgs.General_Sexless)

zhenliyuanhuan_yishijiedezhipeizhe2 = sgs.General(extension,"zhenliyuanhuan_yishijiedezhipeizhe2","individual","4",false,true,true)

sgs.LoadTranslationTable{
	["zhenliyuanhuan_yishijiedezhipeizhe2"] = "真理圆环",
	["&zhenliyuanhuan_yishijiedezhipeizhe2"] = "真理圆环",
	["#zhenliyuanhuan_yishijiedezhipeizhe2"] = "异世界的缔造者",
	["$zhenliyuanhuan_yishijiedezhipeizhe2"] = "萌新",
	["parent:zhenliyuanhuan_yishijiedezhipeizhe2"] = "zhenliyuanhuan_yishijiedezhipeizhe",	--本体角色名
	["designer:zhenliyuanhuan_yishijiedezhipeizhe2"] = "萌龙少主",
	["cv:zhenliyuanhuan_yishijiedezhipeizhe2"] = "",
	["illustrator:zhenliyuanhuan_yishijiedezhipeizhe2"] = "",
	["~zhenliyuanhuan_yishijiedezhipeizhe2"] = "",
}

zhenliyuanhuan_yishijiedezhipeizhe2:setGender(sgs.General_Sexless)

--------------------------------------------------
--极理
--------------------------------------------------

function refresh_jili_mark(player)
	local room = player:getRoom()
	room:setPlayerMark(player, "&jili_magi+jili_inc", 0)
	room:setPlayerMark(player, "&jili_magi+jili_dec", 0)
	room:setPlayerMark(player, "&jili_magi+jili_inc+jili_dec", 0)
	local str_table = {"&jili_magi"}
	if player:getMark("jili_magi_inc1") > 0 then
		table.insert(str_table, "jili_inc")
	end
	if player:getMark("jili_magi_dec1") > 0 then
		table.insert(str_table, "jili_dec")
	end
	if #str_table == 1 then
		if player:getGeneralName() == "zhenliyuanhuan_yishijiedezhipeizhe2" then
			room:setPlayerProperty(player, "general", sgs.QVariant("zhenliyuanhuan_yishijiedezhipeizhe"))	--更换武将卡面
		end
	elseif #str_table > 1 then
		room:setPlayerMark(player, table.concat(str_table, "+"), 1)
		if player:getGeneralName() == "zhenliyuanhuan_yishijiedezhipeizhe" then
			room:setPlayerProperty(player, "general", sgs.QVariant("zhenliyuanhuan_yishijiedezhipeizhe2"))	--更换武将卡面
		end
	end
end
jili_magi = sgs.CreateTriggerSkill{
	name = "jili_magi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged, sgs.DamageCaused, sgs.DamageInflicted},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged and player:hasSkill(self:objectName()) then
			local damage = data:toDamage()
			if damage.damage > 0 then
				local choices = {}
				if player:getMark("jili_magi_inc1") == 0 then
					table.insert(choices, "jili_magi_inc1")
				end
				if player:getMark("jili_magi_dec1") == 0 then
					table.insert(choices, "jili_magi_dec1")
				end
				if #choices == 0 then
					return false
				end
				
				local choice = room:askForChoice(player, self:objectName(), table.concat(choices, "+").."+cancel", data)
				if choice ~= "cancel" then
					local logg = sgs.LogMessage()
					logg.from = player
					logg.type = "#InvokeSkill"
					logg.arg = self:objectName()
					room:sendLog(logg)	--显示技能发动提示信息
					room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
					ChoiceLog(player, choice)
					
					room:setPlayerMark(player, choice, 1)
					refresh_jili_mark(player)
				end
			end
		elseif event == sgs.DamageCaused and player:getMark("jili_magi_inc1") > 0 then
			local damage = data:toDamage()
			if damage.damage > 0 then
				if damage.nature == sgs.DamageStruct_Light then return false end
				room:setPlayerMark(player, "jili_magi_inc1", 0)
				refresh_jili_mark(player)
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:broadcastSkillInvoke(self:objectName(), math.random(5,8))	--播放配音
				local log = sgs.LogMessage()
				log.type = "#jili_magi_from"
				log.from = player
				log.arg = self:objectName()
				log.arg2 = 1
				room:sendLog(log)
				damage.damage = damage.damage + 1
				data:setValue(damage)
				
				room:addPlayerMark(player, "jili_magi_addcount", 1)
				if player:getMark("jili_magi_addcount") >= 3 then
					RecordUnlockGenerals(player, "zero_mofashaonv")	--为玩家记录可解锁角色
				end
				
				return false
			end
		elseif event == sgs.DamageInflicted and player:getMark("jili_magi_dec1") > 0 then
			local damage = data:toDamage()
			if damage.damage > 0 then
				if damage.nature == sgs.DamageStruct_Light then return false end
				room:setPlayerMark(player, "jili_magi_dec1", 0)
				refresh_jili_mark(player)
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:broadcastSkillInvoke(self:objectName(), math.random(1,4))	--播放配音
				--room:getThread():delay(250)
				--room:broadcastSkillInvoke(self:objectName(), math.random(1,4))	--播放配音
				local log = sgs.LogMessage()
				log.type = "#jili_magi_to"
				log.to:append(player)
				log.arg = self:objectName()
				log.arg2 = 1
				room:sendLog(log)
				damage.damage = damage.damage - 1
				if damage.damage <= 0 then
					room:setEmotion(player, "skill_nullify")
					return true
				end
				data:setValue(damage)
				return false
			end
		end
	end
}

zhenliyuanhuan_yishijiedezhipeizhe:addSkill(jili_magi)
zhenliyuanhuan_yishijiedezhipeizhe2:addSkill(jili_magi)

sgs.LoadTranslationTable{
	["jili_magi"] = "极理",
	[":jili_magi"] = "你受到伤害后，你可以选择一项：1.你下次受到的伤害－1 2.你下次造成的伤害＋1。（不叠加）",
	["$jili_magi1"] = "（咒语）",
	["$jili_magi2"] = "（咒语）",
	["$jili_magi3"] = "（咒语）",
	["$jili_magi4"] = "（咒语）",
	["$jili_magi5"] = "（吟唱）",
	["$jili_magi6"] = "（吟唱）",
	["$jili_magi7"] = "（吟唱）",
	["$jili_magi8"] = "（吟唱）",
	["jili_magi_dec1"] = "下次受到的伤害-1",
	["jili_magi_inc1"] = "下次造成的伤害+1",
	["jili_inc"] = "增伤",
	["jili_dec"] = "减伤",
	["#jili_magi_from"] = "由于“%arg”的效果，%from 造成的伤害增加 %arg2 点",
	["#jili_magi_to"] = "由于“%arg”的效果，%to 受到的伤害减少 %arg2 点",
}

--------------------------------------------------
--魔法少女 ZERO
--设计者：
--------------------------------------------------

zero_mofashaonv = sgs.General(extension,"zero_mofashaonv","individual","4",false,true,true)

sgs.LoadTranslationTable{
	["zero_mofashaonv"] = "ZERO",
	["&zero_mofashaonv"] = "零",
	["#zero_mofashaonv"] = "魔法少女",
	["$zero_mofashaonv"] = "进阶",
	["designer:zero_mofashaonv"] = "萌龙少主",
	["cv:zero_mofashaonv"] = "",
	["illustrator:zero_mofashaonv"] = "",
	["unlock:zero_mofashaonv"] = "在一局游戏中使用真理圆环的“极理”增加伤害至少3次",
	["~zero_mofashaonv"] = "",
}

zero_mofashaonv:setBonus(true)	--设为奖励角色

--------------------------------------------------
--魔术封印
--------------------------------------------------

moshufengyin_card = sgs.CreateSkillCard{
	name = "moshufengyin",
	will_throw = false,
	filter = function(self, targets, to_select)
		return to_select:objectName() ~= sgs.Self:objectName() and #targets == 0 and not to_select:isNude() and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		if not target:isNude() then
			local id = room:askForCardChosen(source, target, "he", self:objectName(), false, sgs.Card_MethodNone)
			--local card = sgs.Sanguosha:getCard(id)
			
			local new_card = sgs.Sanguosha:cloneCard("supply_shortage", sgs.Card_NoSuit, 0)
			new_card:addSubcard(id)
			new_card:setSkillName("_"..self:objectName())
			if target and target:canUse(new_card, source) then
				room:useCard(sgs.CardUseStruct(new_card, source, source))
				
				local skills = {}
				for _, skill in sgs.qlist(target:getSkillList(false, true)) do	--getSkillList 参数1：是否包含装备技能 参数2：是否只列出可见技能
					if not table.contains(luaxiaogui_banned_list, skill:objectName()) and target:getMark("Qingcheng"..skill:objectName()) == 0 then
						table.insert(skills, skill:objectName())
					end
				end
				local skill_name = room:askForChoice(source, self:objectName().."+xiaogui_choice_log", table.concat(skills, "+"))
				if skill_name and skill_name ~= "" then
					ChoiceLog(source, skill_name)
					room:addPlayerMark(target, "Qingcheng"..skill_name)
					room:addPlayerMark(target, "luaxiaogui_"..skill_name)	--记录被校规无效的主技能（子技能不用记录）
					for _, sk in sgs.qlist(sgs.Sanguosha:getRelatedSkills(skill_name)) do
						room:addPlayerMark(target, "Qingcheng"..sk:objectName())
					end
				end
			else
				new_card:deleteLater()
			end
		end
	end
}
moshufengyin = sgs.CreateViewAsSkill{
	name = "moshufengyin",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		if #cards == 0 then
			local moshufengyin_card = moshufengyin_card:clone()
			return moshufengyin_card
		else
			return nil
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#moshufengyin") < 1 and not player:containsTrick("supply_shortage") --#后面接的是skillcard的objectName而不是技能名。
	end
}

zero_mofashaonv:addSkill(moshufengyin)

sgs.LoadTranslationTable{
	["moshufengyin"] = "魔术封印",
	[":moshufengyin"] = "出牌阶段限一次，你可以将一名其他角色的一张牌当【兵粮寸断】对你使用，你无效其一个技能直到其下个回合结束。",
	["$moshufengyin"] = "",
}

--------------------------------------------------
--契约维续
--------------------------------------------------

qiyueweixu_buff = sgs.CreateMaxCardsSkill{
	name = "#qiyueweixu_buff",
	extra_func = function(self, target)
		if target:hasSkill("qiyueweixu") and not target:getJudgingArea():isEmpty()then
			return target:getJudgingArea():length()
		end
	end
}
qiyueweixu = sgs.CreateTriggerSkill{
	name = "qiyueweixu",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Judge then
			if not player:getJudgingArea():isEmpty() and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				player:drawCards(player:getJudgingArea():length(), self:objectName())
				if not player:isNude() then
					room:askForDiscard(player, self:objectName(), 1, 1, false, true)
				end
				--if not player:isNude() then
				--	local card = room:askForCard(player, ".|.|.|hand,equipped!", "@zhanmeng_put", data, sgs.Card_MethodNone)
				--	if card then
				--		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
				--		room:moveCardTo(card, player, nil, sgs.Player_DrawPile, reason, false)
				--	end
				--end
				return true
			end
		end
		return false
	end
}

zero_mofashaonv:addSkill(qiyueweixu)
--zero_mofashaonv:addSkill(qiyueweixu_buff)

sgs.LoadTranslationTable{
	["qiyueweixu"] = "契约维续",
	["#qiyueweixu_buff"] = "契约维续",
	[":qiyueweixu"] = "判定阶段开始时，若你的判定区内有牌，你可以<font color='#A9A9A9'>发动此技能</font>，摸X张牌，弃置一张牌，结束判定阶段。（X为你判定区内的牌数）",
	["$qiyueweixu"] = "",
	["qiyueweixu_skip"] = "结束判定阶段",
	["qiyueweixu_draw"] = "摸X张牌弃一张牌",
}

--------------------------------------------------
--喵喵神官 喵田弥夜
--设计者：--
--------------------------------------------------

miaotianmiye_miaomiaoshenguan = sgs.General(extension,"miaotianmiye_miaomiaoshenguan","individual","3",false)

sgs.LoadTranslationTable{
	["miaotianmiye_miaomiaoshenguan"] = "喵田弥夜",
	["&miaotianmiye_miaomiaoshenguan"] = "喵田弥夜",
	["#miaotianmiye_miaomiaoshenguan"] = "喵喵神官",
	["$miaotianmiye_miaomiaoshenguan"] = "简单",
	["designer:miaotianmiye_miaomiaoshenguan"] = "月音风源",
	["cv:miaotianmiye_miaomiaoshenguan"] = "",
	["illustrator:miaotianmiye_miaomiaoshenguan"] = "",
	["~miaotianmiye_miaomiaoshenguan"] = "",
}

--------------------------------------------------
--神语
--------------------------------------------------

shenyu = sgs.CreateTriggerSkill{
	name = "shenyu",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Dying},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Dying then
			local dying = data:toDying()
			local _data = sgs.QVariant()
			_data:setValue(dying.who)
			if dying.who and dying.who:objectName() ~= player:objectName() and dying.who:getHp() < 1 then
				local used = false
				for _, p in sgs.qlist(room:getAllPlayers()) do
					if p:getMark("&shenyu") == 0 and player:canEffect(p, self:objectName()) then
						if not used then
							used = true
							room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
						end
						room:setPlayerMark(p, "&shenyu", 1)	--附身技能无效标记，无效效果已耦合入源码倾城
					end
				end
			end
		end
		return false
	end,
}
table.insert(turn_end_clear_mark, "&shenyu")	--回合结束清除标记

miaotianmiye_miaomiaoshenguan:addSkill(shenyu)

sgs.LoadTranslationTable{
	["shenyu"] = "神语",
	[":shenyu"] = "锁定技，其他角色进入濒危状态时，所有角色技能无效直到本回合结束。",
	["$shenyu"] = "",
	[":mark:&shenyu"] = "本回合所有技能无效",
}

--------------------------------------------------
--域界
--------------------------------------------------

yujie = sgs.CreateTriggerSkill{
	name = "yujie",
	events = {sgs.TargetConfirmed},
	on_trigger = function(self, event, player, data, room)
		local use = data:toCardUse()
		if use.card and not use.card:isKindOf("SkillCard") and not use.card:isKindOf("EquipCard") and use.from and use.from:isAlive() and use.to and use.to:contains(player) and player:isAlive() and use.from:objectName() ~= player:objectName() then
			player:setTag("yujie_data_AI", data)	--AI用
			if player:getMark("&yujie+_lun!") < 3 and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. use.card:objectName())) and player:canEffect(use.from, self:objectName()) then
				room:addPlayerMark(player, "&yujie+_lun!", 1)
				room:doAnimate(1, player:objectName(), use.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				if not SkillNullify(player, self:objectName()) then
					local type_str = getTypeKindString(use.card)
					if not type_str or type_str == "" then
						player:removeTag("yujie_data_AI")	--及时清除
						return false
					end
					
					local not_overt_cards = {}
					for _,cd in sgs.qlist(use.from:getHandcards()) do
						if cd:isKindOf(type_str) and not cd:isOvert() then
							room:setCardFlag(cd, "yujie_flag")
							table.insert(not_overt_cards, cd)
						end
					end
					local card
					if #not_overt_cards > 0 then
						local _data = sgs.QVariant()
						_data:setValue(player)
						card = room:askForCard(use.from, ".|.|.|hand|yujie_flag", "@yujie_show:"..player:objectName(), _data, sgs.Card_MethodNone)
					end
					for _,cd in ipairs(not_overt_cards) do
						room:setCardFlag(cd, "-yujie_flag")
					end
					if card and card:getId() > -1 then
						if room:getCardOwner(card:getId()) and room:getCardOwner(card:getId()):objectName() == use.from:objectName() and room:getCardPlace(card:getId()) == sgs.Player_PlaceHand then
							--room:showCard(use.from, card:getId())
							room:setOvertCard(use.from, card:getId(), true)
						end
					else
						local nullified_list = use.nullified_list	--无效目标列表
						table.insert(nullified_list, player:objectName())
						use.nullified_list = nullified_list
						data:setValue(use)
					end
				end
			end
			player:removeTag("yujie_data_AI")	--及时清除
		end
		return false
	end
}

miaotianmiye_miaomiaoshenguan:addSkill(yujie)

sgs.LoadTranslationTable{
	["yujie"] = "域界",
	[":yujie"] = "每轮限3次，你成为其他角色使用非装备牌的目标后，你可以<font color='#A9A9A9'>发动此技能</font>，令其选择一项：1.明置一张与之同类别的手牌 2.此牌对你无效。",
	["$yujie"] = "",
	["yujie:choice"] = "你可以发动“域界”，令使用者明置一张与 %src 同类别的手牌，否则此牌对你无效",
	["@yujie_show"] = "请明置一张与你使用的牌类别相同的手牌，否则此牌对 %src 无效",
}

--------------------------------------------------
--绝喵咒术！
--------------------------------------------------

juemiaozhoushucard = sgs.CreateSkillCard{
	name = "juemiaozhoushu",
	target_fixed = true,
	will_throw = false,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		source:loseMark("@juemiaozhoushu")
		
		room:doAnimate(2, "skill=JMZSAnim:", "")
		room:getThread():delay(5500)
		
		local origin_hp = source:getHp()
		local targets = sgs.SPlayerList()
		for _, p in sgs.qlist(room:getAllPlayers()) do
			if p:getHp() < origin_hp and source:canEffect(p, self:objectName()) then
				room:doAnimate(1, source:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				targets:append(p)
			end
		end
		if not targets:isEmpty() then
			room:sortByActionOrder(targets)
			local log = sgs.LogMessage()
			log.from = source
			log.type = "#juemiaozhoushu_log1"
			log.arg = self:objectName()
			log.to = targets
			room:sendLog(log)	--显示技能发动提示信息
			for _, p in sgs.qlist(targets) do
				room:loseHp(p, 1, source, self:objectName())
			end
		end
		
		room:getThread():delay(500)
		
		local origin_hp = source:getHp()
		local targets = sgs.SPlayerList()
		for _, p in sgs.qlist(room:getAllPlayers()) do
			if p:getHp() > origin_hp and source:canEffect(p, self:objectName()) then
				room:doAnimate(1, source:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				targets:append(p)
			end
		end
		if not targets:isEmpty() then
			room:sortByActionOrder(targets)
			local log = sgs.LogMessage()
			log.from = source
			log.type = "#juemiaozhoushu_log2"
			log.arg = self:objectName()
			log.to = targets
			room:sendLog(log)	--显示技能发动提示信息
			for _, p in sgs.qlist(targets) do
				local recover = sgs.RecoverStruct()
				recover.who = source
				recover.recover = 1
				room:recover(p, recover)
			end
		end
	end
}
juemiaozhoushuvs = sgs.CreateZeroCardViewAsSkill{
	name = "juemiaozhoushu",
	view_as = function()
		return juemiaozhoushucard:clone()
	end,
	enabled_at_play = function(self, player)
		return player:getMark("@juemiaozhoushu") > 0
	end
}
juemiaozhoushu = sgs.CreateTriggerSkill{
	name = "juemiaozhoushu",
	frequency = sgs.Skill_Limited,
	view_as_skill = juemiaozhoushuvs,
	limit_mark = "@juemiaozhoushu",
	on_trigger = function()
	end
}

miaotianmiye_miaomiaoshenguan:addSkill(juemiaozhoushu)

sgs.LoadTranslationTable{
	["juemiaozhoushu"] = "绝喵咒术！",
	[":juemiaozhoushu"] = "限定技，出牌阶段，你可以令体力值低于你的角色各失去1点体力，然后令体力值高于你的角色各回复1点体力。",
	["$juemiaozhoushu"] = "",
	["@juemiaozhoushu"] = "咒文小抄",
	["#juemiaozhoushu_log1"] = "由于“%arg”的效果，%to 将失去体力",
	["#juemiaozhoushu_log2"] = "由于“%arg”的效果，%to 将回复体力",
}

--------------------------------------------------
--灵刀素振 姬野青
--设计者：--
--------------------------------------------------

jiyeqing_lingdaosuzhen = sgs.General(extension,"jiyeqing_lingdaosuzhen","individual","4",false)

sgs.LoadTranslationTable{
	["jiyeqing_lingdaosuzhen"] = "姬野青",
	["&jiyeqing_lingdaosuzhen"] = "姬野青",
	["#jiyeqing_lingdaosuzhen"] = "灵刀素振",
	["$jiyeqing_lingdaosuzhen"] = "简单",
	["designer:jiyeqing_lingdaosuzhen"] = "NSX",
	["cv:jiyeqing_lingdaosuzhen"] = "",
	["illustrator:jiyeqing_lingdaosuzhen"] = "",
	["~jiyeqing_lingdaosuzhen"] = "",
}

--------------------------------------------------
--真刃
--------------------------------------------------

zhenren = sgs.CreateTriggerSkill{
	name = "zhenren",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.RoundStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.RoundStart then
			if player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:")) and not SkillNullify(player, self:objectName()) then
				room:setPlayerMark(player, "&zhenren+handcard_public+_lun", 1)	--公开手牌效果已耦合入源码：标记中有"+handcard_public+"的角色会公开手牌
				
				local cards = sgs.CardList()
				if player:getMark("zhenren_fjcy_get") == 0 then	--彩蛋：每局游戏仅一次，有概率捡一张游戏外的【风卷残云】，权重是普通牌的2倍
					for id = 0,500,1 do
						local card = sgs.Sanguosha:getCard(id)
						if card and card:isKindOf("Fengjuancanyun") and room:getCardPlace(id) == sgs.Player_PlaceTable then
							cards:append(card)
							cards:append(card)	--暴力加权法
						end
					end
				end
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:isKindOf("Slash") or card:isKindOf("Weapon") then
						cards:append(card)
					end
				end
				if not cards:isEmpty() then
					local card = cards:at(math.random(0, cards:length() - 1))
					player:obtainCard(card, true)
					
					if card:isKindOf("Fengjuancanyun") then
						room:setPlayerMark(player, "zhenren_fjcy_get", 1)
					end
				end
			end
		end
	end
}

jiyeqing_lingdaosuzhen:addSkill(zhenren)

sgs.LoadTranslationTable{
	["zhenren"] = "真刃",
	[":zhenren"] = "轮次开始时，你可以<font color='#A9A9A9'>发动此技能</font>，从牌堆随机获得一张【杀】或武器牌，本轮内你的手牌始终可见。",
	["$zhenren"] = "",
	["handcard_public"] = "公开手牌",
	["zhenren:choice"] = "你可以发动“真刃”，随机获得一张【杀】或武器牌，本轮内公开你的手牌",
}

--------------------------------------------------
--居合
--------------------------------------------------

jvhebuff = sgs.CreateTargetModSkill{
	name = "#jvhebuff",
	pattern = ".",
	extra_target_func = function(self, from, card)
		if from:hasSkill("jvhe") and card:isKindOf("Slash") then
			for _,cd in sgs.qlist(from:getHandcards()) do
				if cd:isKindOf("Weapon") and not card:getSubcards():contains(cd:getId()) then
					return 1
				end
			end
		end
		return 0
	end
}
jvhe = sgs.CreateTriggerSkill{
	name = "jvhe",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecified},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if not use.from or use.from:objectName() ~= player:objectName() then return false end
			if use.card and use.card:isKindOf("Slash") and use.to and use.to:length() == 1 then
				local cards = {}
				for _,cd in sgs.qlist(player:getHandcards()) do
					if cd:isKindOf("Weapon") and player:canUse(cd, player) then
						room:setCardFlag(cd, "jvhe_flag")
						table.insert(cards, cd)
					end
				end
				local card
				if #cards > 0 then
					card = room:askForCard(player, ".|.|.|hand|jvhe_flag", "@jvhe_use:"..player:objectName(), data, sgs.Card_MethodNone)
				end
				for _,cd in ipairs(cards) do
					room:setCardFlag(cd, "-jvhe_flag")
				end
				
				if card and card:getId() > -1 then
					local logg = sgs.LogMessage()
					logg.from = player
					logg.type = "#InvokeSkill"
					logg.arg = self:objectName()
					room:sendLog(logg)	--显示技能发动提示信息
					room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
					
					room:useCard(sgs.CardUseStruct(card, player, player))
					
					local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
					jink_table[1] = 0	--因为只有一个目标所以可以简写
					local jink_data = sgs.QVariant()
					jink_data:setValue(Table2IntList(jink_table))
					player:setTag("Jink_" .. use.card:toString(), jink_data)
				end
			end
		end
	end
}

jiyeqing_lingdaosuzhen:addSkill(jvhe)
jiyeqing_lingdaosuzhen:addSkill(jvhebuff)

sgs.LoadTranslationTable{
	["jvhe"] = "居合",
	["#jvhebuff"] = "居合",
	[":jvhe"] = "你的手牌中有武器牌时，你使用【杀】可指定目标数＋1。<br/>你使用【杀】指定唯一目标后，你可以使用一张武器牌，令此【杀】不可响应。",
	["$jvhe"] = "",
	["@jvhe_use"] = "你可以使用一张武器牌，令此杀不可响应",
}

--------------------------------------------------
--角色特性：保养的秘诀
--------------------------------------------------
--[[
characteristic_baoyangdemijue = sgs.CreateTriggerSkill{
	name = "#characteristic_baoyangdemijue",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
characteristic_baoyangdemijue_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_baoyangdemijue_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_baoyangdemijue_state)
jiyeqing_lingdaosuzhen:addSkill(characteristic_baoyangdemijue)
jiyeqing_lingdaosuzhen:addRelateSkill("characteristic_baoyangdemijue_state")

sgs.LoadTranslationTable{
	["characteristic_baoyangdemijue"] = "保养的秘诀",
	["#characteristic_baoyangdemijue"] = "保养的秘诀",
	["characteristic_baoyangdemijue_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_baoyangdemijue_state"] = "<font color='#DAA520'><b>保养的秘诀</b><br/>你有概率通过“真刃”获得游戏外/牌堆/弃牌堆中的【风卷残云】</font>",
	["$characteristic_baoyangdemijue_state"] = "",
}]]

--------------------------------------------------
--独酌桂兔 夏川玥玥
--设计者：--
--------------------------------------------------

xiachuanyueyue_duzhuoguitu = sgs.General(extension,"xiachuanyueyue_duzhuoguitu","individual","4",false)

sgs.LoadTranslationTable{
	["xiachuanyueyue_duzhuoguitu"] = "夏川玥玥",
	["&xiachuanyueyue_duzhuoguitu"] = "夏川玥玥",
	["#xiachuanyueyue_duzhuoguitu"] = "独酌桂兔",
	["$xiachuanyueyue_duzhuoguitu"] = "进阶",
	["designer:xiachuanyueyue_duzhuoguitu"] = "NSX",
	["cv:xiachuanyueyue_duzhuoguitu"] = "",
	["illustrator:xiachuanyueyue_duzhuoguitu"] = "",
	["~xiachuanyueyue_duzhuoguitu"] = "",
}

table.insert(robot_change_general, "xiachuanyueyue_duzhuoguitu")	--对电脑禁用

--------------------------------------------------
--月醴
--------------------------------------------------

yueli = sgs.CreateTriggerSkill{
	name = "yueli",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart, sgs.CardUsed, sgs.CardResponded},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player and player:isAlive() and player:getPhase() == sgs.Player_Start then
			room:setPlayerMark(player, "&yueli+heart_char", 0)
			room:setPlayerMark(player, "&yueli+diamond_char", 0)
			room:setPlayerMark(player, "&yueli+spade_char", 0)
			room:setPlayerMark(player, "&yueli+club_char", 0)
			
			if player:hasSkill(self:objectName()) and player:canDiscard(player, "he") then
				local dummy = room:askForDiscard(player, self:objectName(), 1, 1, true, true, "@yueli", ".|.|4~13|.", self:objectName())
				if dummy and dummy:subcardsLength() > 0 and not SkillNullify(player, self:objectName()) then
					local card = sgs.Sanguosha:getCard(dummy:getSubcards():first())
					room:setPlayerMark(player, "&yueli+"..card:getSuitString().."_char", 1)
				end
				dummy:deleteLater()
			end
		else
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			elseif event == sgs.CardResponded then
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if not card or card:getTypeId() == sgs.Card_TypeSkill then return false end
			local suit_str = card:getSuitString()
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:getMark("&yueli+"..suit_str.."_char") > 0 then
					room:sendCompulsoryTriggerLog(myself, self:objectName())	--显示锁定技发动
					room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					if not myself:canEffect(player, self:objectName()) then return false end
					room:loseHp(player, 1, myself, self:objectName())
					room:getThread():delay(500)
					
					if myself:getLevelSkillState(self:objectName()) >= 2 then
						--local card_ids = {}
						--for _,card in sgs.qlist(player:getCards("he")) do
						--	if card:getSuitString() == suit_str then
						--		table.insert(card_ids, card:getId())
						--	end
						--end
						--if #card_ids > 0 then
						--	BanishCards_Table(myself, player, card_ids, "yueli", true)
						--end
						local log = sgs.LogMessage()
						log.type = "#yueli_log"
						log.to:append(player)
						log.arg = self:objectName()
						log.arg2 = suit_str
						room:sendLog(log)	--发送信息框消息
						
						room:setPlayerMark(player, "yueli_limit+use+.|"..suit_str.."|.|hand,equipped", 1)
						room:setPlayerCardLimitation(player, "use", ".|"..suit_str.."|.|hand,equipped", false)
					end
				end
			end
		end
		return false
	end,
    can_trigger = function(self, target)
        return target
    end
}
yueli:setLevelSkill(true)	--设置为升级技
--table.insert(turn_end_banish_pile, "yueli")	--除外直到回合结束
table.insert(turn_end_limit_card_prefix, "yueli_limit")	--封印直到回合结束

xiachuanyueyue_duzhuoguitu:addSkill(yueli)

sgs.LoadTranslationTable{
	["yueli"] = "月醴",
	[":yueli"] = "准备阶段，你可以弃置一张点数>3的牌<font color='#A9A9A9'>发动此技能</font>，直到你的下个准备阶段前，有角色使用与之花色相同的牌时，你令其失去1点体力，<font color='#DC143C'><u><b>2级</b> 本回合其不能使用此花色的牌</u></font>。",
	--[":yueli1"] = "准备阶段，你可以弃置一张点数>3的牌<font color='#A9A9A9'>发动此技能</font>，直到你的下个准备阶段前，有角色使用与之花色相同的牌时，你令其失去1点体力。",
	--[":yueli2"] = "准备阶段，你可以弃置一张点数>3的牌<font color='#A9A9A9'>发动此技能</font>，直到你的下个准备阶段前，有角色使用与之花色相同的牌时，你令其失去1点体力，本回合其不能使用此花色的牌。",
	["$yueli"] = "",
	["@yueli"] = "你可以弃置一张点数>3的牌，发动“月醴”<br/>操作提示：选择一张牌→确定",
	["#yueli_log"] = "由于“%arg”的效果，%to 本回合不能使用 %arg2 牌",
}

--------------------------------------------------
--辄醉
--------------------------------------------------

zhezui = sgs.CreateTriggerSkill{
	name = "zhezui",
	frequency = sgs.Skill_Wake,
	events = {sgs.HpLost, sgs.CardUsed},
	on_trigger = function(self, event, player, data, room)
		if ((event == sgs.HpLost and data:toHpLost().lose > 0) or (event == sgs.CardUsed and data:toCardUse().card and data:toCardUse().card:isKindOf("Analeptic"))) and player:getMark(self:objectName()) == 0 then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			room:setPlayerMark(player, self:objectName(), 1)
			room:doAnimate(2, "skill=EyeAnim:xiachuanyueyue.png", "")
			room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
			room:getThread():delay(2500)
			room:loseMaxHp(player, 1)
			local recover = sgs.RecoverStruct()
			recover.who = player
			recover.recover = 1
			room:recover(player, recover, false, 999)
			if player:hasSkill("yueli") and player:getLevelSkillState("yueli") == 1 then
				room:setLevelSkillState(player, "yueli", 2)
			end
		end
	end,
}

xiachuanyueyue_duzhuoguitu:addSkill(zhezui)

sgs.LoadTranslationTable{
	["zhezui"] = "辄醉",
	[":zhezui"] = "觉醒技，你失去体力时或使用【酒】时，你失去1点体力上限，"..WordState("滋养", word_ziyang_str).."1点体力，<font color='#DC143C'>升级</font>“月醴”。",
	["$zhezui"] = "",
}

--------------------------------------------------
--独酌桂兔 夏川玥玥
--设计者：--
--------------------------------------------------

xiachuanyueyue_if = sgs.General(extension,"xiachuanyueyue_if","individual","4",false,true,true)

sgs.LoadTranslationTable{
	["xiachuanyueyue_if"] = "夏川玥玥",
	["&xiachuanyueyue_if"] = "夏川玥玥",
	["#xiachuanyueyue_if"] = "独酌桂兔",
	["$xiachuanyueyue_if"] = "简单",
	["designer:xiachuanyueyue_if"] = "萌龙少主",
	["cv:xiachuanyueyue_if"] = "",
	["illustrator:xiachuanyueyue_if"] = "",
	["~xiachuanyueyue_if"] = "",
}

--------------------------------------------------
--散礼
--------------------------------------------------

sanli = sgs.CreateTriggerSkill{
	name = "sanli" ,
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardsMoveOneTime, sgs.BeforeCardsMove},
	--view_as_skill = sanlivs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardsMoveOneTime then
			if room:getTag("FirstRound"):toBool() then return end
			local move = data:toMoveOneTime()
			if move.reason.m_skillName == self:objectName() then return end	--禁止两个同样的技能互相给
			if move.to and move.to:objectName() ~= player:objectName() then return end
			if player:getMark("sanli_used") > 0 then return end	--每回合限一次
			if move.to_place == sgs.Player_PlaceHand then
				local cards = move.card_ids
				if cards:isEmpty() then return end
				
				--for _,cd in sgs.qlist(player:getHandcards()) do	--补齐全部手牌作为可分配牌
				--	if not cards:contains(cd:getId()) then
				--		cards:append(cd:getId())
				--	end
				--end
				
				player:setTag("QingjianCurrentMoveSkill", sgs.QVariant(move.reason.m_skillName))	--AI用
				local new_reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, player:objectName(), nil, self:objectName(), "")
				while player:isAlive() and room:askForYiji(player, cards, "sanli", false, false, true, -1, sgs.SPlayerList(), new_reason, "#sanli", false) do
					
				end
				player:removeTag("QingjianCurrentMoveSkill")
				
				for _, card_id in sgs.qlist(move.card_ids) do
					local i = move.card_ids:indexOf(card_id)
					if not cards:contains(card_id) then
						move.card_ids:removeOne(card_id)
						move.from_places:removeAt(i)
					end
				end
				data:setValue(move)
			end
			return false
		elseif event == sgs.BeforeCardsMove then	--次数限制必须在给牌前计入，防止被其他技能截胡
			if room:getTag("FirstRound"):toBool() then return end
			local move = data:toMoveOneTime()
			if move.from and player:objectName() == move.from:objectName() and move.reason.m_skillName == "sanli" and move.reason.m_reason == sgs.CardMoveReason_S_REASON_GIVE then
				room:setPlayerMark(player, "sanli_used", 1)
			end
		end
	end
}
table.insert(turn_end_clear_mark, "sanli_used")	--回合结束清除标记

xiachuanyueyue_if:addSkill(sanli)

sgs.LoadTranslationTable{
	["sanli"] = "散礼",
	[":sanli"] = "每回合限一次，你获得手牌后，你可以分配任意张获得的牌。",
	["#sanli"] = "你可以发动“散礼”，分配获得的牌<br/>操作提示：<br/>分配牌：选择若干张牌→选择一名角色→确定<br/>不分配：取消",
	["$sanli"] = "",
}

--------------------------------------------------
--酣饮
--------------------------------------------------

hanyin_vs = sgs.CreateViewAsSkill{
	name = "hanyin",
	n = 0,
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		if #cards == 0 then
			local analeptic = sgs.Sanguosha:cloneCard("analeptic", sgs.Card_NoSuit, 0)
			analeptic:setSkillName(self:objectName())
			return analeptic
		end
	end,
	enabled_at_play = function(self, player)
		if player:getMark("&hanyin+used+_lun") == 0 and player:getHandcardNum() <= 1 then
			local newanal = sgs.Sanguosha:cloneCard("analeptic", sgs.Card_NoSuit, 0)
			if player:isCardLimited(newanal, sgs.Card_MethodUse) or player:isProhibited(player, newanal) then return false end
			local result = player:usedTimes("Analeptic") <= sgs.Sanguosha:correctCardTarget(sgs.TargetModSkill_Residue, player, newanal)
			newanal:deleteLater()
			return result
		end
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		if player:getMark("&hanyin+used+_lun") == 0 and player:getHandcardNum() <= 1 then
			return string.find(pattern, "analeptic")
		end
		return false
	end
}
hanyin = sgs.CreateTriggerSkill{
	name = "hanyin",
	view_as_skill = hanyin_vs,
	events = {sgs.PreCardUsed},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PreCardUsed then
			if data:toCardUse().card:getSkillName() == "hanyin" then
				room:setPlayerMark(player, "&hanyin+used+_lun", 1)
			end
		end
	end
}

xiachuanyueyue_if:addSkill(hanyin)

sgs.LoadTranslationTable{
	["hanyin"] = "酣饮",
	[":hanyin"] = "每轮限一次，你的手牌数≤1时，你可以视为使用一张【酒】。",
	["$hanyin"] = "",
}

--------------------------------------------------
--醉甜迷猫 小铃久绘
--设计者：--
--------------------------------------------------

xiaolingjiuhui_zuitianmimao = sgs.General(extension,"xiaolingjiuhui_zuitianmimao","individual","4",false)

sgs.LoadTranslationTable{
	["xiaolingjiuhui_zuitianmimao"] = "小铃久绘",
	["&xiaolingjiuhui_zuitianmimao"] = "小铃久绘",
	["#xiaolingjiuhui_zuitianmimao"] = "醉甜迷猫",
	["$xiaolingjiuhui_zuitianmimao"] = "一般",
	["designer:xiaolingjiuhui_zuitianmimao"] = "NSX",
	["cv:xiaolingjiuhui_zuitianmimao"] = "",
	["illustrator:xiaolingjiuhui_zuitianmimao"] = "",
	["~xiaolingjiuhui_zuitianmimao"] = "",
}

--------------------------------------------------
--魔糕
--------------------------------------------------

mogao = sgs.CreateTriggerSkill{
	name = "mogao",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart, sgs.BeforeCardsMove, sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data)
		local room = player:getRoom()
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			local cards = sgs.CardList()
			for _,p in sgs.qlist(room:getOtherPlayers(player)) do
				for _, c in sgs.qlist(p:getHandcards()) do
					cards:append(c)
				end
			end
			if not cards:isEmpty() then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:broadcastSkillInvoke(self:objectName()) --播放配音
				local card = cards:at(math.random(0, cards:length() - 1))
				local id = card:getId()
				local from = room:getCardOwner(id)
				room:showCard(from, id, player, true, false)	--仅自己（和目标）可见，不触发时机
				--room:getThread():delay(500)
				
				local _data = sgs.QVariant()
				_data:setValue(from)
				local card2 = room:askForCard(player, ".|.|.|hand", "@mogao_swap:" .. from:objectName() .. ":" .. card:objectName(), _data, sgs.Card_MethodNone)
				if card2 and player:canEffect(from, self:objectName()) then
					room:setCardFlag(card2, "&migao")	--可见手牌下标
					--room:setCardFlag(card, "-&migao")	--防止换回来的牌仍然带有标记效果
					local exchangeMove = sgs.CardsMoveList()
					exchangeMove:append(sgs.CardsMoveStruct(card2:getId(), from, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, player:objectName(), from:objectName(), self:objectName(), "")))
					exchangeMove:append(sgs.CardsMoveStruct(card:getId(), player, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_SWAP, from:objectName(), player:objectName(), self:objectName(), "")))
					player:setFlags("Not_clear_card_flag")	--避免flag被立即清除
					room:moveCardsAtomic(exchangeMove, false)
					player:setFlags("-Not_clear_card_flag")
				end
			end
		elseif (event == sgs.BeforeCardsMove or event == sgs.CardsMoveOneTime) and player:getLevelSkillState(self:objectName()) >= 2 then	--注意，reason为letuse为被要求使用，如所有闪均为letuse，因此这里必须判断BASIC_REASON
			local move = data:toMoveOneTime()
			if move and bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_USE and move.card_ids:length() > 0 then
				for _, id in sgs.qlist(move.card_ids) do
					local card = sgs.Sanguosha:getCard(id)
					if not card then continue end
					
					if event == sgs.BeforeCardsMove and card:hasFlag("&migao") then
						room:setCardFlag(card, "mogao_trigger")
					elseif event == sgs.CardsMoveOneTime and card:hasFlag("mogao_trigger") then
						room:setCardFlag(card, "-mogao_trigger")
						room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
						player:drawCards(1, self:objectName())
					end
				end
			end
		end
	end,
}
mogao:setLevelSkill(true)	--设置为升级技
table.insert(leave_hand_clear_flag, "&migao")	--离手清除cardflag

xiaolingjiuhui_zuitianmimao:addSkill(mogao)

sgs.LoadTranslationTable{
	["mogao"] = "魔糕",
	[":mogao"] = "锁定技，结束阶段，你随机观看其他角色的一张手牌，然后你可以将一张手牌标记为“蜜糕”与之交换。<br/><font color='#DC143C'><u><b>2级</b> “蜜糕”被使用时，你摸一张牌</u></font>。",
	["$mogao"] = "",
	["&migao"] = "蜜糕",
	["@mogao_swap"] = "你可以将一张手牌标记为蜜糕，与 %src 的 %dest 交换",
}

--------------------------------------------------
--迷食
--------------------------------------------------

mishi = sgs.CreateTriggerSkill{
	name = "mishi",
	frequency = sgs.Skill_Wake,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start and player:getMark(self:objectName()) == 0 then
			local can_trigger = false
			for _,p in sgs.qlist(room:getOtherPlayers(player)) do
				for _, c in sgs.qlist(p:getHandcards()) do
					if c:hasFlag("&migao") then
						can_trigger = true
						goto mishi_trigger_judge
					end
				end
			end
::mishi_trigger_judge::
			if can_trigger then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:setPlayerMark(player, self:objectName(), 1)
				room:doAnimate(2, "skill=EyeAnim:xiaolingjiuhui.png", "")
				room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				room:getThread():delay(2500)
				room:loseMaxHp(player, 1)
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover, false, 999)
				if player:hasSkill("mogao") and player:getLevelSkillState("mogao") == 1 then
					room:setLevelSkillState(player, "mogao", 2)
				end
			end
		end
	end,
}

xiaolingjiuhui_zuitianmimao:addSkill(mishi)

sgs.LoadTranslationTable{
	["mishi"] = "迷食",
	[":mishi"] = "觉醒技，准备阶段，若其他角色手牌中有“蜜糕”，你失去1点体力上限，"..WordState("滋养", word_ziyang_str).."1点体力，<font color='#DC143C'>升级</font>“魔糕”。",
	["$mishi"] = "",
}

--------------------------------------------------
--封金觅缘 小野寺杏砂
--设计者：--
--------------------------------------------------

xiaoyesixingsha_fengjinmiyuan = sgs.General(extension,"xiaoyesixingsha_fengjinmiyuan","individual","3",false)

sgs.LoadTranslationTable{
	["xiaoyesixingsha_fengjinmiyuan"] = "小野寺杏砂",
	["&xiaoyesixingsha_fengjinmiyuan"] = "小野寺杏砂",
	["#xiaoyesixingsha_fengjinmiyuan"] = "封金觅缘",
	["$xiaoyesixingsha_fengjinmiyuan"] = "进阶",
	["designer:xiaoyesixingsha_fengjinmiyuan"] = "月音风源",
	["cv:xiaoyesixingsha_fengjinmiyuan"] = "",
	["illustrator:xiaoyesixingsha_fengjinmiyuan"] = "",
	["~xiaoyesixingsha_fengjinmiyuan"] = "",
}

--------------------------------------------------
--企承
--------------------------------------------------

qicheng = sgs.CreateTriggerSkill{
	name = "qicheng",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart then
			if player:getPhase() == sgs.Player_Start and room:getTag("TurnLengthCount"):toInt() <= 3 then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				player:drawCards(1, self:objectName())
				room:gainMaxHp(player, 1)
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
			end
		end
		return false
	end
}

xiaoyesixingsha_fengjinmiyuan:addSkill(qicheng)

sgs.LoadTranslationTable{
	["qicheng"] = "企承",
	[":qicheng"] = "锁定技，准备阶段，若游戏轮数≤3，你增加1点体力上限，回复1点体力，摸一张牌。",
	["$qicheng"] = "",
}

--------------------------------------------------
--出逃
--------------------------------------------------

chutao = sgs.CreateTriggerSkill{
	name = "chutao",
	frequency = sgs.Skill_Wake,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_RoundStart and player:getMark(self:objectName()) == 0 then
			if player:getHp() >= 4 then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:setPlayerMark(player, self:objectName(), 1)
				room:doAnimate(2, "skill=EyeAnim:xiaoyesixingsha.png", "")
				room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				room:getThread():delay(2500)
				
				if player:hasSkill("qicheng") then
					room:detachSkillFromPlayer(player, "qicheng", false, false, true, false)	--新增最后一项代表会停止化身动画
				end
				if player:hasSkill("milian") and player:getLevelSkillState("milian") == 1 then
					room:setLevelSkillState(player, "milian", 2)
				end
				
				local thread = room:getThread()
				player:setPhase(sgs.Player_Play)
				room:broadcastProperty(player, "phase")
				if not thread:trigger(sgs.EventPhaseStart, room, player) then
					thread:trigger(sgs.EventPhaseProceeding, room, player)
				end
				thread:trigger(sgs.EventPhaseEnd, room, player)
				player:setPhase(sgs.Player_RoundStart)
				room:broadcastProperty(player, "phase")
			end
		end
	end,
}

xiaoyesixingsha_fengjinmiyuan:addSkill(chutao)

sgs.LoadTranslationTable{
	["chutao"] = "出逃",
	[":chutao"] = "觉醒技，回合开始时，若你的体力值≥4，你失去“企承”，<font color='#DC143C'>升级</font>“秘恋”，执行一个额外的出牌阶段。",
	["$chutao"] = "",
}

--------------------------------------------------
--秘恋
--------------------------------------------------

milianUseCard = sgs.CreateSkillCard{
	name = "milianUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(sgs.Self:getMark("milian_id")-1)
		return card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
	end,
	feasible = function(self, targets)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(sgs.Self:getMark("milian_id")-1)
		return card and card:targetsFeasible(targets_list, sgs.Self)
	end,
	about_to_use = function(self, room, use)
		local card_for_use = sgs.Sanguosha:getCard(use.from:getMark("milian_id")-1)
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:addPlayerHistory(use.from, getCardClassName(card_for_use), 1)
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
miliancard = sgs.CreateSkillCard{
	name = "milianvs",
	target_fixed = true,
	will_throw = false,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		local targets_list = sgs.SPlayerList()
		for _,p in sgs.qlist(room:getOtherPlayers(source)) do
			if p:hasSkill("milianvs") and p:isAlive() and not p:isKongcheng() then
				targets_list:append(p)
			end
		end
		if not targets_list:isEmpty() then
			local target = room:askForPlayerChosen(source, targets_list, self:objectName(), "@milian_target", false, false)
			if target and not target:isKongcheng() then
				local is_level_up = false
				for _,p in sgs.qlist(room:getAlivePlayers()) do
					if p:hasSkill("milian") and p:getLevelSkillState("milian") >= 2 then
						is_level_up = true
					end
				end
				
				local card_ids = sgs.IntList()
				local foot_notes = {}
				for _, card in sgs.qlist(target:getCards("h")) do
					local id = card:getId()
					card_ids:append(id)
					table.insert(foot_notes, target:getGeneralName().."+hand_area")
				end
				
				local can_choose_ids, cannot_choose_ids = sgs.IntList(), sgs.IntList()
				for _, id in sgs.qlist(card_ids) do
					local card = sgs.Sanguosha:getCard(id)
					if card then
						if is_level_up and source:canUse(card) then
							can_choose_ids:append(id)
						else
							cannot_choose_ids:append(id)
						end
					end
				end
				
				room:fillAG(card_ids, source, cannot_choose_ids, false, table.concat(foot_notes, "|"), true)
				target:setFlags("milian_target_AI")		--AI用
				local id1 = room:askForAG(source, can_choose_ids, true, self:objectName())
				target:setFlags("-milian_target_AI")	--AI用
				room:clearAG(source)
				if id1 and id1 ~= -1 then
					local use_card = sgs.Sanguosha:getCard(id1)
					--source:obtainCard(use_card, true)
					--if room:getCardOwner(id1) == source and room:getCardPlace(id1) == sgs.Player_PlaceHand then
						if use_card:targetFixed() then
							room:useCard(sgs.CardUseStruct(use_card, source, source))
						else
							room:showCard(target, id1, nil, true, false)	--先展示一下以提醒玩家，这个展示不触发时机
							room:setPlayerMark(source, "milian_id", id1+1)	--记录拼点牌，id+1避免id为0的牌的情况
							room:askForUseCard(source, "@@milianvs!", "@milianvs:"..use_card:objectName())
							room:setPlayerMark(source, "milian_id", 0)	--清理记录
						end
					--end
					--if source:getPhase() == sgs.Player_Play then
					--	room:setPlayerFlag(source, "Global_PlayPhaseTerminated")
					--end
					if not source:isKongcheng() and source:isAlive() and target:isAlive() then
						local _data = sgs.QVariant()
						_data:setValue(target)
						local card = room:askForCard(source, ".|.|.|hand!", "@milian_give:"..target:objectName(), _data, sgs.Card_MethodNone)
						if card then
							local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), target:objectName(), self:objectName(), "")
							room:moveCardTo(card, target, sgs.Player_PlaceHand, reason, false)
						end
					end
				end
			end
		end
	end
}
milianvs = sgs.CreateViewAsSkill{
	n = 0,
	name = "milianvs&",
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@milianvs!" and sgs.Self:getMark("milian_id") > 0 then
			local card = milianUseCard:clone()
			return card
		else
			local card = miliancard:clone()
			return card
		end
	end,
	enabled_at_play = function(self, player)
		local has_milian = player:hasSkill("milian")
		if not has_milian then
			for _, p in sgs.qlist(player:getSiblings()) do
				if p:isAlive() and p:hasSkill("milian") then
					has_milian = true
					break
				end
			end
		end
		return has_milian and player:usedTimes("#milianvs") < 1
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@milianvs!"
	end
}
milian = sgs.CreateTriggerSkill{
	name = "milian",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			local to = room:askForPlayerChosen(player, room:getOtherPlayers(player), self:objectName(), "@milian_start", false, false)
			if to then
				if not player:hasSkill("milianvs") then
					room:attachSkillToPlayer(player, "milianvs")
				end
				if not to:hasSkill("milianvs") then
					room:attachSkillToPlayer(to, "milianvs")
				end
			end
		end
	end
}
milian:setLevelSkill(true)	--设置为升级技

xiaoyesixingsha_fengjinmiyuan:addSkill(milian)
local skills = sgs.SkillList()
if not sgs.Sanguosha:getSkill("milianvs") then skills:append(milianvs) end	--秘恋（其他角色）
sgs.Sanguosha:addSkills(skills)

sgs.LoadTranslationTable{
	["milian"] = "秘恋",
	[":milian"] = "游戏开始时，你选择一名其他角色作为此技能的目标（不公开）。<br/><font color='#9400D3'>你/其</font> 的出牌阶段限一次，<font color='#9400D3'>你/其</font> 可以观看目标的手牌，<font color='#DC143C'><u><b>2级</b> 你可以使用其中一张，然后交给其一张手牌</u></font>。",
	["$milian"] = "",
	["milianvs"] = "秘恋",
	["milianvs>>"] = "xiaoyesixingsha",	--技能按钮上的角色小图标
	[":milianvs"] = "出牌阶段限一次，你可以观看“秘恋”另一方的手牌，<font color='#DC143C'><u><b>2级</b> 你可以使用其中一张，然后交给其一张手牌</u></font>。",
	["@milian_start"] = "请选择一名角色作为“秘恋”的目标（不公开）",
	["@milian_target"] = "请选择一名“秘恋”的目标角色",	--多个秘恋目标时适用
	["^AG_milianvs"] = "<b>秘恋</b><br/>使用牌：双击选择一张可使用的牌<br/>不使用牌：点击“确定”",
	["@milianvs"] = "请使用你选择的 %src",
	["~milianvs"] = "选择目标→确定",
	["@milian_give"] = "请交给 %src 一张手牌",
}

--------------------------------------------------
--秀外慧中 梦音茶糯
--设计者：--
--------------------------------------------------

mengyinchanuo_xiuwaihuizhong = sgs.General(extension,"mengyinchanuo_xiuwaihuizhong","individual","3",false)

sgs.LoadTranslationTable{
	["mengyinchanuo_xiuwaihuizhong"] = "梦音茶糯",
	["&mengyinchanuo_xiuwaihuizhong"] = "梦音茶糯",
	["#mengyinchanuo_xiuwaihuizhong"] = "秀外慧中",
	["$mengyinchanuo_xiuwaihuizhong"] = "简单",
	["designer:mengyinchanuo_xiuwaihuizhong"] = "NSX",
	["cv:mengyinchanuo_xiuwaihuizhong"] = "",
	["illustrator:mengyinchanuo_xiuwaihuizhong"] = "",
	["~mengyinchanuo_xiuwaihuizhong"] = "",
}

--------------------------------------------------
--娴静
--------------------------------------------------

xianjing = sgs.CreateTriggerSkill{
	name = "xianjing",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if not player:getJudgingArea():isEmpty() and myself:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. player:objectName())) and not SkillNullify(myself, self:objectName()) and myself:canEffect(player, self:objectName()) then
					room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					player:turnOver()
					local return_ids = sgs.IntList()
					for _,card in sgs.qlist(player:getJudgingArea()) do
						return_ids:append(card:getId())
					end
					local N = return_ids:length()
					if N > 0 then
						room:shuffleIntoDrawPile(myself, return_ids, self:objectName(), true)
						room:getThread():delay(250)
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

mengyinchanuo_xiuwaihuizhong:addSkill(xianjing)

sgs.LoadTranslationTable{
	["xianjing"] = "娴静",
	[":xianjing"] = "一名角色的准备阶段，若其判定区内有牌，你可以<font color='#A9A9A9'>发动此技能</font>，令其翻面，将其判定区内的牌返回牌堆。",
	["$xianjing"] = "",
	["xianjing:choice"] = "你可以发动“娴静”，令 %src 翻面，然后将其判定区内的牌返回牌堆",
}

--------------------------------------------------
--儒琴
--------------------------------------------------

ruqin = sgs.CreateTriggerSkill{
	name = "ruqin",
	global = true,
	events = {sgs.Damage, sgs.TargetSpecified, sgs.EventPhaseEnd, sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damage then
			local damage = data:toDamage()
			local source = damage.from
			if (not source) or (source:objectName() ~= player:objectName()) then return false end
			if not source:hasFlag("damage_caused_ruqin") then
				room:setPlayerFlag(source, "damage_caused_ruqin")
			end
		elseif event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if not use.card or use.card:isKindOf("SkillCard") then return false end	--排除技能卡
			local from_name = use.from:objectName()
			for _, target in sgs.qlist(use.to) do
				if from_name ~= target:objectName() and target:getMark("ruqin_from_"..from_name.."-Keep") == 0 then		--结尾为-Keep的标记不会在角色死亡时被清除
					room:setPlayerMark(target, "ruqin_from_"..from_name.."-Keep", 1)
				end
			end
		elseif event == sgs.EventPhaseEnd and player:getPhase() == sgs.Player_Play and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local target = nil
			if not player:hasFlag("damage_caused_ruqin") and not player:isSkipped(sgs.Player_Play) then
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getOtherPlayers(player)) do
					if p:isAlive() and p:getMark("ruqin_from_"..player:objectName().."-Keep") > 0 and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local to = room:askForPlayerChosen(player, targets, self:objectName(), "@ruqin", true, true)
					if to and not SkillNullify(player, self:objectName()) then
						to:drawCards(1, self:objectName())
						room:damage(sgs.DamageStruct(self:objectName(), player, to))
					end
				end
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_RoundStart and player:hasFlag("damage_caused_ruqin") then
			room:setPlayerFlag(player, "-damage_caused_ruqin")
		end
		return false
	end
}
table.insert(turn_end_clear_mark_prefix, "ruqin_from_")	--回合结束清除指定前缀的标记

mengyinchanuo_xiuwaihuizhong:addSkill(ruqin)

sgs.LoadTranslationTable{
	["ruqin"] = "儒琴",
	[":ruqin"] = "出牌阶段结束时，若你于本回合内未造成过伤害且<font color='#9400D3'>使用牌指定过其他角色</font>，你可以指定<font color='#9400D3'>其中一名角色</font>，<font color='#A9A9A9'>发动此技能</font>，其摸一张牌，然后你对其造成1点伤害。",
	["$ruqin"] = "",
	["@ruqin"] = "你可以发动“儒琴”，令一名角色摸一张牌，然后对其造成1点伤害",
}

--------------------------------------------------
--咕咕医生 露蒂丝
--设计者：--
--------------------------------------------------

ludisi_guguyisheng = sgs.General(extension,"ludisi_guguyisheng","individual","3",false)

sgs.LoadTranslationTable{
	["ludisi_guguyisheng"] = "露蒂丝",
	["&ludisi_guguyisheng"] = "露蒂丝",
	["#ludisi_guguyisheng"] = "咕咕医生",
	["$ludisi_guguyisheng"] = "简单",
	["designer:ludisi_guguyisheng"] = "空月之羽",
	["cv:ludisi_guguyisheng"] = "",
	["illustrator:ludisi_guguyisheng"] = "",
	["~ludisi_guguyisheng"] = "",
}

--------------------------------------------------
--止鸽
--------------------------------------------------

zhige_gugu_card = sgs.CreateSkillCard{
	name = "zhige_gugu",
	target_fixed = false,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and sgs.Self:canEffect(to_select, "zhige_gugu")
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		room:setCardFlag(card, "&gugu")	--可见手牌下标
		local target = targets[1]
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), target:objectName(), self:objectName(), "")
		source:setFlags("Not_clear_card_flag")	--避免flag被立即清除
		room:moveCardTo(card, target, sgs.Player_PlaceHand, reason, true)
		source:setFlags("-Not_clear_card_flag")
		
		source:drawCards(1, self:objectName())
	end
}
zhige_gugu_vs = sgs.CreateViewAsSkill{
	name = "zhige_gugu",
	n = 1,
	expand_pile = "wooden_ox",	--允许使用木牛流马
	view_filter = function(self, selected, to_select)
		return to_select:isKindOf("Slash")
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = zhige_gugu_card:clone()
			NewSkillCard:addSubcard(cards[1])
			NewSkillCard:setSkillName(self:objectName())
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#zhige_gugu") < 1
	end
}
zhige_gugu = sgs.CreateTriggerSkill{
	name = "zhige_gugu",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = zhige_gugu_vs,
	global = true,
	events = {sgs.BeforeCardsMove, sgs.CardsMoveOneTime},	--CardUsed之类的时机无法获取到flag
	on_trigger = function(self, event, player, data, room)
		if player and player:isAlive() and player:hasSkill(self:objectName()) then
			local move = data:toMoveOneTime()
			if move and (move.reason.m_reason == sgs.CardMoveReason_S_REASON_PINDIAN or (bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD and move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_DISMANTLE)) and (move.to_place == sgs.Player_DiscardPile or move.to_place == sgs.Player_PlaceTable) and move.card_ids:length() > 0 then
				for _, id in sgs.qlist(move.card_ids) do
					local card = sgs.Sanguosha:getCard(id)
					if not card then continue end
					
					if event == sgs.BeforeCardsMove and card:hasFlag("&gugu") then
						room:setCardFlag(card, "zhige_gugu_trigger")
					elseif event == sgs.CardsMoveOneTime and card:hasFlag("zhige_gugu_trigger") then
						room:setCardFlag(card, "-zhige_gugu_trigger")
						
						--Player類型轉至ServerPlayer
						local move_from
						for _,p in sgs.qlist(room:getAlivePlayers()) do
							if p:objectName() == move.from:objectName() then
								move_from = p
								break
							end
						end
						
						if move_from and move_from:isAlive() then
							local log = sgs.LogMessage()
							log.type = "#zhige_gugu_recover_log"
							log.from = move_from
							log.card_str = card:toString()
							log.arg = "&gugu"
							room:sendLog(log)	--发送信息框消息
							
							local recover = sgs.RecoverStruct()
							recover.who = move_from
							recover.recover = 1
							room:recover(move_from, recover)
						end
					end
				end
			end
		end
	end
}
table.insert(leave_hand_clear_flag, "&gugu")	--离手清除cardflag

ludisi_guguyisheng:addSkill(zhige_gugu)

sgs.LoadTranslationTable{
	["zhige_gugu"] = "止鸽",
	[":zhige_gugu"] = "出牌阶段限一次，你可以将一张【杀】标记为“咕”交给一名其他角色，摸一张牌。<br/>因拼点或弃置而失去“咕”的角色回复1点体力。",
	["$zhige_gugu"] = "",
	["&gugu"] = "咕",
	["#zhige_gugu_recover_log"] = "%from 失去的 %card 是“%arg”，将回复体力",
}

--------------------------------------------------
--医怀
--------------------------------------------------

yihuai = sgs.CreateMaxCardsSkill{
	name = "yihuai",
	extra_func = function(self, target)
		if target:hasSkill(self:objectName()) then
			return target:getMaxHp() - target:getHp()
		end
	end
}

--ludisi_guguyisheng:addSkill(yihuai)

sgs.LoadTranslationTable{
	["yihuai"] = "医怀",
	[":yihuai"] = "锁定技，你的手牌上限为你的体力上限。",
	["$yihuai"] = "",
}

--------------------------------------------------
--医怀
--------------------------------------------------

newyihuai = sgs.CreateTriggerSkill{
	name = "newyihuai",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EffectOffsetted},
	on_trigger = function(self, event, player, data, room)
		local effect = data:toCardEffect()
		if effect and effect.card and effect.card:isKindOf("Slash") and not effect.card:isKindOf("SkillCard") and not effect.card:isVirtualCard() then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if room:getCardPlace(effect.card:getEffectiveId()) == sgs.Player_PlaceTable then
					room:sendCompulsoryTriggerLog(myself, self:objectName())	--显示锁定技发动
					myself:obtainCard(effect.card, true)
				end
			end
		end
		return false
	end,
	can_trigger = function(self, target)
        return target
    end
}

ludisi_guguyisheng:addSkill(newyihuai)

sgs.LoadTranslationTable{
	["newyihuai"] = "医怀",
	[":newyihuai"] = "锁定技，当一张非转化的【杀】被抵消后，你获得此【杀】。",
	["$newyihuai"] = "",
}

--------------------------------------------------
--「后海怪物」 夏卜卜
--设计者：萌龙少主
--------------------------------------------------

xiabubu_zhixingjiejie = sgs.General(extension,"xiabubu_zhixingjiejie","individual","4",false)

sgs.LoadTranslationTable{
	["xiabubu_zhixingjiejie"] = "夏卜卜",
	["&xiabubu_zhixingjiejie"] = "夏卜卜",
	["#xiabubu_zhixingjiejie"] = "知性姐姐",
	["$xiabubu_zhixingjiejie"] = "一般",
	["designer:xiabubu_zhixingjiejie"] = "NSX、月音风源",
	["cv:xiabubu_zhixingjiejie"] = "",
	["illustrator:xiabubu_zhixingjiejie"] = "",
	["~xiabubu_zhixingjiejie"] = "",
}

xiabubu_zhixingjiejie:setGender(sgs.General_Sexless)

xiabubu_zhixingjiejie2 = sgs.General(extension,"xiabubu_zhixingjiejie2","individual","4",false,true,true)

sgs.LoadTranslationTable{
	["xiabubu_zhixingjiejie2"] = "夏卜卜",
	["&xiabubu_zhixingjiejie2"] = "夏卜卜",
	["#xiabubu_zhixingjiejie2"] = "后海怪物",
	["$xiabubu_zhixingjiejie2"] = "萌新",
	["parent:xiabubu_zhixingjiejie2"] = "xiabubu_zhixingjiejie",	--本体角色名
	["designer:xiabubu_zhixingjiejie2"] = "NSX、月音风源",
	["cv:xiabubu_zhixingjiejie2"] = "",
	["illustrator:xiabubu_zhixingjiejie2"] = "",
	["~xiabubu_zhixingjiejie2"] = "",
}

xiabubu_zhixingjiejie2:setGender(sgs.General_Sexless)

--------------------------------------------------
--紫禁
--未造成过伤害继续借用儒琴（儒琴真好用）
--------------------------------------------------

zijin = sgs.CreateTriggerSkill{
	name = "zijin",
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish and not player:hasFlag("damage_caused_ruqin") then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getOtherPlayers(player)) do
				if p:canDiscard(player, "he") and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			if not targets:isEmpty() then
				local target = room:askForPlayerChosen(player, targets, self:objectName(), "@zijin_ask", true, true)
				if target and not SkillNullify(player, self:objectName()) and target:canDiscard(player, "he") then
					local throw_id = room:askForCardChosen(target, player, "he", self:objectName(), false, sgs.Card_MethodDiscard)
					room:throwCard(throw_id, player, target)
					if sgs.Sanguosha:getCard(throw_id):isKindOf("BasicCard") then
						room:broadcastSkillInvoke("audio_effect", 30)	--播放配音
						room:addRound(2)	--增加游戏轮数，默认值为1
						local log = sgs.LogMessage()
						log.type = "#zijin_addround"
						log.arg = self:objectName()
						log.arg2 = room:getTag("TurnLengthCount"):toInt()
						room:sendLog(log)	--发送信息框消息
					else
						room:damage(sgs.DamageStruct(self:objectName(), player, target))
					end
				end
			end
		end
	end
}

xiabubu_zhixingjiejie:addSkill(zijin)
xiabubu_zhixingjiejie2:addSkill(zijin)

sgs.LoadTranslationTable{
	["zijin"] = "紫禁",
	[":zijin"] = "结束阶段，若你本回合未造成过伤害，你可以指定一名其他角色，<font color='#A9A9A9'>发动此技能</font>，令其破坏你一张牌，若之为基本牌则游戏轮数＋2，否则你对其造成1点伤害。",
	["$zijin"] = "",
	["@zijin_ask"] = "你可以发动“紫禁”，指定一名其他角色，其破坏你一张牌，若之不为基本牌则对其造成1点伤害",
	["#zijin_addround"] = "由于“%arg”的效果，游戏轮数增加至第 %arg2 轮",
}

--------------------------------------------------
--本怖
--------------------------------------------------

benbu = sgs.CreateTriggerSkill{
	name = "benbu",
	frequency = sgs.Skill_Wake,
	events = {sgs.RoundStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.RoundStart and player:getMark(self:objectName()) == 0 then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			
			local judge = sgs.JudgeStruct()
			judge.pattern = ".|.|1~"..room:getTag("TurnLengthCount"):toInt().."|."
			judge.good = true
			judge.reason = self:objectName()
			judge.who = player
			--judge.time_consuming = true	--为真耗时更少
			room:judge(judge)
			if judge:isGood() then
				room:setPlayerMark(player, self:objectName(), 1)
				room:doAnimate(2, "skill=XiabubuTransAnim:", "")
				room:broadcastSkillInvoke(self:objectName())	--播放配音
				room:getThread():delay(4312)	--69帧
				
				if player:getGeneralName() == "xiabubu_zhixingjiejie" then
					room:setPlayerProperty(player, "general", sgs.QVariant("xiabubu_zhixingjiejie2"))	--更换武将卡面
				end
				--room:loseMaxHp(player, 1)
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
				room:acquireSkill(player, "chushou")
			end
		end
	end,
}

xiabubu_zhixingjiejie:addSkill(benbu)
xiabubu_zhixingjiejie2:addSkill(benbu)

sgs.LoadTranslationTable{
	["benbu"] = "本怖",
	[":benbu"] = "觉醒技，<font color='#4B0082'><b>变身技，</b></font>轮次开始时，进行一次判定，若结果点数≤游戏轮数，你回复1点体力，获得“触手”。",
	["$benbu"] = "（变身音效）",
}

--------------------------------------------------
--触手
--------------------------------------------------

chushoubuff = sgs.CreateMaxCardsSkill{
	name = "#chushoubuff" ,
	extra_func = function(self, player)
		if player and player:isAlive() and player:getMark("&chushou!") > 0 then
			return -player:getMark("&chushou!")
		end
	end
}
chushou = sgs.CreateTriggerSkill{
	name = "chushou",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.from and damage.from:isAlive() --[[and damage.from:getMark("chushou_"..player:objectName().."_used") == 0]] and damage.from:objectName() ~= player:objectName() and player:canEffect(damage.from, self:objectName()) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:doAnimate(1, player:objectName(), damage.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				room:getThread():delay(250)
				--room:setPlayerMark(damage.from, "chushou_"..player:objectName().."_used", 1)
				room:addPlayerMark(damage.from, "&chushou!", 1)
				room:addPlayerMark(player, "&chushou!", 1)
				room:damage(sgs.DamageStruct(self:objectName(), player, damage.from))
			end
		end
	end
}
--table.insert(turn_end_clear_mark, "&chushou!")	--回合结束清除标记

vup_anjiang:addSkill(chushou)	--加给暗将
vup_anjiang:addSkill(chushoubuff)	--加给暗将
xiabubu_zhixingjiejie:addRelateSkill("chushou")
xiabubu_zhixingjiejie2:addRelateSkill("chushou")

sgs.LoadTranslationTable{
	["chushou"] = "触手",
	["chushoubuff"] = "触手",
	[":chushou"] = "锁定技，你受到伤害后，对伤害来源造成1点伤害，你与其手牌上限－1。",
	["$chushou"] = "",
	--[":mark:&chushou"] = "手牌上限减少为0",
}

--------------------------------------------------
--角色特性：不可认知
--------------------------------------------------

characteristic_bukerenzhi = sgs.CreateTriggerSkill{
	name = "#characteristic_bukerenzhi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.RoundStart},
	on_trigger = function(self, event, player, data, room)
		if room:getTag("TurnLengthCount"):toInt() >= 3 and player:getMark("hide_handcardnum") == 0 then
			room:sendCompulsoryTriggerLog(player, "characteristic_bukerenzhi")	--显示锁定技发动
			room:setPlayerMark(player, "hide_handcardnum", 1)
			RefreshHandcards(player)
		end
	end,
}
characteristic_bukerenzhi_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_bukerenzhi_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_bukerenzhi_state)
zhenliyuanhuan_yishijiedezhipeizhe:addSkill(characteristic_bukerenzhi)
zhenliyuanhuan_yishijiedezhipeizhe:addRelateSkill("characteristic_bukerenzhi_state")
zhenliyuanhuan_yishijiedezhipeizhe2:addSkill(characteristic_bukerenzhi)
zhenliyuanhuan_yishijiedezhipeizhe2:addRelateSkill("characteristic_bukerenzhi_state")
xiabubu_zhixingjiejie:addSkill(characteristic_bukerenzhi)
xiabubu_zhixingjiejie:addRelateSkill("characteristic_bukerenzhi_state")

sgs.LoadTranslationTable{
	["characteristic_bukerenzhi"] = "不可认知",
	["#characteristic_bukerenzhi"] = "不可认知",
	["characteristic_bukerenzhi_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_bukerenzhi_state"] = "<font color='#DAA520'><b>不可认知</b><br/>你的明置改为展示；不可查看你的已知牌；第三轮开始后，你的手牌数不可见。</font>",
	["$characteristic_bukerenzhi_state"] = "",
	["bukerenzhi_log0"] = "禁止访问！",
	["bukerenzhi_log1"] = "错误，认知系统错误",
	["bukerenzhi_log2"] = "▓▓▓▓▓▓",
	["bukerenzhi_log3"] = "你还未献上祭品",
	["bukerenzhi_log4"] = "为了您的精神安全，已屏蔽",
	["bukerenzhi_log5"] = "权限不足",
	["bukerenzhi_log6"] = "你无法直视",
	["bukerenzhi_log7"] = "深渊在凝视你",
	["bukerenzhi_log8"] = "烫烫烫烫烫烫",
	["bukerenzhi_log9"] = "Permission request failed!",
}

--------------------------------------------------
--呆呆化身 卜卜子
--设计者：萌龙少主
--------------------------------------------------

bubuzi_daidaihuashen = sgs.General(extension,"bubuzi_daidaihuashen","individual","4",false)

sgs.LoadTranslationTable{
	["bubuzi_daidaihuashen"] = "卜卜子",
	["&bubuzi_daidaihuashen"] = "卜卜子",
	["#bubuzi_daidaihuashen"] = "呆呆化身",
	["$bubuzi_daidaihuashen"] = "萌新",
	["designer:bubuzi_daidaihuashen"] = "望月时雨",
	["cv:bubuzi_daidaihuashen"] = "",
	["illustrator:bubuzi_daidaihuashen"] = "",
	["~bubuzi_daidaihuashen"] = "（噗通）10分！",
}

bubuzi_daidaihuashen:setGender(sgs.General_Sexless)

--------------------------------------------------
--给我心心
--------------------------------------------------

geiwoxinxin = sgs.CreateTriggerSkill{
	name = "geiwoxinxin",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.from and damage.from:isAlive() and not damage.from:isNude() and damage.from:objectName() ~= player:objectName() and player:canEffect(damage.from, self:objectName()) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:doAnimate(1, player:objectName(), damage.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				player:setFlags("geiwoxinxin_receiver_AI")		--AI用
				local dummy = room:askForExchange(damage.from, self:objectName(), 1, 1, true, "#geiwoxinxin_give:" .. player:objectName(), false)
				player:setFlags("-geiwoxinxin_receiver_AI")		--AI用
				if dummy and dummy:subcardsLength() > 0 then
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, damage.from:objectName(), player:objectName(), self:objectName(), "")
					room:moveCardTo(dummy, player, sgs.Player_PlaceHand, reason, false)
				end
				dummy:deleteLater()
			end
		end
	end
}

bubuzi_daidaihuashen:addSkill(geiwoxinxin)

sgs.LoadTranslationTable{
	["geiwoxinxin"] = "给我心心",
	[":geiwoxinxin"] = "锁定技，你受到伤害后，伤害来源须交给你一张牌。",
	["$geiwoxinxin"] = "",
	["#geiwoxinxin_give"] = "请交给 %src 一张牌（包括装备区的牌）",
}

--------------------------------------------------
--跳水表演
--------------------------------------------------

tiaoshuibiaoyancard = sgs.CreateSkillCard{
	name = "tiaoshuibiaoyan",
	filter = function(self, targets, to_select)
		return to_select:objectName() ~= sgs.Self:objectName() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
	end,
	on_use = function(self, room, source, targets)
		if not SkillNullify(source, self:objectName()) then
			--room:doPicAnimate(source:objectName(), "skill/bubuzi")	--doPicAnimate:令指定玩家短暂显示一张图片
			source:loseMark("@tiaoshuibiaoyan", 1)
			room:setEmotion(source, "tiaoshuibiaoyan")
			room:broadcastSkillInvoke(self:objectName())	--播放配音
			room:getThread():delay(3500)
			local dice = {}	--生成不规则骰子
			for i=0,#targets,1 do
				table.insert(dice, i)
				if i < #targets/2.0 then	--小点数多增加1面
					table.insert(dice, i)
				end
			end
			local X = dice[math.random(1, #dice)]
			if X == 0 then
				local log = sgs.LogMessage()
				log.type = "#tiaoshuibiaoyan_perfect"
				log.from = source
				log.arg = "tiaoshuibiaoyan"
				room:sendLog(log)	--发送信息框消息
			else
				room:damage(sgs.DamageStruct(self:objectName(), source, source, X, sgs.DamageStruct_Normal))
			end
			room:getThread():delay(1000)
			if source:isAlive() then
				room:sendCompulsoryTriggerLog(source, "geiwoxinxin")	--显示锁定技发动
				for _, target in ipairs(targets) do
					if target and target:isAlive() and not target:isNude() and target:objectName() ~= source:objectName() then
						source:setFlags("geiwoxinxin_receiver_AI")		--AI用
						local dummy = room:askForExchange(target, self:objectName(), 1, 1, true, "#geiwoxinxin_give:" .. source:objectName(), false)
						source:setFlags("-geiwoxinxin_receiver_AI")		--AI用
						if dummy and dummy:subcardsLength() > 0 then
							local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, target:objectName(), source:objectName(), self:objectName(), "")
							room:moveCardTo(dummy, source, sgs.Player_PlaceHand, reason, false)
						end
						dummy:deleteLater()
					end
				end
			end
		end
	end
}
--[[tiaoshuibiaoyanvs = sgs.CreateZeroCardViewAsSkill{
	name = "tiaoshuibiaoyan",
	view_as = function()
		return tiaoshuibiaoyancard:clone()
	end,
	enabled_at_play = function(self, player)
		return player:getMark("@tiaoshuibiaoyan") > 0
	end
}
tiaoshuibiaoyan = sgs.CreateTriggerSkill{
	name = "tiaoshuibiaoyan",
	frequency = sgs.Skill_Limited,
	view_as_skill = tiaoshuibiaoyanvs,
	limit_mark = "@tiaoshuibiaoyan",
	on_trigger = function()
	end
}]]
tiaoshuibiaoyanvs = sgs.CreateZeroCardViewAsSkill{
	name = "tiaoshuibiaoyan",
	response_pattern = "@@tiaoshuibiaoyan",
	view_as = function()
		return tiaoshuibiaoyancard:clone()
	end
}
tiaoshuibiaoyan = sgs.CreateTriggerSkill{
	name = "tiaoshuibiaoyan",
	frequency = sgs.Skill_Limited,
	events = {sgs.EventPhaseStart, sgs.Death},
	view_as_skill = tiaoshuibiaoyanvs,
	limit_mark = "@tiaoshuibiaoyan",
	on_trigger = function(self, event, player, data, room)
		if player:getPhase() == sgs.Player_Finish and player:getMark("@tiaoshuibiaoyan") > 0 then
			room:askForUseCard(player, "@@tiaoshuibiaoyan", "@tiaoshuibiaoyan_log")
		elseif event == sgs.Death and player:getMark("@tiaoshuibiaoyan") == 0 then
			local death = data:toDeath()
			if death.who:objectName() ~= player:objectName() and player:isAlive() then
				room:sendCompulsoryTriggerLog(player, "geiwoxinxin")	--显示锁定技发动
				player:gainMark("@tiaoshuibiaoyan", 1)
			end
		end
	end
}

bubuzi_daidaihuashen:addSkill(tiaoshuibiaoyan)

sgs.LoadTranslationTable{
	["tiaoshuibiaoyan"] = "跳水表演",
	["@tiaoshuibiaoyan"] = "十分！",
	[":tiaoshuibiaoyan"] = "限定技，结束阶段，你可以指定X名其他角色，<font color='#A9A9A9'>发动此技能</font>，随机受到0~X点落水伤害，视为对这些角色发动“给我心心”。<br/>有角色离场后，重置此技能。",
	["$tiaoshuibiaoyan"] = "叮~叮~咚！咻→↘噗通！",
	--["^tiaoshuibiaoyan"] = "操作提示：<br/>选择任意名角色→确定",
	["@tiaoshuibiaoyan_log"] = "你可以发动“跳水表演”，指定任意名角色",
	["~tiaoshuibiaoyan"] = "选择任意名角色→确定",
	["#tiaoshuibiaoyan_perfect"] = "%from 没有因“%arg”受到伤害，可喜可贺！",
}

--------------------------------------------------
--白玉贵族 尼奈
--设计者：
--------------------------------------------------

ninai_baiyuguizu = sgs.General(extension,"ninai_baiyuguizu","individual","3",false)

sgs.LoadTranslationTable{
	["ninai_baiyuguizu"] = "尼奈",
	["&ninai_baiyuguizu"] = "尼奈",
	["#ninai_baiyuguizu"] = "白玉贵族",
	["$ninai_baiyuguizu"] = "一般",
	["designer:ninai_baiyuguizu"] = "月音风源",
	["cv:ninai_baiyuguizu"] = "",
	["illustrator:ninai_baiyuguizu"] = "",
	["~ninai_baiyuguizu"] = "",
}

--------------------------------------------------
--白兰
--------------------------------------------------

bailan = sgs.CreateDistanceSkill{
	name = "bailan",
	correct_func = function(self, from, to)
		if from:objectName() ~= to:objectName() and to:hasSkill("bailan") then
			return 1
		end
	end
}

ninai_baiyuguizu:addSkill(bailan)

sgs.LoadTranslationTable{
	["bailan"] = "白兰",
	[":bailan"] = "锁定技，其他角色→你 距离＋1。",
	["$bailan"] = "",
}

--------------------------------------------------
--法魂
--------------------------------------------------

fahuncard = sgs.CreateSkillCard{
	name = "fahun",
	will_throw = true,
	filter = function(self, targets, to_select) 
		if #targets > 2 then return false end
		if #targets == 0 then
			return not (to_select:getEquips():isEmpty() and to_select:getJudgingArea():isEmpty())
		elseif #targets == 1 then
			local can_move = false
			local cards = sgs.QList2Table(targets[1]:getEquips())
			for _, card in ipairs(cards) do
				local equip = card:getRealCard():toEquipCard()
				local equip_index = equip:location()
				if to_select:getEquip(equip_index) == nil and to_select:hasEquipArea(equip_index) then
					can_move = true
					break
				end
			end
			local cards = sgs.QList2Table(targets[1]:getJudgingArea())
			for _, card in ipairs(cards) do
				if to_select:hasJudgeArea() and not to_select:containsTrick(card:objectName()) then
					can_move = true
					break
				end
			end
			return can_move
		elseif targets == 2 then
			return false
		end
	end,
	feasible = function(self, targets)
		return #targets == 2
	end,
	about_to_use = function(self, room, use)
		local from = use.to:first()
		local to = use.to:last()
		local source = use.from
		
		local logg = sgs.LogMessage()
		logg.from = use.from
		logg.to = use.to
		logg.type = "#UseCard"
		logg.card_str = self:toString()
		room:sendLog(logg)
		
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_THROW, use.from:objectName(), "", "fahun", "")
		room:moveCardTo(self, use.from, nil, sgs.Player_DiscardPile, reason, true)
		
		if not SkillNullify(source, self:objectName()) then
			local ids = sgs.IntList()
			local foot_notes = {}
			local cards = sgs.QList2Table(from:getEquips())
			for _, card in ipairs(cards) do
				local equip = card:getRealCard():toEquipCard()
				local equip_index = equip:location()
				if to:getEquip(equip_index) == nil and to:hasEquipArea(equip_index) then
					ids:append(card:getId())
					table.insert(foot_notes, from:getGeneralName().."+equip_area")
				end
			end
			local cards = sgs.QList2Table(from:getJudgingArea())
			for _, card in ipairs(cards) do
				if to:hasJudgeArea() and not to:containsTrick(card:objectName()) then
					ids:append(card:getId())
					table.insert(foot_notes, from:getGeneralName().."+judge_area+"..card:objectName())
				end
			end
			room:fillAG(ids, source, sgs.IntList(), false, table.concat(foot_notes, "|"), true)
			local id = room:askForAG(source, ids, false, self:objectName())
			room:clearAG()
			local card = sgs.Sanguosha:getCard(id)
			room:broadcastSkillInvoke("audio_effect", 20)	--播放配音（换装备）
			room:moveCardTo(card, from, to, card:isKindOf("EquipCard") and sgs.Player_PlaceEquip or sgs.Player_PlaceDelayedTrick, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, source:objectName(), self:objectName(), ""))
			
			if source and source:isAlive() then
				room:setPlayerMark(source, "&fahun", 1)		--技能无效同神语，耦合入源码
			end
		end
	end,
}
fahunvs = sgs.CreateViewAsSkill{
	name = "fahun",
	n = 1,
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		if #cards ~= 0 then
			local card = fahuncard:clone()
			for _, c in ipairs(cards) do
				card:addSubcard(c)
			end
			return card
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@fahun"
	end
}
fahun = sgs.CreateTriggerSkill{
	name = "fahun",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = fahunvs,
	events = {sgs.EventPhaseStart, sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getPhase() == sgs.Player_Start and not player:isKongcheng() then
			room:askForUseCard(player, "@@fahun", "@fahun")
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.from == sgs.Player_NotActive and change.to ~= sgs.Player_NotActive and player:getMark("&fahun") > 0 then
				room:setPlayerMark(player, "&fahun", 0)
			end
		end
	end
}

ninai_baiyuguizu:addSkill(fahun)

sgs.LoadTranslationTable{
	["fahun"] = "法魂",
	[":fahun"] = "准备阶段，你可以弃置一张手牌<font color='#A9A9A9'>发动此技能</font>，移动场上的一张牌，你的所有技能无效直到下个回合开始。",
	["@fahun"] = "你可以发动“法魂”，弃置一张手牌，移动场上的一张牌",
	["~fahun"] = "选择一张要弃置的手牌→选择被移动牌的角色→选择移动到的角色→确定",
	["$fahun"] = "",
	["^AG_fahun"] = "<b>法魂</b><br/>双击以选择要移动的牌",
	[":mark:&fahun"] = "所有技能无效",
}

--------------------------------------------------
--比萌巨兽 萨比萌
--设计者：
--------------------------------------------------

sabimeng_bimengjushou = sgs.General(extension,"sabimeng_bimengjushou","individual","6",false)

sgs.LoadTranslationTable{
	["sabimeng_bimengjushou"] = "萨比萌",
	["&sabimeng_bimengjushou"] = "萨比萌",
	["#sabimeng_bimengjushou"] = "比萌巨兽",
	["$sabimeng_bimengjushou"] = "简单",
	["designer:sabimeng_bimengjushou"] = "NSX",
	["cv:sabimeng_bimengjushou"] = "",
	["illustrator:sabimeng_bimengjushou"] = "",
	["~sabimeng_bimengjushou"] = "",
}

--------------------------------------------------
--视幻
--------------------------------------------------

shihuanbuff = sgs.CreateMaxCardsSkill{
	name = "#shihuanbuff",
	extra_func = function(self, target)
		if target:getMark("&shihuan!") > 0 then
			return target:getMark("&shihuan!") - target:getHp()
		end
	end
}
shihuan = sgs.CreateTriggerSkill{
	name = "shihuan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:getMark("shihuan_lun") == 0 and myself:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. player:objectName() .. ":" .. math.max(1, player:getHandcardNum()))) and not SkillNullify(myself, self:objectName()) and myself:canEffect(player, self:objectName()) then
					room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					local log = sgs.LogMessage()
					log.type = "#shihuan_log"
					log.to:append(player)
					log.arg = self:objectName()
					log.arg2 = math.max(1, player:getHandcardNum())
					room:sendLog(log)	--发送信息框消息
					
					room:setPlayerMark(myself, "shihuan_lun", 1)
					room:setPlayerMark(player, "&shihuan!", math.max(1, player:getHandcardNum()))
					break
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}
table.insert(turn_end_clear_mark, "&shihuan!")	--回合结束清除标记

sabimeng_bimengjushou:addSkill(shihuan)
sabimeng_bimengjushou:addSkill(shihuanbuff)

sgs.LoadTranslationTable{
	["shihuan"] = "视幻",
	["#shihuanbuff"] = "视幻",
	[":shihuan"] = "每轮限一次，一名角色的准备阶段，你可以<font color='#A9A9A9'>发动此技能</font>，令其本回合手牌上限等于X。（X为其手牌数且至少为1）",
	["$shihuan"] = "",
	["shihuan:choice"] = "你可以发动“视幻”，令 %src 本回合的手牌上限变为 %dest",
	["#shihuan_log"] = "由于“%arg”的效果，%to 本回合手牌上限变为 %arg2",
}

--------------------------------------------------
--可餐
--------------------------------------------------

kecan = sgs.CreateTriggerSkill{
	name = "kecan",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.from and damage.from:isAlive() and player:canEffect(damage.from, self:objectName()) then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			local judge = sgs.JudgeStruct()
			judge.pattern = "TrickCard"
			judge.good = true
			judge.reason = self:objectName()
			judge.who = damage.from
			judge.time_consuming = false
			room:judge(judge)
			if judge:isGood() then
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(damage.from, recover)
				
				room:loseMaxHp(player, 1)
			end
		end
	end
}
table.insert(turn_end_clear_mark, "&kecan")		--回合结束清除标记

sabimeng_bimengjushou:addSkill(kecan)

sgs.LoadTranslationTable{
	["kecan"] = "可餐",
	[":kecan"] = "锁定技，你受到伤害后，伤害来源进行一次判定，若结果为锦囊牌，其回复1点体力，你失去1点体力上限。",
	["$kecan"] = "",
}

--------------------------------------------------
--稻荷之狐 稻荷月
--设计者：稻荷月
--------------------------------------------------

daoheyue_daohezhihu = sgs.General(extension,"daoheyue_daohezhihu","individual","3",false)

sgs.LoadTranslationTable{
	["daoheyue_daohezhihu"] = "稻荷月",
	["&daoheyue_daohezhihu"] = "稻荷月",
	["#daoheyue_daohezhihu"] = "稻荷之狐",
	["$daoheyue_daohezhihu"] = "一般",
	["designer:daoheyue_daohezhihu"] = "稻荷月",
	["cv:daoheyue_daohezhihu"] = "",
	["illustrator:daoheyue_daohezhihu"] = "",
	["~daoheyue_daohezhihu"] = "",
}

daoheyue_daohezhihu:setGender(sgs.General_Neuter)

--------------------------------------------------
--奉献
--------------------------------------------------

fengxian = sgs.CreateTriggerSkill{
	name = "fengxian",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data)
		local room = player:getRoom()
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Start then
			local cards = sgs.CardList()
			for _,p in sgs.qlist(room:getOtherPlayers(player)) do
				for _, c in sgs.qlist(p:getHandcards()) do
					cards:append(c)
				end
			end
			if not cards:isEmpty() then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				--room:broadcastSkillInvoke(self:objectName()) --播放配音
				local card = cards:at(math.random(0, cards:length() - 1))
				local show_id = card:getId()
				local from = room:getCardOwner(show_id)
				room:showCard(from, show_id)
				local objname = card:objectName()
				
				local cards = sgs.CardList()
				for _,id in sgs.qlist(room:getDrawPile()) do
					local cd = sgs.Sanguosha:getCard(id)
					if cd:objectName() == objname then
						cards:append(cd)
					end
				end
				for _,id in sgs.qlist(room:getDiscardPile()) do
					local cd = sgs.Sanguosha:getCard(id)
					if cd:objectName() == objname then
						cards:append(cd)
					end
				end
				if not cards:isEmpty() then
					local card = cards:at(math.random(0, cards:length() - 1))
					player:obtainCard(card, true)
					if not player:isKongcheng() then
						room:moveCardsInToDrawpile(player, player:getRandomHandCard(), self:objectName(), -1, false)
					end
				end
			end
		end
	end,
}

daoheyue_daohezhihu:addSkill(fengxian)

sgs.LoadTranslationTable{
	["fengxian"] = "奉献",
	[":fengxian"] = "锁定技，准备阶段，随机展示一张其他角色的手牌，你从牌堆、弃牌堆获得一张与之同名的牌，然后将一张随机手牌返回牌堆。",
	["$fengxian"] = "",
}

--------------------------------------------------
--丰收
--------------------------------------------------

fengshou = sgs.CreateTriggerSkill{
	name = "fengshou",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseEnd},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseEnd and player:getPhase() == sgs.Player_Discard and player:getMark("discard_counter") > 0 then
			if room:askForSkillInvoke(player, self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				local amazing_grace = sgs.Sanguosha:cloneCard("amazing_grace", sgs.Card_NoSuit, 0)
				amazing_grace:setSkillName(self:objectName())
				room:useCard(sgs.CardUseStruct(amazing_grace, player, nil))
			end
		end
		return false
	end
}

daoheyue_daohezhihu:addSkill(fengshou)

sgs.LoadTranslationTable{
	["fengshou"] = "丰收",
	[":fengshou"] = "弃牌阶段结束时，若你本阶段弃置过牌，你可以<font color='#A9A9A9'>发动此技能</font>，视为使用一张【五谷丰登】。",
	["$fengshou"] = "",
}

--------------------------------------------------
--布恩
--------------------------------------------------

buen = sgs.CreateTriggerSkill{
	name = "buen",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetConfirming},
	on_trigger = function(self, event, player, data, room)
		if not player:canDiscard(player, "he") then return false end
		local use = data:toCardUse()
		if use.card and use.card:isNDTrick() and use.to:contains(player) and not use.card:isKindOf("Collateral") then
			local players = room:getOtherPlayers(player)
			for _, p in sgs.qlist(use.to) do
				players:removeOne(p)
			end
			for _, p in sgs.qlist(players) do
				if use.from and use.from:objectName() == p:objectName() and
				(use.card:isKindOf("Duel") or use.card:isKindOf("Snatch") or use.card:isKindOf("Dismantlement") or use.card:isKindOf("SavageAssault") or use.card:isKindOf("ArcheryAttack"))
				then
					players:removeOne(p)
				end
			end
			for _, p in sgs.qlist(players) do
				if room:isProhibited(use.from, p, use.card) then
					players:removeOne(p)
				end
			end
			if use.to:length() > 1 then
				for _, p in sgs.qlist(use.to) do
					players:append(p)
				end
			end
			for _, p in sgs.qlist(players) do
				if not SkillCanTarget(p, player, self:objectName()) then
					players:removeOne(p)
				end
			end
			if not players:isEmpty() then
				room:setTag("buenData", data)
				local to = room:askForPlayerChosen(player, players, self:objectName(), "buen-invoke:"..use.card:objectName(), true, true)
				if to then
					if player:canDiscard(player, "he") and room:askForDiscard(player, self:objectName(), 1, 1, false, true) and not SkillNullify(player, self:objectName()) then
						if use.to:contains(to) then
							use.to:removeOne(to)
							room:broadcastSkillInvoke(self:objectName(), 1)
						else
							use.to:append(to)
							room:broadcastSkillInvoke(self:objectName(), 2)
						end
						room:sortByActionOrder(use.to)
						data:setValue(use)
						
						local log = sgs.LogMessage()
						log.type = "#buen_log"
						log.arg = self:objectName()
						log.card_str = use.card:toString()
						log.from = use.from
						log.to = use.to
						room:sendLog(log)	--发送信息框消息
					end
				end
				room:removeTag("buenData")
			end
		end
		return false
	end
}

daoheyue_daohezhihu:addSkill(buen)

sgs.LoadTranslationTable{
	["buen"] = "布恩",
	[":buen"] = "你成为普通锦囊牌的目标时，你可以指定一名 <font color='#9400D3'>目标/非目标</font> 角色、弃置一张牌<font color='#A9A9A9'>发动此技能</font>，<font color='#9400D3'>取消此目标/令其成为目标</font>，目标数不能为0。",
	["buen-invoke"] = "你可以指定一名角色，然后弃置一张牌发动“布恩”，令其成为或不再成为此 %src 的目标<br/><b>操作提示</b>: 选择一名角色→点击确定<br/>",
	["$buen"] = "",
	["#buen_log"] = "由于“%arg”的效果，%from 使用的 %card 目标改为 %to",
}

--------------------------------------------------
--分花拂桃 桃水纪
--设计者：
--------------------------------------------------

taoshuiji_fenhuafutao = sgs.General(extension,"taoshuiji_fenhuafutao","individual","4",false)

sgs.LoadTranslationTable{
	["taoshuiji_fenhuafutao"] = "桃水纪",
	["&taoshuiji_fenhuafutao"] = "桃水纪",
	["#taoshuiji_fenhuafutao"] = "分花拂桃",
	["$taoshuiji_fenhuafutao"] = "萌新",
	["designer:taoshuiji_fenhuafutao"] = "NSX",
	["cv:taoshuiji_fenhuafutao"] = "",
	["illustrator:taoshuiji_fenhuafutao"] = "",
	["~taoshuiji_fenhuafutao"] = "",
}

--------------------------------------------------
--蓁惹
--------------------------------------------------

zhenre = sgs.CreateTriggerSkill{
	name = "zhenre",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.TargetConfirmed},
	on_trigger = function(self, event, player, data, room)
		local use = data:toCardUse()
		if use.card and not use.card:isKindOf("SkillCard") and use.card:isKindOf("Slash") and (use.card:getSuit() == sgs.Card_Heart or use.card:getSuit() == sgs.Card_Spade) and use.to and use.to:contains(player) then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			local nullified_list = use.nullified_list	--无效目标列表
			table.insert(nullified_list, player:objectName())
			use.nullified_list = nullified_list
			data:setValue(use)
		end
		return false
	end
}

taoshuiji_fenhuafutao:addSkill(zhenre)

sgs.LoadTranslationTable{
	["zhenre"] = "蓁惹",
	[":zhenre"] = "锁定技，红桃黑桃花色的【杀】对你无效。",
	["$zhenre"] = "",
}

--------------------------------------------------
--芳仙
--------------------------------------------------

fangxian = sgs.CreateTriggerSkill{
	name = "fangxian",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseChanging, sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Draw and not player:isSkipped(sgs.Player_Draw) then
				if room:askForSkillInvoke(player, self:objectName(), data) then
					player:skip(change.to)
					if not SkillNullify(player, self:objectName()) then
						room:setPlayerMark(player, "&fangxian", 1)
					end
				end
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish and player:getMark("&fangxian") > 0 then
			room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			local target = room:askForPlayerChosen(player, room:getAlivePlayers(), self:objectName(), "@fangxian-invoke", true, false)
			if target and player:canEffect(target, self:objectName()) then
				room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(target, recover)
			else
				player:drawCards(2, self:objectName())
			end
		end
		return false
	end
}
table.insert(turn_end_clear_mark, "&fangxian")	--回合结束清除标记

taoshuiji_fenhuafutao:addSkill(fangxian)

sgs.LoadTranslationTable{
	["fangxian"] = "芳仙",
	[":fangxian"] = "你可以跳过摸牌阶段<font color='#A9A9A9'>发动此技能</font>，本回合的结束阶段你选择一项：1.摸两张牌；2.令一名角色回复1点体力。",
	["$fangxian"] = "",
	[":mark:&fangxian"] = "结束阶段可以摸两张牌或令一名角色回复体力",
	["@fangxian-invoke"] = "你可以令一名角色回复1点体力，或令你摸两张牌<br/>操作提示：<br/>①回复体力：选择一名角色→确定<br/>②摸两张牌：取消",
}

--------------------------------------------------
--破灭之枪 战月
--设计者：--
--------------------------------------------------

zhanyue_pomiezhiqiang = sgs.General(extension,"zhanyue_pomiezhiqiang","individual","4",false)

sgs.LoadTranslationTable{
	["zhanyue_pomiezhiqiang"] = "战月",
	["&zhanyue_pomiezhiqiang"] = "战月",
	["#zhanyue_pomiezhiqiang"] = "破灭之枪",
	["designer:zhanyue_pomiezhiqiang"] = "NSX",
	["cv:zhanyue_pomiezhiqiang"] = "",
	["illustrator:zhanyue_pomiezhiqiang"] = "",
	["~zhanyue_pomiezhiqiang"] = "",
}

zhanyue_pomiezhiqiang:setGender(sgs.General_Neuter)

--------------------------------------------------
--默月
--------------------------------------------------

moyue = sgs.CreateTriggerSkill{
	name = "moyue",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardsMoveOneTime},
	on_trigger = function(self, event, player, data)
		local room = player:getRoom()
		local move = data:toMoveOneTime()
		if (move.from == nil) or (move.from:objectName() == player:objectName()) then return false end
		if (move.to_place == sgs.Player_DiscardPile)
				and ((bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD)
				or (move.reason.m_reason == sgs.CardMoveReason_S_REASON_JUDGEDONE)) then
			local card_ids = sgs.IntList()
			local i = 0
			for _, card_id in sgs.qlist(move.card_ids) do
				if (sgs.Sanguosha:getCard(card_id):getSuit() == sgs.Card_Spade or sgs.Sanguosha:getCard(card_id):isKindOf("SPMoonSpear"))
						and (((move.reason.m_reason == sgs.CardMoveReason_S_REASON_JUDGEDONE)
						and (move.from_places:at(i) == sgs.Player_PlaceJudge)
						and (move.to_place == sgs.Player_DiscardPile))
						or ((move.reason.m_reason ~= sgs.CardMoveReason_S_REASON_JUDGEDONE)
						and (room:getCardPlace(card_id) == sgs.Player_DiscardPile)
						and ((move.from_places:at(i) == sgs.Player_PlaceHand) or (move.from_places:at(i) == sgs.Player_PlaceEquip)))) then
					card_ids:append(card_id)
				end
				i = i + 1
			end
			if card_ids:isEmpty() then
				return false
			elseif player:askForSkillInvoke(self:objectName(), sgs.QVariant(Ternary((player:getHandcardNum() + card_ids:length()) <= 4, "get:", "get_discard:") .. move.from:objectName() .. ":" .. card_ids:length() .. ":" .. 4)) and not SkillNullify(player, self:objectName()) then
				if not card_ids:isEmpty() then
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					for _, id in sgs.qlist(card_ids) do
						if room:getCardPlace(id) == sgs.Player_DiscardPile then
							dummy:addSubcard(id)
						end
					end
					if dummy:subcardsLength() > 0 then
						player:obtainCard(dummy, true)
					end
					dummy:deleteLater()
				end
				local discard_num = player:getHandcardNum() - 4
				if discard_num > 0 then
					room:askForDiscard(player, self:objectName(), discard_num, discard_num, false, false)
				end
			end
		end
		return false
	end
}

zhanyue_pomiezhiqiang:addSkill(moyue)

sgs.LoadTranslationTable{
	["moyue"] = "默月",
	[":moyue"] = "当其他角色因弃置、破坏或判定将黑桃牌或【银月枪】置入弃牌堆后，你可以<font color='#A9A9A9'>发动此技能</font>，获得之，然后将手牌数弃置至4张。",
	["$moyue"] = "",
	["moyue:get"] = "你可以发动“默月”，获得 %src 置入弃牌堆的 %dest 张牌",
	["moyue:get_discard"] = "你可以发动“默月”，获得 %src 置入弃牌堆的 %dest 张牌，然后将手牌数弃置至 %arg 张",
}

--------------------------------------------------
--贯袭
--“本回合内被某角色指定过”借用儒琴
--注意：自我指定不会被儒琴记录
--------------------------------------------------

guanxibuff = sgs.CreateTargetModSkill{
	name = "#guanxibuff",
	pattern = ".",
	distance_limit_func = function(self, from, card)
		if card:hasFlag("guanxi_hover") then
			return 1000
		end
	end
}
guanxi = sgs.CreateTriggerSkill{
	name = "guanxi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:isAlive() and player:getPhase() == sgs.Player_Finish then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:getMark("ruqin_from_"..player:objectName().."-Keep") == 0 and myself:objectName() ~= player:objectName() and not myself:isKongcheng() then
					local can_use_cards = {}
					for _,cd in sgs.qlist(myself:getHandcards()) do
						room:setCardFlag(cd, "guanxi_hover")	--临时去除距离限制
						if not (cd:isKindOf("AOE") or cd:isKindOf("GlobalEffect") or cd:isKindOf("Collateral")) and myself:canUse(cd, player) then	--记得禁止借刀！！
							room:setCardFlag(cd, "guanxi_flag")
							table.insert(can_use_cards, cd)
						end
						room:setCardFlag(cd, "-guanxi_hover")
					end
					if #can_use_cards > 0 then
						room:addPlayerMark(player, "Equips_Nullified_to_Yourself", 1)	--从询问开始无效装备（为了让ai也能判断装备被无效），直到结算结束/询问结束
						local card = room:askForCard(myself, ".|.|.|hand|guanxi_flag", "@guanxi_use:"..player:objectName(), data, sgs.Card_MethodNone)
						if card then
							local logg = sgs.LogMessage()
							logg.from = myself
							logg.type = "#InvokeSkill"
							logg.arg = self:objectName()
							room:sendLog(logg)	--显示技能发动提示信息
							room:notifySkillInvoked(myself, self:objectName())	--在武将牌上显示技能名
							room:broadcastSkillInvoke(self:objectName())	--播放配音
							room:useCard(sgs.CardUseStruct(card, myself, player))
						end
						room:removePlayerMark(player, "Equips_Nullified_to_Yourself", 1)
					end
					for _,cd in ipairs(can_use_cards) do
						room:setCardFlag(cd, "-guanxi_flag")
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

zhanyue_pomiezhiqiang:addSkill(guanxi)
zhanyue_pomiezhiqiang:addSkill(guanxibuff)

sgs.LoadTranslationTable{
	["guanxi"] = "贯袭",
	["#guanxibuff"] = "贯袭",
	[":guanxi"] = "<font color='#A9A9A9'></font>其他角色的结束阶段，若本回合你未成为其使用牌的目标，你可以以其为唯一目标使用一张手牌（无视距离和"..WordState("装备技能", word_ignore_equip_skill).."）。",
	["$guanxi1"] = "（音效）",
	["$guanxi2"] = "（音效）",
	["$guanxi3"] = "（音效）",
	["$guanxi4"] = "（音效）",
	["@guanxi_use"] = "你可以对 %src 使用一张手牌（无视距离和装备技能）<br/>操作提示：<br/>①选择一张手牌→确定<br/>②取消",
}

--------------------------------------------------
--邪恶与堕落的化身 尼莫
--设计者：--
--------------------------------------------------

nimo_avatarofevil = sgs.General(extension,"nimo_avatarofevil","individual","4",false)

sgs.LoadTranslationTable{
	["nimo_avatarofevil"] = "尼莫",
	["&nimo_avatarofevil"] = "尼莫",
	["#nimo_avatarofevil"] = "邪恶与堕落的化身",
	["designer:nimo_avatarofevil"] = "月音风源",
	["cv:nimo_avatarofevil"] = "",
	["illustrator:nimo_avatarofevil"] = "",
	["~nimo_avatarofevil"] = "",
}

--------------------------------------------------
--险至
--------------------------------------------------

--nimo_avatarofevil:addSkill("mashu")
--nimo_avatarofevil:addSkill("nostieji")

--xianzhibuff = sgs.CreateDistanceSkill{
--	name = "#xianzhibuff",
--	correct_func = function(self, from, to)
--		if from:hasSkill("xianzhi") and from:objectName() ~= to:objectName() then
--			return -1
--		end
--	end
--}
--xianzhibuff = sgs.CreateAttackRangeSkill{
--	name = "#xianzhibuff" ,
--	extra_func = function(self, player, include_weapon)
--		if player:hasSkill("xianzhi") then
--			return 1
--		end
--	end
--}
xianzhi = sgs.CreateTriggerSkill{
	name = "xianzhi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecified},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if use.from and player:objectName() == use.from:objectName() and use.card and use.card:isKindOf("Slash") then
				if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
					if throwCoin(player, self:objectName(), 1) == 1 then
						local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
						local index = 1
						for _, p in sgs.qlist(use.to) do
							--room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
							room:broadcastSkillInvoke(self:objectName())	--播放配音
							jink_table[index] = 0
							index = index + 1
						end
						local jink_data = sgs.QVariant()
						jink_data:setValue(Table2IntList(jink_table))
						player:setTag("Jink_" .. use.card:toString(), jink_data)
					else
						for _, p in sgs.qlist(use.to) do
							room:addPlayerMark(p, "&xianzhi", 1)	--减手牌上限耦合入满愿
						end
					end
				end
			end
		end
	end 
}

nimo_avatarofevil:addSkill(xianzhi)
--nimo_avatarofevil:addSkill(xianzhibuff)

sgs.LoadTranslationTable{
	["xianzhi"] = "险至",
	["#xianzhibuff"] = "险至",
	[":xianzhi"] = "你使用【杀】指定目标后，你可以<font color='#A9A9A9'>发动此技能</font>，掷1枚硬币，若结果为：<font color='#007979'>正面</font>，此【杀】不能被【闪】响应；<font color='#977C00'>反面</font>，目标角色手牌上限－1直到其下个回合结束。",
	["$xianzhi"] = "",
	[":mark:&xianzhi"] = "手牌上限-1",
}

--------------------------------------------------
--冥邀
--------------------------------------------------

mingyaobuff = sgs.CreateDistanceSkill{
	name = "#mingyaobuff",
	correct_func = function(self, from, to)
		if to:getMark("&mingyao") > 0 then
			return -9999
		end
	end
}
mingyao = sgs.CreateTriggerSkill{
	name = "mingyao",
	frequency = sgs.Skill_Limited,
	events = {sgs.RoundStart, sgs.BeforeRoundStart, sgs.QuitDying},
	limit_mark = "@mingyao",
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.RoundStart and player and player:isAlive() and player:hasSkill(self:objectName()) and player:getMark("@mingyao") > 0 then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getOtherPlayers(player)) do
				if SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			if not targets:isEmpty() then
				local target
				player:setTag("mingyao_data", data)	--AI用
				local target = room:askForPlayerChosen(player, targets, self:objectName(), "@mingyao_invoke", true, true)
				player:removeTag("mingyao_data")	--AI用
				if target and not SkillNullify(player, self:objectName()) then
					player:loseMark("@mingyao", 1)
					room:doAnimate(2, "skill=EyeAnim:nimo.png", "")
					room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
					room:getThread():delay(2500)
					room:setPlayerMark(target, "&mingyao", 1)
					room:addPlayerMark(target, "Equips_Nullified_to_Yourself", 1)
				end
			end
		elseif event == sgs.BeforeRoundStart and player and player:isAlive() and player:getMark("&mingyao") > 0 then
			room:setPlayerMark(player, "&mingyao", 0)
			room:removePlayerMark(player, "Equips_Nullified_to_Yourself", 1)
		elseif event == sgs.QuitDying and player and player:isAlive() and player:getMark("&mingyao") > 0 then
			--if player:hasJudgeArea() and player:hasEquipArea(1) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				--player:throwJudgeArea()
				--player:throwEquipArea(1)
				room:loseMaxHp(player, 1)
			--end
		end
	end
}

nimo_avatarofevil:addSkill(mingyao)
nimo_avatarofevil:addSkill(mingyaobuff)

sgs.LoadTranslationTable{
	["mingyao"] = "冥邀",
	["@mingyao"] = "终焉的指名者",
	["#mingyaobuff"] = "冥邀",
	[":mingyao"] = "限定技，轮次开始时，你可以指定一名其他角色，<font color='#A9A9A9'>发动此技能</font>，本轮内其装备技能无效，所有角色→其 距离为1，其脱离濒危状态时失去1点体力上限。",
	["$mingyao"] = "",
	["@mingyao_invoke"] = "你可以发动“冥邀”，指定一名角色",
	[":mark:&mingyao"] = "装备技能无效<br/>所有角色与你距离为1<br/>脱离濒危状态时失去1点体力上限",
}

--------------------------------------------------
--受印的血魅 穆小泠
--设计者：
--------------------------------------------------

muxiaoling_shouyindexuemei = sgs.General(extension,"muxiaoling_shouyindexuemei","individual","4",false)

sgs.LoadTranslationTable{
	["muxiaoling_shouyindexuemei"] = "穆小泠",
	["&muxiaoling_shouyindexuemei"] = "穆小泠",
	["#muxiaoling_shouyindexuemei"] = "受印的血魅",
	["designer:muxiaoling_shouyindexuemei"] = "NSX",
	["cv:muxiaoling_shouyindexuemei"] = "",
	["illustrator:muxiaoling_shouyindexuemei"] = "",
	["~muxiaoling_shouyindexuemei"] = "",
}

muxiaoling_shouyindexuemei2 = sgs.General(extension,"muxiaoling_shouyindexuemei2","individual","4",false,true,true)

sgs.LoadTranslationTable{
	["muxiaoling_shouyindexuemei2"] = "穆小泠",
	["&muxiaoling_shouyindexuemei2"] = "穆小泠",
	["#muxiaoling_shouyindexuemei2"] = "破印的血魅",
	["parent:muxiaoling_shouyindexuemei2"] = "muxiaoling_shouyindexuemei",	--本体角色名
	["designer:muxiaoling_shouyindexuemei2"] = "NSX",
	["cv:muxiaoling_shouyindexuemei2"] = "",
	["illustrator:muxiaoling_shouyindexuemei2"] = "",
	["~muxiaoling_shouyindexuemei2"] = "",
}

--------------------------------------------------
--血碎
--------------------------------------------------

xuesui = sgs.CreateTriggerSkill{
	name = "xuesui",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damage, sgs.Damaged},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and (event == sgs.Damaged or (damage.card and damage.card:isKindOf("Slash"))) and damage.from and damage.to and damage.from:isAlive() and damage.to:isAlive() and damage.to:objectName() ~= damage.from:objectName() then
			local target
			if damage.from:objectName() == player:objectName() then
				target = damage.to
			elseif damage.to:objectName() == player:objectName() then
				target = damage.from
			end
			if target and target:isAlive() and player:canPindian(target) and player:canEffect(target, self:objectName()) then
				target:setFlags("xuesui_target_AI")	--AI用
				local card = room:askForCard(player, ".|.|.|hand", "@xuesui_ask:"..target:objectName(), data, sgs.Card_MethodNone)
				target:setFlags("-xuesui_target_AI")	--AI用
				if card then
					local logg = sgs.LogMessage()
					logg.from = player
					logg.type = "#InvokeSkill"
					logg.arg = self:objectName()
					room:sendLog(logg)	--显示技能发动提示信息
					room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
					room:doAnimate(1, player:objectName(), target:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					if SkillNullify(player, self:objectName()) then
						return false
					end
					
					local pindian = player:PinDian(target, self:objectName(), card)	--用PinDian函数可以获取拼点结构体
					local winner
					if pindian.from_number > pindian.to_number then
						winner = pindian.from
					elseif pindian.from_number < pindian.to_number then
						winner = pindian.to
					else
						return false
					end
					if winner and winner:isAlive() then
						winner:setFlags("xuesui_winner_AI")	--AI用
						local choice = room:askForChoice(winner, self:objectName().."+xuesui_choice_log1+"..winner:getGeneralName().."+xuesui_choice_log2", "xuesui_draw+xuesui_recover+cancel")
						winner:setFlags("-xuesui_winner_AI")	--AI用
						if choice == "xuesui_recover" then
							local recover = sgs.RecoverStruct()
							recover.who = winner
							recover.recover = 1
							room:recover(winner, recover)
						else
							winner:drawCards(2, self:objectName())
							--if not winner:isNude() then
							--	room:askForDiscard(winner, self:objectName(), 1, 1, false, true)
							--end
						end
					end
				end
			end
		end
		return false
	end
}

muxiaoling_shouyindexuemei:addSkill(xuesui)
muxiaoling_shouyindexuemei2:addSkill(xuesui)

sgs.LoadTranslationTable{
	["xuesui"] = "血碎",
	[":xuesui"] = "你 <font color='#9400D3'>受到伤害后/使用【杀】造成伤害后</font>，你可以<font color='#A9A9A9'>发动此技能</font>，与 <font color='#9400D3'>伤害来源/受伤者</font> 拼点，赢的角色可以回复1点体力或摸两张牌。",
	["$xuesui"] = "",
	["@xuesui_ask"] = "你可以发动“血碎”，选择一张手牌与 %src 拼点<br/>操作提示：选择一张手牌→确定",
	["xuesui_recover"] = "回复1点体力",
	["xuesui_draw"] = "摸两张牌",
	["xuesui_choice_log1"] = "请选择一项令 ",
	["xuesui_choice_log2"] = " 执行：",
}

--------------------------------------------------
--破印
--------------------------------------------------
--歌唱类技能引用袅袅

poyin = sgs.CreateTriggerSkill{
	name = "poyin",
	frequency = sgs.Skill_Limited,
	events = {sgs.EventPhaseChanging},
	limit_mark = "@poyin",
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging and data:toPhaseChange().from == sgs.Player_NotActive and data:toPhaseChange().to ~= sgs.Player_NotActive and player and player:isAlive() then
			for _, mark in sgs.list(player:getMarkNames()) do
				if player:getMark(mark) > 0 and string.len("&poyin+") <= string.len(mark) and string.sub(mark, 1, string.len("&poyin+")) == "&poyin+" then
					room:removePlayerMark(player, mark, 1)
					if player:getMark(mark) == 0 then
						local skill_name = string.sub(mark, 1+string.len("&poyin+"), -2)	--注意排除掉最后的!符号
						if player:hasSkill(skill_name) then
							room:detachSkillFromPlayer(player, skill_name)
						end
					end
				end
			end
			
			if player:hasSkill(self:objectName()) and player:getMark("@poyin") > 0 and not player:getEquips():isEmpty() and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:"..player:getEquips():length())) and not SkillNullify(player, self:objectName()) then
				player:loseMark("@poyin", 1)
				if player:getGeneralName() == "muxiaoling_shouyindexuemei" then
					room:setPlayerProperty(player, "general", sgs.QVariant("muxiaoling_shouyindexuemei2"))	--更换武将卡面
				end
				room:doAnimate(2, "skill=EyeAnim:muxiaoling.png", "")
				room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				room:getThread():delay(2500)
				
				local X = 0
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _, equip in sgs.qlist(player:getEquips()) do
					if player:canDiscard(player, equip:getId()) then
						dummy:addSubcard(equip)
						X = X + 1
					end
				end
				room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, player:objectName(), player:objectName(), self:objectName(), ""), player)
				dummy:deleteLater()
				
				if X > 0 then
					local random_one = getRandomSongSkill(player)
					room:addPlayerMark(player, "&poyin+"..random_one.."!", X)
					if not player:hasSkill(random_one) then
						room:acquireSkill(player, random_one)
						if random_one == "hange" then
							RecordUnlockGenerals(player, "hanazono_serena")	--为玩家记录可解锁角色
						end
					end
				end
			end
		end
		return false
	end
}

muxiaoling_shouyindexuemei:addSkill(poyin)
muxiaoling_shouyindexuemei2:addSkill(poyin)

sgs.LoadTranslationTable{
	["poyin"] = "破印",
	["@poyin"] = "封印之饰",
	[":poyin"] = "限定技，<font color='#4B0082'><b>变身技，</b></font>回合开始时，你可以<font color='#A9A9A9'>发动此技能</font>，破坏你装备区内的所有牌，随机获得一个<u>歌唱类技能</u>直到下X个回合开始时。（X为以此法破坏的牌数）<br/>"..song_skills_state,
	["$poyin"] = "",
	["poyin:choice"] = "你可以发动“破印”，破坏你装备区内的所有牌，随机获得一个持续 %src 回合的歌唱类技能",
}

--------------------------------------------------
--观测对象 折原露露
--设计者：
--------------------------------------------------

zheyuanlulu_guanceduixiang = sgs.General(extension,"zheyuanlulu_guanceduixiang","individual","4",false)

sgs.LoadTranslationTable{
	["zheyuanlulu_guanceduixiang"] = "折原露露",
	["&zheyuanlulu_guanceduixiang"] = "折原露露",
	["#zheyuanlulu_guanceduixiang"] = "观测对象",
	["$zheyuanlulu_guanceduixiang"] = "简单",
	["designer:zheyuanlulu_guanceduixiang"] = "夜羽",
	["cv:zheyuanlulu_guanceduixiang"] = "",
	["illustrator:zheyuanlulu_guanceduixiang"] = "",
	["~zheyuanlulu_guanceduixiang"] = "",
}

--------------------------------------------------
--超元
--------------------------------------------------

chaoyuan = sgs.CreateTriggerSkill{
	name = "chaoyuan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.RoundStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.RoundStart and room:getTag("TurnLengthCount"):toInt() % 2 == 0 then
			local targets = sgs.SPlayerList()
			for _, p in sgs.qlist(room:getAlivePlayers()) do
				if not p:isNude() and SkillCanTarget(p, player, self:objectName()) and player:canEffect(p, self:objectName()) then
					targets:append(p)
				end
			end
			if not targets:isEmpty() then
				local to = room:askForPlayerChosen(player, targets, self:objectName(), "@chaoyuan", true, true)
				if to and not SkillNullify(player, self:objectName()) then
					--to:drawCards(1, self:objectName())
					
					local card = room:askForCard(to, ".|.|.|hand,equipped!", "@chaoyuan_recast", data, sgs.Card_MethodNone)
					if card then
						room:broadcastSkillInvoke("@recast")
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_RECAST, to:objectName(), nil, self:objectName(), nil)
						room:moveCardTo(card, to, nil, sgs.Player_DiscardPile, reason, true)
						
						local log = sgs.LogMessage()
						log.type = "#UseCard_Recast"
						log.from = to
						log.card_str = sgs.Sanguosha:getCard(card:getEffectiveId()):toString()
						room:sendLog(log)
						
						to:drawCards(1, "recast")
					end
					
					room:setPlayerMark(player, "chaoyuan_"..to:objectName(), 1)	--耦合入源码isAdjacentTo和inMyAttackRange函数
				end
			end
		end
		return false
	end
}

zheyuanlulu_guanceduixiang:addSkill(chaoyuan)

sgs.LoadTranslationTable{
	["chaoyuan"] = "超元",
	[":chaoyuan"] = "第2X轮开始时，你可以指定一名角色<font color='#A9A9A9'>发动此技能</font>，令其重铸一张牌，其视为在你的攻击范围内且与你"..WordState("相邻", word_near_str).."。",
	["$chaoyuan"] = "",
	["@chaoyuan"] = "你可以发动“超元”，指定一名角色，令其重铸一张牌，其视为在你的攻击范围内且与你相邻",
	["@chaoyuan_recast"] = "请重铸一张牌<br>操作提示：选择一张牌→确定",
}

--------------------------------------------------
--焜耀
--------------------------------------------------

kunyao_card = sgs.CreateSkillCard{
	name = "kunyao",
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		if #targets < 1 then
			return to_select:objectName() ~= sgs.Self:objectName() and to_select:isAdjacentTo(sgs.Self) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		local card = sgs.Sanguosha:getCard(self:getSubcards():first())
		local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, source:objectName(), target:objectName(), self:objectName(), "")
		room:moveCardTo(card, target, sgs.Player_PlaceHand, reason, true)
		room:getThread():delay(250)
		if card:isKindOf("BasicCard") then
			source:drawCards(1, self:objectName())
		elseif card:isKindOf("TrickCard") then
			target:drawCards(1, self:objectName())
		elseif card:isKindOf("EquipCard") then
			if target:canUse(card) then
				local location = card:getRealCard():toEquipCard():location()
				if location and target:getEquip(location) ~= nil then
					room:addPlayerMark(source, "kunyao_repeat_equip", 1)
					if source:getMark("kunyao_repeat_equip") >= 3 then
						RecordUnlockGenerals(source, "zheyuanlulu_chulutoujiao")	--为玩家记录可解锁角色
					end
				end
				room:useCard(sgs.CardUseStruct(card, target, target))
			end
		end
	end
}
kunyao_vs = sgs.CreateViewAsSkill{
	name = "kunyao",
	n = 1,
	view_filter = function(self, selected, to_select)
		return #selected == 0
	end,
	view_as = function(self, cards)
		if #cards ~= 1 then return nil end
		local new = kunyao_card:clone()
		if #cards > 0 then
			for _, c in ipairs(cards) do
				new:addSubcard(c)
			end
		end
		return new
	end,
	enabled_at_play = function()
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@kunyao"
	end
}
kunyao = sgs.CreateTriggerSkill{
	name = "kunyao",
	events = {sgs.EventPhaseEnd},
	view_as_skill = kunyao_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseEnd then
			if player:getPhase() == sgs.Player_Draw then
				room:askForUseCard(player, "@@kunyao", "@kunyao")
			end
		end
		return false
	end
}

zheyuanlulu_guanceduixiang:addSkill(kunyao)

sgs.LoadTranslationTable{
	["kunyao"] = "焜耀",
	[":kunyao"] = "<font color='#A9A9A9'></font>摸牌阶段结束时，你可以将一张牌交给与你"..WordState("相邻", word_near_str).."的角色，若之为：<br/><font color='#9400D3'>基本牌</font>，你摸一张牌；<br/><font color='#9400D3'>锦囊牌</font>，其摸一张牌；<br/><font color='#9400D3'>装备牌</font>，令其使用之。",
	["@kunyao"] = "你可以使用“焜耀”，将一张牌交给相邻角色，并根据此牌的类型执行不同效果",
	["~kunyao"] = "选择一张牌→选择一名角色→确定",
	["$kunyao"] = "",
}

--------------------------------------------------
--初露头角 折原露露
--设计者：--
--------------------------------------------------

zheyuanlulu_chulutoujiao = sgs.General(extension,"zheyuanlulu_chulutoujiao","individual","3",false,true,true)

sgs.LoadTranslationTable{
	["zheyuanlulu_chulutoujiao"] = "折原露露",
	["&zheyuanlulu_chulutoujiao"] = "折原露露",
	["#zheyuanlulu_chulutoujiao"] = "初露头角",
	["$zheyuanlulu_chulutoujiao"] = "一般",
	["designer:zheyuanlulu_chulutoujiao"] = "萌龙少主",
	["cv:zheyuanlulu_chulutoujiao"] = "",
	["illustrator:zheyuanlulu_chulutoujiao"] = "",
	["unlock:zheyuanlulu_chulutoujiao"] = "在一局游戏中使用折原露露的“焜耀”，顶掉至少3张装备牌",
	["~zheyuanlulu_chulutoujiao"] = "",
}

zheyuanlulu_chulutoujiao:setBonus(true)	--设为奖励角色

--------------------------------------------------
--努力家
--------------------------------------------------

zheyuanlulu_chulutoujiao:addSkill("beifa")	--翻译在WisdomPackage.lua（北伐被我魔改了）

--------------------------------------------------
--肉食系
--------------------------------------------------

roushixi = sgs.CreateTriggerSkill{
	name = "roushixi",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damage},
	on_trigger = function(self, event, player, data, room)
		local damage = data:toDamage()
		if damage.damage > 0 and damage.to and damage.to:isAlive() and damage.to:objectName() ~= player:objectName() and player:getMark("roushixi_used_"..damage.to:objectName()) == 0 then
			local cost_card = room:askForDiscard(player, self:objectName(), 1, 1, true, true, "@roushixi:"..damage.to:objectName(), ".", self:objectName())
			if cost_card then
				room:doAnimate(1, player:objectName(), damage.to:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				if not SkillNullify(player, self:objectName()) then
					room:setPlayerMark(player, "roushixi_used_"..damage.to:objectName(), 1)
					player:drawCards(1, self:objectName())
					room:loseMaxHp(damage.to, 1)
				end
			end
			return false
		end
	end
}
--table.insert(turn_end_clear_mark, "roushixi_used")	--回合结束清除标记

zheyuanlulu_chulutoujiao:addSkill(roushixi)

sgs.LoadTranslationTable{
	["roushixi"] = "肉食系",
	[":roushixi"] = "对每名角色限一次，你对一名其他角色造成伤害后，你可以弃置一张牌<font color='#A9A9A9'>发动此技能</font>，摸一张牌，令其失去1点体力上限。",
	["$roushixi"] = "",
	["@roushixi"] = "你可以弃置一张牌发动“肉食系”，摸一张牌并令 %src 失去1点体力上限",
}

--------------------------------------------------
--番茄天使 沙月
--设计者：
--------------------------------------------------

shayue_fanqietianshi = sgs.General(extension,"shayue_fanqietianshi","individual","3",false)

sgs.LoadTranslationTable{
	["shayue_fanqietianshi"] = "沙月",
	["&shayue_fanqietianshi"] = "沙月",
	["#shayue_fanqietianshi"] = "番茄天使",
	["$shayue_fanqietianshi"] = "一般",
	["designer:shayue_fanqietianshi"] = "NSX",
	["cv:shayue_fanqietianshi"] = "",
	["illustrator:shayue_fanqietianshi"] = "",
	["~shayue_fanqietianshi"] = "怎么办我看自己看得流口水了",
}

shayue_fanqietianshi:setGender(sgs.General_Neuter)

--------------------------------------------------
--福音
--------------------------------------------------

fuyin_shayue = sgs.CreateTriggerSkill{
	name = "fuyin_shayue",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Dying},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Dying then
			local dying = data:toDying()
			local _data = sgs.QVariant()
			_data:setValue(dying.who)
			if dying.who and dying.who:getHp() < 1 then
				if player:askForSkillInvoke(self:objectName(), _data) and not SkillNullify(player, self:objectName()) and player:canEffect(dying.who, self:objectName()) then
					room:doAnimate(1, player:objectName(), dying.who:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					local judge_times = 1
					if dying.who:objectName() == player:objectName() then
						room:broadcastSkillInvoke(self:objectName(), math.random(4,6))	--播放配音
					else
						room:broadcastSkillInvoke(self:objectName(), math.random(1,3))	--播放配音
						judge_times = 2
					end
					
					local card_ids = sgs.IntList()
					for i = 1,judge_times,1 do
						local good_table = {1,2,3,4,5,6,7,8,9,10,11,12,13}
						for i = 1,13,1 do
							if player:getMark("&fuyin_shayue->"..getNumberChar(i)) > 0 then
								table.removeOne(good_table, i)
							end
						end
						local good_str = table.concat(good_table,",")
						local judge = sgs.JudgeStruct()
						judge.pattern = ".|.|"..good_str.."|."
						judge.good = true
						judge.reason = self:objectName()
						judge.who = dying.who
						judge.time_consuming = true	--为真耗时更少
	
						room:judge(judge)
						--为了给下拉菜单排序，故没有直接添加标记
						table.removeOne(good_table, judge.result_number)
						for i = 1,13,1 do
							room:setPlayerMark(player, "&fuyin_shayue->"..getNumberChar(i), 0)
						end
						for i = 1,13,1 do
							if not table.contains(good_table, i) then
								room:setPlayerMark(player, "&fuyin_shayue->"..getNumberChar(i), 1)
							end
						end
						if not judge:isGood() then
							player:setFlags("fuyin_shayue_failed")
						end
						if room:getCardPlace(judge.card:getId()) == sgs.Player_DiscardPile then
							card_ids:append(judge.card:getId())
						end
					end
					
					if not player:hasFlag("fuyin_shayue_failed") then
						local recover = sgs.RecoverStruct()
						recover.who = player
						recover.recover = 1
						room:recover(dying.who, recover)
					else
						player:setFlags("-fuyin_shayue_failed")
						
						local id = -1
						if card_ids:length() > 1 then
							room:fillAG(card_ids, player)
							id = room:askForAG(player, card_ids, false, self:objectName())
							room:clearAG(player)
						else
							id = card_ids:first()
						end
						local card = sgs.Sanguosha:getCard(id)
						if card and room:getCardPlace(id) == sgs.Player_DiscardPile then
							player:obtainCard(card, true)
						end
					end
				end
			end
		end
		return false
	end,
}

shayue_fanqietianshi:addSkill(fuyin_shayue)

sgs.LoadTranslationTable{
	["fuyin_shayue"] = "福音",
	[":fuyin_shayue"] = "<font color='#9400D3'>你/其他角色</font> 进入濒危状态时，你可以<font color='#A9A9A9'>发动此技能</font>，令其进行 <font color='#9400D3'>一/两</font> 次判定，若判定结果与你以此法判定的所有结果点数均不同，则其回复1点体力，否则你获得其中一张判定牌。",
	["$fuyin_shayue1"] = "老子是天使",
	["$fuyin_shayue2"] = "老子一直是天使",
	["$fuyin_shayue3"] = "陪沙月发一个小时的呆吧",
	["$fuyin_shayue4"] = "我希望宅一辈子，天天在家里摸鱼",
	["$fuyin_shayue5"] = "第一摸鱼，第二摸鱼，第三摸鱼",
	["$fuyin_shayue6"] = "世上最开心的事情是什么？",
	["^AG_fuyin_shayue"] = "<b>福音</b><br/>双击以选择一张牌获得之",
}

--------------------------------------------------
--维留
--------------------------------------------------

weiliu = sgs.CreateTriggerSkill{
	name = "weiliu" ,
	events = {sgs.AskForRetrial},
	on_trigger = function(self, event, player, data, room)
		local can_use = false
		for _,card in sgs.qlist(player:getCards("he")) do
			if card:isKindOf("EquipCard") then
				can_use = true
				break
			end
		end
		if can_use then
			local judge = data:toJudge()
			local prompt_list = {
				"@weiliu-card",
				judge.who:objectName(),
				self:objectName(),
				judge.reason,
				string.format("%d", judge.card:getEffectiveId())
			}
			local prompt = table.concat(prompt_list, ":")
			local card = room:askForCard(player, "EquipCard", prompt, data, sgs.Card_MethodResponse, judge.who, true)
			if card then
				room:broadcastSkillInvoke(self:objectName())	--播放配音
				room:retrial(card, player, judge, self:objectName(), true)
			end
			return false
		end
	end
}

shayue_fanqietianshi:addSkill(weiliu)

sgs.LoadTranslationTable{
	["weiliu"] = "维留",
	[":weiliu"] = "当判定牌生效前，你可以打出一张装备牌替换之。",
	["$weiliu1"] = "翅膀很碍事啊，所以给它关掉了 kira~",
	["$weiliu2"] = "翅膀也不见了！",
	["$weiliu3"] = "翅膀！",
	["$weiliu4"] = "起灰灰灰灰灰",
	["@weiliu-card"] = "你可以使用“%dest”，打出一张装备牌修改 %src 的 %arg 判定",
}

--------------------------------------------------
--蓝莓狱使 能美枫铃
--设计者：
--------------------------------------------------

nengmeifengling_lanmeiyushi = sgs.General(extension,"nengmeifengling_lanmeiyushi","individual","3",false)

sgs.LoadTranslationTable{
	["nengmeifengling_lanmeiyushi"] = "能美枫铃",
	["&nengmeifengling_lanmeiyushi"] = "能美枫铃",
	["#nengmeifengling_lanmeiyushi"] = "蓝莓狱使",
	["$nengmeifengling_lanmeiyushi"] = "一般",
	["designer:nengmeifengling_lanmeiyushi"] = "NSX",
	["cv:nengmeifengling_lanmeiyushi"] = "",
	["illustrator:nengmeifengling_lanmeiyushi"] = "",
	["~nengmeifengling_lanmeiyushi"] = "",
}

nengmeifengling_lanmeiyushi:setGender(sgs.General_Neuter)

--------------------------------------------------
--宵暗
--------------------------------------------------

xiaoan = sgs.CreateTriggerSkill{
	name = "xiaoan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EffectOffsetted},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EffectOffsetted then
			local effect = data:toCardEffect()
			if not (effect.card and effect.card:isKindOf("SkillCard")) and effect.to and effect.to:isAlive() and effect.to:hasSkill(self:objectName()) then
				local myself = effect.to
				local targets = sgs.SPlayerList()
				for _, p in sgs.qlist(room:getOtherPlayers(myself)) do
					if SkillCanTarget(p, myself, self:objectName()) and myself:canEffect(p, self:objectName()) then
						targets:append(p)
					end
				end
				if not targets:isEmpty() then
					local target = room:askForPlayerChosen(myself, targets, self:objectName(), "@xiaoan_ask", true, true)
					if target and not SkillNullify(myself, self:objectName()) then
						local judge = sgs.JudgeStruct()
						judge.pattern = ".|spade,club,diamond|.|."
						judge.good = false
						judge.negative = true
						judge.reason = self:objectName()
						judge.who = target
						room:judge(judge)
						if judge:isBad() then
							if judge.result_suit == sgs.Card_Spade then
								room:damage(sgs.DamageStruct(self:objectName(), myself, target, 1, sgs.DamageStruct_Thunder))
							elseif judge.result_suit == sgs.Card_Club then
								room:damage(sgs.DamageStruct(self:objectName(), myself, target, 1, sgs.DamageStruct_Ice))
							elseif judge.result_suit == sgs.Card_Diamond then
								room:damage(sgs.DamageStruct(self:objectName(), myself, target, 1, sgs.DamageStruct_Fire))
							elseif judge.result_suit == sgs.Card_Heart then		--执行到这里说明被虚像反转判定结果了
								room:damage(sgs.DamageStruct(self:objectName(), myself, target, 1, sgs.DamageStruct_Thunder))
								room:damage(sgs.DamageStruct(self:objectName(), myself, target, 1, sgs.DamageStruct_Ice))
								room:damage(sgs.DamageStruct(self:objectName(), myself, target, 1, sgs.DamageStruct_Fire))
							end
						end
					end
				end
			end
		end
		return false
	end,
    can_trigger = function(self, target)
        return target
    end
}

nengmeifengling_lanmeiyushi:addSkill(xiaoan)

sgs.LoadTranslationTable{
	["xiaoan"] = "宵暗",
	[":xiaoan"] = "对你生效的牌被抵消时，你可以指定一名其他角色，<font color='#A9A9A9'>发动此技能</font>，令其进行一次判定，若结果为：<br/>黑桃，你对其造成1点雷电伤害；<br/>梅花，你对其造成1点冰霜伤害；<br/>方块，你对其造成1点火焰伤害。",
	["$xiaoan"] = "",
	["@xiaoan_ask"] = "你可以指定一名角色发动“宵暗”，令其进行判定，若结果不为红桃则对其造成伤害",
}

--------------------------------------------------
--绝断
--------------------------------------------------

jueduan = sgs.CreateTriggerSkill{
	name = "jueduan",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageCaused},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.nature ~= sgs.DamageStruct_Normal and damage.to and damage.to:isAlive() and damage.to:getEquips():length() > player:getEquips():length() and player:canEffect(damage.to, self:objectName()) then
				if damage.nature == sgs.DamageStruct_Light then return false end
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				damage.damage = damage.damage + 1
				data:setValue(damage)
			end
		end
		return false
	end
}

nengmeifengling_lanmeiyushi:addSkill(jueduan)

sgs.LoadTranslationTable{
	["jueduan"] = "绝断",
	[":jueduan"] = "锁定技，你对装备区内牌数多于你的角色造成的属性伤害＋1。",
	["$jueduan"] = "",
}

--------------------------------------------------
--蜜汁の車神伝說 小C
--设计者：
--------------------------------------------------

xiaoc_cheshenchuanshuo = sgs.General(extension,"xiaoc_cheshenchuanshuo","individual","3",false)

sgs.LoadTranslationTable{
	["xiaoc_cheshenchuanshuo"] = "小C",
	["&xiaoc_cheshenchuanshuo"] = "小C",
	["#xiaoc_cheshenchuanshuo"] = "蜜汁の車神伝說",
	["$xiaoc_cheshenchuanshuo"] = "一般",
	["designer:xiaoc_cheshenchuanshuo"] = "萌龙少主",
	["cv:xiaoc_cheshenchuanshuo"] = "",
	["illustrator:xiaoc_cheshenchuanshuo"] = "",
	["~xiaoc_cheshenchuanshuo"] = "",
}

--------------------------------------------------
--疾冲
--------------------------------------------------

jichong_buff = sgs.CreateProhibitSkill{
	name = "#jichong_buff",
	is_prohibited = function(self, from, to, card)
		if not card:isKindOf("SkillCard") and card:isKindOf("Indulgence") and card:getSkillName() == "jichong" then
			local card_length = 0
			if card:subcardsLength() > 0 then
				for _,id in sgs.qlist(card:getSubcards()) do
					if inHand(from, sgs.Sanguosha:getCard(id)) then
						card_length = card_length + 1
					end
				end
			elseif card:getId() ~= -1 then	--AI使用的非转化牌没有子卡，但是有id（转化牌的id均为-1）
				if inHand(from, card) then
					card_length = 1
				end
			end
			if from:objectName() ~= to:objectName() and to:getHandcardNum() <= (from:getHandcardNum() - card_length) then
				return true
			end
		end
	end
}
jichong_vs = sgs.CreateViewAsSkill{
	name = "jichong",
	n = 1,
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return to_select:getSuit() == sgs.Card_Heart
	end,
	view_as = function(self, cards)
		if #cards == 0 then
			return nil
		elseif #cards == 1 then
			local card = cards[1]
			local suit = card:getSuit()
			local point = card:getNumber()
			local id = card:getId()
			local indulgence = sgs.Sanguosha:cloneCard("indulgence", suit, point)
			indulgence:addSubcard(id)
			indulgence:setSkillName(self:objectName())
			return indulgence
		end
	end
}
jichong = sgs.CreateTriggerSkill{
	name = "jichong",
	view_as_skill = jichong_vs,
	global = true,
	events = {sgs.CardFinished, sgs.BeforeDelayedTrickEffect, sgs.FinishJudge},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardFinished then
			local use = data:toCardUse()
			if use.card and use.card:getSkillName() == "jichong" then
				local id = use.card:getEffectiveId()
				if id and id > -1 then
					if room:getCardPlace(id) == sgs.Player_PlaceDelayedTrick and room:getCardOwner(id) ~= nil then
						room:setPlayerMark(room:getCardOwner(id), "jichong_from_"..player:objectName().."_id_"..id, 1)	--标记的清除耦合入标记清理者
					end
				end
			end
		elseif event == sgs.BeforeDelayedTrickEffect then	--新时机：延时锦囊生效前，data储存该延时锦囊的信息
			local trick = data:toCard()
			if trick and trick:isKindOf("Indulgence") then
				for _,p in sgs.qlist(room:getAlivePlayers()) do
					if player:getMark("jichong_from_"..p:objectName().."_id_"..trick:getEffectiveId()) > 0 then
						player:setFlags("jichong_from_"..p:objectName())
					end
				end
			end
		elseif event == sgs.FinishJudge then
			local judge = data:toJudge()
			if judge.reason == "indulgence" then
				for _,p in sgs.qlist(room:getAlivePlayers()) do
					if player:hasFlag("jichong_from_"..p:objectName()) then
						player:setFlags("-jichong_from_"..p:objectName())
						room:sendCompulsoryTriggerLog(p, self:objectName()) --显示锁定技发动
						if judge.result_suit == sgs.Card_Heart then
							room:doPicAnimate(p:objectName(), "skill/xiaoc_"..math.random(1,3))	--doPicAnimate:令指定玩家短暂显示一张图片
							p:turnOver()
						else
							room:doPicAnimate(p:objectName(), "skill/xiaoc_"..math.random(4,6))	--doPicAnimate:令指定玩家短暂显示一张图片
							p:drawCards(1, "jichong")
						end
					end
				end
			end
		end
	end,
}

xiaoc_cheshenchuanshuo:addSkill(jichong)
xiaoc_cheshenchuanshuo:addSkill(jichong_buff)

sgs.LoadTranslationTable{
	["jichong"] = "疾冲",
	["#jichong_buff"] = "疾冲",
	[":jichong"] = "你可以将一张红桃牌当【乐不思蜀】对手牌数多于你的角色使用，此牌判定后若结果为红桃则你翻面，否则你摸一张牌。",
	["$jichong"] = "",
}

--------------------------------------------------
--目涩
--------------------------------------------------

muse = sgs.CreateTriggerSkill{
	name = "muse",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.Damaged, sgs.EventPhaseChanging},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.to and damage.to:isAlive() and damage.to:hasSkill(self:objectName()) and damage.from and damage.from:isAlive() and not damage.from:getEquips():isEmpty() --[[and damage.from:getPhase() == sgs.Player_Play]] and damage.from:objectName() ~= damage.to:objectName() and room:askForSkillInvoke(damage.to, self:objectName(), sgs.QVariant("choice:" .. damage.from:objectName())) then
				room:doAnimate(1, damage.to:objectName(), damage.from:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
				room:doPicAnimate(player:objectName(), "skill/xiaoc_"..math.random(7,9))	--doPicAnimate:令指定玩家短暂显示一张图片
				if not damage.from:getEquips():isEmpty() and not SkillNullify(damage.to, self:objectName()) then
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					dummy:addSubcards(damage.from:getEquips())
					--damage.from:obtainCard(dummy, true)
					damage.to:obtainCard(dummy, true)
					dummy:deleteLater()
					--room:setPlayerFlag(damage.from, "Global_PlayPhaseTerminated")
					room:setPlayerMark(damage.to, "&muse", 1)
					room:addPlayerMark(damage.to, "muse_from_"..damage.from:objectName(), dummy:subcardsLength())
				end
			end
			return false
		elseif event == sgs.EventPhaseChanging and data:toPhaseChange().to == sgs.Player_NotActive and data:toPhaseChange().from ~= sgs.Player_NotActive then
			for _, myself in sgs.qlist(room:getAllPlayers()) do
				if myself:getMark("&muse") > 0 then
					room:sendCompulsoryTriggerLog(myself, self:objectName()) --显示锁定技发动
					for _, p in sgs.qlist(room:getAllPlayers(true)) do
						--local X = myself:getMark("muse_from_"..p:objectName())
						if myself:getMark("muse_from_"..p:objectName()) > 0 and p:isAlive() and not p:isKongcheng() then
							local from = myself
							local to = p
							local X = math.floor(from:getHandcardNum() / 2.0)
							if X > 0 then
								local dummy = room:askForExchange(from, self:objectName(), X, X, false, "#muse_give:"..X..":" .. to:objectName(), false)
								if dummy and dummy:subcardsLength() > 0 then
									local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, from:objectName(), to:objectName(), self:objectName(), "")
									room:moveCardTo(dummy, to, sgs.Player_PlaceHand, reason, false)
								end
								dummy:deleteLater()
							end
						end
						room:setPlayerMark(myself, "muse_from_"..p:objectName(), 0)
					end
					room:setPlayerMark(myself, "&muse", 0)
				end
			end
		end
	end
}

xiaoc_cheshenchuanshuo:addSkill(muse)

sgs.LoadTranslationTable{
	["muse"] = "目涩",
	--[":muse"] = "其他角色于其出牌阶段对你造成伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，令其收回装备区内的牌，然后结束本阶段。",
	[":muse"] = "你受到伤害后，你可以<font color='#A9A9A9'>发动此技能</font>，获得伤害来源装备区内的牌，本回合结束时，你交给其一半手牌（向下取整）。",
	["$muse"] = "",
	--["muse:choice"] = "你可以发动“目涩”，令 %src 将装备牌收回手牌，然后结束其出牌阶段",
	["muse:choice"] = "你可以发动“目涩”，获得 %src 的所有装备牌，回合结束时交给其一半手牌",
	["#muse_give"] = "请将 %src 张手牌交给 %dest",
}

--------------------------------------------------
--给你一拳 宇佐紀ノノ
--设计者：
--------------------------------------------------

yuzuojinuonuo_geiniyiquan = sgs.General(extension,"yuzuojinuonuo_geiniyiquan","individual","3",false,true)

sgs.LoadTranslationTable{
	["yuzuojinuonuo_geiniyiquan"] = "宇佐紀ノノ",
	["&yuzuojinuonuo_geiniyiquan"] = "宇佐紀ノノ",
	["#yuzuojinuonuo_geiniyiquan"] = "给你一拳",
	["$yuzuojinuonuo_geiniyiquan"] = "一般",
	["designer:yuzuojinuonuo_geiniyiquan"] = "夜玥紫英",
	["cv:yuzuojinuonuo_geiniyiquan"] = "",
	["illustrator:yuzuojinuonuo_geiniyiquan"] = "",
	["~yuzuojinuonuo_geiniyiquan"] = "",
}

--------------------------------------------------
--兔拳
--------------------------------------------------

tuquan_vs = sgs.CreateViewAsSkill{
	name = "tuquan",
	n = 1,
	--expand_pile = "wooden_ox",	--允许使用木牛流马
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return #selected == 0 and to_select:isKindOf("Slash")
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local first = cards[1]
			local card_name = ""
			card_name = "jink"
			local ncard = sgs.Sanguosha:cloneCard(card_name, first:getSuit(), first:getNumber())
			ncard:addSubcard(first)
			ncard:setSkillName("tuquan")
			return ncard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "jink"
	end,
}
tuquan = sgs.CreateTriggerSkill{
	name = "tuquan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.PreCardUsed, sgs.PreCardResponded},
	view_as_skill = tuquan_vs,
	on_trigger = function(self, event, player, data, room)
		local card
		if event == sgs.PreCardUsed then
			card = data:toCardUse().card
		else
			--if data:toCardResponse().m_isUse then
				card = data:toCardResponse().m_card
			--end
		end
		if card then
			if card:getSkillName() == "tuquan" then
				room:doPicAnimate(player:objectName(), "skill/nuonuo_1")	--doPicAnimate:令指定玩家短暂显示一张图片
			end
		end
	end
}
table.insert(turn_end_clear_mark, "tuquan_used")	--回合结束清除标记

yuzuojinuonuo_geiniyiquan:addSkill(tuquan)

sgs.LoadTranslationTable{
	["tuquan"] = "兔拳",
	[":tuquan"] = "你可以将【杀】当【闪】使用或打出。",
	["$tuquan"] = "",
}

--------------------------------------------------
--嗔怪
--------------------------------------------------

chenguai = sgs.CreateTriggerSkill{
	name = "chenguai",
	frequency = sgs.Skill_Frequent,
	events = {sgs.CardFinished},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardFinished and player:getPhase() ~= sgs.Player_NotActive then
			local use = data:toCardUse()
			if not use.card or not getTypeKindString(use.card) or (use.card:isVirtualCard() and use.card:subcardsLength() == 0) then return false end
			local kind_str = getTypeKindString(use.card)
			
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				local can_return = false
				local subcards = sgs.IntList()
				if use.card:isVirtualCard() then
					subcards = use.card:getSubcards()
				else
					subcards:append(use.card:getId())
				end
				for _,cid in sgs.qlist(subcards) do
					if room:getCardPlace(cid) == sgs.Player_Discard or room:getCardPlace(cid) == sgs.Player_PlaceTable or room:getCardPlace(cid) == sgs.Player_PlaceEquip or room:getCardPlace(cid) == sgs.Player_PlaceDelayedTrick then
						can_return = true
						break
					end
				end
				if not can_return then break end
				
				myself:setTag("chenguai", data)	--AI用
				if myself:getMark("&chenguai+used+_lun") == 0 and myself:objectName() ~= player:objectName() and myself:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. player:objectName() .. ":" .. use.card:objectName() .. ":" .. kind_str)) and not SkillNullify(myself, self:objectName()) and myself:canEffect(player, self:objectName()) then
					myself:removeTag("chenguai")	--AI用
					
					room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					room:setPlayerMark(myself, "&chenguai+used+_lun", 1)
					room:doPicAnimate(myself:objectName(), "skill/nuonuo_"..math.random(2,6))	--doPicAnimate:令指定玩家短暂显示一张图片
					
					local log = sgs.LogMessage()
					log.type = "#chenguai_log"
					log.to:append(myself)
					log.to:append(player)
					log.arg = self:objectName()
					log.arg2 = kind_str
					room:sendLog(log)	--发送信息框消息
					
					room:setPlayerMark(myself, "&chenguai+"..kind_str, 1)
					room:setPlayerMark(myself, "chenguai_limit+use+"..kind_str, 1)
					room:setPlayerCardLimitation(myself, "use", kind_str, false)
					
					room:setPlayerMark(player, "&chenguai+"..kind_str, 1)
					room:setPlayerMark(player, "chenguai_limit+use+"..kind_str, 1)
					room:setPlayerCardLimitation(player, "use", kind_str, false)
					
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					local subcards = sgs.IntList()
					if use.card:isVirtualCard() then
						subcards = use.card:getSubcards()
					else
						subcards:append(use.card:getId())
					end
					for _,cid in sgs.qlist(subcards) do
						if room:getCardPlace(cid) == sgs.Player_Discard or room:getCardPlace(cid) == sgs.Player_PlaceTable or room:getCardPlace(cid) == sgs.Player_PlaceEquip or room:getCardPlace(cid) == sgs.Player_PlaceDelayedTrick then
							dummy:addSubcard(cid)
						end
					end
					if dummy:subcardsLength() > 0 then
						player:obtainCard(dummy, true)
					end
					dummy:deleteLater()
				end
				myself:removeTag("chenguai")	--AI用
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}
table.insert(turn_end_clear_mark, "&chenguai+BasicCard")	--回合结束清除标记
table.insert(turn_end_clear_mark, "&chenguai+TrickCard")	--回合结束清除标记
table.insert(turn_end_clear_mark, "&chenguai+EquipCard")	--回合结束清除标记
table.insert(turn_end_limit_card_prefix, "chenguai_limit")	--封印直到回合结束

chenguai:setWarmupSkill(true)	--设置为征询技

yuzuojinuonuo_geiniyiquan:addSkill(chenguai)

sgs.LoadTranslationTable{
	["chenguai"] = "嗔怪",
	[":chenguai"] = "征询技，每轮限一次，其他角色于其回合内使用牌结算结束后，你可以<font color='#A9A9A9'>发动此技能</font>，令其收回此牌，本回合你与其不能使用此类别的牌。",
	["$chenguai"] = "",
	["chenguai:choice"] = "你可以发动“嗔怪”，令 %src 收回 %dest，你与其本回合不能使用 %arg<br><br><font color='#8B4513'>提示：这是一个征询技，你可以点击技能按钮来设定是否询问此技能</font>",
	["#chenguai_log"] = "由于“%arg”的效果，%to 本回合不能使用 %arg2",
}

--------------------------------------------------
--机器猫 早凉
--设计者：
--------------------------------------------------

zaoliang_jiqimao = sgs.General(extension,"zaoliang_jiqimao","individual","3",false)

sgs.LoadTranslationTable{
	["zaoliang_jiqimao"] = "早凉",
	["&zaoliang_jiqimao"] = "早凉",
	["#zaoliang_jiqimao"] = "机器猫",
	["$zaoliang_jiqimao"] = "简单",
	["designer:zaoliang_jiqimao"] = "NSX",
	["cv:zaoliang_jiqimao"] = "",
	["illustrator:zaoliang_jiqimao"] = "",
	["~zaoliang_jiqimao"] = "",
}

zaoliang_jiqimao:setGender(sgs.General_Sexless)

--------------------------------------------------
--阳能
--------------------------------------------------

yangneng = sgs.CreateTriggerSkill{
	name = "yangneng",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardsMoveOneTime, sgs.BeforeCardsMove, sgs.EventPhaseStart},
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.BeforeCardsMove then
			local move = data:toMoveOneTime()
			if not room:getTag("FirstRound"):toBool() and player and player:getPhase() ~= sgs.Player_NotActive and move.to and move.to:objectName() == player:objectName() and move.to_place == sgs.Player_PlaceHand then
				for _,id in sgs.qlist(move.card_ids) do
					--room:setCardFlag(sgs.Sanguosha:getCard(id), self:objectName())
					room:setPlayerMark(player, "yangneng_card_" .. id, 1)
					if player:hasSkill(self:objectName()) then
						room:setCardFlag(sgs.Sanguosha:getCard(id), "&yangneng")	--可见手牌下标
					end
				end
			end
			return false
		elseif event == sgs.CardsMoveOneTime and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local move = data:toMoveOneTime()
			if not room:getTag("FirstRound"):toBool() and player:getPhase() == sgs.Player_NotActive and move.to and move.to:objectName() == player:objectName() and move.reason.m_skillName ~= "yangneng" and move.to_place == sgs.Player_PlaceHand then
				room:getThread():delay(250)
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				player:drawCards(1, self:objectName())
			end
			return false
		elseif event == sgs.EventPhaseStart and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			if player:getPhase() == sgs.Player_Discard then
				local return_ids = sgs.IntList()
				for _,cd in sgs.qlist(player:getHandcards()) do
					if player:getMark("yangneng_card_"..cd:getEffectiveId()) > 0 then
						--room:clearCardFlag(cd)
						room:setPlayerMark(player, "yangneng_card_"..cd:getEffectiveId(), 0)
						room:setCardFlag(cd, "-&yangneng")	--可见手牌下标
						return_ids:append(cd:getId())
					end
				end
				if not return_ids:isEmpty() then
					room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
					room:shuffleIntoDrawPile(player, return_ids, self:objectName(), false)
					room:getThread():delay(300)
				end
			end
		end
	end
}
table.insert(discard_clear_flag, "&yangneng")				--进弃牌堆清除flag
table.insert(change_owner_clear_flag, "&yangneng")			--持有者变化清除flag
table.insert(turn_end_clear_mark_prefix, "yangneng_card_")	--回合结束清除指定前缀的标记

zaoliang_jiqimao:addSkill(yangneng)

sgs.LoadTranslationTable{
	["yangneng"] = "阳能",
	["&yangneng"] = "阳能",
	[":yangneng"] = "锁定技，回合外你不因“阳能”而获得手牌后，你摸一张牌；弃牌阶段开始时，将你于本回合获得的手牌返回牌堆。",
	["$yangneng"] = "",
}

--------------------------------------------------
--阴憩
--------------------------------------------------

yinqi = sgs.CreateTriggerSkill{
	name = "yinqi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DamageInflicted},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.damage > 0 and player:isKongcheng() then
				if damage.nature == sgs.DamageStruct_Light then return false end
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				player:drawCards(1, self:objectName())
				room:addPlayerMark(player, "&yinqi", 1)		--跳过下个摸牌阶段耦合入冰火冰糖的“旧魇”
				room:setEmotion(player, "skill_nullify")
				return true
			end
		end
	end
}

zaoliang_jiqimao:addSkill(yinqi)

sgs.LoadTranslationTable{
	["yinqi"] = "阴憩",
	[":yinqi"] = "锁定技，你受到伤害时，若你没有手牌，你摸一张牌并跳过下个摸牌阶段，防止之。",
	["$yinqi"] = "",
	[":mark:&yinqi"] = "跳过下个摸牌阶段",
}

--------------------------------------------------
--很抱歉打扰你… 花见汐梨
--设计者：
--------------------------------------------------

huajianxili_sorry = sgs.General(extension,"huajianxili_sorry","individual","4",false)

sgs.LoadTranslationTable{
	["huajianxili_sorry"] = "花见汐梨",
	["&huajianxili_sorry"] = "花见汐梨",
	["#huajianxili_sorry"] = "很抱歉打扰你…",
	["$huajianxili_sorry"] = "进阶",
	["designer:huajianxili_sorry"] = "空月之羽",
	["cv:huajianxili_sorry"] = "",
	["illustrator:huajianxili_sorry"] = "",
	["~huajianxili_sorry"] = "",
}

--------------------------------------------------
--索求
--------------------------------------------------

suoqiucard = sgs.CreateSkillCard{
	name = "suoqiu",
	target_fixed = false,
	will_throw = true,
	handling_method = sgs.Card_MethodDiscard,
	filter = function(self, targets, to_select) 
		if #targets == 0 then
			return to_select:objectName() ~= sgs.Self:objectName() and not to_select:isKongcheng() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_effect = function(self, effect)
		local room = effect.from:getRoom()
		room:doPicAnimate(effect.from:objectName(), "skill/huajianxili")	--doPicAnimate:令指定玩家短暂显示一张图片
		local choice = room:askForChoice(effect.from, self:objectName().."+suoqiu_choice_log", "BasicCard+TrickCard+EquipCard")
		local type_str = "a+btde"
		if choice == "BasicCard" then
			type_str = "a+b"
		elseif choice == "TrickCard" then
			type_str = "a+td"
		elseif choice == "EquipCard" then
			type_str = "a+e"
			local choice2 = room:askForChoice(effect.from, self:objectName().."+suoqiu_choice_log2", "Weapon+Armor+Horse+Treasure")
			if choice2 == "Weapon" then
				type_str = "a+e+w"
			elseif choice2 == "Armor" then
				type_str = "a+e+a"
			elseif choice2 == "Horse" then
				type_str = "a+e+h"
			elseif choice2 == "Treasure" then
				type_str = "a+e+t"
			end
		end
		local card_name = room:askForChooseCardName(effect.from, type_str, false, "suoqiu")
		ChoiceLog(effect.from, card_name)
		local has_card = false
		local class_name
		for _, cd in sgs.list(effect.to:getHandcards()) do
			if cd:objectName() == card_name then
				has_card = true
				class_name = cd:getClassName()
				break
			end
		end
		if has_card then
			local _data = sgs.QVariant(card_name)
			local card = room:askForCard(effect.to, class_name.."|.|.|hand!", "@suoqiu_give:"..effect.from:objectName()..":"..card_name, _data, sgs.Card_MethodNone)
			if card then
				local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GIVE, effect.to:objectName(), effect.from:objectName(), self:objectName(), "")
				room:moveCardTo(card, effect.from, sgs.Player_PlaceHand, reason, true)
				
				if effect.from:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. effect.to:objectName()), false) then
					local recover = sgs.RecoverStruct()
					recover.who = effect.from
					recover.recover = 1
					room:recover(effect.to, recover, true)
				end
			end
		end
	end
}
suoqiu = sgs.CreateViewAsSkill{
	n = 1,
	name = "suoqiu",
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped() and to_select:isRed()
	end,
	view_as = function(self, cards)
		if #cards ~= 0 then
			local card = suoqiucard:clone()
			for _, c in ipairs(cards) do
				card:addSubcard(c)
			end
			return card
		end
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#suoqiu") < 1 and not player:isKongcheng()
	end
}

huajianxili_sorry:addSkill(suoqiu)

sgs.LoadTranslationTable{
	["suoqiu"] = "索求",
	[":suoqiu"] = "出牌阶段限一次，你可以弃置一张红色手牌，指定一名其他角色，<font color='#A9A9A9'>发动此技能</font>，你声明一个牌名，若其有<font color='#9400D3'>此牌名的手牌</font>，其须交给你<font color='#9400D3'>其中</font>一张，然后你可以令其回复1点体力。",
	["$suoqiu"] = "",
	["^suoqiu"] = "操作提示：<br/>选择一张手牌→选择一名角色→确定",
	["@suoqiu_give"] = "请交给 %src 一张 %dest",
	["suoqiu_choice_log"] = "请选择你要声明的类别：",
	["suoqiu_choice_log2"] = "请选择装备类别：",
	["suoqiu:choice"] = "你可以令 %src 回复1点体力",
}

--------------------------------------------------
--花环
--------------------------------------------------
--[[
huahuanbuff = sgs.CreateMaxCardsSkill{
	name = "#huahuanbuff",
	extra_func = function(self, target)
		if target:hasSkill("huahuan") and target:getPhase() == sgs.Player_Discard then
			local x = 0
			for _, card in sgs.list(target:getHandcards()) do
				if card:getSuit() == sgs.Card_Club then
					x = x + 1
				end
			end
			return x
		end
	end
}
huahuan = sgs.CreateTriggerSkill{
	name = "huahuan",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Discard then
				local invoke = false
				for _, card in sgs.list(player:getHandcards()) do
					if card:getSuit() == sgs.Card_Club then
						invoke = true
						room:setPlayerCardLimitation(player, "discard", sgs.Sanguosha:getCard(card:getId()):toString(), false)
					end
				end
				if invoke then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				end
			end
			if change.from == sgs.Player_Discard then
				for _, card in sgs.list(player:getHandcards()) do
					if card:getSuit() == sgs.Card_Club then
						room:removePlayerCardLimitation(player, "discard", sgs.Sanguosha:getCard(card:getId()):toString().."$0")
					end
				end
			end
		end
	end
}

huajianxili_sorry:addSkill(huahuan)
huajianxili_sorry:addSkill(huahuanbuff)

sgs.LoadTranslationTable{
	["huahuan"] = "花环",
	["#huahuanbuff"] = "花环",
	[":huahuan"] = "弃牌阶段，你的梅花牌不计入手牌数。",
	["$huahuan"] = "",
}
]]

--------------------------------------------------
--赤乌流火 秋乌
--设计者：
--------------------------------------------------

qiuwu_chiwuliuhuo = sgs.General(extension,"qiuwu_chiwuliuhuo","individual","3",false)

sgs.LoadTranslationTable{
	["qiuwu_chiwuliuhuo"] = "秋乌",
	["&qiuwu_chiwuliuhuo"] = "秋乌",
	["#qiuwu_chiwuliuhuo"] = "赤乌流火",
	["$qiuwu_chiwuliuhuo"] = "一般",
	["designer:qiuwu_chiwuliuhuo"] = "NSX",
	["cv:qiuwu_chiwuliuhuo"] = "",
	["illustrator:qiuwu_chiwuliuhuo"] = "",
	["~qiuwu_chiwuliuhuo"] = "",
}

qiuwu_chiwuliuhuo:setGender(sgs.General_Neuter)

--------------------------------------------------
--炽翎
--------------------------------------------------

chilingvs = sgs.CreateViewAsSkill{
	name = "chiling",
	n = 1,
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return to_select:isRed()
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local chain = sgs.Sanguosha:cloneCard("fire_attack", cards[1]:getSuit(), cards[1]:getNumber())
			chain:addSubcard(cards[1])
			chain:setSkillName(self:objectName())
			return chain
		end
	end,
	enabled_at_play = function(self, player)
		return player:getMark("chiling_used") == 0
	end
}
chiling = sgs.CreateTriggerSkill{
	name = "chiling",
	view_as_skill = chilingvs,
	events = {sgs.PreCardUsed, sgs.CardUsed, sgs.CardFinished},
	frequency = sgs.Skill_NotFrequent,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PreCardUsed then
			if data:toCardUse().card:getSkillName() == "chiling" then
				room:setPlayerMark(player, "chiling_used", 1)
			end
		elseif event == sgs.CardUsed then
			if data:toCardUse().card:getSkillName() == "chiling" then
				if not player:isKongcheng() --[[and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:"), false)]] then
					local card = room:askForCard(player, ".|.|.|hand", "@chiling_card", data, sgs.Card_MethodNone)
					if card and card:getId() ~= -1 then
						local log = sgs.LogMessage()
						log.from = player
						log.arg = self:objectName()
						log.arg2 = 1
						log.type = "#chiling_selected_log"
						room:sendLog(log)
						
						room:setCardFlag(card, "chiling_select_card")	--耦合入火攻源码
						room:setPlayerMark(player, "chiling_select_card_id", card:getId()+1)
						local ids = sgs.IntList()
						for _,cd in sgs.qlist(player:getHandcards()) do
							if cd:getId() ~= card:getId() then
								ids:append(cd:getId())
							end
						end
						if not ids:isEmpty() then
							room:showCards(player, ids)
							room:getThread():delay(500)
						end
					end
				end
			end
		elseif event == sgs.CardFinished then
			if data:toCardUse().card:getSkillName() == "chiling" then
				local cd = sgs.Sanguosha:getCard(player:getMark("chiling_select_card_id")-1)
				room:setPlayerMark(player, "chiling_select_card_id", 0)
				if cd and cd:hasFlag("chiling_select_card") then
					room:setCardFlag(cd, "-chiling_select_card")
				end
			end
		end
	end
}
--table.insert(discard_clear_flag, "chiling_select_card")				--进弃牌堆清除flag
table.insert(play_end_clear_mark, "chiling_used")				--出牌结束清除标记

qiuwu_chiwuliuhuo:addSkill(chiling)

sgs.LoadTranslationTable{
	["chiling"] = "炽翎",
	[":chiling"] = "出牌阶段限一次，你可以将一张红色牌当【火攻】使用，然后你可以<font color='#9400D3'>选择一张手牌</font>并展示其余手牌，你因此【火攻】弃置<font color='#9400D3'>所选的牌</font>并造成伤害时，此伤害＋1。",
	["$chiling"] = "",
	["chiling:choice"] = "你可以选择一张手牌，展示其余手牌，若本次火攻弃置了所选的牌，则造成的伤害+1",
	["@chiling_card"] = "你可以选择一张手牌，展示其余手牌，若本次火攻弃置了所选的牌，则造成的伤害+1<br/>操作提示：选择一张手牌→确定",
	["#chiling_selected_log"] = "%from 执行了“%arg”的效果，选择了 %arg2 张手牌",
}

--------------------------------------------------
--离息
--------------------------------------------------

lixi = sgs.CreateTriggerSkill{
	name = "lixi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DyingToDeath},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DyingToDeath and player:objectName() == data:toDying().who:objectName() then
			local can_trigger = false
			for _,id in sgs.qlist(room:getDrawPile()) do
				local card = sgs.Sanguosha:getCard(id)
				if card:isKindOf("Fan") then
					can_trigger = true
					break
				end
			end
			if can_trigger then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				room:setEmotion(player, "lixi")
				return true
			end
		end
		return false
	end,
}

qiuwu_chiwuliuhuo:addSkill(lixi)

sgs.LoadTranslationTable{
	["lixi"] = "离息",
	[":lixi"] = "锁定技，牌堆中有【朱雀羽扇】时，你不会因体力值减少而离场。",
	["$lixi"] = "",
}

--------------------------------------------------
--角色特性：翼之涅槃
--------------------------------------------------

characteristic_niepan = sgs.CreateTriggerSkill{	--空壳技能，用于判定
	name = "#characteristic_niepan",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
characteristic_niepan_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_niepan_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_niepan_state)
qiuwu_chiwuliuhuo:addSkill(characteristic_niepan)
qiuwu_chiwuliuhuo:addRelateSkill("characteristic_niepan_state")

sgs.LoadTranslationTable{
	["#characteristic_niepan"] = "翼之涅槃",
	["characteristic_niepan_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_niepan_state"] = "<font color='#DAA520'><b>翼之涅槃</b><br/>你在场时，疲劳回合效果改为：摸两张牌、受到1点火焰伤害。</font>",
	["$characteristic_niepan_state"] = "",
}

--------------------------------------------------
--济世苍龙 蓝柚
--设计者：
--------------------------------------------------

lanyou_jishicanglong = sgs.General(extension,"lanyou_jishicanglong","individual","3",true)

sgs.LoadTranslationTable{
	["lanyou_jishicanglong"] = "蓝柚",
	["&lanyou_jishicanglong"] = "蓝柚",
	["#lanyou_jishicanglong"] = "济世苍龙",
	["$lanyou_jishicanglong"] = "进阶",
	["designer:lanyou_jishicanglong"] = "Tangentle",
	["cv:lanyou_jishicanglong"] = "",
	["illustrator:lanyou_jishicanglong"] = "",
	["~lanyou_jishicanglong"] = "",
}

--------------------------------------------------
--调和
--------------------------------------------------

tiaohecard = sgs.CreateSkillCard{
	name = "tiaohe",
	target_fixed = false,
	will_throw = false,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			if to_select:objectName() ~= sgs.Self:objectName() and to_select:getHp() <= to_select:getMaxHp() then
				return SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName()) and not to_select:isKongcheng()
			end
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		if not SkillNullify(source, self:objectName()) then
			local id1 = self:getSubcards():first()
			local card1 = sgs.Sanguosha:getCard(id1)
			if not target:isKongcheng() and card1 then
				local id2 = room:askForCardChosen(source, target, "h", self:objectName(), false, sgs.Card_MethodNone)
				if id2 and id2 ~= -1 then
					local card2 = sgs.Sanguosha:getCard(id2)
					
					room:showCard(source, id1)
					room:showCard(target, id2)
					
					local id3 = room:drawCard()
					local card3 = sgs.Sanguosha:getCard(id3)
					
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_TURNOVER, source:objectName(), nil, self:objectName(), nil)
					room:moveCardTo(card3, source, nil, sgs.Player_DrawPile, reason, true)
					
					local choices = {}
					if card1:getSuit() == card2:getSuit() then
						if not table.contains(choices, "tiaohe_choice1") then
							table.insert(choices, "tiaohe_choice1")
						end
						if not table.contains(choices, "tiaohe_choice2") then
							table.insert(choices, "tiaohe_choice2")
						end
					end
					if card1:getSuit() == card3:getSuit() then
						if not table.contains(choices, "tiaohe_choice1") then
							table.insert(choices, "tiaohe_choice1")
						end
						if not table.contains(choices, "tiaohe_choice3") then
							table.insert(choices, "tiaohe_choice3")
						end
					end
					if card2:getSuit() == card3:getSuit() then
						if not table.contains(choices, "tiaohe_choice2") then
							table.insert(choices, "tiaohe_choice2")
						end
						if not table.contains(choices, "tiaohe_choice3") then
							table.insert(choices, "tiaohe_choice3")
						end
					end
					if #choices > 0 then
						target:setFlags("tiaohe_target_AI")	--AI用
						local choice = room:askForChoice(source, self:objectName().."+tiaohe_choice_log", table.concat(choices, "+"))
						target:setFlags("-tiaohe_target_AI")	--AI用
						if choice == "tiaohe_choice1" then
							room:throwCard(card1, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, source:objectName(), self:objectName(), nil), source)
						elseif choice == "tiaohe_choice2" then
							room:throwCard(card2, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, source:objectName(), self:objectName(), nil), target)
						elseif choice == "tiaohe_choice3" then
							room:throwCard(card3, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, source:objectName(), self:objectName(), nil), nil)
						end
						
						target:setFlags("tiaohe_target_AI")	--AI用
						if source:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. target:objectName()), false) then
							local recover = sgs.RecoverStruct()
							recover.who = source
							recover.recover = 1
							room:recover(target, recover, false, target:getMaxHp()+1)
						end
						target:setFlags("-tiaohe_target_AI")	--AI用
					end
				end
			end
		end
	end
}
tiaohe = sgs.CreateViewAsSkill{
	name = "tiaohe",
	n = 1,
	view_filter = function(self, selected, to_select)
		return not to_select:isEquipped()
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local NewSkillCard = tiaohecard:clone()
			NewSkillCard:addSubcard(cards[1])
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return not player:hasUsed("#tiaohe") and not player:isKongcheng()
	end,
}

lanyou_jishicanglong:addSkill(tiaohe)

sgs.LoadTranslationTable{
	["tiaohe"] = "调和",
	[":tiaohe"] = "出牌阶段限一次，你可以指定一名体力值≤体力上限的其他角色，<font color='#A9A9A9'>发动此技能</font>，展示<font color='#9400D3'>牌堆顶的牌和双方的各一张手牌</font>，你弃置<font color='#9400D3'>其中</font>一张花色重复的牌，然后可以令其"..WordState("滋养", word_ziyang_str).."1点体力。",
	["$tiaohe"] = "",
	["tiaohe_choice_log"] = "请弃置一张“调和”展示的牌：",
	["tiaohe_choice1"] = "你的手牌",
	["tiaohe_choice2"] = "目标的手牌",
	["tiaohe_choice3"] = "牌堆顶的牌",
	["tiaohe:choice"] = "你可以令 %src 滋养1点体力",
	["^tiaohe"] = "操作提示：<br/>选择一张要展示手牌→选择一名角色→确定",
}

--------------------------------------------------
--探玄
--------------------------------------------------

tanxuan = sgs.CreateTriggerSkill{
	name = "tanxuan",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:objectName() == player:objectName() or not myself:canEffect(player, self:objectName()) then continue end	--排除自己、目标不受影响的情况
				local can_trigger = false
				for _, equip in sgs.qlist(player:getEquips()) do
					if equip:getSuit() == sgs.Card_Spade then
						can_trigger = true
						break
					end
				end
				if can_trigger then
					room:sendCompulsoryTriggerLog(myself, self:objectName())	--显示锁定技发动
					--local random_one = player:getRandomHandCard()
					--if random_one then
					--	room:showCard(player, random_one:getId(), myself, true, false)	--仅自己（和目标）可见，不触发时机
					--end
					
					if not player:isKongcheng() then
						local not_overt_cards = {}
						for _,cd in sgs.qlist(player:getHandcards()) do
							if not cd:isOvert() then
								room:setCardFlag(cd, "tanxuan_overt_flag")
								table.insert(not_overt_cards, cd)
							end
						end
						if #not_overt_cards > 0 then
							local card = room:askForCard(player, ".|.|.|hand|tanxuan_overt_flag!", "@tanxuan_show", data, sgs.Card_MethodNone)	--加!用于强制选择
							if card then
								room:setOvertCard(player, card:getId(), true)
							else
								myself:drawCards(1, self:objectName())
							end
						else
							myself:drawCards(1, self:objectName())
						end
						for _,cd in ipairs(not_overt_cards) do
							room:setCardFlag(cd, "-tanxuan_overt_flag")
						end
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

--lanyou_jishicanglong:addSkill(tanxuan)

sgs.LoadTranslationTable{
	["tanxuan"] = "探玄",
	[":tanxuan"] = "锁定技，其他角色的结束阶段，若其装备区内有黑桃牌，其须明置一张手牌，否则你摸一张牌。",
	["$tanxuan"] = "",
	["@tanxuan_show"] = "请明置一张手牌",
}

--------------------------------------------------
--化鳞
--------------------------------------------------

hualin = sgs.CreateTriggerSkill{
	name = "hualin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardAsked},
	on_trigger = function(self, event, player, data, room)
		local pattern = data:toStringList()[1]
		if pattern == "jink" and player:getMark("&hualin+used+_lun") == 0 then
			--if player:askForSkillInvoke(self:objectName(), data) then
				local ids = sgs.IntList()
				local foot_notes = {}
				for _, p in sgs.qlist(room:getAllPlayers()) do
					local cards = sgs.QList2Table(p:getEquips())
					for _, card in ipairs(cards) do
						if card:getSuit() == sgs.Card_Spade then
							ids:append(card:getId())
							table.insert(foot_notes, p:getGeneralName().."+equip_area")
						end
					end
					local cards = sgs.QList2Table(p:getJudgingArea())
					for _, card in ipairs(cards) do
						if card:getSuit() == sgs.Card_Spade then
							ids:append(card:getId())
							table.insert(foot_notes, p:getGeneralName().."+judge_area+"..card:objectName())
						end
					end
				end
				if ids:isEmpty() then return false end
				
				room:fillAG(ids, player, sgs.IntList(), false, table.concat(foot_notes, "|"), true)
				local id = room:askForAG(player, ids, true, self:objectName())
				room:clearAG()
				local card = sgs.Sanguosha:getCard(id)
				if card then
					local owner = room:getCardOwner(id)
					if owner and owner:isAlive() then
						local logg = sgs.LogMessage()
						logg.from = player
						logg.type = "#InvokeSkill"
						logg.arg = self:objectName()
						room:sendLog(logg)	--显示技能发动提示信息
						room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
						room:setPlayerMark(player, "&hualin+used+_lun", 1)
						
						room:broadcastSkillInvoke("@recast")
						local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_RECAST, player:objectName(), nil, self:objectName(), nil)
						room:moveCardTo(card, owner, nil, sgs.Player_DiscardPile, reason, true)
						
						local log = sgs.LogMessage()
						log.type = "#UseCard_Recast"
						log.from = player
						log.card_str = sgs.Sanguosha:getCard(card:getEffectiveId()):toString()
						room:sendLog(log)
						
						owner:drawCards(1, "recast")
						
						local jink = sgs.Sanguosha:cloneCard("jink", sgs.Card_NoSuit, 0)
						jink:setSkillName("_"..self:objectName())
						room:provide(jink)
						return true
					end
				end
			--end
		end
	end
}

lanyou_jishicanglong:addSkill(hualin)

sgs.LoadTranslationTable{
	["hualin"] = "化鳞",
	[":hualin"] = "每轮限一次，你可以重铸场上的一张黑桃牌，视为使用或打出一张【闪】。",
	["$hualin"] = "",
	["^AG_hualin"] = "<b>化鳞</b><br/>视为出闪：双击选择一张要重铸的牌<br/>不视为出闪：点击“确定”",
}

--------------------------------------------------
--时隙白猫 濑川绪良
--设计者：
--------------------------------------------------

laichuanxuliang_shixibaimao = sgs.General(extension,"laichuanxuliang_shixibaimao","individual","3",false)

sgs.LoadTranslationTable{
	["laichuanxuliang_shixibaimao"] = "濑川绪良",
	["&laichuanxuliang_shixibaimao"] = "濑川绪良",
	["#laichuanxuliang_shixibaimao"] = "时隙白猫",
	["$laichuanxuliang_shixibaimao"] = "一般",
	["designer:laichuanxuliang_shixibaimao"] = "聚氧乙烯O2",
	["cv:laichuanxuliang_shixibaimao"] = "",
	["illustrator:laichuanxuliang_shixibaimao"] = "",
	["~laichuanxuliang_shixibaimao"] = "",
}

--------------------------------------------------
--奇遇
--------------------------------------------------

qiyu_card = sgs.CreateSkillCard{
	name = "qiyu",
	target_fixed = false,
	will_throw = true,
	handling_method = sgs.Card_MethodDiscard,
	filter = function(self, targets, to_select)
		if #targets == 0 then
			return to_select:isAlive() and SkillCanTarget(to_select, sgs.Self, self:objectName()) and sgs.Self:canEffect(to_select, self:objectName())
		end
		return false
	end,
	on_use = function(self, room, source, targets)
		local target = targets[1]
		if not SkillNullify(source, self:objectName()) then
			local thread = room:getThread()
			if source:getChangeSkillState(self:objectName()) <= 1 then
				target:setPhase(sgs.Player_Draw)
				room:broadcastProperty(target, "phase")
				if not thread:trigger(sgs.EventPhaseStart, room, target) then
					thread:trigger(sgs.EventPhaseProceeding, room, target)
				end
				thread:trigger(sgs.EventPhaseEnd, room, target)
			else
				target:setPhase(sgs.Player_Play)
				room:broadcastProperty(target, "phase")
				if not thread:trigger(sgs.EventPhaseStart, room, target) then
					thread:trigger(sgs.EventPhaseProceeding, room, target)
				end
				thread:trigger(sgs.EventPhaseEnd, room, target)
			end
			if target and target:isAlive() then
				target:setPhase(sgs.Player_Discard)
				room:broadcastProperty(target, "phase")
				if not thread:trigger(sgs.EventPhaseStart, room, target) then
					thread:trigger(sgs.EventPhaseProceeding, room, target)
				end
				thread:trigger(sgs.EventPhaseEnd, room, target)
			end
			if target:objectName() ~= source:objectName() then
				target:setPhase(sgs.Player_NotActive)
			end
			source:setPhase(sgs.Player_NotActive)
			room:broadcastProperty(source, "phase")
			
			room:setChangeSkillState(source, self:objectName(), Ternary(source:getChangeSkillState(self:objectName()) <= 1, 2, 1))
		end
	end
}
qiyuvs = sgs.CreateViewAsSkill{
	name = "qiyu",
	n = 1,
	view_filter = function(self, selected, to_select)
		if #selected > 0 then return false end
		return not sgs.Self:isJilei(to_select)
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local newcard = qiyu_card:clone()
			newcard:addSubcard(cards[1])
			return newcard
		end
	end,
	enabled_at_play = function()
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@qiyu"
	end
}
qiyu = sgs.CreateTriggerSkill{
	name = "qiyu",
	frequency = sgs.Skill_NotFrequent,
	change_skill = true,
	view_as_skill = qiyuvs,
	events = {sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging and data:toPhaseChange().to == sgs.Player_Finish and data:toPhaseChange().from ~= sgs.Player_Finish then
			if player:canDiscard(player, "he") then
				room:askForUseCard(player, "@@qiyu", "@qiyu:"..Ternary(player:getChangeSkillState(self:objectName()) <= 1, "draw", "play"))
			end
		end
	end,
}

laichuanxuliang_shixibaimao:addSkill(qiyu)

sgs.LoadTranslationTable{
	["qiyu"] = "奇遇",
	[":qiyu"] = "转换技，结束阶段前，你可以弃置一张牌<font color='#A9A9A9'>发动此技能</font>，令一名角色执行一个<font color='#CB5063'>①摸牌阶段 ②出牌阶段</font>和弃牌阶段。",
	[":qiyu1"] = "转换技，结束阶段前，你可以弃置一张牌<font color='#A9A9A9'>发动此技能</font>，令一名角色执行一个①摸牌阶段 <font color=\"#01A5AF\"><s>②出牌阶段</s></font>和弃牌阶段。",
	[":qiyu2"] = "转换技，结束阶段前，你可以弃置一张牌<font color='#A9A9A9'>发动此技能</font>，令一名角色执行一个<font color=\"#01A5AF\"><s>①摸牌阶段</s></font> ②出牌阶段和弃牌阶段。",
	["$qiyu"] = "",
	["@qiyu"] = "你可以弃置一张牌发动“奇遇”，令一名角色执行 %src阶段和弃牌阶段",
	["~qiyu"] = "选择一张牌→选择一名角色→确定",
}

--------------------------------------------------
--时溯
--------------------------------------------------

shisu = sgs.CreateTriggerSkill{
	name = "shisu",
	frequency = sgs.Skill_Limited,
	events = {sgs.AskForPeaches, sgs.EventPhaseChanging},
	limit_mark = "@shisu", 
	on_trigger = function(self, event, player, data, room)
		if event == sgs.AskForPeaches then
			local dying_data = data:toDying()
			if dying_data.who:objectName() ~= player:objectName() then return false end
			if player:getMark("@shisu") > 0 and player:getMark("&shisu_ready") > 0 and player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then	--还原部分
				room:doAnimate(2, "skill=ShisuAnim:", "")
				room:broadcastSkillInvoke("shisu")	--播放配音
				room:getThread():delay(5500)
				--以下部分直接在动画中结算
				for _,to in sgs.qlist(room:getAllPlayers()) do	--屏蔽所有角色的技能
					room:setPlayerMark(to, "skill_banned", 1)
				end
				
				for _, tag_name in ipairs(room_tag_used) do	--记录需要记录的tag
					local tag = room:getTag("shisu_"..tag_name)
					if tag then
						room:setTag(tag_name, tag)
					end
				end
				
				for _,p in sgs.qlist(room:getAllPlayers()) do
					if p:isDead() then continue end
					
					local general1_data = p:getTag("shisu_general1")
					local general2_data = p:getTag("shisu_general2")
					if general1_data and general1_data:toString() ~= "" then
						room:setPlayerProperty(p, "general", general1_data)
					end
					if general2_data and general2_data:toString() ~= "" then
						room:setPlayerProperty(p, "general2", general2_data)
					end
					
					local max_hp_data = p:getTag("shisu_max_hp")
					if max_hp_data then
						room:setPlayerProperty(p, "maxhp", max_hp_data)
					end
					
					local hp_data = p:getTag("shisu_hp")
					if hp_data then
						room:setPlayerProperty(p, "hp", hp_data)
					end
					
					if p:getTag("shisu_turned_over") then
						local is_turned_over = p:getTag("shisu_turned_over"):toBool()
						if (p:faceUp() and is_turned_over) or (not p:faceUp() and not is_turned_over) then
							p:turnOver()
						end
					end
					
					if p:getTag("shisu_chained") then
						local is_chained = p:getTag("shisu_chained"):toBool()
						room:setPlayerProperty(p, "chained", sgs.QVariant(is_chained))
					end
					
					if p:getTag("shisu_gender") then
						local gender_str = p:getTag("shisu_gender"):toString()
						if gender_str == "male" then
							p:setGender(sgs.General_Male)
						elseif gender_str == "female" then
							p:setGender(sgs.General_Female)
						elseif gender_str == "neuter" then
							p:setGender(sgs.General_Neuter)
						elseif gender_str == "sexless" then
							p:setGender()	--player设置为无性必须这样
						end
					end
					
					room:setPlayerMark(p, "skill_banned", 0)	--解除屏蔽
					if p:getTag("shisu_marks") then
						local marks_table = p:getTag("shisu_marks"):toString():split("¦")
						p:throwAllMarks(false)	--清除所有标记，true代表只清除可见标记（默认为true）
						local marks_count_str = p:getTag("shisu_marks_count"):toString()
						local marks_count = marks_count_str:split("¦")
						local index = 1
						for _, mark in ipairs(marks_table) do	--调整应有的标记
							room:setPlayerMark(p, mark, marks_count[index])
							index = index + 1
						end
					end
					
					if p:getTag("shisu_skill_list") then
						local skill_list_table = p:getTag("shisu_skill_list"):toString():split("¦")
						for _, skill_now in sgs.qlist(p:getSkillList(false, false)) do	--失去不应有的技能
							if not table.contains(skill_list_table, skill_now:objectName()) then
								room:handleAcquireDetachSkills(p, "-"..skill_now:objectName(), false, true, true, true)	--最后一项代表会停止化身动画
								--p:speak("lose "..skill_now:objectName())
							end
						end
						
						for _, skill_name in ipairs(skill_list_table) do	--获得应有的技能
							if not p:hasSkill(skill_name) then
								room:handleAcquireDetachSkills(p, skill_name)
								--p:speak("gain "..skill_name)
							end
						end
						
						if p:getTag("shisu_skill_state_list") then
							local skill_state_table = p:getTag("shisu_skill_state_list"):toString():split("¦")
							local index = 1
							for _, skill_name in ipairs(skill_list_table) do
								local skill = sgs.Sanguosha:getSkill(skill_name)	--还原技能状态（转换技、升级技）
								if skill and p:hasSkill(skill_name) then
									if skill:isChangeSkill() then
										room:setChangeSkillState(p, skill_name, tonumber(skill_state_table[index]))
									elseif skill:isLevelSkill() then
										room:setLevelSkillState(p, skill_name, tonumber(skill_state_table[index]))
									end
								end
								index = index + 1
							end
						end
					end
					
					room:setPlayerMark(p, "skill_banned", 1)	--屏蔽技能
					
					if p:getTag("shisu_flag_list") then
						local flag_list_table = p:getTag("shisu_flag_list"):toString():split("¦")
						p:clearFlags()	--清除所有flag
						for _, flag in ipairs(flag_list_table) do	--获得应有的flag
							p:setFlags(flag)
						end
					end
					
					p:setFlags("Fake_Move")
					
					p:clearPrivatePiles()	--清除所有私家牌堆
					if p:getTag("shisu_piles") then
						local pile_names = p:getTag("shisu_piles"):toString():split("¦")
						for _, pile_name in ipairs(pile_names) do
							local pile_list = p:getTag("shisu_piles_"..pile_name):toString():split("¦")
							for _, id in ipairs(pile_list) do
								p:addToPile(pile_name, id)
							end
						end
					end
					
					p:throwAllCards()
					local hand_list = p:getTag("shisu_handcards"):toString():split("¦")
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					for _, id in ipairs(hand_list) do
						dummy:addSubcard(id)
					end
					room:moveCardTo(dummy, nil, p, sgs.Player_PlaceHand, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_GOTCARD, player:objectName(), self:objectName(), ""), false)
					dummy:deleteLater()
					local equip_list = p:getTag("shisu_equipcards"):toString():split("¦")
					for _, id in ipairs(equip_list) do
						room:moveCardTo(sgs.Sanguosha:getCard(id), nil, p, sgs.Player_PlaceEquip, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), self:objectName(), ""))
					end
					local judge_list = p:getTag("shisu_judgecards"):toString():split("¦")
					local judge_objname_list = p:getTag("shisu_judgecards_objname"):toString():split("¦")
					local judge_skillname_list = p:getTag("shisu_judgecards_skillname"):toString():split("¦")
					--不能直接把延时锦囊放回去，因为可能有转化的情况
					--for _, id in ipairs(judge_list) do
					--	room:moveCardTo(sgs.Sanguosha:getCard(id), nil, p, sgs.Player_PlaceDelayedTrick, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), self:objectName(), ""))
					--end
					for i=1,#judge_list,1 do
						local id = judge_list[i]
						local card = sgs.Sanguosha:getCard(id)
						local objname = judge_objname_list[i]
						local skillname = judge_skillname_list[i]
						
						if room:getCardPlace(id) ~= sgs.Player_PlaceTable then	--已经在处理区的判定牌被移动后再结算会出错（如被闪电劈触发时溯，时溯结算后闪电置入弃牌堆出错崩溃）
							local new_card = sgs.Sanguosha:cloneCard(objname, card:getSuit(), card:getNumber())
							new_card:addSubcard(card)
							new_card:setSkillName(skillname)
							room:useCard(sgs.CardUseStruct(new_card, p, p))
						end
					end
					
					for _, tag_name in ipairs(player_tag_used) do	--记录需要记录的tag
						local tag = p:getTag("shisu_"..tag_name)
						if tag then
							p:setTag(tag_name, tag)
						end
					end
					
					p:setFlags("-Fake_Move")
				end
				
				room:setPlayerMark(player, "&shisu_ready", 0)
				room:removePlayerMark(player, "@shisu", 1)
				
				for _,to in sgs.qlist(room:getAllPlayers()) do	--解除屏蔽所有角色的技能
					room:setPlayerMark(to, "skill_banned", 0)
				end
				--等动画播完
				room:getThread():delay(500)
				for id = 0,500,1 do
					local card = sgs.Sanguosha:getCard(id)
					if card and card:isKindOf("Neneko") and not (room:getCardPlace(id) == sgs.Player_PlaceEquip and room:getCardOwner(id) and room:getCardOwner(id):objectName() == player:objectName()) and player:canUse(card) then
						local equip_index = card:getRealCard():toEquipCard():location()
						if player:hasEquipArea(equip_index) then	--检测对应装备区是否可用
							room:useCard(sgs.CardUseStruct(card, player, player))
							break
						end
					end
				end
				room:setPlayerMark(player, "&shisu_protect", 1)	--免伤部分耦合入情容
			end
			return false
		elseif event == sgs.EventPhaseChanging and data:toPhaseChange().from ~= sgs.Player_NotActive and data:toPhaseChange().to == sgs.Player_NotActive and player:getMark("@shisu") > 0 then	--记录部分
			for _, tag_name in ipairs(room_tag_used) do	--记录需要记录的room tag
				room:setTag("shisu_"..tag_name, room:getTag(tag_name))
			end
			
			for _,p in sgs.qlist(room:getAlivePlayers()) do
				
				p:setTag("shisu_general1", sgs.QVariant(p:getGeneralName()))
				if p:getGeneral2() then
					p:setTag("shisu_general2", sgs.QVariant(p:getGeneral2Name()))
				end
				
				local max_hp_data = sgs.QVariant()
				max_hp_data:setValue(p:getMaxHp())
				p:setTag("shisu_max_hp", max_hp_data)
				
				local hp_data = sgs.QVariant()
				hp_data:setValue(p:getHp())
				p:setTag("shisu_hp", hp_data)
				
				if not p:faceUp() then
					p:setTag("shisu_turned_over", sgs.QVariant(true))
				else
					p:setTag("shisu_turned_over", sgs.QVariant(false))
				end
				
				if p:isChained() then
					p:setTag("shisu_chained", sgs.QVariant(true))
				else
					p:setTag("shisu_chained", sgs.QVariant(false))
				end
				
				if p:isMale() then
					p:setTag("shisu_gender", sgs.QVariant("male"))
				elseif p:isFemale() then
					p:setTag("shisu_gender", sgs.QVariant("female"))
				elseif p:isNeuter() then
					p:setTag("shisu_gender", sgs.QVariant("neuter"))
				elseif p:isSexless() then
					p:setTag("shisu_gender", sgs.QVariant("sexless"))
				end
				
				local skill_list_table = {}
				local skill_state_table = {}
				for _, skill in sgs.qlist(p:getSkillList(false, false)) do	--getSkillList 参数1：是否包含装备技能 参数2：是否只列出可见技能
					table.insert(skill_list_table, skill:objectName())
					
					if skill:isChangeSkill() then
						table.insert(skill_state_table, p:getChangeSkillState(skill:objectName()))
					elseif skill:isLevelSkill() then
						table.insert(skill_state_table, p:getLevelSkillState(skill:objectName()))
					else
						table.insert(skill_state_table, 0)
					end
				end
				p:setTag("shisu_skill_list", sgs.QVariant(table.concat(skill_list_table, "¦")))
				p:setTag("shisu_skill_state_list", sgs.QVariant(table.concat(skill_state_table, "¦")))
				
				local marks_table = {}
				for _, mark in sgs.list(p:getMarkNames()) do
					table.insert(marks_table, mark)
				end
				p:setTag("shisu_marks", sgs.QVariant(table.concat(marks_table, "¦")))
				
				local marks_count = {}
				for _, mark in sgs.list(p:getMarkNames()) do
					table.insert(marks_count, p:getMark(mark))
				end
				p:setTag("shisu_marks_count", sgs.QVariant(table.concat(marks_count, "¦")))
				
				local flag_list_table = {}
				for _, flag in sgs.list(p:getFlagList()) do
					table.insert(flag_list_table, flag)
				end
				p:setTag("shisu_flag_list", sgs.QVariant(table.concat(flag_list_table, "¦")))
				
				local pile_names = {}
				for _, pile_name in sgs.list(p:getPileNames()) do
					table.insert(pile_names, pile_name)
					local pile_list = {}
					for _,id in sgs.qlist(p:getPile(pile_name)) do
						table.insert(pile_list, id)
					end
					p:setTag("shisu_piles_"..pile_name, sgs.QVariant(table.concat(pile_list, "¦")))
				end
				p:setTag("shisu_piles", sgs.QVariant(table.concat(pile_names, "¦")))
				
				local hand_list = {}
				for _,card in sgs.qlist(p:getCards("h"))do
					table.insert(hand_list, card:getId())
				end
				p:setTag("shisu_handcards", sgs.QVariant(table.concat(hand_list, "¦")))
				
				local equip_list = {}
				for _,card in sgs.qlist(p:getCards("e"))do
					table.insert(equip_list, card:getId())
				end
				p:setTag("shisu_equipcards", sgs.QVariant(table.concat(equip_list, "¦")))
				
				local judge_list = {}
				local judge_objname_list = {}
				local judge_skillname_list = {}
				for _,card in sgs.qlist(p:getCards("j"))do
					table.insert(judge_list, card:getId())
					table.insert(judge_objname_list, card:objectName())
					table.insert(judge_skillname_list, card:getSkillName())
				end
				p:setTag("shisu_judgecards", sgs.QVariant(table.concat(judge_list, "¦")))
				p:setTag("shisu_judgecards_objname", sgs.QVariant(table.concat(judge_objname_list, "¦")))
				p:setTag("shisu_judgecards_skillname", sgs.QVariant(table.concat(judge_skillname_list, "¦")))
				
				for _, tag_name in ipairs(player_tag_used) do	--记录需要记录的tag
					p:setTag("shisu_"..tag_name, p:getTag(tag_name))
				end
			end
			
			room:setPlayerMark(player, "&shisu_ready", 1)	--已记录信息
		end
	end
}
table.insert(turn_end_clear_mark, "&shisu_protect")	--回合结束清除标记

laichuanxuliang_shixibaimao:addSkill(shisu)

sgs.LoadTranslationTable{
	["shisu"] = "时溯",
	[":shisu"] = "限定技，你处于濒危状态时，你可以<font color='#A9A9A9'>发动此技能</font>，将在场角色<font color='#008080'><u><strong>回溯</strong></u></font>至你的上回合结束时，你使用一张【猫玩偶】，本回合不会受到伤害。<br/><br/><font color='#008080'><u>回溯</u>：回溯在场角色的全部状态、技能和区域内的牌。<br/></font><font color='#A9A9A9'>详细说明请查看游戏说明→特有机制说明。</font>",
	["$shisu"] = "（音效）",
	["shisu_ready"] = "时溯就绪",
	["shisu_protect"] = "时溯免伤",
}

--------------------------------------------------
--冰沙幼狼 璃星羽
--设计者：
--------------------------------------------------

lixingyu_bingshayoulang = sgs.General(extension,"lixingyu_bingshayoulang","individual","4",false)

sgs.LoadTranslationTable{
	["lixingyu_bingshayoulang"] = "璃星羽",
	["&lixingyu_bingshayoulang"] = "璃星羽",
	["#lixingyu_bingshayoulang"] = "冰沙幼狼",
	["$lixingyu_bingshayoulang"] = "萌新",
	["designer:lixingyu_bingshayoulang"] = "璃星羽",
	["cv:lixingyu_bingshayoulang"] = "",
	["illustrator:lixingyu_bingshayoulang"] = "",
	["~lixingyu_bingshayoulang"] = "",
}

lixingyu_bingshayoulang:setGender(sgs.General_Neuter)

--------------------------------------------------
--冰沙
--------------------------------------------------

bingsha = sgs.CreateTriggerSkill{
	name = "bingsha",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseChanging, sgs.CardUsed, sgs.CardResponded},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging and (player and player:isAlive() and player:hasSkill(self:objectName())) then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Draw and not player:isSkipped(sgs.Player_Draw) then
				local can_trigger = false
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if card:isKindOf("Peach") then
						can_trigger = true
						break
					end
				end
				if can_trigger and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:")) then
					if not SkillNullify(player, self:objectName()) then
						local cards = sgs.CardList()
						for _,id in sgs.qlist(room:getDrawPile()) do
							local card = sgs.Sanguosha:getCard(id)
							if card:isKindOf("Peach") then
								cards:append(card)
							end
						end
						if not cards:isEmpty() then
							room:doPicAnimate(player:objectName(), "skill/lixingyu_"..math.random(1,2))	--doPicAnimate:令指定玩家短暂显示一张图片
							local card = cards:at(math.random(0, cards:length() - 1))
							player:obtainCard(card, true)
						else
							local log = sgs.LogMessage()
							log.type = "#bingsha_find_fail"
							log.arg = self:objectName()
							log.arg2 = "peach"
							room:sendLog(log)	--发送信息框消息
						end
					end
					
					return true
				end
			end
			return false
		elseif event == sgs.CardUsed or event == sgs.CardResponded then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and card:isKindOf("IceSlash") then
				for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
					if player:objectName() ~= myself:objectName() then
						local dummy_card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
						if card:isVirtualCard() then
							for _, id in sgs.qlist(card:getSubcards()) do
								if room:getCardPlace(id) == sgs.Player_DiscardPile or room:getCardPlace(id) == sgs.Player_PlaceTable then
									dummy_card:addSubcard(id)
								end
							end
						else
							dummy_card:addSubcard(card:getId())
						end
						local N = dummy_card:subcardsLength()
						if N > 0 then
							room:sendCompulsoryTriggerLog(myself, self:objectName()) --显示锁定技发动
							room:doPicAnimate(myself:objectName(), "skill/lixingyu_"..math.random(5,6))	--doPicAnimate:令指定玩家短暂显示一张图片
							myself:obtainCard(dummy_card, true)
						end
						dummy_card:deleteLater()
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}

lixingyu_bingshayoulang:addSkill(bingsha)

sgs.LoadTranslationTable{
	["bingsha"] = "冰沙",
	[":bingsha"] = "你可以跳过摸牌阶段<font color='#A9A9A9'>发动此技能</font>，从牌堆随机获得一张【桃】。<br/>其他角色使用冰【杀】时，你获得之。",
	["$bingsha"] = "",
	["bingsha:choice"] = "你可以跳过摸牌阶段发动“冰沙”，从牌堆随机获得一张桃",
	["#bingsha_find_fail"] = "没有可通过“%arg”获得的 %arg2",
}

--------------------------------------------------
--冰身
--------------------------------------------------

bingshen = sgs.CreateTriggerSkill{
	name = "bingshen",
	events = {sgs.DamageInflicted, sgs.TargetConfirmed},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetConfirmed and not player:getArmor() then
			local use = data:toCardUse()
			if use.card and not use.card:isKindOf("SkillCard") and use.card:isKindOf("Slash") and use.card:isBlack() and use.to and use.to:contains(player) then
				room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
				if not use.card:isKindOf("IceSlash") then
					room:doPicAnimate(player:objectName(), "skill/lixingyu_"..math.random(3,4))	--doPicAnimate:令指定玩家短暂显示一张图片
				end
				local nullified_list = use.nullified_list	--无效目标列表
				table.insert(nullified_list, player:objectName())
				use.nullified_list = nullified_list
				data:setValue(use)
			end
		elseif event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.damage > 0 and damage.nature == sgs.DamageStruct_Fire then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				room:doPicAnimate(player:objectName(), "skill/lixingyu_"..math.random(7,9))	--doPicAnimate:令指定玩家短暂显示一张图片
				damage.damage = damage.damage + 1
				data:setValue(damage)
			end
		end
	end
}

lixingyu_bingshayoulang:addSkill(bingshen)

sgs.LoadTranslationTable{
	["bingshen"] = "冰身",
	[":bingshen"] = "锁定技，你受到的火焰伤害＋1；若你没有装备防具牌，黑色【杀】对你无效。",
	["$bingshen"] = "",
	["#bingshen"] = "由于 %from 的“%arg”的效果，防止了将受到的 %arg2 点伤害",
}

--------------------------------------------------
--角色特性：一起恰冰沙
--------------------------------------------------

characteristic_yiqiqiabingsha = sgs.CreateTriggerSkill{
	name = "#characteristic_yiqiqiabingsha",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			for id = 0,500,1 do
				if sgs.Sanguosha:getCard(id) then
					local card = sgs.Sanguosha:getCard(id)
					if card and (card:isKindOf("IceSlash") and card:getSuit() == sgs.Card_Club and card:getNumber() >= 1 and card:getNumber() <= 3) and room:getCardPlace(id) == sgs.Player_PlaceTable then
						room:moveCardsInToDrawpile(player, card, "", -1, true)
					end
				end
			end
		end
	end,
}
characteristic_yiqiqiabingsha_state = sgs.CreateTriggerSkill{	--空壳技能，用于说明
	name = "characteristic_yiqiqiabingsha_state",
	frequency = sgs.Skill_Compulsory,
	events = {},
	on_trigger = function(self, event, player, data, room)
	end,
}
vup_anjiang:addSkill(characteristic_yiqiqiabingsha_state)
lixingyu_bingshayoulang:addSkill(characteristic_yiqiqiabingsha)
lixingyu_bingshayoulang:addRelateSkill("characteristic_yiqiqiabingsha_state")

sgs.LoadTranslationTable{
	["characteristic_yiqiqiabingsha"] = "一起恰冰沙",
	["#characteristic_yiqiqiabingsha"] = "一起恰冰沙",
	["characteristic_yiqiqiabingsha_state"] = "<font color='#DAA520'>角色特性</font>",
	[":characteristic_yiqiqiabingsha_state"] = "<font color='#DAA520'><b>一起恰冰沙</b><br/>游戏开始时，将3张冰【杀】加入牌堆。</font>",
	["$characteristic_yiqiqiabingsha_state"] = "",
}

--------------------------------------------------
--玫瑰王子 海桑
--设计者：
--------------------------------------------------

haisang_meiguiwangzi = sgs.General(extension,"haisang_meiguiwangzi","individual","4",true)

sgs.LoadTranslationTable{
	["haisang_meiguiwangzi"] = "海桑",
	["&haisang_meiguiwangzi"] = "海桑",
	["#haisang_meiguiwangzi"] = "玫瑰王子",
	["$haisang_meiguiwangzi"] = "简单",
	["designer:haisang_meiguiwangzi"] = "萌龙少主",
	["cv:haisang_meiguiwangzi"] = "",
	["illustrator:haisang_meiguiwangzi"] = "",
	["~haisang_meiguiwangzi"] = "",
}

--------------------------------------------------
--温御
--------------------------------------------------

wenyu_vs = sgs.CreateViewAsSkill{
	name = "wenyu",
	n = 1,
	--expand_pile = "wooden_ox",	--允许使用木牛流马
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		if #selected < 1 then
			return to_select:isKindOf("Slash")
		else
			return false
		end
	end,
	view_as = function(self, cards)
		local scard
		if sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE or sgs.Sanguosha:getCurrentCardUseReason() == sgs.CardUseStruct_CARD_USE_REASON_RESPONSE_USE then
			local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
			if #cards == 1 then
				if pattern == "jink" then
					scard = sgs.Sanguosha:cloneCard("jink", sgs.Card_SuitToBeDecided, 0)
				elseif pattern == "nullification" then
					scard = sgs.Sanguosha:cloneCard("nullification", sgs.Card_SuitToBeDecided, 0)
				end
			end
		end
		if scard then
			scard:setSkillName(self:objectName())
			for _, c in ipairs(cards) do
				scard:addSubcard(c)
			end
			return scard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		if player:getPhase() ~= sgs.Player_NotActive then return false end	--限制回合外
		if player:getMark("&wenyu+used") > 0 then return false end
		
		local has_slash = false
		for _,cd in sgs.qlist(player:getHandcards()) do
			if cd:isKindOf("Slash") then
				has_slash = true
				break
			end
		end
		if pattern == "nullification" or pattern == "jink" then
			return has_slash
		end
	end,
	enabled_at_nullification = function(self, player)
		if player:getPhase() ~= sgs.Player_NotActive then return false end	--限制回合外
		if player:getMark("&wenyu+used") > 0 then return false end
		
		local has_slash = false
		for _,cd in sgs.qlist(player:getHandcards()) do
			if cd:isKindOf("Slash") then
				has_slash = true
				break
			end
		end
		return has_slash
	end
}
wenyu = sgs.CreateTriggerSkill{
	name = "wenyu",
	view_as_skill = wenyu_vs,
	events = {sgs.PreCardUsed, sgs.PreCardResponded, sgs.CardUsed, sgs.CardResponded},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PreCardUsed or event == sgs.PreCardResponded then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			else
				--if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				--end
			end
			if card and card:getSkillName() == self:objectName() and (card:isKindOf("Jink") or card:isKindOf("Nullification")) then
				room:setPlayerMark(player, "&wenyu+used", 1)
			end
		elseif event == sgs.CardUsed or event == sgs.CardResponded then
			local card
			if event == sgs.CardUsed then
				card = data:toCardUse().card
			else
				--if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				--end
			end
			if card and card:getSkillName() == self:objectName() and (card:isKindOf("Jink") or card:isKindOf("Nullification")) then
				if player:getMark("&wenyu+used") == 0 then	--无懈好像不会触发PreCardUsed/Responded时机，这里补上
					room:setPlayerMark(player, "&wenyu+used", 1)
				end
				--if card:isRed() then
				--	player:drawCards(2, self:objectName())
				--	if room:getCurrent() then
				--		room:getCurrent():drawCards(1, self:objectName())
				--	end
				--end
			end
		end
	end
}
table.insert(turn_end_clear_mark, "&wenyu+used")	--回合结束清除标记

haisang_meiguiwangzi:addSkill(wenyu)

sgs.LoadTranslationTable{
	["wenyu"] = "温御",
	[":wenyu"] = "每回合限一次，你于回合外可以将一张【杀】当【闪】或【无懈可击】使用或打出。",
	["$wenyu"] = "",
}

--------------------------------------------------
--解忧
--------------------------------------------------

jieyou = sgs.CreateTriggerSkill{
	name = "jieyou",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.CardAsked},
	on_trigger = function(self, event, player, data, room)
		local pattern = data:toStringList()[1]
		if pattern == "jink" then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:isAdjacentTo(player) and myself:objectName() ~= player:objectName() and myself:getMark("&jieyou+used") == 0 and not myself:hasFlag("jieyou_using") then
					local _data = sgs.QVariant()
					_data:setValue(player)
					myself:setFlags("jieyou_using")	--不允许嵌套询问
					sgs.hujiasource = player	--AI用
					local card = room:askForCard(myself, "jink", "@jieyou_ask:"..player:objectName(), _data, sgs.Card_MethodResponse, player, false, self:objectName(), true)
					sgs.hujiasource = nil	--AI用
					myself:setFlags("-jieyou_using")
					if card then
						room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						room:setPlayerMark(myself, "&jieyou+used", 1)
						--local jink = sgs.Sanguosha:cloneCard("jink", sgs.Card_NoSuit, 0)
						--jink:setSkillName("_"..self:objectName())
						card:setSkillName("_"..self:objectName())
						room:provide(card)
						return true
					end
				end
			end
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}
table.insert(turn_end_clear_mark, "&jieyou+used")	--回合结束清除标记

haisang_meiguiwangzi:addSkill(jieyou)

sgs.LoadTranslationTable{
	["jieyou"] = "解忧",
	[":jieyou"] = "每回合限一次，与你相邻的角色需要使用/打出【闪】时，你可以打出一张【闪】，视为其使用/打出之。",
	["$jieyou"] = "",
	["@jieyou_ask"] = "你可以使用“解忧”，代替 %src 出闪",
}

--------------------------------------------------
--星空 永远酱
--设计者：
--------------------------------------------------

yongyuanjiang_xingkong = sgs.General(extension,"yongyuanjiang_xingkong","individual","4",false)

sgs.LoadTranslationTable{
	["yongyuanjiang_xingkong"] = "永远酱",
	["&yongyuanjiang_xingkong"] = "永远酱",
	["#yongyuanjiang_xingkong"] = "星空",
	["$yongyuanjiang_xingkong"] = "一般",
	["designer:yongyuanjiang_xingkong"] = "Tangentle",
	["cv:yongyuanjiang_xingkong"] = "",
	["illustrator:yongyuanjiang_xingkong"] = "",
	["~yongyuanjiang_xingkong"] = "",
}

--------------------------------------------------
--星陨
--------------------------------------------------

xingyuncard = sgs.CreateSkillCard{
	name = "xingyun",
	filter = function(self, targets, to_select)
		return #targets < sgs.Self:getMark("xingyun_count") and to_select:getHp() > sgs.Self:getHp() and sgs.Self:canEffect(to_select, "xingyun")
	end,
	on_use = function(self, room, source, targets)
		if #targets > 0 --[[and not SkillNullify(source, "zhongyu")]] then
			room:setChangeSkillState(source, self:objectName(), 1)
			for _, target in ipairs(targets) do
				room:damage(sgs.DamageStruct(self:objectName(), source, target))
			end
		end
	end
}
xingyunvs = sgs.CreateZeroCardViewAsSkill{
	name = "xingyun",
	view_as = function()
		return xingyuncard:clone()
	end,
    enabled_at_play = function(self,player)
        return false
    end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@xingyun"
	end
}
xingyun = sgs.CreateTriggerSkill{
	name = "xingyun",
	change_skill = true,
	events = {sgs.EventPhaseStart, sgs.Damaged},
	view_as_skill = xingyunvs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged and data:toDamage().damage > 0 and player:getChangeSkillState(self:objectName()) <= 1 then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			room:setChangeSkillState(player, self:objectName(), 2)
			
			--local card = room:askForCard(player, ".|.|.|hand,equipped!", "@xingyun_recast", data, sgs.Card_MethodNone)
			--if card then
			--	room:broadcastSkillInvoke("@recast")
			--	local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_RECAST, player:objectName(), nil, self:objectName(), nil)
			--	room:moveCardTo(card, player, nil, sgs.Player_DiscardPile, reason, true)
			--	
			--	local log = sgs.LogMessage()
			--	log.type = "#UseCard_Recast"
			--	log.from = player
			--	log.card_str = sgs.Sanguosha:getCard(card:getEffectiveId()):toString()
			--	room:sendLog(log)
			--	
			--	player:drawCards(1, "recast")
			--else
			--	local log = sgs.LogMessage()
			--	log.type = "#xingyun_no_recast"
			--	log.from = player
			--	log.arg = self:objectName()
			--	room:sendLog(log)	--发送信息框消息
			--end
			
			player:drawCards(1, self:objectName())
			if not player:isNude() then
				room:askForDiscard(player, self:objectName(), 1, 1, false, true)
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish and player:getChangeSkillState(self:objectName()) == 2 and player:getLostHp() > 0 then
			local can_trigger = false
			for _, p in sgs.qlist(room:getOtherPlayers(player)) do
				if p:getHp() > player:getHp() and player:canEffect(p, self:objectName()) then
					can_trigger = true
					break
				end
			end
			if can_trigger then
				room:setPlayerMark(player, "xingyun_count", player:getLostHp())
				if player:getMark("xingyun_count") > 0 then
					room:askForUseCard(player, "@@xingyun", "@xingyun:"..player:getMark("xingyun_count"))
				end
				room:setPlayerMark(player, "xingyun_count", 0)
			end
			return false
		end
	end
}

yongyuanjiang_xingkong:addSkill(xingyun)

sgs.LoadTranslationTable{
	["xingyun"] = "星陨",
	[":xingyun"] = "转换技，<font color='#CB5063'>①</font>你受到伤害后，摸一张牌、弃置一张牌<br/><font color='#CB5063'>②</font>结束阶段，你可以对至多X名体力值高于你的角色各造成1点伤害。（X为你已损失体力值）",
	[":xingyun1"] = "转换技，①你受到伤害后，摸一张牌、弃置一张牌<br/><font color=\"#01A5AF\"><s>②结束阶段，你可以对至多X名体力值高于你的角色各造成1点伤害。（X为你已损失体力值）</s></font>",
	[":xingyun2"] = "转换技，<font color=\"#01A5AF\"><s>①你受到伤害后，摸一张牌、弃置一张牌</s></font><br/>②结束阶段，你可以对至多X名体力值高于你的角色各造成1点伤害。（X为你已损失体力值）",
	["@xingyun"] = "你可以发动“星陨”，对至多 %src 名体力值高于你角色各造成1点伤害",
	["@xingyun_recast"] = "你的“星陨”被触发，请重铸一张牌",
	["#xingyun_no_recast"] = "%from 不能通过“%arg”重铸牌",
	["~xingyun"] = "选择若干名角色→确定",
	["$xingyun"] = "",
}

--------------------------------------------------
--憨态
--------------------------------------------------

hantai = sgs.CreateTriggerSkill{
	name = "hantai",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardsMoveOneTime, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseChanging and data:toPhaseChange().from == sgs.Player_NotActive and data:toPhaseChange().to ~= sgs.Player_NotActive then
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			for _, mark in sgs.list(player:getMarkNames()) do
				if string.sub(mark, 1, 12) == "hantai_card_" and player:getMark(mark) > 0 then
					local id = tonumber(string.sub(mark, 13, -1))
					for _,card in sgs.qlist(player:getCards("h")) do
						if card:getId() == id then
							dummy:addSubcard(id)
						end
					end
					room:setPlayerMark(player, mark, 0)
				end
			end
			if dummy:subcardsLength() > 0 then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, player:objectName(), self:objectName(), nil), player)
				room:damage(sgs.DamageStruct(self:objectName(), nil, player))
			end
			dummy:deleteLater()
		elseif event == sgs.CardsMoveOneTime then
			local move = data:toMoveOneTime()
			if move.from and move.from:isAlive() and player:objectName() == move.from:objectName()
					and (move.from_places:contains(sgs.Player_PlaceHand) or move.from_places:contains(sgs.Player_PlaceEquip))
					--and (bit32.band(move.reason.m_reason, sgs.CardMoveReason_S_MASK_BASIC_REASON) == sgs.CardMoveReason_S_REASON_DISCARD)
					and move.reason.m_reason == sgs.CardMoveReason_S_REASON_DISMANTLE then
				local dummy_card = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _, id in sgs.qlist(move.card_ids) do
					if room:getCardPlace(id) == sgs.Player_DiscardPile then
						room:setPlayerMark(player, "hantai_card_" .. id, 1)
						dummy_card:addSubcard(id)
						room:setCardFlag(sgs.Sanguosha:getCard(id), "&hantai")	--可见手牌下标
					end
				end
				local N = dummy_card:subcardsLength()
				if N > 0 then
					room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
					player:obtainCard(dummy_card, true)
				end
				dummy_card:deleteLater()
			end
		end
		return false
	end
}
table.insert(discard_clear_flag, "&hantai")			--进弃牌堆清除flag
table.insert(change_owner_clear_flag, "&hantai")	--持有者变化清除flag

yongyuanjiang_xingkong:addSkill(hantai)

sgs.LoadTranslationTable{
	["hantai"] = "憨态",
	[":hantai"] = "锁定技，你的牌被破坏后，你获得之。回合开始时，弃置你手牌中以此法获得的牌，你受到1点伤害。",
	["$hantai"] = "",
	["&hantai"] = "憨态",
}

--------------------------------------------------
--孤旅归星 星月璃り
--设计者：
--------------------------------------------------

xingyueli_gulvguixing = sgs.General(extension,"xingyueli_gulvguixing","individual","4",false)

sgs.LoadTranslationTable{
	["xingyueli_gulvguixing"] = "星月璃り",
	["&xingyueli_gulvguixing"] = "星月璃り",
	["#xingyueli_gulvguixing"] = "孤旅归星",
	["$xingyueli_gulvguixing"] = "萌新",
	["designer:xingyueli_gulvguixing"] = "SunFlower",
	["cv:xingyueli_gulvguixing"] = "",
	["illustrator:xingyueli_gulvguixing"] = "",
	["~xingyueli_gulvguixing"] = "",
}

--------------------------------------------------
--琉彩
--------------------------------------------------

liucai = sgs.CreateTriggerSkill{
	name = "liucai",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.DrawNCards, sgs.EventPhaseChanging},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DrawNCards then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			data:setValue(0)
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			local suits = {"heart","diamond","spade","club"}
			for _,cd in sgs.qlist(player:getHandcards()) do
				if table.contains(suits, cd:getSuitString()) then
					table.removeOne(suits, cd:getSuitString())
				end
			end
			if #suits > 0 then
				local heart_cards = {}
				local diamond_cards = {}
				local spade_cards = {}
				local club_cards = {}
				for _,id in sgs.qlist(room:getDrawPile()) do
					local card = sgs.Sanguosha:getCard(id)
					if table.contains(suits, card:getSuitString()) then
						if card:getSuit() == sgs.Card_Heart then
							table.insert(heart_cards, card)
						elseif card:getSuit() == sgs.Card_Diamond then
							table.insert(diamond_cards, card)
						elseif card:getSuit() == sgs.Card_Spade then
							table.insert(spade_cards, card)
						elseif card:getSuit() == sgs.Card_Club then
							table.insert(club_cards, card)
						end
					end
				end
				if #heart_cards > 0 then
					dummy:addSubcard(heart_cards[math.random(1, #heart_cards)])
				end
				if #diamond_cards > 0 then
					dummy:addSubcard(diamond_cards[math.random(1, #diamond_cards)])
				end
				if #spade_cards > 0 then
					dummy:addSubcard(spade_cards[math.random(1, #spade_cards)])
				end
				if #club_cards > 0 then
					dummy:addSubcard(club_cards[math.random(1, #club_cards)])
				end
				dummy:shuffleSubcards()	--新增函数，打乱子卡顺序（不然子卡永远是♥♦♠♣顺序，不够随机）
				local count = dummy:subcardsLength()
				if count > 0 then
					--播个摸牌音效，不然太怪了
					if count == 1 then
						room:broadcastSkillInvoke("audio_effect", 1)	--播放配音（抽卡1）
					elseif count == 2 then
						room:broadcastSkillInvoke("audio_effect", 2)	--播放配音（抽卡2）
					elseif count >= 3 then
						room:broadcastSkillInvoke("audio_effect", 3)	--播放配音（抽卡3+）
					end
					
					player:obtainCard(dummy, true)
				end
				dummy:deleteLater()
			end
		elseif event == sgs.EventPhaseChanging then
			local change = data:toPhaseChange()
			if change.to == sgs.Player_Discard and not player:isSkipped(sgs.Player_Discard) then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				return true
			end
			return false
		end
	end,
}

xingyueli_gulvguixing:addSkill(liucai)

sgs.LoadTranslationTable{
	["liucai"] = "琉彩",
	[":liucai"] = "锁定技，摸牌阶段，你改为从牌堆随机获得手牌中没有的花色的各一张牌；你跳过弃牌阶段。",
	["$liucai"] = "",
}

--------------------------------------------------
--不居之猫 尾音猫
--设计者：
--------------------------------------------------

weiyinmao_bujuzhimao = sgs.General(extension,"weiyinmao_bujuzhimao","individual","4",false)

sgs.LoadTranslationTable{
	["weiyinmao_bujuzhimao"] = "尾音猫",
	["&weiyinmao_bujuzhimao"] = "尾音猫",
	["#weiyinmao_bujuzhimao"] = "不居之猫",
	["$weiyinmao_bujuzhimao"] = "简单",
	["designer:weiyinmao_bujuzhimao"] = "尾音猫、Tangentle、唯江",
	["cv:weiyinmao_bujuzhimao"] = "",
	["illustrator:weiyinmao_bujuzhimao"] = "",
	["~weiyinmao_bujuzhimao"] = "",
}

weiyinmao_bujuzhimao:setGender(sgs.General_Neuter)

--------------------------------------------------
--炼金
--------------------------------------------------

lianjinUseCard = sgs.CreateSkillCard{
	name = "lianjinUse",
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(sgs.Self:getMark("lianjin_id")-1)
		return card and not card:targetFixed() and card:targetFilter(targets_list, to_select, sgs.Self) and not sgs.Self:isProhibited(to_select, card)
	end,
	feasible = function(self, targets)
		if sgs.Self:getMark("lianjin_cannot_use") > 0 then return false end
		local targets_list = sgs.PlayerList()
		for _, target in ipairs(targets) do
			targets_list:append(target)
		end
		local card = sgs.Sanguosha:getCard(sgs.Self:getMark("lianjin_id")-1)
		return card and card:targetsFeasible(targets_list, sgs.Self)
	end,
	about_to_use = function(self, room, use)
		local card_for_use = sgs.Sanguosha:getCard(use.from:getMark("lianjin_id")-1)
		local targets_list = sgs.SPlayerList()
		for _, p in sgs.qlist(use.to) do
			if not use.from:isProhibited(p, card_for_use) then
				targets_list:append(p)
			end
		end
		room:useCard(sgs.CardUseStruct(card_for_use, use.from, targets_list))
	end
}
lianjin_vs = sgs.CreateViewAsSkill{
	name = "lianjin",
	n = 0,
	expand_pile = "lianjin",
	view_filter = function(self, selected, to_select)
		return false
	end,
	view_as = function(self, cards)
		local pattern = sgs.Sanguosha:getCurrentCardUsePattern()
		if pattern == "@@lianjin" and #cards == 0 and sgs.Self:getMark("lianjin_id") > 0 then
			local NewSkillCard = lianjinUseCard:clone()
			return NewSkillCard
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@lianjin"
	end
}
lianjin = sgs.CreateTriggerSkill{
	name = "lianjin",
	events = {sgs.EventPhaseStart, sgs.PreCardUsed, sgs.PreCardResponded},
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = lianjin_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Play and not player:isKongcheng() then
			local dummy = room:askForExchange(player, self:objectName(), 999, 1, false, "#lianjin", true)
			if dummy and dummy:subcardsLength() > 0 then	--ai不返回值时dummy为空
				local logg = sgs.LogMessage()
				logg.from = player
				logg.type = "#InvokeSkill"
				logg.arg = self:objectName()
				room:sendLog(logg)	--显示技能发动提示信息
				room:notifySkillInvoked(player, self:objectName())	--在武将牌上显示技能名
				if not SkillNullify(player, self:objectName()) then
					room:showCards(player, dummy:getSubcards())
					room:getThread():delay(500)
					local card_id = room:drawCard()
					local card = sgs.Sanguosha:getCard(card_id)
					--local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DRAW, player:objectName(), self:objectName(), "")
					--room:obtainCard(player, card, reason, false)
					local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_TURNOVER, player:objectName(), nil, self:objectName(), nil)
					room:moveCardTo(card, player, nil, sgs.Player_DrawPile, reason, true)
					
					local all_different = true
					for _,id in sgs.qlist(dummy:getSubcards()) do
						local cd = sgs.Sanguosha:getCard(id)
						if cd:getTypeId() == card:getTypeId() then
							all_different = false
						end
					end
					if all_different then
						--local log = sgs.LogMessage()
						--log.from = player
						--log.arg = self:objectName()
						--log.arg2 = "play"
						--log.type = "#lianjin_log"
						--room:sendLog(log)
						
						room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISMANTLE, player:objectName(), player:objectName(), self:objectName(), ""), player)
						dummy:deleteLater()
						--return true
					else
						--player:setFlags("Fake_Move")
						--player:addToPile("lianjin", card:getId())
						--player:setFlags("-Fake_Move")
						
						--if player:canUse(card, room:getAlivePlayers(), false, true) then	--新增第四个参数，在出牌阶段内询问使用的杀也受次数限制
							local move = sgs.CardsMoveStruct(card:getId(), nil, player, sgs.Player_PlaceTable, sgs.Player_PlaceSpecial,
							sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), "lianjin", ""))
							move.to_pile_name = "lianjin"
							local moves = sgs.CardsMoveList()
							moves:append(move)
							local players = sgs.SPlayerList()
							players:append(player)
							room:notifyMoveCards(true, moves, false, players)
							room:notifyMoveCards(false, moves, false, players)
							
							local used = false
							room:setPlayerMark(player, "lianjin_id", card:getId()+1)	--记录拼点牌，id+1避免id为0的牌的情况
							if not player:canUse(card) then	--阻止客户端出现使用闪无懈这种情况
								room:setPlayerMark(player, "lianjin_cannot_use", 1)
							end
							used = room:askForUseCard(player, "@@lianjin", "@lianjin:"..card:objectName())
							room:setPlayerMark(player, "lianjin_id", 0)	--清理记录
							room:setPlayerMark(player, "lianjin_cannot_use", 0)
							if used then
								--room:addPlayerHistory(player, getCardClassName(card), 1)
							else
								--player:setFlags("Fake_Move")
								--local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), nil, self:objectName(), nil)
								--room:moveCardTo(card, player, nil, sgs.Player_DrawPile, reason, true)
								--player:setFlags("-Fake_Move")
								local move = sgs.CardsMoveStruct(card:getId(), player, nil, sgs.Player_PlaceSpecial, sgs.Player_PlaceTable,
								sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), "lianjin", ""))
								move.from_pile_name = "lianjin"
								local moves = sgs.CardsMoveList()
								moves:append(move)
								local players = sgs.SPlayerList()
								players:append(player)
								room:notifyMoveCards(true, moves, false, players)
								room:notifyMoveCards(false, moves, false, players)
							end
						--end
					end
				end
				dummy:deleteLater()
			end
		elseif event == sgs.PreCardUsed or event == sgs.PreCardResponded then
			local card
			if event == sgs.PreCardUsed then
				card = data:toCardUse().card
			else
				if data:toCardResponse().m_isUse then
					card = data:toCardResponse().m_card
				end
			end
			if card and not card:isVirtualCard() and not card:isKindOf("SkillCard") and card:getId() == player:getMark("lianjin_id")-1 then	--注意，VirtualCard的id就是-1，因此技能卡会有一个错误的视觉特效，需要排除
				local move = sgs.CardsMoveStruct(card:getId(), player, nil, sgs.Player_PlaceSpecial, sgs.Player_PlaceTable,
				sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_PUT, player:objectName(), "lianjin", ""))
				move.from_pile_name = "lianjin"
				local moves = sgs.CardsMoveList()
				moves:append(move)
				local players = sgs.SPlayerList()
				players:append(player)
				room:notifyMoveCards(true, moves, false, players)
				room:notifyMoveCards(false, moves, false, players)
			end
		end
	end
}

weiyinmao_bujuzhimao:addSkill(lianjin)

sgs.LoadTranslationTable{
	["lianjin"] = "炼金",
	[":lianjin"] = "出牌阶段开始时，你可以<font color='#A9A9A9'>发动此技能</font>，展示任意张手牌与<font color='#9400D3'>牌堆顶的牌</font>，若<font color='#9400D3'>此牌</font>与你展示的牌类别均不同，则破坏你展示的牌，否则你可以使用<font color='#9400D3'>此牌</font>。",
	["$lianjin"] = "",
	["#lianjin"] = "你可以发动“炼金”，展示任意张手牌，若牌堆顶的牌与展示的牌有相同类别，你可以使用之，否则破坏你展示的牌",
	["#lianjin_log"] = "%from 炼成失败，将跳过 %arg2 阶段",
	["@lianjin"] = "你可以使用牌堆顶的 %src",
	["~lianjin"] = "使用：选择目标（若需要）→确定<br/>不使用：取消",
}

--------------------------------------------------
--绝智/降智
--注：锁定视为技调用sgs.Self获取标记不知道为什么总是慢一个出牌阶段自由时间点……所以这里改用静态的了（就是代码丑了点）
--------------------------------------------------

jiangzhi_1 = sgs.CreateFilterSkill{
	name = "jiangzhi_1",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 1
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_1)	--加给暗将


jiangzhi_2 = sgs.CreateFilterSkill{
	name = "jiangzhi_2",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 2
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_2)	--加给暗将


jiangzhi_3 = sgs.CreateFilterSkill{
	name = "jiangzhi_3",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 3
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_3)	--加给暗将


jiangzhi_4 = sgs.CreateFilterSkill{
	name = "jiangzhi_4",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 4
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_4)	--加给暗将


jiangzhi_5 = sgs.CreateFilterSkill{
	name = "jiangzhi_5",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 5
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_5)	--加给暗将


jiangzhi_6 = sgs.CreateFilterSkill{
	name = "jiangzhi_6",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 6
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_6)	--加给暗将


jiangzhi_7 = sgs.CreateFilterSkill{
	name = "jiangzhi_7",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 7
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_7)	--加给暗将


jiangzhi_8 = sgs.CreateFilterSkill{
	name = "jiangzhi_8",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 8
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_8)	--加给暗将


jiangzhi_9 = sgs.CreateFilterSkill{
	name = "jiangzhi_9",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 9
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_9)	--加给暗将


jiangzhi_10 = sgs.CreateFilterSkill{
	name = "jiangzhi_10",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 10
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_10)	--加给暗将


jiangzhi_11 = sgs.CreateFilterSkill{
	name = "jiangzhi_11",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 11
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_11)	--加给暗将


jiangzhi_12 = sgs.CreateFilterSkill{
	name = "jiangzhi_12",
	view_filter = function(self, to_select)		--不能直接调用sgs.Self（isEquipped里也用了这个所以同理不能直接调用）
		local room = sgs.Sanguosha:currentRoom()
		local place = room:getCardPlace(to_select:getEffectiveId())
		return place == sgs.Player_PlaceHand
	end,
	view_as = function(self, card)
		local id = card:getEffectiveId()
		local X = 12
		local new_card = sgs.Sanguosha:getWrappedCard(id)
		new_card:setSkillName("_"..self:objectName())
		new_card:setNumber(math.max(1, (card:getNumber() - X)))
		new_card:setModified(true)
		return new_card
	end
}
vup_anjiang:addSkill(jiangzhi_12)	--加给暗将


sgs.LoadTranslationTable{
	["jiangzhi_1"] = "智熄1阶",
	[":jiangzhi_1"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－1。",
	["jiangzhi_2"] = "智熄2阶",
	[":jiangzhi_2"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－2。",
	["jiangzhi_3"] = "智熄3阶",
	[":jiangzhi_3"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－3。",
	["jiangzhi_4"] = "智熄4阶",
	[":jiangzhi_4"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－4。",
	["jiangzhi_5"] = "智熄5阶",
	[":jiangzhi_5"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－5。",
	["jiangzhi_6"] = "智熄6阶",
	[":jiangzhi_6"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－6。",
	["jiangzhi_7"] = "智熄7阶",
	[":jiangzhi_7"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－7。",
	["jiangzhi_8"] = "智熄8阶",
	[":jiangzhi_8"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－8。",
	["jiangzhi_9"] = "智熄9阶",
	[":jiangzhi_9"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－9。",
	["jiangzhi_10"] = "智熄10阶",
	[":jiangzhi_10"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－10。",
	["jiangzhi_11"] = "智熄11阶",
	[":jiangzhi_11"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－11。",
	["jiangzhi_12"] = "智熄12阶",
	[":jiangzhi_12"] = "<font color='#008B8B'><b>衍生技，</b></font>锁定技，你的手牌点数－12。",
}


jiangzhi = sgs.CreateTriggerSkill{
	name = "jiangzhi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.CardFinished, sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.CardFinished and player:getPhase() ~= sgs.Player_NotActive then
			--确保至少有一名拥有此技能的角色可以影响目标角色
			local can_effect = false
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:canEffect(player, self:objectName()) then
					can_effect = true
					break
				end
			end
			if not can_effect then return false end
			
			local use = data:toCardUse()
			if not use.card:isKindOf("SkillCard") then
				room:addPlayerMark(player, "&jiangzhi!", 1)
				local count = player:getMark("&jiangzhi!")
				if count <= 12 then
					if count > 1 and player:hasSkill("jiangzhi_"..count-1) then
						room:detachSkillFromPlayer(player, "jiangzhi_"..count-1)
					end
					if not player:hasSkill("jiangzhi_"..count) then
						room:acquireOneTurnSkills(player, self:objectName(), "jiangzhi_"..count)
					end
				end
			end
		elseif event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Play then
			--确保至少有一名拥有此技能的角色可以影响目标角色
			local can_effect = false
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				if myself:canEffect(player, self:objectName()) then
					can_effect = true
					break
				end
			end
			if not can_effect then return false end
			
			--room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			room:setPlayerMark(player, "jiangzhi_limit+use+.|.|1|hand", 1)
			room:setPlayerCardLimitation(player, "use", ".|.|1|hand", false)
			room:filterCards(player, player:getCards("h"), true)
		end
	end,
	can_trigger = function(self, target)
		return target
	end
}
table.insert(play_end_clear_mark, "&jiangzhi!")	--出牌结束清除标记
table.insert(play_end_limit_card_prefix, "jiangzhi_limit")	--封印直到出牌结束


juezhi = sgs.CreateTriggerSkill{
	name = "juezhi",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
			room:detachSkillFromPlayer(player, "juezhi")
			for _, p in sgs.qlist(room:getAlivePlayers()) do
				if not p:hasSkill("jiangzhi") then
					room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
					room:acquireSkill(p, "jiangzhi")
				end
			end
		end
		return false
	end
}

--vup_anjiang:addSkill(jiangzhi)
--weiyinmao_bujuzhimao:addSkill(juezhi)
--weiyinmao_bujuzhimao:addRelateSkill("jiangzhi")

weiyinmao_bujuzhimao:addSkill(jiangzhi)

sgs.LoadTranslationTable{
	["juezhi"] = "绝智",
	[":juezhi"] = "锁定技，游戏开始时，失去此技能，令所有角色获得“降智”。",
	["$juezhi"] = "",
	["jiangzhi"] = "降智",
	[":jiangzhi"] = "锁定技，所有角色于其出牌阶段内不能使用点数为A的牌。<br/>当前回合角色使用牌结算结束后，本回合其手牌点数－1。",
	["$jiangzhi"] = "",
}

--------------------------------------------------
--水柳暮玥
--设计者：
--------------------------------------------------

shuiliumuyue_benzhaimonv = sgs.General(extension,"shuiliumuyue_benzhaimonv","individual","4",false)

sgs.LoadTranslationTable{
	["shuiliumuyue_benzhaimonv"] = "水柳暮玥",
	["&shuiliumuyue_benzhaimonv"] = "水柳暮玥",
	["#shuiliumuyue_benzhaimonv"] = "笨宅魔女",
	["$shuiliumuyue_benzhaimonv"] = "一般",
	["designer:shuiliumuyue_benzhaimonv"] = "水柳暮玥",
	["cv:shuiliumuyue_benzhaimonv"] = "",
	["illustrator:shuiliumuyue_benzhaimonv"] = "",
	["~shuiliumuyue_benzhaimonv"] = "",
}

shuiliumuyue_benzhaimonv:setGender(sgs.General_Sexless)

--------------------------------------------------
--棋圣
--------------------------------------------------

qisheng_card = sgs.CreateSkillCard{
	name = "qisheng",
	target_fixed = true,
	will_throw = false,
	on_use = function(self, room, source, targets)
		room:throwCard(self, source)
		if source:isAlive() then
			local count = self:subcardsLength()
			room:drawCards(source, count)
			room:addPlayerMark(source, "&qisheng!", count)
			if source:getMark("&qisheng!") >= 10 then
				room:sendCompulsoryTriggerLog(source, self:objectName()) --显示锁定技发动
				room:doAnimate(2, "skill=EyeAnim:shuiliumuyue.png", "")
				room:broadcastSkillInvoke("audio_effect", 16)	--播放配音
				room:getThread():delay(2500)
				room:setPlayerMark(source, "&qisheng!", 0)
				room:handleAcquireDetachSkills(source, "-qisheng|mogong_mfj|jiaojian_mfj")
			end
		end
	end
}
qisheng = sgs.CreateViewAsSkill{
	name = "qisheng",
	n = 999,
	view_filter = function(self, selected, to_select)
		return true
	end,
	view_as = function(self, cards)
		if #cards > 0 then
			local new_card = qisheng_card:clone()
			for _,card in pairs(cards) do
				new_card:addSubcard(card)
			end
			new_card:setSkillName(self:objectName())
			return new_card
		end
	end,
	enabled_at_play = function(self, player)
		return not player:hasUsed("#qisheng")
	end
}

shuiliumuyue_benzhaimonv:addSkill(qisheng)
shuiliumuyue_benzhaimonv:addRelateSkill("mogong_mfj")
shuiliumuyue_benzhaimonv:addRelateSkill("jiaojian_mfj")

sgs.LoadTranslationTable{
	["qisheng"] = "棋圣",
	[":qisheng"] = "出牌阶段限一次，你可以弃置任意张牌，摸等量张牌。若你以此法获得过至少10张牌，你失去“棋圣”，获得“魔法剑·魔攻”和“魔法剑·交剑”。",
	["$qisheng"] = "",
}

--------------------------------------------------
--魔法剑·魔攻
--------------------------------------------------

mogong_mfj = sgs.CreateTriggerSkill{
	name = "mogong_mfj",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.TargetSpecified},
	on_trigger = function(self, event, player, data, room)
		local room = player:getRoom()
		if event == sgs.TargetSpecified then
			local use = data:toCardUse()
			if use.from and player:objectName() == use.from:objectName() and use.card and use.card:isKindOf("Slash") then
				if player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:")) and not SkillNullify(player, self:objectName()) then
					local judge = sgs.JudgeStruct()
					judge.pattern = ".|heart"
					judge.who = player
					judge.reason = self:objectName()
					room:judge(judge)
					if judge:isGood() then
						if room:getCardPlace(judge.card:getId()) == sgs.Player_DiscardPile then
							player:obtainCard(judge.card, true)
						end
						
						local jink_table = sgs.QList2Table(player:getTag("Jink_" .. use.card:toString()):toIntList())
						local index = 1
						for _, p in sgs.qlist(use.to) do
							--room:doAnimate(1, player:objectName(), p:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
							room:broadcastSkillInvoke(self:objectName())	--播放配音
							jink_table[index] = 0
							index = index + 1
						end
						local jink_data = sgs.QVariant()
						jink_data:setValue(Table2IntList(jink_table))
						player:setTag("Jink_" .. use.card:toString(), jink_data)
					end
				end
			end
		end
	end 
}

vup_anjiang:addSkill(mogong_mfj)

sgs.LoadTranslationTable{
	["mogong_mfj"] = "魔法剑·魔攻",
	[":mogong_mfj"] = "<font color='#008B8B'><b>衍生技，</b></font>你使用【杀】指定目标后，你可以<font color='#A9A9A9'>发动此技能</font>，进行一次判定，若结果为红桃，你获得判定牌，此【杀】不能被【闪】响应。",
	["$mogong_mfj"] = "",
	["mogong_mfj:choice"] = "你可以发动“魔法剑·魔攻”，判定红桃则此【杀】不可闪避",
}

--------------------------------------------------
--魔法剑·交剑
--------------------------------------------------

jiaojian_mfj = sgs.CreateTriggerSkill{
	name = "jiaojian_mfj",
	frequency = sgs.Skill_NotFrequent,
	view_as_skill = zhuge_vs,
	events = {sgs.CardAsked},
	on_trigger = function(self, event, player, data, room)
		local pattern = data:toStringList()[1]
		if pattern == "jink" then
			if player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:")) and not SkillNullify(player, self:objectName()) then
				local judge = sgs.JudgeStruct()
				judge.pattern = ".|spade"
				judge.good = true
				judge.reason = self:objectName()
				judge.who = player
				room:judge(judge)
				if judge:isGood() then
					if room:getCardPlace(judge.card:getId()) == sgs.Player_DiscardPile then
						player:obtainCard(judge.card, true)
					end
					
					local jink = sgs.Sanguosha:cloneCard("jink", sgs.Card_NoSuit, 0)
					jink:setSkillName("_"..self:objectName())
					room:provide(jink)
					return true
				end
			end
		end
	end
}

vup_anjiang:addSkill(jiaojian_mfj)

sgs.LoadTranslationTable{
	["jiaojian_mfj"] = "魔法剑·交剑",
	[":jiaojian_mfj"] = "<font color='#008B8B'><b>衍生技，</b></font>你需要使用或打出【闪】时，你可以<font color='#A9A9A9'>发动此技能</font>，进行一次判定，若结果为黑桃，你获得判定牌，视为使用或打出一张【闪】。",
	["$jiaojian_mfj"] = "",
	["jiaojian_mfj:choice"] = "你可以发动“魔法剑·交剑”，判定黑桃则视为出【闪】",
}

--------------------------------------------------
--化灵青团 艾露芙
--设计者：
--------------------------------------------------

ailufu_hualingqingtuan = sgs.General(extension,"ailufu_hualingqingtuan","individual","3",false)

sgs.LoadTranslationTable{
	["ailufu_hualingqingtuan"] = "艾露芙",
	["&ailufu_hualingqingtuan"] = "艾露芙",
	["#ailufu_hualingqingtuan"] = "化灵青团",
	["$ailufu_hualingqingtuan"] = "一般",
	["designer:ailufu_hualingqingtuan"] = "Tangentle",
	["cv:ailufu_hualingqingtuan"] = "",
	["illustrator:ailufu_hualingqingtuan"] = "",
	["~ailufu_hualingqingtuan"] = "",
}

--------------------------------------------------
--碧影
--------------------------------------------------

biyingbuff = sgs.CreateTargetModSkill{
	name = "#biyingbuff",
	pattern = ".",
	distance_limit_func = function(self, from, card, to)
		local n = 0
		if card and card:isKindOf("Slash") and card:getSkillName() == "biying" then
			n = n + 1000
		end
		return n
	end
}
biyingvs = sgs.CreateViewAsSkill{
	name = "biying",
	n = 1,
	--response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		if not to_select:isEquipped() then
			if to_select:getSuit() == sgs.Card_Club and sgs.Self:getMark("biying_used_thunder_slash") == 0 and sgs.Slash_IsAvailable(sgs.Self) then
				return true
			elseif to_select:getSuit() == sgs.Card_Spade and sgs.Self:getMark("biying_used_savage_assault") == 0 then
				local new_card = sgs.Sanguosha:cloneCard("savage_assault", to_select:getSuit(), to_select:getNumber())
				new_card:addSubcard(to_select)
				new_card:setSkillName(self:objectName())
				if new_card:isAvailable(sgs.Self) then
					new_card:deleteLater()
					return true
				end
				new_card:deleteLater()
			elseif to_select:getSuit() == sgs.Card_Diamond and sgs.Self:getMark("biying_used_iron_chain") == 0 then
				local new_card = sgs.Sanguosha:cloneCard("iron_chain", to_select:getSuit(), to_select:getNumber())
				new_card:addSubcard(to_select)
				new_card:setSkillName(self:objectName())
				if new_card:isAvailable(sgs.Self) then
					new_card:deleteLater()
					return true
				end
				new_card:deleteLater()
			end
		end
		return false
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local objname = ""
			if cards[1]:getSuit() == sgs.Card_Club then
				objname = "thunder_slash"
			elseif cards[1]:getSuit() == sgs.Card_Spade then
				objname = "savage_assault"
			elseif cards[1]:getSuit() == sgs.Card_Diamond then
				objname = "iron_chain"
			end
			if objname ~= "" then
				local new_card = sgs.Sanguosha:cloneCard(objname, cards[1]:getSuit(), cards[1]:getNumber())
				new_card:addSubcard(cards[1])
				new_card:setSkillName(self:objectName())
				new_card:setCanRecast(false)	--禁止重铸
				return new_card
			end
		end
	end,
	enabled_at_play = function(self, player)
		if player:getMark("biying_used_thunder_slash") + player:getMark("biying_used_savage_assault") + player:getMark("biying_used_iron_chain") > 0 then	--各限一次变共限一次
			return false
		end
		local can_use = false
		for _,cd in sgs.qlist(player:getHandcards()) do
			if cd:getSuit() == sgs.Card_Club and player:getMark("biying_used_thunder_slash") == 0 and sgs.Slash_IsAvailable(player) then
				can_use = true
				break
			elseif cd:getSuit() == sgs.Card_Spade and player:getMark("biying_used_savage_assault") == 0 then
				local new_card = sgs.Sanguosha:cloneCard("savage_assault", cd:getSuit(), cd:getNumber())
				new_card:addSubcard(cd)
				new_card:setSkillName(self:objectName())
				if new_card:isAvailable(player) then
					new_card:deleteLater()
					can_use = true
					break
				end
				new_card:deleteLater()
			elseif cd:getSuit() == sgs.Card_Diamond and player:getMark("biying_used_iron_chain") == 0 then
				local new_card = sgs.Sanguosha:cloneCard("iron_chain", cd:getSuit(), cd:getNumber())
				new_card:addSubcard(cd)
				new_card:setSkillName(self:objectName())
				if new_card:isAvailable(player) then
					new_card:deleteLater()
					can_use = true
					break
				end
				new_card:deleteLater()
			end
		end
		return can_use
	end
}
biying = sgs.CreateTriggerSkill{
	name = "biying",
	view_as_skill = biyingvs,
	events = {sgs.PreCardUsed, sgs.TargetSpecifying},
	frequency = sgs.Skill_NotFrequent,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PreCardUsed then
			if data:toCardUse().card:getSkillName() == "biying" then 
				room:addPlayerMark(player, "biying_used_"..data:toCardUse().card:objectName(), 1)
			end
		elseif event == sgs.TargetSpecifying then
			local use = data:toCardUse()
			if use.card and use.card:getSkillName() == "biying" and not use.to:contains(player) and not room:isProhibited(use.from, player, use.card) then
				use.to:append(player)
				room:sortByActionOrder(use.to)
				data:setValue(use)
				
				local log = sgs.LogMessage()	--借用神伴
				log.type = "#shenban_log"
				log.arg = self:objectName()
				log.card_str = use.card:toString()
				log.from = use.from
				log.to = use.to
				room:sendLog(log)	--发送信息框消息
				return false
			end
		--elseif event == sgs.BeforeCardsMove then	--重铸记次数
		--	local move = data:toMoveOneTime()
		--	if player and player:isAlive() and move.from and move.from:isAlive() and player:objectName() == move.from:objectName() and move.reason.m_reason == sgs.CardMoveReason_S_REASON_RECAST and move.reason.m_skillName == "biying" then
		--		room:addPlayerMark(player, "biying_used_iron_chain", 1)
		--	end
		end
	end
}
table.insert(play_end_clear_mark, "biying_used_thunder_slash")	--出牌结束清除标记
table.insert(play_end_clear_mark, "biying_used_savage_assault")	--出牌结束清除标记
table.insert(play_end_clear_mark, "biying_used_iron_chain")	--出牌结束清除标记

ailufu_hualingqingtuan:addSkill(biying)
ailufu_hualingqingtuan:addSkill(biyingbuff)

sgs.LoadTranslationTable{
	["biying"] = "碧影",
	["#biyingbuff"] = "碧影",
	[":biying"] = "出牌阶段限一次，你可以将一张手牌按以下规则"..WordState("通常使用", word_normaluse_str).."，你也成为此牌的目标：方块牌当【铁索连环】；黑桃牌当【南蛮入侵】；梅花牌当雷【杀】（无距离限制）。",
	["$biying"] = "",
	["^biying"] = "你可以将一张牌按以下规则使用：<br/><font color='red'>♦</font>牌 当 铁索连环<br/><font color='black'>♠</font>牌 当 南蛮入侵<br/><font color='black'>♣</font>牌 当 雷杀（无距离限制）<br/><br/>操作提示：<br/>选择一张手牌→选择目标→确定",
}

--------------------------------------------------
--青灵
--------------------------------------------------

qingling = sgs.CreateTriggerSkill{
	name = "qingling",
	events = {sgs.Damaged},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.Damaged then
			local damage = data:toDamage()
			if damage.card and not damage.card:isKindOf("SkillCard") then
				room:sendCompulsoryTriggerLog(player, "qingling") --显示锁定技发动
				if player:getMark("&qingling_record_"..getTypeString(damage.card)) > 0 then
					local recover = sgs.RecoverStruct()
					recover.who = player
					recover.recover = 1
					room:recover(player, recover)
				else
					room:setPlayerMark(player, "&qingling_record_basic", 0)
					room:setPlayerMark(player, "&qingling_record_trick", 0)
					room:setPlayerMark(player, "&qingling_record_equip", 0)
					room:setPlayerMark(player, "&qingling_record_"..getTypeString(damage.card), 1)
				end
			end
		end
	end,
}

ailufu_hualingqingtuan:addSkill(qingling)

sgs.LoadTranslationTable{
	["qingling"] = "青灵",
	[":qingling"] = "锁定技，你受到<font color='#9400D3'>牌</font>造成的伤害后，若你已记录<font color='#9400D3'>此牌</font>的类别，则你回复1点体力，否则你清除记录，记录<font color='#9400D3'>此牌</font>的类别。",
	["$qingling"] = "",
	["#qingling"] = "%from 因 %arg 的效果，防止了来自 %to 的 %arg2 点伤害",
	["#qingling_no_source"] = "%from 因 %arg 的效果，防止了无来源的 %arg2 点伤害",
	["qingling_record_basic"] = "青灵基本",
	["qingling_record_trick"] = "青灵锦囊",
	["qingling_record_equip"] = "青灵装备",
}

--------------------------------------------------
--魔法少女 真理酱
--设计者：
--------------------------------------------------

zhenlijiang_mofashaonv = sgs.General(extension,"zhenlijiang_mofashaonv","individual","3",false)

sgs.LoadTranslationTable{
	["zhenlijiang_mofashaonv"] = "真理酱",
	["&zhenlijiang_mofashaonv"] = "真理酱",
	["#zhenlijiang_mofashaonv"] = "魔法少女",
	["$zhenlijiang_mofashaonv"] = "萌新",
	["designer:zhenlijiang_mofashaonv"] = "NSX",
	["cv:zhenlijiang_mofashaonv"] = "",
	["illustrator:zhenlijiang_mofashaonv"] = "",
	["~zhenlijiang_mofashaonv"] = "",
}

--------------------------------------------------
--竭智
--------------------------------------------------

jiezhi_zl = sgs.CreateTriggerSkill{
	name = "jiezhi_zl",
	events = {sgs.CardUsed, sgs.CardResponded},
	frequency = sgs.Skill_Frequent,
	on_trigger = function(self, event, player, data, room)
		local card
		if event == sgs.CardUsed then
			card = data:toCardUse().card
		elseif event == sgs.CardResponded then
			if data:toCardResponse().m_isUse then
				card = data:toCardResponse().m_card
			end
		end
		if not card or card:isKindOf("EquipCard") or card:isKindOf("SkillCard") then return false end
		local objname = getCardObjName(card)
		if player:getMark("&jiezhi_zl->"..objname) == 0 and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:" .. objname)) and not SkillNullify(player, self:objectName()) then
			--room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
			--local log = sgs.LogMessage()
			--log.type = "#jiezhi_zl_log"
			--log.arg = self:objectName()
			--log.card_str = card:toString()
			--log.from = player
			--room:sendLog(log)	--发送信息框消息
			room:setPlayerMark(player, "&jiezhi_zl->"..objname, 1)
			player:drawCards(1, self:objectName())
			--room:setPlayerMark(player, "jiezhi_zl_limit+use+"..getCardClassName(card).."|.|.|hand", 1)
			--room:setPlayerCardLimitation(player, "use", getCardClassName(card).."|.|.|hand", false)
		end
	end
}
table.insert(turn_end_limit_card_prefix, "jiezhi_zl_limit")	--封印直到回合结束

zhenlijiang_mofashaonv:addSkill(jiezhi_zl)

sgs.LoadTranslationTable{
	["jiezhi_zl"] = "竭智",
	[":jiezhi_zl"] = "你使用非装备牌时，若未记录此牌牌名，你可以<font color='#A9A9A9'>发动此技能</font>，记录之，摸一张牌。",
	["$jiezhi_zl"] = "",
	["jiezhi_zl:choice"] = "你可以发动“竭智”，记录 %src，摸一张牌",
	["#jiezhi_zl_log"] = "由于 %arg 的效果，%from 本回合不能使用与 %card 牌名相同的手牌",
}

--------------------------------------------------
--奈伊
--设计者：
--------------------------------------------------

naiyi_chongqunzhixin = sgs.General(extension,"naiyi_chongqunzhixin","individual","2",false)

sgs.LoadTranslationTable{
	["naiyi_chongqunzhixin"] = "奈伊",
	["&naiyi_chongqunzhixin"] = "奈伊",
	["#naiyi_chongqunzhixin"] = "虫群之心",
	["$naiyi_chongqunzhixin"] = "进阶",
	["designer:naiyi_chongqunzhixin"] = "月音风源",
	["cv:naiyi_chongqunzhixin"] = "",
	["illustrator:naiyi_chongqunzhixin"] = "",
	["~naiyi_chongqunzhixin"] = "",
}

naiyi_chongqunzhixin:setGender(sgs.General_Sexless)

--------------------------------------------------
--采集
--------------------------------------------------

caiji = sgs.CreateTriggerSkill{
	name = "caiji",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.EventPhaseStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.EventPhaseStart and player:getPhase() == sgs.Player_Finish then
			if not player:hasFlag("damage_caused_ruqin") and player:getHandcardNum() < 4 and player:getHandcardNum() == player:getHp() and player:askForSkillInvoke(self:objectName(), sgs.QVariant("choice:"..math.max(0, 4-player:getHandcardNum()))) and not SkillNullify(player, self:objectName()) then
				player:drawCards(math.max(0, 4-player:getHandcardNum()), self:objectName())
				local return_ids = sgs.IntList()
				for _,cd in sgs.qlist(player:getHandcards()) do
					if cd:isDamageCard() then
						return_ids:append(cd:getId())
					end
				end
				if not return_ids:isEmpty() then
					room:getThread():delay(300)
					room:shuffleIntoDrawPile(player, return_ids, self:objectName(), true)
				end
			end
		end
		return false
	end
}

naiyi_chongqunzhixin:addSkill(caiji)

sgs.LoadTranslationTable{
	["caiji"] = "采集",
	[":caiji"] = "结束阶段，若你的手牌数=体力值且本回合你未造成过伤害，你可以<font color='#A9A9A9'>发动此技能</font>，将手牌数补至4张，然后将手牌中的伤害类牌返回牌堆。",
	["$caiji"] = "",
	["caiji:choice"] = "你可以发动“采集”，摸 %src 张牌，然后将手牌中的伤害类牌返回牌堆",
}

--------------------------------------------------
--进化
--------------------------------------------------

jinhua = sgs.CreateTriggerSkill{
	name = "jinhua",
	events = {sgs.TargetSpecified, sgs.CardsMoveOneTime},
	frequency = sgs.Skill_Compulsory,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.TargetSpecified and player:getMark("jinhua_1") == 0 then
			local use = data:toCardUse()
			if use.card and use.card:isKindOf("Peach") and use.to and not use.to:isEmpty() then
				local can_trigger = false
				for _, target in sgs.qlist(use.to) do
					if target:getHp() <= 0 then
						can_trigger = true
						break
					end
				end
				if can_trigger then
					room:sendCompulsoryTriggerLog(player, self:objectName())	--显示锁定技发动
					room:setPlayerMark(player, "jinhua_1", 1)
					room:gainMaxHp(player, 1)
					local recover = sgs.RecoverStruct()
					recover.who = player
					recover.recover = 1
					room:recover(player, recover)
				end
			end
		elseif event == sgs.CardsMoveOneTime and not room:getTag("FirstRound"):toBool() and (player:getMark("jinhua_2") == 0 or player:getMark("jinhua_3") == 0) then
			local move = data:toMoveOneTime()
			if player:getMark("jinhua_2") == 0 and player:getPhase() == sgs.Player_NotActive and move.to and move.to:objectName() == player:objectName() and move.to_place == sgs.Player_PlaceHand and move.reason.m_skillName ~= "HLyingyuan" then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				room:setPlayerMark(player, "jinhua_2", 1)
				room:gainMaxHp(player, 1)
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
			end
			if player:getMark("jinhua_3") == 0 and player:getEquips():length() >= 3 then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				room:setPlayerMark(player, "jinhua_3", 1)
				room:gainMaxHp(player, 1)
				local recover = sgs.RecoverStruct()
				recover.who = player
				recover.recover = 1
				room:recover(player, recover)
			end
		end
	end
}

naiyi_chongqunzhixin:addSkill(jinhua)

sgs.LoadTranslationTable{
	["jinhua"] = "进化",
	[":jinhua"] = "锁定技，每当你首次完成以下一项时，你增加1点体力上限，回复1点体力：<br>①对一名体力值≤0的角色使用【桃】<br>②于回合外不因“应援”获得手牌<br>③装备区内的牌数≥3。",
	["$jinhua"] = "",
}

--------------------------------------------------
--孵化
--------------------------------------------------

fuhua = sgs.CreateTriggerSkill{
	name = "fuhua",
	frequency = sgs.Skill_Compulsory,
	events = {sgs.TargetConfirmed},
	on_trigger = function(self, event, player, data, room)
		local use = data:toCardUse()
		if use.card and not use.card:isKindOf("SkillCard") and use.card:isKindOf("TrickCard") and use.to and use.to:contains(player) and use.to:length() > 1 then
			local can_trigger = true
			--for _, p in sgs.qlist(room:getOtherPlayers(player)) do
			--	if p:getHp() < player:getHp() then
			--		can_trigger = false
			--		break
			--	end
			--end
			if can_trigger then
				room:sendCompulsoryTriggerLog(player, self:objectName()) --显示锁定技发动
				room:loseMaxHp(player)
				if not player:isAlive() then
					return false
				end
				
				local choice = room:askForChoice(player, self:objectName().."+fuhua_choice_log", "fuhua_choice1+fuhua_choice2+fuhua_choice3")
				if choice and choice ~= "" then
					ChoiceLog(player, choice)
					local pick_basic, pick_trick, pick_equip = false, false, false
					if choice == "fuhua_choice1" then
						pick_basic = true
						pick_trick = true
					elseif choice == "fuhua_choice2" then
						pick_basic = true
						pick_equip = true
					elseif choice == "fuhua_choice3" then
						pick_trick = true
						pick_equip = true
					end
					local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
					local basics = sgs.CardList()
					local tricks = sgs.CardList()
					local equips = sgs.CardList()
					for _,id in sgs.qlist(room:getDrawPile()) do
						local card = sgs.Sanguosha:getCard(id)
						if card:isKindOf("BasicCard") then
							basics:append(card)
						end
						if card:isKindOf("TrickCard") then
							tricks:append(card)
						end
						if card:isKindOf("EquipCard") then
							equips:append(card)
						end
					end
					if pick_basic and not basics:isEmpty() then
						local card = basics:at(math.random(0, basics:length() - 1))
						dummy:addSubcard(card)
					end
					if pick_trick and not tricks:isEmpty() then
						local card = tricks:at(math.random(0, tricks:length() - 1))
						dummy:addSubcard(card)
					end
					if pick_equip and not equips:isEmpty() then
						local card = equips:at(math.random(0, equips:length() - 1))
						dummy:addSubcard(card)
					end
					dummy:shuffleSubcards()	--新增函数，打乱子卡顺序
					if dummy:subcardsLength() > 0 then
						player:obtainCard(dummy, true)
					end
					dummy:deleteLater()
				end
			end
		end
		return false
	end
}

--naiyi_chongqunzhixin:addSkill(fuhua)

sgs.LoadTranslationTable{
	["fuhua"] = "孵化",
	[":fuhua"] = "锁定技，你成为锦囊牌的目标后，若此牌目标数＞1，你失去1点体力上限，声明两个类别，从牌堆随机获得这些类别的牌各一张。",
	["$fuhua"] = "",
	["fuhua_choice_log"] = "请选择要获得牌的类别：",
	["fuhua_choice1"] = "基本牌、锦囊牌",
	["fuhua_choice2"] = "基本牌、装备牌",
	["fuhua_choice3"] = "锦囊牌、装备牌",
}

--------------------------------------------------
--缇思
--设计者：
--------------------------------------------------

tisi_sishenshejishi = sgs.General(extension,"tisi_sishenshejishi","individual","3",false)

sgs.LoadTranslationTable{
	["tisi_sishenshejishi"] = "缇思",
	["&tisi_sishenshejishi"] = "缇思",
	["#tisi_sishenshejishi"] = "死神设计师",
	["$tisi_sishenshejishi"] = "一般",
	["designer:tisi_sishenshejishi"] = "Tangentle",
	["cv:tisi_sishenshejishi"] = "",
	["illustrator:tisi_sishenshejishi"] = "",
	["~tisi_sishenshejishi"] = "",
}

--------------------------------------------------
--辑魂
--------------------------------------------------

jihun = sgs.CreateTriggerSkill{
	name = "jihun",
	frequency = sgs.Skill_Frequent,
	events = {sgs.Dying, sgs.GameStart},
	on_trigger = function(self, event, player, data, room)
		if event == sgs.GameStart then
			if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
				local card_id = room:drawCard()
				player:addToPile("linghun_pile", card_id)
			end
		elseif event == sgs.Dying then
			local dying = data:toDying()
			if dying.damage and dying.damage.card then
				local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
				for _,id in sgs.qlist(dying.damage.card:getSubcards()) do
					if room:getCardPlace(id) == sgs.Player_PlaceTable or room:getCardPlace(id) == sgs.Player_DiscardPile then
						dummy:addSubcard(id)
					end
				end
				if dummy:subcardsLength() > 0 then
					if player:askForSkillInvoke(self:objectName(), data) and not SkillNullify(player, self:objectName()) then
						player:addToPile("linghun_pile", dummy)
					end
				end
				dummy:deleteLater()
			end
		end
		return false
	end,
}

tisi_sishenshejishi:addSkill(jihun)

sgs.LoadTranslationTable{
	["jihun"] = "辑魂",
	[":jihun"] = "<font color='#9400D3'>游戏开始时/一名角色进入濒危状态时</font>，你可以<font color='#A9A9A9'>发动此技能</font>，将 <font color='#9400D3'>牌堆顶的牌/伤害来源牌</font> 作为<font color='#804040'>“灵魂”</font>除外。",
	["$jihun"] = "",
	["linghun_pile"] = "灵魂",
}

--------------------------------------------------
--迷思
--------------------------------------------------

misi_card = sgs.CreateSkillCard{
	name = "misi",
	target_fixed = true,
	will_throw = false,
	handling_method = sgs.Card_MethodNone,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		if not source:isKongcheng() and not source:getPile("linghun_pile"):isEmpty() then
			source:exchangeFreelyFromPrivatePile(self:objectName(), "linghun_pile", 1000, false, true)	--第五个参数表示是否公开，请与此除外牌堆是否公开对应
		end
	end
}
misi = sgs.CreateZeroCardViewAsSkill{
	name = "misi",
	view_as = function(self, cards)
		return misi_card:clone()
	end,
	enabled_at_play = function(self, player)
		return player:usedTimes("#misi") < 1 and not player:isKongcheng() and not player:getPile("linghun_pile"):isEmpty()
	end
}

tisi_sishenshejishi:addSkill(misi)

sgs.LoadTranslationTable{
	["misi"] = "迷思",
	[":misi"] = "出牌阶段限一次，你可以用任意张<font color='#804040'>“灵魂”</font>替换等量手牌。",
	["$misi"] = "",
	["^AG_misi"] = "<b>迷思</b><br/>双击以选择任意张要与手牌交换的牌，不选择请点击“确定”",
}

--------------------------------------------------
--兰烬
--------------------------------------------------

lanjin_card = sgs.CreateSkillCard{
	name = "lanjin",
	target_fixed = true,
	will_throw = false,
	filter = function(self, targets, to_select)
		return false
	end,
	on_use = function(self, room, source, targets)
		if not SkillNullify(source, self:objectName()) then
			room:addPlayerMark(source, "&lanjin!", 1)
			local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
			dummy:addSubcards(self:getSubcards())
			if dummy:subcardsLength() > 0 then
				room:throwCard(dummy, sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_DISCARD, source:objectName(), self:objectName(), nil), source)
			end
			dummy:deleteLater()
			
			source:setFlags("lanjin_triggered")
		end
	end
}
lanjin_vs = sgs.CreateViewAsSkill{
	name = "lanjin",
	n = 999,
	expand_pile = "linghun_pile",
	view_filter = function(self, selected, to_select)
		if #selected < sgs.Self:getMark("&lanjin!") + 1 then
			return not inHand(sgs.Self, to_select) and not to_select:isEquipped() and inPile(sgs.Self, to_select, "linghun_pile")
		end
	end,
	view_as = function(self, cards)
		if #cards == sgs.Self:getMark("&lanjin!") + 1 then
			local new_card = lanjin_card:clone()
			for _,card in pairs(cards) do
				new_card:addSubcard(card)
			end
			new_card:setSkillName(self:objectName())
			return new_card
		end
	end,
	enabled_at_play = function(self, player)
		return false
	end,
	enabled_at_response = function(self, player, pattern)
		return pattern == "@@lanjin"
	end
}
lanjin = sgs.CreateTriggerSkill{
	name = "lanjin",
	frequency = sgs.Skill_NotFrequent,
	events = {sgs.DyingToDeath},
	view_as_skill = lanjin_vs,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.DyingToDeath and player:objectName() == data:toDying().who:objectName() then
			for _,myself in sgs.qlist(room:findPlayersBySkillName(self:objectName())) do
				local X = myself:getMark("&lanjin!") + 1
				if myself:getPile("linghun_pile"):length() >= X and myself:canEffect(player, self:objectName()) then
					player:setFlags("lanjin_target_AI")	--AI用
					if room:askForUseCard(myself, "@@lanjin", "@lanjin:"..X..":"..player:objectName()) and myself:hasFlag("lanjin_triggered") then
						player:setFlags("-lanjin_target_AI")	--AI用
						room:doAnimate(1, myself:objectName(), player:objectName())	--doAnimate 1:产生一条从前者到后者的指示线
						local log = sgs.LogMessage()
						log.type = "#lanjin_log"
						log.from = myself
						log.to:append(player)
						room:sendLog(log)
						myself:setFlags("-lanjin_triggered")
						room:doPicAnimate(player:objectName(), "skill/tisi_save")	--doPicAnimate:令指定玩家短暂显示一张图片
						return true
					end
					player:setFlags("-lanjin_target_AI")	--AI用
				end
			end
		end
		return false
	end,
	can_trigger = function(self, target)
		return target
	end
}

tisi_sishenshejishi:addSkill(lanjin)

sgs.LoadTranslationTable{
	["lanjin"] = "兰烬",
	[":lanjin"] = "一名角色因体力值减少而离场时，你可以<font color='#A9A9A9'>发动此技能</font>，弃置X张<font color='#804040'>“灵魂”</font>，防止之。（X为你发动此技能的次数）",
	["$lanjin"] = "",
	["@lanjin"] = "你可以发动“兰烬”，弃置 %src 张“灵魂”，令 %dest 不离场",
	["~lanjin"] = "选择若干张牌→确定",
	["#lanjin_log"] = "%from 防止了 %to 的离场",
}

--------------------------------------------------
--糖霜尼莫
--设计者：--
--------------------------------------------------

nimo_yuanqixiequan = sgs.General(extension,"nimo_yuanqixiequan","individual","4",false)

sgs.LoadTranslationTable{
	["nimo_yuanqixiequan"] = "糖霜尼莫",
	["&nimo_yuanqixiequan"] = "尼莫",
	["#nimo_yuanqixiequan"] = "元气系恶犬",
	["$nimo_yuanqixiequan"] = "简单",
	["designer:nimo_yuanqixiequan"] = "SunFlower、萌龙少主",
	["cv:nimo_yuanqixiequan"] = "",
	["illustrator:nimo_yuanqixiequan"] = "",
	["~nimo_yuanqixiequan"] = "",
}

--------------------------------------------------
--夺魄
--------------------------------------------------

duopo_buff = sgs.CreateTargetModSkill{
	name = "#duopo_buff",
	pattern = "Duel",
	extra_target_func = function(self, from, card)
		if from:hasSkill("duopo") and card:getSkillName() == "duopo" and from:getHandcardNum() <= 1 then
			return 1
		end
	end
}
duopo_vs = sgs.CreateViewAsSkill{
	name = "duopo",
	n = 1,
	response_or_use = true,	--是使用或打出（可用木马牌）
	view_filter = function(self, selected, to_select)
		return to_select:getSuit() == sgs.Card_Diamond
	end,
	view_as = function(self, cards)
		if #cards == 1 then
			local first = cards[1]
			local ncard = sgs.Sanguosha:cloneCard("duel", first:getSuit(), first:getNumber())
			ncard:addSubcard(first)
			ncard:setSkillName(self:objectName())
			return ncard
		end
	end,
	enabled_at_play = function(self, player)
		return player:getMark("duopo_used") == 0
	end
}
duopo = sgs.CreateTriggerSkill{
	name = "duopo",
	view_as_skill = duopo_vs,
	events = {sgs.PreCardUsed, sgs.DamageCaused, sgs.DamageInflicted},
	frequency = sgs.Skill_NotFrequent,
	global = true,
	on_trigger = function(self, event, player, data, room)
		if event == sgs.PreCardUsed and player and player:isAlive() and player:hasSkill(self:objectName()) then
			local card = data:toCardUse().card
			if card and card:getSkillName() == "duopo" then 
				room:setPlayerMark(player, "duopo_used", 1)
				if player:getHp() <= 1 then
					room:setCardFlag(card, "duopo_damage")
				end
				if player:getEquips():length() <= 1 then
					room:setCardFlag(card, "duopo_safe_to_"..player:objectName())
				end
			end
		elseif event == sgs.DamageCaused then
			local damage = data:toDamage()
			if damage.card and damage.card:getSkillName() == "duopo" and damage.card:hasFlag("duopo_damage") and not damage.chain then
				local log = sgs.LogMessage()
				log.type = "#duopo_damage_inc"
				log.to:append(damage.to)
				log.arg = self:objectName()
				log.arg2 = damage.damage + 1
				room:sendLog(log)
				
				damage.damage = damage.damage + 1
				data:setValue(damage)
			end
		elseif event == sgs.DamageInflicted then
			local damage = data:toDamage()
			if damage.card and damage.card:getSkillName() == "duopo" and damage.to and damage.card:hasFlag("duopo_safe_to_"..damage.to:objectName()) then
				local log = sgs.LogMessage()
				log.type = "#duopo_damage_dec"
				log.to:append(damage.to)
				log.arg = self:objectName()
				log.arg2 = damage.damage - 1
				room:sendLog(log)
				
				damage.damage = damage.damage - 1
				if damage.damage <= 0 then
					room:setEmotion(damage.to, "skill_nullify")
					return true
				end
				data:setValue(damage)
			end
		--elseif event == sgs.TargetSpecified then
		--	local use = data:toCardUse()
		--	if use.card and use.card:getSkillName() == "duopo" and use.card:hasFlag("duopo_no_respond") then
		--		local log = sgs.LogMessage()
		--		
		--		local no_respond_list = use.no_respond_list		--不可响应目标列表
		--		for _, target in sgs.qlist(use.to) do
		--			table.insert(no_respond_list, target:objectName())
		--			log.to:append(target)
		--		end
		--		use.no_respond_list = no_respond_list
		--		data:setValue(use)
		--		
		--		log.type = "#duopo_log"
		--		log.from = player
		--		log.card_str = use.card:toString()
		--		log.arg = self:objectName()
		--		room:sendLog(log)
		--	end
		--elseif event == sgs.CardEffected then
		--	local effect = data:toCardEffect()
		--	if effect.card and effect.card:isKindOf("Duel") and effect.card:getSkillName() == "duopo" and effect.card:hasFlag("duopo_duel_2slash") then	
		--		if room:isCanceled(effect) then
        --            effect.to:setFlags("Global_NonSkillNullify")
        --            return true
        --        end
        --        if effect.to:isAlive() then
		--			local second = effect.from
		--			local first = effect.to
        --            room:setEmotion(first, "duel")
		--			room:setEmotion(second, "duel")
		--			
		--			local log = sgs.LogMessage()
		--			log.type = "#duopo_duel_log"
		--			--log.from = effect.from
		--			log.to:append(effect.to)
		--			log.to:append(effect.from)
		--			log.card_str = effect.card:toString()
		--			log.arg = self:objectName()
		--			log.arg2 = "slash"
		--			room:sendLog(log)
		--			
		--			while true do
		--				if not first:isAlive() then
		--					break
		--				end
		--				slash = room:askForCard(first,"slash","@wushuang-slash-1:" .. second:objectName(),data,sgs.Card_MethodResponse, second)
		--				if slash == nil then
		--					break
		--				end
		--				slash = room:askForCard(first, "slash", "@wushuang-slash-2:" .. second:objectName(),data,sgs.Card_MethodResponse,second)
		--				if slash == nil then
		--					break
		--				end
		--				local temp = first
		--				first = second
		--				second = temp
		--			end
		--			local daamgeSource = function()
		--				if second:isAlive() then
		--					return second
		--				else
		--					return nil
		--				end
		--			end
		--			local damage = sgs.DamageStruct(effect.card, daamgeSource(), first)
		--			if second:objectName() ~= effect.from:objectName() then
		--				damage.by_user = false
		--			end
		--			room:damage(damage)
		--		end
		--		room:setTag("SkipGameRule",sgs.QVariant(true))
		--	end
		end
	end
}
table.insert(play_end_clear_mark, "duopo_used")

nimo_yuanqixiequan:addSkill(duopo)
nimo_yuanqixiequan:addSkill(duopo_buff)

sgs.LoadTranslationTable{
	["duopo"] = "夺魄",
	["#duopo_buff"] = "夺魄",
	[":duopo"] = "出牌阶段限一次，你可以将一张方块牌当【决斗】使用，使用前若你：<br/><font color='#9400D3'>体力值≤1</font>，此牌伤害基数＋1；<br/><font color='#9400D3'>手牌数≤1</font>，此牌可指定目标数＋1；<br/><font color='#9400D3'>装备区内的牌数≤1</font>，此牌对你造成的伤害－1。",
	["$duopo"] = "",
	["#duopo_damage_inc"] = "由于“%arg”的效果，%to 受到的伤害增加至 %arg2",
	["#duopo_damage_dec"] = "由于“%arg”的效果，%to 受到的伤害减少至 %arg2",
	["#duopo_log"] = "由于“%arg”的效果，%to 不能响应 %from 使用的 %card",
	["#duopo_duel_log"] = "由于“%arg”的效果，%to 需要打出 <b><font color='yellow'>2</font></b> 张 %arg2 响应 %card",
	["^duopo"] = "你可以将一张<font color='red'>♦</font>牌当 决斗 使用<br/>若你体力值≤1，此牌伤害＋1<br/>若你手牌数≤1，此牌可指定目标数＋1<br/>若你装备数≤1，此牌对你伤害－1<br/><br/>操作提示：<br/>选择一张手牌→选择目标→确定",
}
